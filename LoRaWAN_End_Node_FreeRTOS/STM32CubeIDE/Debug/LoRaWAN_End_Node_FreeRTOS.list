
LoRaWAN_End_Node_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016148  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011b8  08016288  08016288  00017288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017440  08017440  000195d8  2**0
                  CONTENTS
  4 .ARM          00000008  08017440  08017440  00018440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017448  08017448  000195d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08017448  08017448  00018448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08017450  08017450  00018450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000d8  0803e500  0803e500  00019500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000118  20000000  08017458  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 LW_NVM_RAM    00000ef0  20008000  20008000  0001a000  2**2
                  ALLOC
 11 .bss          00004250  20000118  20000118  0001a118  2**2
                  ALLOC
 12 RAM1_region   00000000  20004368  20004368  000195d8  2**0
                  CONTENTS
 13 RAM2_region   00000000  20009000  20009000  000195d8  2**0
                  CONTENTS
 14 ._user_heap_stack 00000a00  20004368  20004368  0001a118  2**0
                  ALLOC
 15 .ARM.attributes 0000002a  00000000  00000000  000195d8  2**0
                  CONTENTS, READONLY
 16 .debug_info   0006cadc  00000000  00000000  00019602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000e006  00000000  00000000  000860de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loclists 000210ac  00000000  00000000  000940e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003978  00000000  00000000  000b5190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00002ebe  00000000  00000000  000b8b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002f578  00000000  00000000  000bb9c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00063f65  00000000  00000000  000eaf3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000ef407  00000000  00000000  0014eea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000043  00000000  00000000  0023e2aa  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000a454  00000000  00000000  0023e2f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 0000008d  00000000  00000000  00248744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000118 	.word	0x20000118
 800015c:	00000000 	.word	0x00000000
 8000160:	08016270 	.word	0x08016270

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000011c 	.word	0x2000011c
 800017c:	08016270 	.word	0x08016270

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_fmul>:
 8000190:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000194:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000198:	bf1e      	ittt	ne
 800019a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800019e:	ea92 0f0c 	teqne	r2, ip
 80001a2:	ea93 0f0c 	teqne	r3, ip
 80001a6:	d06f      	beq.n	8000288 <__aeabi_fmul+0xf8>
 80001a8:	441a      	add	r2, r3
 80001aa:	ea80 0c01 	eor.w	ip, r0, r1
 80001ae:	0240      	lsls	r0, r0, #9
 80001b0:	bf18      	it	ne
 80001b2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80001b6:	d01e      	beq.n	80001f6 <__aeabi_fmul+0x66>
 80001b8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80001bc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001c0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001c4:	fba0 3101 	umull	r3, r1, r0, r1
 80001c8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80001cc:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001d0:	bf3e      	ittt	cc
 80001d2:	0049      	lslcc	r1, r1, #1
 80001d4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001d8:	005b      	lslcc	r3, r3, #1
 80001da:	ea40 0001 	orr.w	r0, r0, r1
 80001de:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001e2:	2afd      	cmp	r2, #253	@ 0xfd
 80001e4:	d81d      	bhi.n	8000222 <__aeabi_fmul+0x92>
 80001e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ee:	bf08      	it	eq
 80001f0:	f020 0001 	biceq.w	r0, r0, #1
 80001f4:	4770      	bx	lr
 80001f6:	f090 0f00 	teq	r0, #0
 80001fa:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001fe:	bf08      	it	eq
 8000200:	0249      	lsleq	r1, r1, #9
 8000202:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000206:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800020a:	3a7f      	subs	r2, #127	@ 0x7f
 800020c:	bfc2      	ittt	gt
 800020e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000212:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000216:	4770      	bxgt	lr
 8000218:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800021c:	f04f 0300 	mov.w	r3, #0
 8000220:	3a01      	subs	r2, #1
 8000222:	dc5d      	bgt.n	80002e0 <__aeabi_fmul+0x150>
 8000224:	f112 0f19 	cmn.w	r2, #25
 8000228:	bfdc      	itt	le
 800022a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800022e:	4770      	bxle	lr
 8000230:	f1c2 0200 	rsb	r2, r2, #0
 8000234:	0041      	lsls	r1, r0, #1
 8000236:	fa21 f102 	lsr.w	r1, r1, r2
 800023a:	f1c2 0220 	rsb	r2, r2, #32
 800023e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000242:	ea5f 0031 	movs.w	r0, r1, rrx
 8000246:	f140 0000 	adc.w	r0, r0, #0
 800024a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800024e:	bf08      	it	eq
 8000250:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000254:	4770      	bx	lr
 8000256:	f092 0f00 	teq	r2, #0
 800025a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800025e:	bf02      	ittt	eq
 8000260:	0040      	lsleq	r0, r0, #1
 8000262:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000266:	3a01      	subeq	r2, #1
 8000268:	d0f9      	beq.n	800025e <__aeabi_fmul+0xce>
 800026a:	ea40 000c 	orr.w	r0, r0, ip
 800026e:	f093 0f00 	teq	r3, #0
 8000272:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000276:	bf02      	ittt	eq
 8000278:	0049      	lsleq	r1, r1, #1
 800027a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800027e:	3b01      	subeq	r3, #1
 8000280:	d0f9      	beq.n	8000276 <__aeabi_fmul+0xe6>
 8000282:	ea41 010c 	orr.w	r1, r1, ip
 8000286:	e78f      	b.n	80001a8 <__aeabi_fmul+0x18>
 8000288:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800028c:	ea92 0f0c 	teq	r2, ip
 8000290:	bf18      	it	ne
 8000292:	ea93 0f0c 	teqne	r3, ip
 8000296:	d00a      	beq.n	80002ae <__aeabi_fmul+0x11e>
 8000298:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800029c:	bf18      	it	ne
 800029e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80002a2:	d1d8      	bne.n	8000256 <__aeabi_fmul+0xc6>
 80002a4:	ea80 0001 	eor.w	r0, r0, r1
 80002a8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002ac:	4770      	bx	lr
 80002ae:	f090 0f00 	teq	r0, #0
 80002b2:	bf17      	itett	ne
 80002b4:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80002b8:	4608      	moveq	r0, r1
 80002ba:	f091 0f00 	teqne	r1, #0
 80002be:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80002c2:	d014      	beq.n	80002ee <__aeabi_fmul+0x15e>
 80002c4:	ea92 0f0c 	teq	r2, ip
 80002c8:	d101      	bne.n	80002ce <__aeabi_fmul+0x13e>
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	d10f      	bne.n	80002ee <__aeabi_fmul+0x15e>
 80002ce:	ea93 0f0c 	teq	r3, ip
 80002d2:	d103      	bne.n	80002dc <__aeabi_fmul+0x14c>
 80002d4:	024b      	lsls	r3, r1, #9
 80002d6:	bf18      	it	ne
 80002d8:	4608      	movne	r0, r1
 80002da:	d108      	bne.n	80002ee <__aeabi_fmul+0x15e>
 80002dc:	ea80 0001 	eor.w	r0, r0, r1
 80002e0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002e4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ec:	4770      	bx	lr
 80002ee:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002f2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002f6:	4770      	bx	lr

080002f8 <__aeabi_drsub>:
 80002f8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002fc:	e002      	b.n	8000304 <__adddf3>
 80002fe:	bf00      	nop

08000300 <__aeabi_dsub>:
 8000300:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000304 <__adddf3>:
 8000304:	b530      	push	{r4, r5, lr}
 8000306:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800030a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800030e:	ea94 0f05 	teq	r4, r5
 8000312:	bf08      	it	eq
 8000314:	ea90 0f02 	teqeq	r0, r2
 8000318:	bf1f      	itttt	ne
 800031a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800031e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000322:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000326:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800032a:	f000 80e2 	beq.w	80004f2 <__adddf3+0x1ee>
 800032e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000332:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000336:	bfb8      	it	lt
 8000338:	426d      	neglt	r5, r5
 800033a:	dd0c      	ble.n	8000356 <__adddf3+0x52>
 800033c:	442c      	add	r4, r5
 800033e:	ea80 0202 	eor.w	r2, r0, r2
 8000342:	ea81 0303 	eor.w	r3, r1, r3
 8000346:	ea82 0000 	eor.w	r0, r2, r0
 800034a:	ea83 0101 	eor.w	r1, r3, r1
 800034e:	ea80 0202 	eor.w	r2, r0, r2
 8000352:	ea81 0303 	eor.w	r3, r1, r3
 8000356:	2d36      	cmp	r5, #54	@ 0x36
 8000358:	bf88      	it	hi
 800035a:	bd30      	pophi	{r4, r5, pc}
 800035c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000360:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000364:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000368:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800036c:	d002      	beq.n	8000374 <__adddf3+0x70>
 800036e:	4240      	negs	r0, r0
 8000370:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000374:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000378:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800037c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000380:	d002      	beq.n	8000388 <__adddf3+0x84>
 8000382:	4252      	negs	r2, r2
 8000384:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000388:	ea94 0f05 	teq	r4, r5
 800038c:	f000 80a7 	beq.w	80004de <__adddf3+0x1da>
 8000390:	f1a4 0401 	sub.w	r4, r4, #1
 8000394:	f1d5 0e20 	rsbs	lr, r5, #32
 8000398:	db0d      	blt.n	80003b6 <__adddf3+0xb2>
 800039a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800039e:	fa22 f205 	lsr.w	r2, r2, r5
 80003a2:	1880      	adds	r0, r0, r2
 80003a4:	f141 0100 	adc.w	r1, r1, #0
 80003a8:	fa03 f20e 	lsl.w	r2, r3, lr
 80003ac:	1880      	adds	r0, r0, r2
 80003ae:	fa43 f305 	asr.w	r3, r3, r5
 80003b2:	4159      	adcs	r1, r3
 80003b4:	e00e      	b.n	80003d4 <__adddf3+0xd0>
 80003b6:	f1a5 0520 	sub.w	r5, r5, #32
 80003ba:	f10e 0e20 	add.w	lr, lr, #32
 80003be:	2a01      	cmp	r2, #1
 80003c0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003c4:	bf28      	it	cs
 80003c6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003ca:	fa43 f305 	asr.w	r3, r3, r5
 80003ce:	18c0      	adds	r0, r0, r3
 80003d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d8:	d507      	bpl.n	80003ea <__adddf3+0xe6>
 80003da:	f04f 0e00 	mov.w	lr, #0
 80003de:	f1dc 0c00 	rsbs	ip, ip, #0
 80003e2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003e6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ea:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003ee:	d31b      	bcc.n	8000428 <__adddf3+0x124>
 80003f0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003f4:	d30c      	bcc.n	8000410 <__adddf3+0x10c>
 80003f6:	0849      	lsrs	r1, r1, #1
 80003f8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000400:	f104 0401 	add.w	r4, r4, #1
 8000404:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000408:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800040c:	f080 809a 	bcs.w	8000544 <__adddf3+0x240>
 8000410:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000414:	bf08      	it	eq
 8000416:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800041a:	f150 0000 	adcs.w	r0, r0, #0
 800041e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000422:	ea41 0105 	orr.w	r1, r1, r5
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800042c:	4140      	adcs	r0, r0
 800042e:	eb41 0101 	adc.w	r1, r1, r1
 8000432:	3c01      	subs	r4, #1
 8000434:	bf28      	it	cs
 8000436:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800043a:	d2e9      	bcs.n	8000410 <__adddf3+0x10c>
 800043c:	f091 0f00 	teq	r1, #0
 8000440:	bf04      	itt	eq
 8000442:	4601      	moveq	r1, r0
 8000444:	2000      	moveq	r0, #0
 8000446:	fab1 f381 	clz	r3, r1
 800044a:	bf08      	it	eq
 800044c:	3320      	addeq	r3, #32
 800044e:	f1a3 030b 	sub.w	r3, r3, #11
 8000452:	f1b3 0220 	subs.w	r2, r3, #32
 8000456:	da0c      	bge.n	8000472 <__adddf3+0x16e>
 8000458:	320c      	adds	r2, #12
 800045a:	dd08      	ble.n	800046e <__adddf3+0x16a>
 800045c:	f102 0c14 	add.w	ip, r2, #20
 8000460:	f1c2 020c 	rsb	r2, r2, #12
 8000464:	fa01 f00c 	lsl.w	r0, r1, ip
 8000468:	fa21 f102 	lsr.w	r1, r1, r2
 800046c:	e00c      	b.n	8000488 <__adddf3+0x184>
 800046e:	f102 0214 	add.w	r2, r2, #20
 8000472:	bfd8      	it	le
 8000474:	f1c2 0c20 	rsble	ip, r2, #32
 8000478:	fa01 f102 	lsl.w	r1, r1, r2
 800047c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000480:	bfdc      	itt	le
 8000482:	ea41 010c 	orrle.w	r1, r1, ip
 8000486:	4090      	lslle	r0, r2
 8000488:	1ae4      	subs	r4, r4, r3
 800048a:	bfa2      	ittt	ge
 800048c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000490:	4329      	orrge	r1, r5
 8000492:	bd30      	popge	{r4, r5, pc}
 8000494:	ea6f 0404 	mvn.w	r4, r4
 8000498:	3c1f      	subs	r4, #31
 800049a:	da1c      	bge.n	80004d6 <__adddf3+0x1d2>
 800049c:	340c      	adds	r4, #12
 800049e:	dc0e      	bgt.n	80004be <__adddf3+0x1ba>
 80004a0:	f104 0414 	add.w	r4, r4, #20
 80004a4:	f1c4 0220 	rsb	r2, r4, #32
 80004a8:	fa20 f004 	lsr.w	r0, r0, r4
 80004ac:	fa01 f302 	lsl.w	r3, r1, r2
 80004b0:	ea40 0003 	orr.w	r0, r0, r3
 80004b4:	fa21 f304 	lsr.w	r3, r1, r4
 80004b8:	ea45 0103 	orr.w	r1, r5, r3
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	f1c4 040c 	rsb	r4, r4, #12
 80004c2:	f1c4 0220 	rsb	r2, r4, #32
 80004c6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ca:	fa01 f304 	lsl.w	r3, r1, r4
 80004ce:	ea40 0003 	orr.w	r0, r0, r3
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	fa21 f004 	lsr.w	r0, r1, r4
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	f094 0f00 	teq	r4, #0
 80004e2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004e6:	bf06      	itte	eq
 80004e8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004ec:	3401      	addeq	r4, #1
 80004ee:	3d01      	subne	r5, #1
 80004f0:	e74e      	b.n	8000390 <__adddf3+0x8c>
 80004f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f6:	bf18      	it	ne
 80004f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004fc:	d029      	beq.n	8000552 <__adddf3+0x24e>
 80004fe:	ea94 0f05 	teq	r4, r5
 8000502:	bf08      	it	eq
 8000504:	ea90 0f02 	teqeq	r0, r2
 8000508:	d005      	beq.n	8000516 <__adddf3+0x212>
 800050a:	ea54 0c00 	orrs.w	ip, r4, r0
 800050e:	bf04      	itt	eq
 8000510:	4619      	moveq	r1, r3
 8000512:	4610      	moveq	r0, r2
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	ea91 0f03 	teq	r1, r3
 800051a:	bf1e      	ittt	ne
 800051c:	2100      	movne	r1, #0
 800051e:	2000      	movne	r0, #0
 8000520:	bd30      	popne	{r4, r5, pc}
 8000522:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000526:	d105      	bne.n	8000534 <__adddf3+0x230>
 8000528:	0040      	lsls	r0, r0, #1
 800052a:	4149      	adcs	r1, r1
 800052c:	bf28      	it	cs
 800052e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000532:	bd30      	pop	{r4, r5, pc}
 8000534:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000538:	bf3c      	itt	cc
 800053a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800053e:	bd30      	popcc	{r4, r5, pc}
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000544:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000548:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800054c:	f04f 0000 	mov.w	r0, #0
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000556:	bf1a      	itte	ne
 8000558:	4619      	movne	r1, r3
 800055a:	4610      	movne	r0, r2
 800055c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000560:	bf1c      	itt	ne
 8000562:	460b      	movne	r3, r1
 8000564:	4602      	movne	r2, r0
 8000566:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800056a:	bf06      	itte	eq
 800056c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000570:	ea91 0f03 	teqeq	r1, r3
 8000574:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	bf00      	nop

0800057c <__aeabi_ui2d>:
 800057c:	f090 0f00 	teq	r0, #0
 8000580:	bf04      	itt	eq
 8000582:	2100      	moveq	r1, #0
 8000584:	4770      	bxeq	lr
 8000586:	b530      	push	{r4, r5, lr}
 8000588:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800058c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000590:	f04f 0500 	mov.w	r5, #0
 8000594:	f04f 0100 	mov.w	r1, #0
 8000598:	e750      	b.n	800043c <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_i2d>:
 800059c:	f090 0f00 	teq	r0, #0
 80005a0:	bf04      	itt	eq
 80005a2:	2100      	moveq	r1, #0
 80005a4:	4770      	bxeq	lr
 80005a6:	b530      	push	{r4, r5, lr}
 80005a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005b0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005b4:	bf48      	it	mi
 80005b6:	4240      	negmi	r0, r0
 80005b8:	f04f 0100 	mov.w	r1, #0
 80005bc:	e73e      	b.n	800043c <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_f2d>:
 80005c0:	0042      	lsls	r2, r0, #1
 80005c2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005c6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ca:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ce:	bf1f      	itttt	ne
 80005d0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005d4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005dc:	4770      	bxne	lr
 80005de:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005e2:	bf08      	it	eq
 80005e4:	4770      	bxeq	lr
 80005e6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ea:	bf04      	itt	eq
 80005ec:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005f0:	4770      	bxeq	lr
 80005f2:	b530      	push	{r4, r5, lr}
 80005f4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000600:	e71c      	b.n	800043c <__adddf3+0x138>
 8000602:	bf00      	nop

08000604 <__aeabi_ul2d>:
 8000604:	ea50 0201 	orrs.w	r2, r0, r1
 8000608:	bf08      	it	eq
 800060a:	4770      	bxeq	lr
 800060c:	b530      	push	{r4, r5, lr}
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	e00a      	b.n	800062a <__aeabi_l2d+0x16>

08000614 <__aeabi_l2d>:
 8000614:	ea50 0201 	orrs.w	r2, r0, r1
 8000618:	bf08      	it	eq
 800061a:	4770      	bxeq	lr
 800061c:	b530      	push	{r4, r5, lr}
 800061e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000622:	d502      	bpl.n	800062a <__aeabi_l2d+0x16>
 8000624:	4240      	negs	r0, r0
 8000626:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800062a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800062e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000632:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000636:	f43f aed8 	beq.w	80003ea <__adddf3+0xe6>
 800063a:	f04f 0203 	mov.w	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000652:	f1c2 0320 	rsb	r3, r2, #32
 8000656:	fa00 fc03 	lsl.w	ip, r0, r3
 800065a:	fa20 f002 	lsr.w	r0, r0, r2
 800065e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000662:	ea40 000e 	orr.w	r0, r0, lr
 8000666:	fa21 f102 	lsr.w	r1, r1, r2
 800066a:	4414      	add	r4, r2
 800066c:	e6bd      	b.n	80003ea <__adddf3+0xe6>
 800066e:	bf00      	nop

08000670 <__gedf2>:
 8000670:	f04f 3cff 	mov.w	ip, #4294967295
 8000674:	e006      	b.n	8000684 <__cmpdf2+0x4>
 8000676:	bf00      	nop

08000678 <__ledf2>:
 8000678:	f04f 0c01 	mov.w	ip, #1
 800067c:	e002      	b.n	8000684 <__cmpdf2+0x4>
 800067e:	bf00      	nop

08000680 <__cmpdf2>:
 8000680:	f04f 0c01 	mov.w	ip, #1
 8000684:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000688:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800068c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000690:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000694:	bf18      	it	ne
 8000696:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800069a:	d01b      	beq.n	80006d4 <__cmpdf2+0x54>
 800069c:	b001      	add	sp, #4
 800069e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006a2:	bf0c      	ite	eq
 80006a4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006a8:	ea91 0f03 	teqne	r1, r3
 80006ac:	bf02      	ittt	eq
 80006ae:	ea90 0f02 	teqeq	r0, r2
 80006b2:	2000      	moveq	r0, #0
 80006b4:	4770      	bxeq	lr
 80006b6:	f110 0f00 	cmn.w	r0, #0
 80006ba:	ea91 0f03 	teq	r1, r3
 80006be:	bf58      	it	pl
 80006c0:	4299      	cmppl	r1, r3
 80006c2:	bf08      	it	eq
 80006c4:	4290      	cmpeq	r0, r2
 80006c6:	bf2c      	ite	cs
 80006c8:	17d8      	asrcs	r0, r3, #31
 80006ca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006ce:	f040 0001 	orr.w	r0, r0, #1
 80006d2:	4770      	bx	lr
 80006d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006dc:	d102      	bne.n	80006e4 <__cmpdf2+0x64>
 80006de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006e2:	d107      	bne.n	80006f4 <__cmpdf2+0x74>
 80006e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006ec:	d1d6      	bne.n	800069c <__cmpdf2+0x1c>
 80006ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006f2:	d0d3      	beq.n	800069c <__cmpdf2+0x1c>
 80006f4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop

080006fc <__aeabi_cdrcmple>:
 80006fc:	4684      	mov	ip, r0
 80006fe:	4610      	mov	r0, r2
 8000700:	4662      	mov	r2, ip
 8000702:	468c      	mov	ip, r1
 8000704:	4619      	mov	r1, r3
 8000706:	4663      	mov	r3, ip
 8000708:	e000      	b.n	800070c <__aeabi_cdcmpeq>
 800070a:	bf00      	nop

0800070c <__aeabi_cdcmpeq>:
 800070c:	b501      	push	{r0, lr}
 800070e:	f7ff ffb7 	bl	8000680 <__cmpdf2>
 8000712:	2800      	cmp	r0, #0
 8000714:	bf48      	it	mi
 8000716:	f110 0f00 	cmnmi.w	r0, #0
 800071a:	bd01      	pop	{r0, pc}

0800071c <__aeabi_dcmpeq>:
 800071c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000720:	f7ff fff4 	bl	800070c <__aeabi_cdcmpeq>
 8000724:	bf0c      	ite	eq
 8000726:	2001      	moveq	r0, #1
 8000728:	2000      	movne	r0, #0
 800072a:	f85d fb08 	ldr.w	pc, [sp], #8
 800072e:	bf00      	nop

08000730 <__aeabi_dcmplt>:
 8000730:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000734:	f7ff ffea 	bl	800070c <__aeabi_cdcmpeq>
 8000738:	bf34      	ite	cc
 800073a:	2001      	movcc	r0, #1
 800073c:	2000      	movcs	r0, #0
 800073e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000742:	bf00      	nop

08000744 <__aeabi_dcmple>:
 8000744:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000748:	f7ff ffe0 	bl	800070c <__aeabi_cdcmpeq>
 800074c:	bf94      	ite	ls
 800074e:	2001      	movls	r0, #1
 8000750:	2000      	movhi	r0, #0
 8000752:	f85d fb08 	ldr.w	pc, [sp], #8
 8000756:	bf00      	nop

08000758 <__aeabi_dcmpge>:
 8000758:	f84d ed08 	str.w	lr, [sp, #-8]!
 800075c:	f7ff ffce 	bl	80006fc <__aeabi_cdrcmple>
 8000760:	bf94      	ite	ls
 8000762:	2001      	movls	r0, #1
 8000764:	2000      	movhi	r0, #0
 8000766:	f85d fb08 	ldr.w	pc, [sp], #8
 800076a:	bf00      	nop

0800076c <__aeabi_dcmpgt>:
 800076c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000770:	f7ff ffc4 	bl	80006fc <__aeabi_cdrcmple>
 8000774:	bf34      	ite	cc
 8000776:	2001      	movcc	r0, #1
 8000778:	2000      	movcs	r0, #0
 800077a:	f85d fb08 	ldr.w	pc, [sp], #8
 800077e:	bf00      	nop

08000780 <__aeabi_d2iz>:
 8000780:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000784:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000788:	d215      	bcs.n	80007b6 <__aeabi_d2iz+0x36>
 800078a:	d511      	bpl.n	80007b0 <__aeabi_d2iz+0x30>
 800078c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000790:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000794:	d912      	bls.n	80007bc <__aeabi_d2iz+0x3c>
 8000796:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800079a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800079e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007a2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80007a6:	fa23 f002 	lsr.w	r0, r3, r2
 80007aa:	bf18      	it	ne
 80007ac:	4240      	negne	r0, r0
 80007ae:	4770      	bx	lr
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	4770      	bx	lr
 80007b6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007ba:	d105      	bne.n	80007c8 <__aeabi_d2iz+0x48>
 80007bc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80007c0:	bf08      	it	eq
 80007c2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80007c6:	4770      	bx	lr
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop

080007d0 <__aeabi_frsub>:
 80007d0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80007d4:	e002      	b.n	80007dc <__addsf3>
 80007d6:	bf00      	nop

080007d8 <__aeabi_fsub>:
 80007d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080007dc <__addsf3>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	bf1f      	itttt	ne
 80007e0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007e4:	ea92 0f03 	teqne	r2, r3
 80007e8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007ec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007f0:	d06a      	beq.n	80008c8 <__addsf3+0xec>
 80007f2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007f6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007fa:	bfc1      	itttt	gt
 80007fc:	18d2      	addgt	r2, r2, r3
 80007fe:	4041      	eorgt	r1, r0
 8000800:	4048      	eorgt	r0, r1
 8000802:	4041      	eorgt	r1, r0
 8000804:	bfb8      	it	lt
 8000806:	425b      	neglt	r3, r3
 8000808:	2b19      	cmp	r3, #25
 800080a:	bf88      	it	hi
 800080c:	4770      	bxhi	lr
 800080e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000812:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000816:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800081a:	bf18      	it	ne
 800081c:	4240      	negne	r0, r0
 800081e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000822:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000826:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800082a:	bf18      	it	ne
 800082c:	4249      	negne	r1, r1
 800082e:	ea92 0f03 	teq	r2, r3
 8000832:	d03f      	beq.n	80008b4 <__addsf3+0xd8>
 8000834:	f1a2 0201 	sub.w	r2, r2, #1
 8000838:	fa41 fc03 	asr.w	ip, r1, r3
 800083c:	eb10 000c 	adds.w	r0, r0, ip
 8000840:	f1c3 0320 	rsb	r3, r3, #32
 8000844:	fa01 f103 	lsl.w	r1, r1, r3
 8000848:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800084c:	d502      	bpl.n	8000854 <__addsf3+0x78>
 800084e:	4249      	negs	r1, r1
 8000850:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000854:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000858:	d313      	bcc.n	8000882 <__addsf3+0xa6>
 800085a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800085e:	d306      	bcc.n	800086e <__addsf3+0x92>
 8000860:	0840      	lsrs	r0, r0, #1
 8000862:	ea4f 0131 	mov.w	r1, r1, rrx
 8000866:	f102 0201 	add.w	r2, r2, #1
 800086a:	2afe      	cmp	r2, #254	@ 0xfe
 800086c:	d251      	bcs.n	8000912 <__addsf3+0x136>
 800086e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000872:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000876:	bf08      	it	eq
 8000878:	f020 0001 	biceq.w	r0, r0, #1
 800087c:	ea40 0003 	orr.w	r0, r0, r3
 8000880:	4770      	bx	lr
 8000882:	0049      	lsls	r1, r1, #1
 8000884:	eb40 0000 	adc.w	r0, r0, r0
 8000888:	3a01      	subs	r2, #1
 800088a:	bf28      	it	cs
 800088c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000890:	d2ed      	bcs.n	800086e <__addsf3+0x92>
 8000892:	fab0 fc80 	clz	ip, r0
 8000896:	f1ac 0c08 	sub.w	ip, ip, #8
 800089a:	ebb2 020c 	subs.w	r2, r2, ip
 800089e:	fa00 f00c 	lsl.w	r0, r0, ip
 80008a2:	bfaa      	itet	ge
 80008a4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80008a8:	4252      	neglt	r2, r2
 80008aa:	4318      	orrge	r0, r3
 80008ac:	bfbc      	itt	lt
 80008ae:	40d0      	lsrlt	r0, r2
 80008b0:	4318      	orrlt	r0, r3
 80008b2:	4770      	bx	lr
 80008b4:	f092 0f00 	teq	r2, #0
 80008b8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80008bc:	bf06      	itte	eq
 80008be:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80008c2:	3201      	addeq	r2, #1
 80008c4:	3b01      	subne	r3, #1
 80008c6:	e7b5      	b.n	8000834 <__addsf3+0x58>
 80008c8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008cc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008d0:	bf18      	it	ne
 80008d2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008d6:	d021      	beq.n	800091c <__addsf3+0x140>
 80008d8:	ea92 0f03 	teq	r2, r3
 80008dc:	d004      	beq.n	80008e8 <__addsf3+0x10c>
 80008de:	f092 0f00 	teq	r2, #0
 80008e2:	bf08      	it	eq
 80008e4:	4608      	moveq	r0, r1
 80008e6:	4770      	bx	lr
 80008e8:	ea90 0f01 	teq	r0, r1
 80008ec:	bf1c      	itt	ne
 80008ee:	2000      	movne	r0, #0
 80008f0:	4770      	bxne	lr
 80008f2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80008f6:	d104      	bne.n	8000902 <__addsf3+0x126>
 80008f8:	0040      	lsls	r0, r0, #1
 80008fa:	bf28      	it	cs
 80008fc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000900:	4770      	bx	lr
 8000902:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000906:	bf3c      	itt	cc
 8000908:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800090c:	4770      	bxcc	lr
 800090e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000912:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000916:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800091a:	4770      	bx	lr
 800091c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000920:	bf16      	itet	ne
 8000922:	4608      	movne	r0, r1
 8000924:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000928:	4601      	movne	r1, r0
 800092a:	0242      	lsls	r2, r0, #9
 800092c:	bf06      	itte	eq
 800092e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000932:	ea90 0f01 	teqeq	r0, r1
 8000936:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800093a:	4770      	bx	lr

0800093c <__aeabi_ui2f>:
 800093c:	f04f 0300 	mov.w	r3, #0
 8000940:	e004      	b.n	800094c <__aeabi_i2f+0x8>
 8000942:	bf00      	nop

08000944 <__aeabi_i2f>:
 8000944:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000948:	bf48      	it	mi
 800094a:	4240      	negmi	r0, r0
 800094c:	ea5f 0c00 	movs.w	ip, r0
 8000950:	bf08      	it	eq
 8000952:	4770      	bxeq	lr
 8000954:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000958:	4601      	mov	r1, r0
 800095a:	f04f 0000 	mov.w	r0, #0
 800095e:	e01c      	b.n	800099a <__aeabi_l2f+0x2a>

08000960 <__aeabi_ul2f>:
 8000960:	ea50 0201 	orrs.w	r2, r0, r1
 8000964:	bf08      	it	eq
 8000966:	4770      	bxeq	lr
 8000968:	f04f 0300 	mov.w	r3, #0
 800096c:	e00a      	b.n	8000984 <__aeabi_l2f+0x14>
 800096e:	bf00      	nop

08000970 <__aeabi_l2f>:
 8000970:	ea50 0201 	orrs.w	r2, r0, r1
 8000974:	bf08      	it	eq
 8000976:	4770      	bxeq	lr
 8000978:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800097c:	d502      	bpl.n	8000984 <__aeabi_l2f+0x14>
 800097e:	4240      	negs	r0, r0
 8000980:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000984:	ea5f 0c01 	movs.w	ip, r1
 8000988:	bf02      	ittt	eq
 800098a:	4684      	moveq	ip, r0
 800098c:	4601      	moveq	r1, r0
 800098e:	2000      	moveq	r0, #0
 8000990:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000994:	bf08      	it	eq
 8000996:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800099a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800099e:	fabc f28c 	clz	r2, ip
 80009a2:	3a08      	subs	r2, #8
 80009a4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80009a8:	db10      	blt.n	80009cc <__aeabi_l2f+0x5c>
 80009aa:	fa01 fc02 	lsl.w	ip, r1, r2
 80009ae:	4463      	add	r3, ip
 80009b0:	fa00 fc02 	lsl.w	ip, r0, r2
 80009b4:	f1c2 0220 	rsb	r2, r2, #32
 80009b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80009bc:	fa20 f202 	lsr.w	r2, r0, r2
 80009c0:	eb43 0002 	adc.w	r0, r3, r2
 80009c4:	bf08      	it	eq
 80009c6:	f020 0001 	biceq.w	r0, r0, #1
 80009ca:	4770      	bx	lr
 80009cc:	f102 0220 	add.w	r2, r2, #32
 80009d0:	fa01 fc02 	lsl.w	ip, r1, r2
 80009d4:	f1c2 0220 	rsb	r2, r2, #32
 80009d8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009dc:	fa21 f202 	lsr.w	r2, r1, r2
 80009e0:	eb43 0002 	adc.w	r0, r3, r2
 80009e4:	bf08      	it	eq
 80009e6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009ea:	4770      	bx	lr

080009ec <__aeabi_f2iz>:
 80009ec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009f0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80009f4:	d30f      	bcc.n	8000a16 <__aeabi_f2iz+0x2a>
 80009f6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80009fa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80009fe:	d90d      	bls.n	8000a1c <__aeabi_f2iz+0x30>
 8000a00:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000a04:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a08:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a0c:	fa23 f002 	lsr.w	r0, r3, r2
 8000a10:	bf18      	it	ne
 8000a12:	4240      	negne	r0, r0
 8000a14:	4770      	bx	lr
 8000a16:	f04f 0000 	mov.w	r0, #0
 8000a1a:	4770      	bx	lr
 8000a1c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000a20:	d101      	bne.n	8000a26 <__aeabi_f2iz+0x3a>
 8000a22:	0242      	lsls	r2, r0, #9
 8000a24:	d105      	bne.n	8000a32 <__aeabi_f2iz+0x46>
 8000a26:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000a2a:	bf08      	it	eq
 8000a2c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0000 	mov.w	r0, #0
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_f2uiz>:
 8000a38:	0042      	lsls	r2, r0, #1
 8000a3a:	d20e      	bcs.n	8000a5a <__aeabi_f2uiz+0x22>
 8000a3c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000a40:	d30b      	bcc.n	8000a5a <__aeabi_f2uiz+0x22>
 8000a42:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000a46:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000a4a:	d409      	bmi.n	8000a60 <__aeabi_f2uiz+0x28>
 8000a4c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000a50:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a54:	fa23 f002 	lsr.w	r0, r3, r2
 8000a58:	4770      	bx	lr
 8000a5a:	f04f 0000 	mov.w	r0, #0
 8000a5e:	4770      	bx	lr
 8000a60:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000a64:	d101      	bne.n	8000a6a <__aeabi_f2uiz+0x32>
 8000a66:	0242      	lsls	r2, r0, #9
 8000a68:	d102      	bne.n	8000a70 <__aeabi_f2uiz+0x38>
 8000a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_ldivmod>:
 8000a78:	b97b      	cbnz	r3, 8000a9a <__aeabi_ldivmod+0x22>
 8000a7a:	b972      	cbnz	r2, 8000a9a <__aeabi_ldivmod+0x22>
 8000a7c:	2900      	cmp	r1, #0
 8000a7e:	bfbe      	ittt	lt
 8000a80:	2000      	movlt	r0, #0
 8000a82:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000a86:	e006      	blt.n	8000a96 <__aeabi_ldivmod+0x1e>
 8000a88:	bf08      	it	eq
 8000a8a:	2800      	cmpeq	r0, #0
 8000a8c:	bf1c      	itt	ne
 8000a8e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000a92:	f04f 30ff 	movne.w	r0, #4294967295
 8000a96:	f000 b9b5 	b.w	8000e04 <__aeabi_idiv0>
 8000a9a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a9e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa2:	2900      	cmp	r1, #0
 8000aa4:	db09      	blt.n	8000aba <__aeabi_ldivmod+0x42>
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	db1a      	blt.n	8000ae0 <__aeabi_ldivmod+0x68>
 8000aaa:	f000 f84d 	bl	8000b48 <__udivmoddi4>
 8000aae:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab6:	b004      	add	sp, #16
 8000ab8:	4770      	bx	lr
 8000aba:	4240      	negs	r0, r0
 8000abc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	db1b      	blt.n	8000afc <__aeabi_ldivmod+0x84>
 8000ac4:	f000 f840 	bl	8000b48 <__udivmoddi4>
 8000ac8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000acc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad0:	b004      	add	sp, #16
 8000ad2:	4240      	negs	r0, r0
 8000ad4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ad8:	4252      	negs	r2, r2
 8000ada:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ade:	4770      	bx	lr
 8000ae0:	4252      	negs	r2, r2
 8000ae2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ae6:	f000 f82f 	bl	8000b48 <__udivmoddi4>
 8000aea:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af2:	b004      	add	sp, #16
 8000af4:	4240      	negs	r0, r0
 8000af6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000afa:	4770      	bx	lr
 8000afc:	4252      	negs	r2, r2
 8000afe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b02:	f000 f821 	bl	8000b48 <__udivmoddi4>
 8000b06:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b0e:	b004      	add	sp, #16
 8000b10:	4252      	negs	r2, r2
 8000b12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_uldivmod>:
 8000b18:	b953      	cbnz	r3, 8000b30 <__aeabi_uldivmod+0x18>
 8000b1a:	b94a      	cbnz	r2, 8000b30 <__aeabi_uldivmod+0x18>
 8000b1c:	2900      	cmp	r1, #0
 8000b1e:	bf08      	it	eq
 8000b20:	2800      	cmpeq	r0, #0
 8000b22:	bf1c      	itt	ne
 8000b24:	f04f 31ff 	movne.w	r1, #4294967295
 8000b28:	f04f 30ff 	movne.w	r0, #4294967295
 8000b2c:	f000 b96a 	b.w	8000e04 <__aeabi_idiv0>
 8000b30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b38:	f000 f806 	bl	8000b48 <__udivmoddi4>
 8000b3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b44:	b004      	add	sp, #16
 8000b46:	4770      	bx	lr

08000b48 <__udivmoddi4>:
 8000b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b4c:	9d08      	ldr	r5, [sp, #32]
 8000b4e:	460c      	mov	r4, r1
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d14e      	bne.n	8000bf2 <__udivmoddi4+0xaa>
 8000b54:	4694      	mov	ip, r2
 8000b56:	458c      	cmp	ip, r1
 8000b58:	4686      	mov	lr, r0
 8000b5a:	fab2 f282 	clz	r2, r2
 8000b5e:	d962      	bls.n	8000c26 <__udivmoddi4+0xde>
 8000b60:	b14a      	cbz	r2, 8000b76 <__udivmoddi4+0x2e>
 8000b62:	f1c2 0320 	rsb	r3, r2, #32
 8000b66:	4091      	lsls	r1, r2
 8000b68:	fa20 f303 	lsr.w	r3, r0, r3
 8000b6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b70:	4319      	orrs	r1, r3
 8000b72:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b7a:	fa1f f68c 	uxth.w	r6, ip
 8000b7e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b86:	fb07 1114 	mls	r1, r7, r4, r1
 8000b8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b8e:	fb04 f106 	mul.w	r1, r4, r6
 8000b92:	4299      	cmp	r1, r3
 8000b94:	d90a      	bls.n	8000bac <__udivmoddi4+0x64>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b9e:	f080 8112 	bcs.w	8000dc6 <__udivmoddi4+0x27e>
 8000ba2:	4299      	cmp	r1, r3
 8000ba4:	f240 810f 	bls.w	8000dc6 <__udivmoddi4+0x27e>
 8000ba8:	3c02      	subs	r4, #2
 8000baa:	4463      	add	r3, ip
 8000bac:	1a59      	subs	r1, r3, r1
 8000bae:	fa1f f38e 	uxth.w	r3, lr
 8000bb2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb6:	fb07 1110 	mls	r1, r7, r0, r1
 8000bba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bbe:	fb00 f606 	mul.w	r6, r0, r6
 8000bc2:	429e      	cmp	r6, r3
 8000bc4:	d90a      	bls.n	8000bdc <__udivmoddi4+0x94>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bce:	f080 80fc 	bcs.w	8000dca <__udivmoddi4+0x282>
 8000bd2:	429e      	cmp	r6, r3
 8000bd4:	f240 80f9 	bls.w	8000dca <__udivmoddi4+0x282>
 8000bd8:	4463      	add	r3, ip
 8000bda:	3802      	subs	r0, #2
 8000bdc:	1b9b      	subs	r3, r3, r6
 8000bde:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000be2:	2100      	movs	r1, #0
 8000be4:	b11d      	cbz	r5, 8000bee <__udivmoddi4+0xa6>
 8000be6:	40d3      	lsrs	r3, r2
 8000be8:	2200      	movs	r2, #0
 8000bea:	e9c5 3200 	strd	r3, r2, [r5]
 8000bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d905      	bls.n	8000c02 <__udivmoddi4+0xba>
 8000bf6:	b10d      	cbz	r5, 8000bfc <__udivmoddi4+0xb4>
 8000bf8:	e9c5 0100 	strd	r0, r1, [r5]
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4608      	mov	r0, r1
 8000c00:	e7f5      	b.n	8000bee <__udivmoddi4+0xa6>
 8000c02:	fab3 f183 	clz	r1, r3
 8000c06:	2900      	cmp	r1, #0
 8000c08:	d146      	bne.n	8000c98 <__udivmoddi4+0x150>
 8000c0a:	42a3      	cmp	r3, r4
 8000c0c:	d302      	bcc.n	8000c14 <__udivmoddi4+0xcc>
 8000c0e:	4290      	cmp	r0, r2
 8000c10:	f0c0 80f0 	bcc.w	8000df4 <__udivmoddi4+0x2ac>
 8000c14:	1a86      	subs	r6, r0, r2
 8000c16:	eb64 0303 	sbc.w	r3, r4, r3
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	2d00      	cmp	r5, #0
 8000c1e:	d0e6      	beq.n	8000bee <__udivmoddi4+0xa6>
 8000c20:	e9c5 6300 	strd	r6, r3, [r5]
 8000c24:	e7e3      	b.n	8000bee <__udivmoddi4+0xa6>
 8000c26:	2a00      	cmp	r2, #0
 8000c28:	f040 8090 	bne.w	8000d4c <__udivmoddi4+0x204>
 8000c2c:	eba1 040c 	sub.w	r4, r1, ip
 8000c30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c34:	fa1f f78c 	uxth.w	r7, ip
 8000c38:	2101      	movs	r1, #1
 8000c3a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c42:	fb08 4416 	mls	r4, r8, r6, r4
 8000c46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c4a:	fb07 f006 	mul.w	r0, r7, r6
 8000c4e:	4298      	cmp	r0, r3
 8000c50:	d908      	bls.n	8000c64 <__udivmoddi4+0x11c>
 8000c52:	eb1c 0303 	adds.w	r3, ip, r3
 8000c56:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c5a:	d202      	bcs.n	8000c62 <__udivmoddi4+0x11a>
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	f200 80cd 	bhi.w	8000dfc <__udivmoddi4+0x2b4>
 8000c62:	4626      	mov	r6, r4
 8000c64:	1a1c      	subs	r4, r3, r0
 8000c66:	fa1f f38e 	uxth.w	r3, lr
 8000c6a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c6e:	fb08 4410 	mls	r4, r8, r0, r4
 8000c72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c76:	fb00 f707 	mul.w	r7, r0, r7
 8000c7a:	429f      	cmp	r7, r3
 8000c7c:	d908      	bls.n	8000c90 <__udivmoddi4+0x148>
 8000c7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c82:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0x146>
 8000c88:	429f      	cmp	r7, r3
 8000c8a:	f200 80b0 	bhi.w	8000dee <__udivmoddi4+0x2a6>
 8000c8e:	4620      	mov	r0, r4
 8000c90:	1bdb      	subs	r3, r3, r7
 8000c92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c96:	e7a5      	b.n	8000be4 <__udivmoddi4+0x9c>
 8000c98:	f1c1 0620 	rsb	r6, r1, #32
 8000c9c:	408b      	lsls	r3, r1
 8000c9e:	fa22 f706 	lsr.w	r7, r2, r6
 8000ca2:	431f      	orrs	r7, r3
 8000ca4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ca8:	fa04 f301 	lsl.w	r3, r4, r1
 8000cac:	ea43 030c 	orr.w	r3, r3, ip
 8000cb0:	40f4      	lsrs	r4, r6
 8000cb2:	fa00 f801 	lsl.w	r8, r0, r1
 8000cb6:	0c38      	lsrs	r0, r7, #16
 8000cb8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cbc:	fbb4 fef0 	udiv	lr, r4, r0
 8000cc0:	fa1f fc87 	uxth.w	ip, r7
 8000cc4:	fb00 441e 	mls	r4, r0, lr, r4
 8000cc8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ccc:	fb0e f90c 	mul.w	r9, lr, ip
 8000cd0:	45a1      	cmp	r9, r4
 8000cd2:	fa02 f201 	lsl.w	r2, r2, r1
 8000cd6:	d90a      	bls.n	8000cee <__udivmoddi4+0x1a6>
 8000cd8:	193c      	adds	r4, r7, r4
 8000cda:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cde:	f080 8084 	bcs.w	8000dea <__udivmoddi4+0x2a2>
 8000ce2:	45a1      	cmp	r9, r4
 8000ce4:	f240 8081 	bls.w	8000dea <__udivmoddi4+0x2a2>
 8000ce8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cec:	443c      	add	r4, r7
 8000cee:	eba4 0409 	sub.w	r4, r4, r9
 8000cf2:	fa1f f983 	uxth.w	r9, r3
 8000cf6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cfa:	fb00 4413 	mls	r4, r0, r3, r4
 8000cfe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d02:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d06:	45a4      	cmp	ip, r4
 8000d08:	d907      	bls.n	8000d1a <__udivmoddi4+0x1d2>
 8000d0a:	193c      	adds	r4, r7, r4
 8000d0c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d10:	d267      	bcs.n	8000de2 <__udivmoddi4+0x29a>
 8000d12:	45a4      	cmp	ip, r4
 8000d14:	d965      	bls.n	8000de2 <__udivmoddi4+0x29a>
 8000d16:	3b02      	subs	r3, #2
 8000d18:	443c      	add	r4, r7
 8000d1a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d1e:	fba0 9302 	umull	r9, r3, r0, r2
 8000d22:	eba4 040c 	sub.w	r4, r4, ip
 8000d26:	429c      	cmp	r4, r3
 8000d28:	46ce      	mov	lr, r9
 8000d2a:	469c      	mov	ip, r3
 8000d2c:	d351      	bcc.n	8000dd2 <__udivmoddi4+0x28a>
 8000d2e:	d04e      	beq.n	8000dce <__udivmoddi4+0x286>
 8000d30:	b155      	cbz	r5, 8000d48 <__udivmoddi4+0x200>
 8000d32:	ebb8 030e 	subs.w	r3, r8, lr
 8000d36:	eb64 040c 	sbc.w	r4, r4, ip
 8000d3a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d3e:	40cb      	lsrs	r3, r1
 8000d40:	431e      	orrs	r6, r3
 8000d42:	40cc      	lsrs	r4, r1
 8000d44:	e9c5 6400 	strd	r6, r4, [r5]
 8000d48:	2100      	movs	r1, #0
 8000d4a:	e750      	b.n	8000bee <__udivmoddi4+0xa6>
 8000d4c:	f1c2 0320 	rsb	r3, r2, #32
 8000d50:	fa20 f103 	lsr.w	r1, r0, r3
 8000d54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d58:	fa24 f303 	lsr.w	r3, r4, r3
 8000d5c:	4094      	lsls	r4, r2
 8000d5e:	430c      	orrs	r4, r1
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d68:	fa1f f78c 	uxth.w	r7, ip
 8000d6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d70:	fb08 3110 	mls	r1, r8, r0, r3
 8000d74:	0c23      	lsrs	r3, r4, #16
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb00 f107 	mul.w	r1, r0, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x24c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d8a:	d22c      	bcs.n	8000de6 <__udivmoddi4+0x29e>
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d92a      	bls.n	8000de6 <__udivmoddi4+0x29e>
 8000d90:	3802      	subs	r0, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d9c:	fb08 3311 	mls	r3, r8, r1, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb01 f307 	mul.w	r3, r1, r7
 8000da8:	42a3      	cmp	r3, r4
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x276>
 8000dac:	eb1c 0404 	adds.w	r4, ip, r4
 8000db0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000db4:	d213      	bcs.n	8000dde <__udivmoddi4+0x296>
 8000db6:	42a3      	cmp	r3, r4
 8000db8:	d911      	bls.n	8000dde <__udivmoddi4+0x296>
 8000dba:	3902      	subs	r1, #2
 8000dbc:	4464      	add	r4, ip
 8000dbe:	1ae4      	subs	r4, r4, r3
 8000dc0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dc4:	e739      	b.n	8000c3a <__udivmoddi4+0xf2>
 8000dc6:	4604      	mov	r4, r0
 8000dc8:	e6f0      	b.n	8000bac <__udivmoddi4+0x64>
 8000dca:	4608      	mov	r0, r1
 8000dcc:	e706      	b.n	8000bdc <__udivmoddi4+0x94>
 8000dce:	45c8      	cmp	r8, r9
 8000dd0:	d2ae      	bcs.n	8000d30 <__udivmoddi4+0x1e8>
 8000dd2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dd6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dda:	3801      	subs	r0, #1
 8000ddc:	e7a8      	b.n	8000d30 <__udivmoddi4+0x1e8>
 8000dde:	4631      	mov	r1, r6
 8000de0:	e7ed      	b.n	8000dbe <__udivmoddi4+0x276>
 8000de2:	4603      	mov	r3, r0
 8000de4:	e799      	b.n	8000d1a <__udivmoddi4+0x1d2>
 8000de6:	4630      	mov	r0, r6
 8000de8:	e7d4      	b.n	8000d94 <__udivmoddi4+0x24c>
 8000dea:	46d6      	mov	lr, sl
 8000dec:	e77f      	b.n	8000cee <__udivmoddi4+0x1a6>
 8000dee:	4463      	add	r3, ip
 8000df0:	3802      	subs	r0, #2
 8000df2:	e74d      	b.n	8000c90 <__udivmoddi4+0x148>
 8000df4:	4606      	mov	r6, r0
 8000df6:	4623      	mov	r3, r4
 8000df8:	4608      	mov	r0, r1
 8000dfa:	e70f      	b.n	8000c1c <__udivmoddi4+0xd4>
 8000dfc:	3e02      	subs	r6, #2
 8000dfe:	4463      	add	r3, ip
 8000e00:	e730      	b.n	8000c64 <__udivmoddi4+0x11c>
 8000e02:	bf00      	nop

08000e04 <__aeabi_idiv0>:
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop

08000e08 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000e08:	b508      	push	{r3, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000e0a:	4813      	ldr	r0, [pc, #76]	@ (8000e58 <MX_ADC_Init+0x50>)
 8000e0c:	4b13      	ldr	r3, [pc, #76]	@ (8000e5c <MX_ADC_Init+0x54>)
 8000e0e:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e10:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000e14:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000e16:	2300      	movs	r3, #0
 8000e18:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e1a:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e1c:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e1e:	2204      	movs	r2, #4
 8000e20:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000e22:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000e24:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000e26:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 8000e28:	2201      	movs	r2, #1
 8000e2a:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000e2c:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e30:	6243      	str	r3, [r0, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e32:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000e34:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e38:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e3c:	6302      	str	r2, [r0, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000e3e:	2207      	movs	r2, #7
 8000e40:	6342      	str	r2, [r0, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000e42:	6382      	str	r2, [r0, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000e44:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000e48:	64c3      	str	r3, [r0, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000e4a:	f002 ff4d 	bl	8003ce8 <HAL_ADC_Init>
 8000e4e:	b900      	cbnz	r0, 8000e52 <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000e50:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000e52:	f000 fc98 	bl	8001786 <Error_Handler>
}
 8000e56:	e7fb      	b.n	8000e50 <MX_ADC_Init+0x48>
 8000e58:	20000134 	.word	0x20000134
 8000e5c:	40012400 	.word	0x40012400

08000e60 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000e60:	6802      	ldr	r2, [r0, #0]
 8000e62:	4b09      	ldr	r3, [pc, #36]	@ (8000e88 <HAL_ADC_MspInit+0x28>)
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d000      	beq.n	8000e6a <HAL_ADC_MspInit+0xa>
 8000e68:	4770      	bx	lr
{
 8000e6a:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e70:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000e72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000e76:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e7e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000e80:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000e82:	b002      	add	sp, #8
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	40012400 	.word	0x40012400

08000e8c <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000e8c:	6802      	ldr	r2, [r0, #0]
 8000e8e:	4b05      	ldr	r3, [pc, #20]	@ (8000ea4 <HAL_ADC_MspDeInit+0x18>)
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d000      	beq.n	8000e96 <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000e94:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000e96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e9a:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8000e9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000ea0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ea2:	e7f7      	b.n	8000e94 <HAL_ADC_MspDeInit+0x8>
 8000ea4:	40012400 	.word	0x40012400

08000ea8 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000ea8:	b530      	push	{r4, r5, lr}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eae:	2300      	movs	r3, #0
 8000eb0:	9301      	str	r3, [sp, #4]
 8000eb2:	9302      	str	r3, [sp, #8]
 8000eb4:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 8000eb6:	f7ff ffa7 	bl	8000e08 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000eba:	4816      	ldr	r0, [pc, #88]	@ (8000f14 <ADC_ReadChannels+0x6c>)
 8000ebc:	f003 fb4c 	bl	8004558 <HAL_ADCEx_Calibration_Start>
 8000ec0:	b9f8      	cbnz	r0, 8000f02 <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8000ec2:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000ec8:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000eca:	a901      	add	r1, sp, #4
 8000ecc:	4811      	ldr	r0, [pc, #68]	@ (8000f14 <ADC_ReadChannels+0x6c>)
 8000ece:	f003 f885 	bl	8003fdc <HAL_ADC_ConfigChannel>
 8000ed2:	b9c8      	cbnz	r0, 8000f08 <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000ed4:	480f      	ldr	r0, [pc, #60]	@ (8000f14 <ADC_ReadChannels+0x6c>)
 8000ed6:	f003 fa43 	bl	8004360 <HAL_ADC_Start>
 8000eda:	b9c0      	cbnz	r0, 8000f0e <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000edc:	4c0d      	ldr	r4, [pc, #52]	@ (8000f14 <ADC_ReadChannels+0x6c>)
 8000ede:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee2:	4620      	mov	r0, r4
 8000ee4:	f003 f818 	bl	8003f18 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8000ee8:	4620      	mov	r0, r4
 8000eea:	f003 fb15 	bl	8004518 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8000eee:	4620      	mov	r0, r4
 8000ef0:	f003 f871 	bl	8003fd6 <HAL_ADC_GetValue>
 8000ef4:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 8000ef6:	4620      	mov	r0, r4
 8000ef8:	f003 faae 	bl	8004458 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8000efc:	4628      	mov	r0, r5
 8000efe:	b005      	add	sp, #20
 8000f00:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8000f02:	f000 fc40 	bl	8001786 <Error_Handler>
 8000f06:	e7dc      	b.n	8000ec2 <ADC_ReadChannels+0x1a>
    Error_Handler();
 8000f08:	f000 fc3d 	bl	8001786 <Error_Handler>
 8000f0c:	e7e2      	b.n	8000ed4 <ADC_ReadChannels+0x2c>
    Error_Handler();
 8000f0e:	f000 fc3a 	bl	8001786 <Error_Handler>
 8000f12:	e7e3      	b.n	8000edc <ADC_ReadChannels+0x34>
 8000f14:	20000134 	.word	0x20000134

08000f18 <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 8000f18:	4b01      	ldr	r3, [pc, #4]	@ (8000f20 <SYS_InitMeasurement+0x8>)
 8000f1a:	4a02      	ldr	r2, [pc, #8]	@ (8000f24 <SYS_InitMeasurement+0xc>)
 8000f1c:	601a      	str	r2, [r3, #0]
}
 8000f1e:	4770      	bx	lr
 8000f20:	20000134 	.word	0x20000134
 8000f24:	40012400 	.word	0x40012400

08000f28 <SYS_GetBatteryLevel>:
{
 8000f28:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8000f2a:	480d      	ldr	r0, [pc, #52]	@ (8000f60 <SYS_GetBatteryLevel+0x38>)
 8000f2c:	f7ff ffbc 	bl	8000ea8 <ADC_ReadChannels>
  if (measuredLevel == 0)
 8000f30:	b1a0      	cbz	r0, 8000f5c <SYS_GetBatteryLevel+0x34>
 8000f32:	4603      	mov	r3, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8000f34:	4a0b      	ldr	r2, [pc, #44]	@ (8000f64 <SYS_GetBatteryLevel+0x3c>)
 8000f36:	f8b2 00aa 	ldrh.w	r0, [r2, #170]	@ 0xaa
 8000f3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f3e:	4290      	cmp	r0, r2
 8000f40:	d007      	beq.n	8000f52 <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8000f42:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000f46:	fb02 f000 	mul.w	r0, r2, r0
 8000f4a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f4e:	b280      	uxth	r0, r0
 8000f50:	e005      	b.n	8000f5e <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8000f52:	4805      	ldr	r0, [pc, #20]	@ (8000f68 <SYS_GetBatteryLevel+0x40>)
 8000f54:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f58:	b280      	uxth	r0, r0
 8000f5a:	e000      	b.n	8000f5e <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 8000f5c:	2000      	movs	r0, #0
}
 8000f5e:	bd08      	pop	{r3, pc}
 8000f60:	b4002000 	.word	0xb4002000
 8000f64:	1fff7500 	.word	0x1fff7500
 8000f68:	004c08d8 	.word	0x004c08d8

08000f6c <SYS_GetTemperatureLevel>:
{
 8000f6c:	b510      	push	{r4, lr}
 8000f6e:	b082      	sub	sp, #8
  __IO int16_t temperatureDegreeC = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8000f76:	f7ff ffd7 	bl	8000f28 <SYS_GetBatteryLevel>
 8000f7a:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8000f7c:	4821      	ldr	r0, [pc, #132]	@ (8001004 <SYS_GetTemperatureLevel+0x98>)
 8000f7e:	f7ff ff93 	bl	8000ea8 <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8000f82:	4b21      	ldr	r3, [pc, #132]	@ (8001008 <SYS_GetTemperatureLevel+0x9c>)
 8000f84:	f8b3 20c8 	ldrh.w	r2, [r3, #200]	@ 0xc8
 8000f88:	f8b3 10a8 	ldrh.w	r1, [r3, #168]	@ 0xa8
 8000f8c:	428a      	cmp	r2, r1
 8000f8e:	d01d      	beq.n	8000fcc <SYS_GetTemperatureLevel+0x60>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8000f90:	fb00 f304 	mul.w	r3, r0, r4
 8000f94:	089b      	lsrs	r3, r3, #2
 8000f96:	481d      	ldr	r0, [pc, #116]	@ (800100c <SYS_GetTemperatureLevel+0xa0>)
 8000f98:	fba0 0303 	umull	r0, r3, r0, r3
 8000f9c:	ebc1 1353 	rsb	r3, r1, r3, lsr #5
 8000fa0:	2064      	movs	r0, #100	@ 0x64
 8000fa2:	fb00 f303 	mul.w	r3, r0, r3
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	fb93 f3f2 	sdiv	r3, r3, r2
 8000fac:	331e      	adds	r3, #30
 8000fae:	b21b      	sxth	r3, r3
 8000fb0:	f8ad 3006 	strh.w	r3, [sp, #6]
  temperatureDegreeC <<= 8;
 8000fb4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000fb8:	b21b      	sxth	r3, r3
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	f8ad 3006 	strh.w	r3, [sp, #6]
  return (int16_t) temperatureDegreeC;
 8000fc2:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 8000fc6:	b200      	sxth	r0, r0
 8000fc8:	b002      	add	sp, #8
 8000fca:	bd10      	pop	{r4, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8000fcc:	fb04 f000 	mul.w	r0, r4, r0
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <SYS_GetTemperatureLevel+0xa4>)
 8000fd2:	fba3 2300 	umull	r2, r3, r3, r0
 8000fd6:	1ac4      	subs	r4, r0, r3
 8000fd8:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 8000fdc:	0adb      	lsrs	r3, r3, #11
 8000fde:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fe2:	fb02 f303 	mul.w	r3, r2, r3
 8000fe6:	f5a3 2339 	sub.w	r3, r3, #757760	@ 0xb9000
 8000fea:	f5a3 630c 	sub.w	r3, r3, #2240	@ 0x8c0
 8000fee:	4a09      	ldr	r2, [pc, #36]	@ (8001014 <SYS_GetTemperatureLevel+0xa8>)
 8000ff0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ff4:	17db      	asrs	r3, r3, #31
 8000ff6:	ebc3 23a2 	rsb	r3, r3, r2, asr #10
 8000ffa:	331e      	adds	r3, #30
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	f8ad 3006 	strh.w	r3, [sp, #6]
 8001002:	e7d7      	b.n	8000fb4 <SYS_GetTemperatureLevel+0x48>
 8001004:	b0001000 	.word	0xb0001000
 8001008:	1fff7500 	.word	0x1fff7500
 800100c:	09ee009f 	.word	0x09ee009f
 8001010:	00100101 	.word	0x00100101
 8001014:	68db8bad 	.word	0x68db8bad

08001018 <WakeUpTimer_Cb>:
/* USER CODE BEGIN Application */
static void WakeUpTimer_Cb(void *context)
{
  /*Nothing to do*/
  UNUSED(context);
}
 8001018:	4770      	bx	lr

0800101a <app_freertos_ms_to_tick>:
  if (configTICK_RATE_HZ != configTICK_RATE_HZ_1MS)
  {
    tick = (uint32_t)((((uint64_t)(ms)) * configTICK_RATE_HZ) / configTICK_RATE_HZ_1MS);
  }
  return tick;
}
 800101a:	4770      	bx	lr

0800101c <app_freertos_tick_to_ms>:
  if (configTICK_RATE_HZ != configTICK_RATE_HZ_1MS)
  {
    ms = (uint32_t)((((uint64_t)(tick)) * configTICK_RATE_HZ_1MS) / configTICK_RATE_HZ);
  }
  return ms;
}
 800101c:	4770      	bx	lr

0800101e <StartDefaultTask>:
{
 800101e:	b508      	push	{r3, lr}
  MX_LoRaWAN_Init();
 8001020:	f001 f9ee 	bl	8002400 <MX_LoRaWAN_Init>
    osThreadFlagsWait(1, osFlagsWaitAll, osWaitForever);
 8001024:	f04f 32ff 	mov.w	r2, #4294967295
 8001028:	2101      	movs	r1, #1
 800102a:	4608      	mov	r0, r1
 800102c:	f008 f8ac 	bl	8009188 <osThreadFlagsWait>
  for(;;)
 8001030:	e7f8      	b.n	8001024 <StartDefaultTask+0x6>
	...

08001034 <PreSleepProcessing>:
{
 8001034:	b538      	push	{r3, r4, r5, lr}
 8001036:	4604      	mov	r4, r0
  uint32_t WakeUpTimer_timeOut_ms = app_freertos_tick_to_ms(*ulExpectedIdleTime);
 8001038:	6800      	ldr	r0, [r0, #0]
 800103a:	f7ff ffef 	bl	800101c <app_freertos_tick_to_ms>
 800103e:	4601      	mov	r1, r0
  UTIL_TIMER_SetPeriod(&WakeUpTimer, WakeUpTimer_timeOut_ms);
 8001040:	4d0a      	ldr	r5, [pc, #40]	@ (800106c <PreSleepProcessing+0x38>)
 8001042:	4628      	mov	r0, r5
 8001044:	f014 fe98 	bl	8015d78 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&WakeUpTimer);
 8001048:	4628      	mov	r0, r5
 800104a:	f014 fe4f 	bl	8015cec <UTIL_TIMER_Start>
  Time_BeforeSleep = UTIL_TIMER_GetCurrentTime();
 800104e:	f014 fdb3 	bl	8015bb8 <UTIL_TIMER_GetCurrentTime>
 8001052:	4b07      	ldr	r3, [pc, #28]	@ (8001070 <PreSleepProcessing+0x3c>)
 8001054:	6018      	str	r0, [r3, #0]
  portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8001056:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800105a:	6913      	ldr	r3, [r2, #16]
 800105c:	f023 0301 	bic.w	r3, r3, #1
 8001060:	6113      	str	r3, [r2, #16]
  UTIL_LPM_EnterLowPower();
 8001062:	f014 fc5d 	bl	8015920 <UTIL_LPM_EnterLowPower>
  *ulExpectedIdleTime = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	6023      	str	r3, [r4, #0]
}
 800106a:	bd38      	pop	{r3, r4, r5, pc}
 800106c:	200001a0 	.word	0x200001a0
 8001070:	2000019c 	.word	0x2000019c

08001074 <PostSleepProcessing>:
{
 8001074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t SleepDuration = UTIL_TIMER_GetElapsedTime(Time_BeforeSleep);
 8001076:	4b15      	ldr	r3, [pc, #84]	@ (80010cc <PostSleepProcessing+0x58>)
 8001078:	6818      	ldr	r0, [r3, #0]
 800107a:	f014 fda7 	bl	8015bcc <UTIL_TIMER_GetElapsedTime>
 800107e:	4605      	mov	r5, r0
  UTIL_TIMER_Stop(&WakeUpTimer);
 8001080:	4813      	ldr	r0, [pc, #76]	@ (80010d0 <PostSleepProcessing+0x5c>)
 8001082:	f014 fdd9 	bl	8015c38 <UTIL_TIMER_Stop>
  if (portNVIC_SYSTICK_CURRENT_VALUE_REG > (SleepDuration * CORE_TICK_RATE))
 8001086:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800108a:	699a      	ldr	r2, [r3, #24]
 800108c:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <PostSleepProcessing+0x60>)
 800108e:	681c      	ldr	r4, [r3, #0]
 8001090:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <PostSleepProcessing+0x64>)
 8001092:	fba3 3404 	umull	r3, r4, r3, r4
 8001096:	09a4      	lsrs	r4, r4, #6
 8001098:	fb05 f304 	mul.w	r3, r5, r4
 800109c:	429a      	cmp	r2, r3
 800109e:	d911      	bls.n	80010c4 <PostSleepProcessing+0x50>
    portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG - (app_freertos_ms_to_tick(SleepDuration) * CORE_TICK_RATE);
 80010a0:	f04f 27e0 	mov.w	r7, #3758153728	@ 0xe000e000
 80010a4:	69be      	ldr	r6, [r7, #24]
 80010a6:	4628      	mov	r0, r5
 80010a8:	f7ff ffb7 	bl	800101a <app_freertos_ms_to_tick>
 80010ac:	fb00 6614 	mls	r6, r0, r4, r6
 80010b0:	617e      	str	r6, [r7, #20]
  portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80010b2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80010b6:	2200      	movs	r2, #0
 80010b8:	619a      	str	r2, [r3, #24]
  portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 80010ba:	691a      	ldr	r2, [r3, #16]
 80010bc:	f042 0201 	orr.w	r2, r2, #1
 80010c0:	611a      	str	r2, [r3, #16]
}
 80010c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    portNVIC_SYSTICK_LOAD_REG = CORE_TICK_RATE;
 80010c4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80010c8:	615c      	str	r4, [r3, #20]
 80010ca:	e7f2      	b.n	80010b2 <PostSleepProcessing+0x3e>
 80010cc:	2000019c 	.word	0x2000019c
 80010d0:	200001a0 	.word	0x200001a0
 80010d4:	20000074 	.word	0x20000074
 80010d8:	10624dd3 	.word	0x10624dd3

080010dc <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 80010dc:	b510      	push	{r4, lr}
 80010de:	b082      	sub	sp, #8
  UTIL_TIMER_Create(&WakeUpTimer, 0, UTIL_TIMER_ONESHOT, WakeUpTimer_Cb, NULL);
 80010e0:	2400      	movs	r4, #0
 80010e2:	9400      	str	r4, [sp, #0]
 80010e4:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <MX_FREERTOS_Init+0x28>)
 80010e6:	4622      	mov	r2, r4
 80010e8:	4621      	mov	r1, r4
 80010ea:	4807      	ldr	r0, [pc, #28]	@ (8001108 <MX_FREERTOS_Init+0x2c>)
 80010ec:	f014 fd40 	bl	8015b70 <UTIL_TIMER_Create>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80010f0:	4a06      	ldr	r2, [pc, #24]	@ (800110c <MX_FREERTOS_Init+0x30>)
 80010f2:	4621      	mov	r1, r4
 80010f4:	4806      	ldr	r0, [pc, #24]	@ (8001110 <MX_FREERTOS_Init+0x34>)
 80010f6:	f007 ff93 	bl	8009020 <osThreadNew>
 80010fa:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <MX_FREERTOS_Init+0x38>)
 80010fc:	6018      	str	r0, [r3, #0]
}
 80010fe:	b002      	add	sp, #8
 8001100:	bd10      	pop	{r4, pc}
 8001102:	bf00      	nop
 8001104:	08001019 	.word	0x08001019
 8001108:	200001a0 	.word	0x200001a0
 800110c:	080162cc 	.word	0x080162cc
 8001110:	0800101f 	.word	0x0800101f
 8001114:	20000198 	.word	0x20000198

08001118 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001118:	b500      	push	{lr}
 800111a:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 800111c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001120:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001122:	f042 0204 	orr.w	r2, r2, #4
 8001126:	649a      	str	r2, [r3, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001128:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800112a:	f002 0204 	and.w	r2, r2, #4
 800112e:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001130:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001132:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001134:	f042 0201 	orr.w	r2, r2, #1
 8001138:	649a      	str	r2, [r3, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800113a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001142:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 7, 0);
 8001144:	2200      	movs	r2, #0
 8001146:	2107      	movs	r1, #7
 8001148:	200f      	movs	r0, #15
 800114a:	f003 fb0b 	bl	8004764 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800114e:	200f      	movs	r0, #15
 8001150:	f003 fb18 	bl	8004784 <HAL_NVIC_EnableIRQ>

}
 8001154:	b003      	add	sp, #12
 8001156:	f85d fb04 	ldr.w	pc, [sp], #4

0800115a <FLASH_IF_INT_IsEmpty>:
  int32_t status = FLASH_IF_MEM_EMPTY;
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 800115a:	2300      	movs	r3, #0
 800115c:	e001      	b.n	8001162 <FLASH_IF_INT_IsEmpty+0x8>
    if (*(uint64_t *)pStart != UINT64_MAX)
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
      break;
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 800115e:	3008      	adds	r0, #8
  for (index = 0; index < uLength; index += 8)
 8001160:	3308      	adds	r3, #8
 8001162:	428b      	cmp	r3, r1
 8001164:	d20a      	bcs.n	800117c <FLASH_IF_INT_IsEmpty+0x22>
    if (*(uint64_t *)pStart != UINT64_MAX)
 8001166:	6842      	ldr	r2, [r0, #4]
 8001168:	f8d0 c000 	ldr.w	ip, [r0]
 800116c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8001170:	bf08      	it	eq
 8001172:	f1bc 3fff 	cmpeq.w	ip, #4294967295
 8001176:	d0f2      	beq.n	800115e <FLASH_IF_INT_IsEmpty+0x4>
      status = FLASH_IF_MEM_NOT_EMPTY;
 8001178:	2001      	movs	r0, #1
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
}
 800117a:	4770      	bx	lr
  int32_t status = FLASH_IF_MEM_EMPTY;
 800117c:	2000      	movs	r0, #0
 800117e:	4770      	bx	lr

08001180 <FLASH_IF_INT_Read>:
  if ((pDestination == NULL) || (pSource == NULL))
 8001180:	b130      	cbz	r0, 8001190 <FLASH_IF_INT_Read+0x10>
{
 8001182:	b508      	push	{r3, lr}
  if ((pDestination == NULL) || (pSource == NULL))
 8001184:	b139      	cbz	r1, 8001196 <FLASH_IF_INT_Read+0x16>
  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 8001186:	b292      	uxth	r2, r2
 8001188:	f014 fbee 	bl	8015968 <UTIL_MEM_cpy_8>
  return ret_status;
 800118c:	2000      	movs	r0, #0
}
 800118e:	bd08      	pop	{r3, pc}
    return FLASH_IF_PARAM_ERROR;
 8001190:	f06f 0005 	mvn.w	r0, #5
}
 8001194:	4770      	bx	lr
    return FLASH_IF_PARAM_ERROR;
 8001196:	f06f 0005 	mvn.w	r0, #5
 800119a:	e7f8      	b.n	800118e <FLASH_IF_INT_Read+0xe>

0800119c <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 800119c:	b508      	push	{r3, lr}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800119e:	f003 fdab 	bl	8004cf8 <HAL_FLASH_Unlock>
 80011a2:	b978      	cbnz	r0, 80011c4 <FLASH_IF_INT_Clear_Error+0x28>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80011a4:	4b09      	ldr	r3, [pc, #36]	@ (80011cc <FLASH_IF_INT_Clear_Error+0x30>)
 80011a6:	699a      	ldr	r2, [r3, #24]
 80011a8:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 80011ac:	619a      	str	r2, [r3, #24]
 80011ae:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 80011b2:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 80011b4:	f003 fdb8 	bl	8004d28 <HAL_FLASH_Lock>
 80011b8:	b908      	cbnz	r0, 80011be <FLASH_IF_INT_Clear_Error+0x22>
    {
      ret_status = FLASH_IF_OK;
 80011ba:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
}
 80011bc:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 80011be:	f06f 0004 	mvn.w	r0, #4
 80011c2:	e7fb      	b.n	80011bc <FLASH_IF_INT_Clear_Error+0x20>
 80011c4:	f06f 0004 	mvn.w	r0, #4
 80011c8:	e7f8      	b.n	80011bc <FLASH_IF_INT_Clear_Error+0x20>
 80011ca:	bf00      	nop
 80011cc:	58004000 	.word	0x58004000

080011d0 <FLASH_IF_INT_Erase>:
{
 80011d0:	b570      	push	{r4, r5, r6, lr}
 80011d2:	b084      	sub	sp, #16
  uint32_t page_error = 0U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	9303      	str	r3, [sp, #12]
  if (pStart == NULL)
 80011d8:	2800      	cmp	r0, #0
 80011da:	d039      	beq.n	8001250 <FLASH_IF_INT_Erase+0x80>
 80011dc:	460e      	mov	r6, r1
 80011de:	4604      	mov	r4, r0
  ret_status = FLASH_IF_INT_Clear_Error();
 80011e0:	f7ff ffdc 	bl	800119c <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 80011e4:	4605      	mov	r5, r0
 80011e6:	b110      	cbz	r0, 80011ee <FLASH_IF_INT_Erase+0x1e>
}
 80011e8:	4628      	mov	r0, r5
 80011ea:	b004      	add	sp, #16
 80011ec:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 80011ee:	f003 fd83 	bl	8004cf8 <HAL_FLASH_Unlock>
 80011f2:	bb80      	cbnz	r0, 8001256 <FLASH_IF_INT_Erase+0x86>
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 80011f4:	2302      	movs	r3, #2
 80011f6:	9300      	str	r3, [sp, #0]
      erase_init.Page = PAGE_INDEX(uStart);
 80011f8:	f104 4378 	add.w	r3, r4, #4160749568	@ 0xf8000000
 80011fc:	4817      	ldr	r0, [pc, #92]	@ (800125c <FLASH_IF_INT_Erase+0x8c>)
 80011fe:	f8d0 15e0 	ldr.w	r1, [r0, #1504]	@ 0x5e0
 8001202:	4a17      	ldr	r2, [pc, #92]	@ (8001260 <FLASH_IF_INT_Erase+0x90>)
 8001204:	ea02 2181 	and.w	r1, r2, r1, lsl #10
 8001208:	fbb3 fcf1 	udiv	ip, r3, r1
 800120c:	fb01 331c 	mls	r3, r1, ip, r3
 8001210:	0adb      	lsrs	r3, r3, #11
 8001212:	9301      	str	r3, [sp, #4]
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8001214:	19a1      	adds	r1, r4, r6
 8001216:	f101 4178 	add.w	r1, r1, #4160749568	@ 0xf8000000
 800121a:	3901      	subs	r1, #1
 800121c:	f8d0 05e0 	ldr.w	r0, [r0, #1504]	@ 0x5e0
 8001220:	ea02 2280 	and.w	r2, r2, r0, lsl #10
 8001224:	fbb1 f0f2 	udiv	r0, r1, r2
 8001228:	fb02 1110 	mls	r1, r2, r0, r1
 800122c:	ebc3 23d1 	rsb	r3, r3, r1, lsr #11
 8001230:	3301      	adds	r3, #1
 8001232:	9302      	str	r3, [sp, #8]
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001234:	a903      	add	r1, sp, #12
 8001236:	4668      	mov	r0, sp
 8001238:	f003 fe4c 	bl	8004ed4 <HAL_FLASHEx_Erase>
      if (hal_status != HAL_OK)
 800123c:	b118      	cbz	r0, 8001246 <FLASH_IF_INT_Erase+0x76>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 800123e:	2802      	cmp	r0, #2
 8001240:	d004      	beq.n	800124c <FLASH_IF_INT_Erase+0x7c>
 8001242:	f06f 0501 	mvn.w	r5, #1
      HAL_FLASH_Lock();
 8001246:	f003 fd6f 	bl	8004d28 <HAL_FLASH_Lock>
 800124a:	e7cd      	b.n	80011e8 <FLASH_IF_INT_Erase+0x18>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 800124c:	2501      	movs	r5, #1
 800124e:	e7fa      	b.n	8001246 <FLASH_IF_INT_Erase+0x76>
    return FLASH_IF_PARAM_ERROR;
 8001250:	f06f 0505 	mvn.w	r5, #5
 8001254:	e7c8      	b.n	80011e8 <FLASH_IF_INT_Erase+0x18>
      ret_status = FLASH_IF_LOCK_ERROR;
 8001256:	f06f 0504 	mvn.w	r5, #4
 800125a:	e7c5      	b.n	80011e8 <FLASH_IF_INT_Erase+0x18>
 800125c:	1fff7000 	.word	0x1fff7000
 8001260:	03fffc00 	.word	0x03fffc00

08001264 <FLASH_IF_INT_Write>:
{
 8001264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001268:	b089      	sub	sp, #36	@ 0x24
 800126a:	9003      	str	r0, [sp, #12]
 800126c:	9204      	str	r2, [sp, #16]
  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 800126e:	2800      	cmp	r0, #0
 8001270:	f000 80b4 	beq.w	80013dc <FLASH_IF_INT_Write+0x178>
 8001274:	4683      	mov	fp, r0
 8001276:	460e      	mov	r6, r1
 8001278:	2900      	cmp	r1, #0
 800127a:	f000 80b3 	beq.w	80013e4 <FLASH_IF_INT_Write+0x180>
 800127e:	f012 0f07 	tst.w	r2, #7
 8001282:	f040 80b3 	bne.w	80013ec <FLASH_IF_INT_Write+0x188>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 8001286:	f010 0307 	ands.w	r3, r0, #7
 800128a:	9305      	str	r3, [sp, #20]
 800128c:	f040 80b2 	bne.w	80013f4 <FLASH_IF_INT_Write+0x190>
  ret_status = FLASH_IF_INT_Clear_Error();
 8001290:	f7ff ff84 	bl	800119c <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 8001294:	9001      	str	r0, [sp, #4]
 8001296:	b118      	cbz	r0, 80012a0 <FLASH_IF_INT_Write+0x3c>
}
 8001298:	9801      	ldr	r0, [sp, #4]
 800129a:	b009      	add	sp, #36	@ 0x24
 800129c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 80012a0:	f003 fd2a 	bl	8004cf8 <HAL_FLASH_Unlock>
 80012a4:	2800      	cmp	r0, #0
 80012a6:	f040 80a9 	bne.w	80013fc <FLASH_IF_INT_Write+0x198>
      start_page_index = PAGE_INDEX(uDest);
 80012aa:	9c03      	ldr	r4, [sp, #12]
 80012ac:	f104 4278 	add.w	r2, r4, #4160749568	@ 0xf8000000
 80012b0:	4b54      	ldr	r3, [pc, #336]	@ (8001404 <FLASH_IF_INT_Write+0x1a0>)
 80012b2:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	@ 0x5e0
 80012b6:	4954      	ldr	r1, [pc, #336]	@ (8001408 <FLASH_IF_INT_Write+0x1a4>)
 80012b8:	ea01 2183 	and.w	r1, r1, r3, lsl #10
 80012bc:	fbb2 f3f1 	udiv	r3, r2, r1
 80012c0:	fb01 2213 	mls	r2, r1, r3, r2
 80012c4:	0ad3      	lsrs	r3, r2, #11
 80012c6:	9306      	str	r3, [sp, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 80012c8:	9b04      	ldr	r3, [sp, #16]
 80012ca:	18e3      	adds	r3, r4, r3
 80012cc:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 80012d0:	3b01      	subs	r3, #1
 80012d2:	fbb3 f0f1 	udiv	r0, r3, r1
 80012d6:	fb01 3310 	mls	r3, r1, r0, r3
 80012da:	0adb      	lsrs	r3, r3, #11
 80012dc:	eba3 23d2 	sub.w	r3, r3, r2, lsr #11
 80012e0:	3301      	adds	r3, #1
      if (number_pages > 1)
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d907      	bls.n	80012f6 <FLASH_IF_INT_Write+0x92>
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 80012e6:	f3c4 090a 	ubfx	r9, r4, #0, #11
 80012ea:	f5c9 6900 	rsb	r9, r9, #2048	@ 0x800
            ret_status = FLASH_IF_WRITE_ERROR;
 80012ee:	f8dd a018 	ldr.w	sl, [sp, #24]
 80012f2:	9307      	str	r3, [sp, #28]
 80012f4:	e031      	b.n	800135a <FLASH_IF_INT_Write+0xf6>
  uint32_t length = uLength;
 80012f6:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80012fa:	e7f8      	b.n	80012ee <FLASH_IF_INT_Write+0x8a>
          current_length = length;
 80012fc:	46c8      	mov	r8, r9
          current_source = uSource;
 80012fe:	4637      	mov	r7, r6
          current_dest = uDest;
 8001300:	465c      	mov	r4, fp
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001302:	9d05      	ldr	r5, [sp, #20]
 8001304:	f8cd b008 	str.w	fp, [sp, #8]
 8001308:	4545      	cmp	r5, r8
 800130a:	d215      	bcs.n	8001338 <FLASH_IF_INT_Write+0xd4>
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 800130c:	eb05 0b07 	add.w	fp, r5, r7
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8001310:	e9db 2300 	ldrd	r2, r3, [fp]
 8001314:	4621      	mov	r1, r4
 8001316:	2001      	movs	r0, #1
 8001318:	f003 fd54 	bl	8004dc4 <HAL_FLASH_Program>
 800131c:	2800      	cmp	r0, #0
 800131e:	d147      	bne.n	80013b0 <FLASH_IF_INT_Write+0x14c>
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 8001320:	6820      	ldr	r0, [r4, #0]
 8001322:	6862      	ldr	r2, [r4, #4]
 8001324:	59e9      	ldr	r1, [r5, r7]
 8001326:	f8db 3004 	ldr.w	r3, [fp, #4]
 800132a:	429a      	cmp	r2, r3
 800132c:	bf08      	it	eq
 800132e:	4288      	cmpeq	r0, r1
 8001330:	d144      	bne.n	80013bc <FLASH_IF_INT_Write+0x158>
            current_dest = current_dest + 8U;
 8001332:	3408      	adds	r4, #8
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001334:	3508      	adds	r5, #8
 8001336:	e7e7      	b.n	8001308 <FLASH_IF_INT_Write+0xa4>
 8001338:	f8dd b008 	ldr.w	fp, [sp, #8]
        if (ret_status != FLASH_IF_OK)
 800133c:	9b01      	ldr	r3, [sp, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d145      	bne.n	80013ce <FLASH_IF_INT_Write+0x16a>
        uDest += length;
 8001342:	44cb      	add	fp, r9
        uSource += length;
 8001344:	444e      	add	r6, r9
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 8001346:	9b04      	ldr	r3, [sp, #16]
 8001348:	eba3 0909 	sub.w	r9, r3, r9
 800134c:	f5b9 6f00 	cmp.w	r9, #2048	@ 0x800
 8001350:	bf28      	it	cs
 8001352:	f44f 6900 	movcs.w	r9, #2048	@ 0x800
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001356:	f10a 0a01 	add.w	sl, sl, #1
 800135a:	9b06      	ldr	r3, [sp, #24]
 800135c:	9a07      	ldr	r2, [sp, #28]
 800135e:	4413      	add	r3, r2
 8001360:	4553      	cmp	r3, sl
 8001362:	d934      	bls.n	80013ce <FLASH_IF_INT_Write+0x16a>
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 8001364:	f50a 3480 	add.w	r4, sl, #65536	@ 0x10000
 8001368:	02e4      	lsls	r4, r4, #11
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 800136a:	4649      	mov	r1, r9
 800136c:	9803      	ldr	r0, [sp, #12]
 800136e:	f7ff fef4 	bl	800115a <FLASH_IF_INT_IsEmpty>
 8001372:	2800      	cmp	r0, #0
 8001374:	d0c2      	beq.n	80012fc <FLASH_IF_INT_Write+0x98>
          if (pAllocatedBuffer == NULL)
 8001376:	4b25      	ldr	r3, [pc, #148]	@ (800140c <FLASH_IF_INT_Write+0x1a8>)
 8001378:	6818      	ldr	r0, [r3, #0]
 800137a:	b328      	cbz	r0, 80013c8 <FLASH_IF_INT_Write+0x164>
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 800137c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001380:	4621      	mov	r1, r4
 8001382:	f7ff fefd 	bl	8001180 <FLASH_IF_INT_Read>
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 8001386:	4b21      	ldr	r3, [pc, #132]	@ (800140c <FLASH_IF_INT_Write+0x1a8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f3cb 000a 	ubfx	r0, fp, #0, #11
 800138e:	fa1f f289 	uxth.w	r2, r9
 8001392:	4631      	mov	r1, r6
 8001394:	4418      	add	r0, r3
 8001396:	f014 fae7 	bl	8015968 <UTIL_MEM_cpy_8>
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 800139a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800139e:	4620      	mov	r0, r4
 80013a0:	f7ff ff16 	bl	80011d0 <FLASH_IF_INT_Erase>
 80013a4:	b9b0      	cbnz	r0, 80013d4 <FLASH_IF_INT_Write+0x170>
          current_source = (uint32_t)pAllocatedBuffer;
 80013a6:	4b19      	ldr	r3, [pc, #100]	@ (800140c <FLASH_IF_INT_Write+0x1a8>)
 80013a8:	681f      	ldr	r7, [r3, #0]
          current_length = FLASH_PAGE_SIZE;
 80013aa:	f44f 6800 	mov.w	r8, #2048	@ 0x800
 80013ae:	e7a8      	b.n	8001302 <FLASH_IF_INT_Write+0x9e>
            ret_status = FLASH_IF_WRITE_ERROR;
 80013b0:	f8dd b008 	ldr.w	fp, [sp, #8]
 80013b4:	f06f 0303 	mvn.w	r3, #3
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	e7bf      	b.n	800133c <FLASH_IF_INT_Write+0xd8>
              ret_status = FLASH_IF_WRITE_ERROR;
 80013bc:	f8dd b008 	ldr.w	fp, [sp, #8]
 80013c0:	f06f 0303 	mvn.w	r3, #3
 80013c4:	9301      	str	r3, [sp, #4]
 80013c6:	e7b9      	b.n	800133c <FLASH_IF_INT_Write+0xd8>
            ret_status = FLASH_IF_PARAM_ERROR;
 80013c8:	f06f 0305 	mvn.w	r3, #5
 80013cc:	9301      	str	r3, [sp, #4]
      HAL_FLASH_Lock();
 80013ce:	f003 fcab 	bl	8004d28 <HAL_FLASH_Lock>
 80013d2:	e761      	b.n	8001298 <FLASH_IF_INT_Write+0x34>
            ret_status = FLASH_IF_ERASE_ERROR;
 80013d4:	f06f 0301 	mvn.w	r3, #1
 80013d8:	9301      	str	r3, [sp, #4]
 80013da:	e7f8      	b.n	80013ce <FLASH_IF_INT_Write+0x16a>
    return FLASH_IF_PARAM_ERROR;
 80013dc:	f06f 0305 	mvn.w	r3, #5
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	e759      	b.n	8001298 <FLASH_IF_INT_Write+0x34>
 80013e4:	f06f 0305 	mvn.w	r3, #5
 80013e8:	9301      	str	r3, [sp, #4]
 80013ea:	e755      	b.n	8001298 <FLASH_IF_INT_Write+0x34>
 80013ec:	f06f 0305 	mvn.w	r3, #5
 80013f0:	9301      	str	r3, [sp, #4]
 80013f2:	e751      	b.n	8001298 <FLASH_IF_INT_Write+0x34>
 80013f4:	f06f 0305 	mvn.w	r3, #5
 80013f8:	9301      	str	r3, [sp, #4]
 80013fa:	e74d      	b.n	8001298 <FLASH_IF_INT_Write+0x34>
      ret_status = FLASH_IF_LOCK_ERROR;
 80013fc:	f06f 0304 	mvn.w	r3, #4
 8001400:	9301      	str	r3, [sp, #4]
 8001402:	e749      	b.n	8001298 <FLASH_IF_INT_Write+0x34>
 8001404:	1fff7000 	.word	0x1fff7000
 8001408:	03fffc00 	.word	0x03fffc00
 800140c:	200001b8 	.word	0x200001b8

08001410 <FLASH_IF_Init>:
  pAllocatedBuffer = (uint8_t *)pAllocRamBuffer;
 8001410:	4b01      	ldr	r3, [pc, #4]	@ (8001418 <FLASH_IF_Init+0x8>)
 8001412:	6018      	str	r0, [r3, #0]
}
 8001414:	2000      	movs	r0, #0
 8001416:	4770      	bx	lr
 8001418:	200001b8 	.word	0x200001b8

0800141c <FLASH_IF_Write>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 800141c:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
 8001420:	d30e      	bcc.n	8001440 <FLASH_IF_Write+0x24>
{
 8001422:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 8001424:	4b09      	ldr	r3, [pc, #36]	@ (800144c <FLASH_IF_Write+0x30>)
 8001426:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	@ 0x5e0
 800142a:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <FLASH_IF_Write+0x34>)
 800142c:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 8001430:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001434:	3b01      	subs	r3, #1
 8001436:	4298      	cmp	r0, r3
 8001438:	d805      	bhi.n	8001446 <FLASH_IF_Write+0x2a>
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 800143a:	f7ff ff13 	bl	8001264 <FLASH_IF_INT_Write>
}
 800143e:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001444:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001446:	f04f 30ff 	mov.w	r0, #4294967295
 800144a:	e7f8      	b.n	800143e <FLASH_IF_Write+0x22>
 800144c:	1fff7000 	.word	0x1fff7000
 8001450:	03fffc00 	.word	0x03fffc00

08001454 <FLASH_IF_Read>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8001454:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
 8001458:	d30e      	bcc.n	8001478 <FLASH_IF_Read+0x24>
{
 800145a:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 800145c:	4b09      	ldr	r3, [pc, #36]	@ (8001484 <FLASH_IF_Read+0x30>)
 800145e:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	@ 0x5e0
 8001462:	4b09      	ldr	r3, [pc, #36]	@ (8001488 <FLASH_IF_Read+0x34>)
 8001464:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 8001468:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800146c:	3b01      	subs	r3, #1
 800146e:	4299      	cmp	r1, r3
 8001470:	d805      	bhi.n	800147e <FLASH_IF_Read+0x2a>
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 8001472:	f7ff fe85 	bl	8001180 <FLASH_IF_INT_Read>
}
 8001476:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001478:	f04f 30ff 	mov.w	r0, #4294967295
}
 800147c:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800147e:	f04f 30ff 	mov.w	r0, #4294967295
 8001482:	e7f8      	b.n	8001476 <FLASH_IF_Read+0x22>
 8001484:	1fff7000 	.word	0x1fff7000
 8001488:	03fffc00 	.word	0x03fffc00

0800148c <FLASH_IF_Erase>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 800148c:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
 8001490:	d30e      	bcc.n	80014b0 <FLASH_IF_Erase+0x24>
{
 8001492:	b508      	push	{r3, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 8001494:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <FLASH_IF_Erase+0x30>)
 8001496:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	@ 0x5e0
 800149a:	4b09      	ldr	r3, [pc, #36]	@ (80014c0 <FLASH_IF_Erase+0x34>)
 800149c:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 80014a0:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80014a4:	3b01      	subs	r3, #1
 80014a6:	4298      	cmp	r0, r3
 80014a8:	d805      	bhi.n	80014b6 <FLASH_IF_Erase+0x2a>
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 80014aa:	f7ff fe91 	bl	80011d0 <FLASH_IF_INT_Erase>
}
 80014ae:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80014b0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80014b4:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80014b6:	f04f 30ff 	mov.w	r0, #4294967295
 80014ba:	e7f8      	b.n	80014ae <FLASH_IF_Erase+0x22>
 80014bc:	1fff7000 	.word	0x1fff7000
 80014c0:	03fffc00 	.word	0x03fffc00

080014c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014c8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ca:	2400      	movs	r4, #0
 80014cc:	9403      	str	r4, [sp, #12]
 80014ce:	9404      	str	r4, [sp, #16]
 80014d0:	9405      	str	r4, [sp, #20]
 80014d2:	9406      	str	r4, [sp, #24]
 80014d4:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014dc:	f042 0202 	orr.w	r2, r2, #2
 80014e0:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014e4:	f002 0202 	and.w	r2, r2, #2
 80014e8:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80014ea:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014ee:	f042 0204 	orr.w	r2, r2, #4
 80014f2:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014f6:	f002 0204 	and.w	r2, r2, #4
 80014fa:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80014fc:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001500:	f042 0201 	orr.w	r2, r2, #1
 8001504:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800150e:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 8001510:	4e26      	ldr	r6, [pc, #152]	@ (80015ac <MX_GPIO_Init+0xe8>)
 8001512:	4622      	mov	r2, r4
 8001514:	f44f 413a 	mov.w	r1, #47616	@ 0xba00
 8001518:	4630      	mov	r0, r6
 800151a:	f003 fe6b 	bl	80051f4 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 800151e:	f44f 430a 	mov.w	r3, #35328	@ 0x8a00
 8001522:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001524:	2501      	movs	r5, #1
 8001526:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800152a:	2302      	movs	r3, #2
 800152c:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152e:	a903      	add	r1, sp, #12
 8001530:	4630      	mov	r0, r6
 8001532:	f003 fd0f 	bl	8004f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT1_Pin BUT2_Pin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 8001536:	f04f 0803 	mov.w	r8, #3
 800153a:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800153e:	f44f 1704 	mov.w	r7, #2162688	@ 0x210000
 8001542:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001544:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001546:	a903      	add	r1, sp, #12
 8001548:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800154c:	f003 fd02 	bl	8004f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PROB2_Pin PROB1_Pin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 8001550:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001554:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001556:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155a:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155e:	a903      	add	r1, sp, #12
 8001560:	4630      	mov	r0, r6
 8001562:	f003 fcf7 	bl	8004f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT3_Pin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 8001566:	2340      	movs	r3, #64	@ 0x40
 8001568:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800156a:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800156c:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 800156e:	a903      	add	r1, sp, #12
 8001570:	480f      	ldr	r0, [pc, #60]	@ (80015b0 <MX_GPIO_Init+0xec>)
 8001572:	f003 fcef 	bl	8004f54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001576:	4622      	mov	r2, r4
 8001578:	2105      	movs	r1, #5
 800157a:	2006      	movs	r0, #6
 800157c:	f003 f8f2 	bl	8004764 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001580:	2006      	movs	r0, #6
 8001582:	f003 f8ff 	bl	8004784 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001586:	4622      	mov	r2, r4
 8001588:	2105      	movs	r1, #5
 800158a:	2007      	movs	r0, #7
 800158c:	f003 f8ea 	bl	8004764 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001590:	2007      	movs	r0, #7
 8001592:	f003 f8f7 	bl	8004784 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001596:	4622      	mov	r2, r4
 8001598:	2105      	movs	r1, #5
 800159a:	2016      	movs	r0, #22
 800159c:	f003 f8e2 	bl	8004764 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015a0:	2016      	movs	r0, #22
 80015a2:	f003 f8ef 	bl	8004784 <HAL_NVIC_EnableIRQ>

}
 80015a6:	b008      	add	sp, #32
 80015a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015ac:	48000400 	.word	0x48000400
 80015b0:	48000800 	.word	0x48000800

080015b4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015b4:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015b6:	4812      	ldr	r0, [pc, #72]	@ (8001600 <MX_I2C1_Init+0x4c>)
 80015b8:	4b12      	ldr	r3, [pc, #72]	@ (8001604 <MX_I2C1_Init+0x50>)
 80015ba:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x10805D88;
 80015bc:	4b12      	ldr	r3, [pc, #72]	@ (8001608 <MX_I2C1_Init+0x54>)
 80015be:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015c4:	2201      	movs	r2, #1
 80015c6:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015c8:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015ca:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015cc:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015ce:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015d0:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015d2:	f003 fecf 	bl	8005374 <HAL_I2C_Init>
 80015d6:	b950      	cbnz	r0, 80015ee <MX_I2C1_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015d8:	2100      	movs	r1, #0
 80015da:	4809      	ldr	r0, [pc, #36]	@ (8001600 <MX_I2C1_Init+0x4c>)
 80015dc:	f004 fd82 	bl	80060e4 <HAL_I2CEx_ConfigAnalogFilter>
 80015e0:	b940      	cbnz	r0, 80015f4 <MX_I2C1_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015e2:	2100      	movs	r1, #0
 80015e4:	4806      	ldr	r0, [pc, #24]	@ (8001600 <MX_I2C1_Init+0x4c>)
 80015e6:	f004 fdab 	bl	8006140 <HAL_I2CEx_ConfigDigitalFilter>
 80015ea:	b930      	cbnz	r0, 80015fa <MX_I2C1_Init+0x46>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015ec:	bd08      	pop	{r3, pc}
    Error_Handler();
 80015ee:	f000 f8ca 	bl	8001786 <Error_Handler>
 80015f2:	e7f1      	b.n	80015d8 <MX_I2C1_Init+0x24>
    Error_Handler();
 80015f4:	f000 f8c7 	bl	8001786 <Error_Handler>
 80015f8:	e7f3      	b.n	80015e2 <MX_I2C1_Init+0x2e>
    Error_Handler();
 80015fa:	f000 f8c4 	bl	8001786 <Error_Handler>
}
 80015fe:	e7f5      	b.n	80015ec <MX_I2C1_Init+0x38>
 8001600:	200001bc 	.word	0x200001bc
 8001604:	40005400 	.word	0x40005400
 8001608:	10805d88 	.word	0x10805d88

0800160c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800160c:	b530      	push	{r4, r5, lr}
 800160e:	b097      	sub	sp, #92	@ 0x5c
 8001610:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001612:	2100      	movs	r1, #0
 8001614:	9111      	str	r1, [sp, #68]	@ 0x44
 8001616:	9112      	str	r1, [sp, #72]	@ 0x48
 8001618:	9113      	str	r1, [sp, #76]	@ 0x4c
 800161a:	9114      	str	r1, [sp, #80]	@ 0x50
 800161c:	9115      	str	r1, [sp, #84]	@ 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800161e:	2238      	movs	r2, #56	@ 0x38
 8001620:	a803      	add	r0, sp, #12
 8001622:	f014 fd6b 	bl	80160fc <memset>
  if(i2cHandle->Instance==I2C1)
 8001626:	6822      	ldr	r2, [r4, #0]
 8001628:	4b22      	ldr	r3, [pc, #136]	@ (80016b4 <HAL_I2C_MspInit+0xa8>)
 800162a:	429a      	cmp	r2, r3
 800162c:	d001      	beq.n	8001632 <HAL_I2C_MspInit+0x26>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800162e:	b017      	add	sp, #92	@ 0x5c
 8001630:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001632:	2340      	movs	r3, #64	@ 0x40
 8001634:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001636:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800163a:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800163c:	a803      	add	r0, sp, #12
 800163e:	f005 fbdb 	bl	8006df8 <HAL_RCCEx_PeriphCLKConfig>
 8001642:	2800      	cmp	r0, #0
 8001644:	d132      	bne.n	80016ac <HAL_I2C_MspInit+0xa0>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001646:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
 800164a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800164c:	f043 0302 	orr.w	r3, r3, #2
 8001650:	64e3      	str	r3, [r4, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001652:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 800165a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800165c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001660:	9311      	str	r3, [sp, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001662:	2312      	movs	r3, #18
 8001664:	9312      	str	r3, [sp, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2500      	movs	r5, #0
 8001668:	9513      	str	r5, [sp, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166a:	9514      	str	r5, [sp, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800166c:	2304      	movs	r3, #4
 800166e:	9315      	str	r3, [sp, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001670:	a911      	add	r1, sp, #68	@ 0x44
 8001672:	4811      	ldr	r0, [pc, #68]	@ (80016b8 <HAL_I2C_MspInit+0xac>)
 8001674:	f003 fc6e 	bl	8004f54 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001678:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800167a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800167e:	65a3      	str	r3, [r4, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001680:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001682:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001686:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001688:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800168a:	462a      	mov	r2, r5
 800168c:	2105      	movs	r1, #5
 800168e:	201e      	movs	r0, #30
 8001690:	f003 f868 	bl	8004764 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001694:	201e      	movs	r0, #30
 8001696:	f003 f875 	bl	8004784 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800169a:	462a      	mov	r2, r5
 800169c:	2105      	movs	r1, #5
 800169e:	201f      	movs	r0, #31
 80016a0:	f003 f860 	bl	8004764 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80016a4:	201f      	movs	r0, #31
 80016a6:	f003 f86d 	bl	8004784 <HAL_NVIC_EnableIRQ>
}
 80016aa:	e7c0      	b.n	800162e <HAL_I2C_MspInit+0x22>
      Error_Handler();
 80016ac:	f000 f86b 	bl	8001786 <Error_Handler>
 80016b0:	e7c9      	b.n	8001646 <HAL_I2C_MspInit+0x3a>
 80016b2:	bf00      	nop
 80016b4:	40005400 	.word	0x40005400
 80016b8:	48000400 	.word	0x48000400

080016bc <i2c_read>:
  }
}

/* USER CODE BEGIN 1 */
int8_t i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len,
		void *intf_ptr) {
 80016bc:	b570      	push	{r4, r5, r6, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	f88d 0007 	strb.w	r0, [sp, #7]

	if (reg_data == NULL || intf_ptr == NULL || len == 0) {
 80016c4:	b341      	cbz	r1, 8001718 <i2c_read+0x5c>
 80016c6:	4614      	mov	r4, r2
 80016c8:	460e      	mov	r6, r1
 80016ca:	b33b      	cbz	r3, 800171c <i2c_read+0x60>
 80016cc:	b912      	cbnz	r2, 80016d4 <i2c_read+0x18>
		return HAL_ERROR;
 80016ce:	2001      	movs	r0, #1
	}

	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);

	return status;
}
 80016d0:	b002      	add	sp, #8
 80016d2:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t dev_addr = *((uint8_t*) intf_ptr);
 80016d4:	781d      	ldrb	r5, [r3, #0]
	status = HAL_I2C_Master_Transmit_IT(&hi2c1, dev_addr << 1, &reg_addr, 1);
 80016d6:	006d      	lsls	r5, r5, #1
 80016d8:	2301      	movs	r3, #1
 80016da:	f10d 0207 	add.w	r2, sp, #7
 80016de:	4629      	mov	r1, r5
 80016e0:	480f      	ldr	r0, [pc, #60]	@ (8001720 <i2c_read+0x64>)
 80016e2:	f003 fea5 	bl	8005430 <HAL_I2C_Master_Transmit_IT>
	if (status != HAL_OK) {
 80016e6:	b998      	cbnz	r0, 8001710 <i2c_read+0x54>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80016e8:	480d      	ldr	r0, [pc, #52]	@ (8001720 <i2c_read+0x64>)
 80016ea:	f004 fcf8 	bl	80060de <HAL_I2C_GetState>
 80016ee:	2820      	cmp	r0, #32
 80016f0:	d1fa      	bne.n	80016e8 <i2c_read+0x2c>
	status = HAL_I2C_Master_Receive_IT(&hi2c1, dev_addr << 1, reg_data, len);
 80016f2:	b2a3      	uxth	r3, r4
 80016f4:	4632      	mov	r2, r6
 80016f6:	4629      	mov	r1, r5
 80016f8:	4809      	ldr	r0, [pc, #36]	@ (8001720 <i2c_read+0x64>)
 80016fa:	f003 fee5 	bl	80054c8 <HAL_I2C_Master_Receive_IT>
	if (status != HAL_OK) {
 80016fe:	4604      	mov	r4, r0
 8001700:	b940      	cbnz	r0, 8001714 <i2c_read+0x58>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8001702:	4807      	ldr	r0, [pc, #28]	@ (8001720 <i2c_read+0x64>)
 8001704:	f004 fceb 	bl	80060de <HAL_I2C_GetState>
 8001708:	2820      	cmp	r0, #32
 800170a:	d1fa      	bne.n	8001702 <i2c_read+0x46>
	return status;
 800170c:	b260      	sxtb	r0, r4
 800170e:	e7df      	b.n	80016d0 <i2c_read+0x14>
		return status;
 8001710:	b240      	sxtb	r0, r0
 8001712:	e7dd      	b.n	80016d0 <i2c_read+0x14>
		return status;
 8001714:	b240      	sxtb	r0, r0
 8001716:	e7db      	b.n	80016d0 <i2c_read+0x14>
		return HAL_ERROR;
 8001718:	2001      	movs	r0, #1
 800171a:	e7d9      	b.n	80016d0 <i2c_read+0x14>
 800171c:	2001      	movs	r0, #1
 800171e:	e7d7      	b.n	80016d0 <i2c_read+0x14>
 8001720:	200001bc 	.word	0x200001bc

08001724 <i2c_write>:

int8_t i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len,
		void *intf_ptr) {

	if (reg_data == NULL || intf_ptr == NULL || len == 0) {
 8001724:	b331      	cbz	r1, 8001774 <i2c_write+0x50>
		void *intf_ptr) {
 8001726:	b5b0      	push	{r4, r5, r7, lr}
 8001728:	af00      	add	r7, sp, #0
 800172a:	4614      	mov	r4, r2
	if (reg_data == NULL || intf_ptr == NULL || len == 0) {
 800172c:	b323      	cbz	r3, 8001778 <i2c_write+0x54>
 800172e:	b912      	cbnz	r2, 8001736 <i2c_write+0x12>
		return HAL_ERROR;
 8001730:	2001      	movs	r0, #1
	}

	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);

	return status;
}
 8001732:	46bd      	mov	sp, r7
 8001734:	bdb0      	pop	{r4, r5, r7, pc}
	uint8_t dev_addr = *((uint8_t*) intf_ptr);
 8001736:	781d      	ldrb	r5, [r3, #0]
	uint8_t buffer[len + 1];
 8001738:	f102 0308 	add.w	r3, r2, #8
 800173c:	f023 0307 	bic.w	r3, r3, #7
 8001740:	ebad 0d03 	sub.w	sp, sp, r3
	buffer[0] = reg_addr;
 8001744:	466b      	mov	r3, sp
 8001746:	f803 0b01 	strb.w	r0, [r3], #1
	memcpy(&buffer[1], reg_data, len);
 800174a:	4618      	mov	r0, r3
 800174c:	f014 fd02 	bl	8016154 <memcpy>
	status = HAL_I2C_Master_Transmit_IT(&hi2c1, dev_addr << 1, buffer, len + 1);
 8001750:	1c63      	adds	r3, r4, #1
 8001752:	b29b      	uxth	r3, r3
 8001754:	466a      	mov	r2, sp
 8001756:	0069      	lsls	r1, r5, #1
 8001758:	4808      	ldr	r0, [pc, #32]	@ (800177c <i2c_write+0x58>)
 800175a:	f003 fe69 	bl	8005430 <HAL_I2C_Master_Transmit_IT>
	if (status != HAL_OK) {
 800175e:	4604      	mov	r4, r0
 8001760:	b930      	cbnz	r0, 8001770 <i2c_write+0x4c>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8001762:	4806      	ldr	r0, [pc, #24]	@ (800177c <i2c_write+0x58>)
 8001764:	f004 fcbb 	bl	80060de <HAL_I2C_GetState>
 8001768:	2820      	cmp	r0, #32
 800176a:	d1fa      	bne.n	8001762 <i2c_write+0x3e>
	return status;
 800176c:	b260      	sxtb	r0, r4
 800176e:	e7e0      	b.n	8001732 <i2c_write+0xe>
		return status;
 8001770:	b240      	sxtb	r0, r0
 8001772:	e7de      	b.n	8001732 <i2c_write+0xe>
		return HAL_ERROR;
 8001774:	2001      	movs	r0, #1
}
 8001776:	4770      	bx	lr
		return HAL_ERROR;
 8001778:	2001      	movs	r0, #1
 800177a:	e7da      	b.n	8001732 <i2c_write+0xe>
 800177c:	200001bc 	.word	0x200001bc

08001780 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
	//LOGGER_LOG("TX OK\n");
}
 8001780:	4770      	bx	lr

08001782 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
	//LOGGER_LOG("RX OK\n");
}
 8001782:	4770      	bx	lr

08001784 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
    if (hi2c->Instance == I2C1) {
    //LOGGER_LOG("I2C Error: 0x%08X\n", HAL_I2C_GetError(hi2c));
    }
}
 8001784:	4770      	bx	lr

08001786 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001786:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001788:	e7fe      	b.n	8001788 <Error_Handler+0x2>

0800178a <SystemClock_Config>:
{
 800178a:	b510      	push	{r4, lr}
 800178c:	b09a      	sub	sp, #104	@ 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800178e:	2248      	movs	r2, #72	@ 0x48
 8001790:	2100      	movs	r1, #0
 8001792:	a808      	add	r0, sp, #32
 8001794:	f014 fcb2 	bl	80160fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001798:	2400      	movs	r4, #0
 800179a:	9401      	str	r4, [sp, #4]
 800179c:	9402      	str	r4, [sp, #8]
 800179e:	9403      	str	r4, [sp, #12]
 80017a0:	9404      	str	r4, [sp, #16]
 80017a2:	9405      	str	r4, [sp, #20]
 80017a4:	9406      	str	r4, [sp, #24]
 80017a6:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 80017a8:	f004 fcf6 	bl	8006198 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80017ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017b0:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80017b4:	f023 0318 	bic.w	r3, r3, #24
 80017b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017bc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80017c0:	6813      	ldr	r3, [r2, #0]
 80017c2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	6813      	ldr	r3, [r2, #0]
 80017ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80017d6:	2324      	movs	r3, #36	@ 0x24
 80017d8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80017da:	2381      	movs	r3, #129	@ 0x81
 80017dc:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017de:	2301      	movs	r3, #1
 80017e0:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80017e2:	9411      	str	r4, [sp, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80017e4:	23b0      	movs	r3, #176	@ 0xb0
 80017e6:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017e8:	9413      	str	r4, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ea:	a808      	add	r0, sp, #32
 80017ec:	f004 fe6e 	bl	80064cc <HAL_RCC_OscConfig>
 80017f0:	b970      	cbnz	r0, 8001810 <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80017f2:	234f      	movs	r3, #79	@ 0x4f
 80017f4:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80017f6:	2300      	movs	r3, #0
 80017f8:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017fa:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017fc:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017fe:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001800:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001802:	2102      	movs	r1, #2
 8001804:	a801      	add	r0, sp, #4
 8001806:	f005 f993 	bl	8006b30 <HAL_RCC_ClockConfig>
 800180a:	b918      	cbnz	r0, 8001814 <SystemClock_Config+0x8a>
}
 800180c:	b01a      	add	sp, #104	@ 0x68
 800180e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001810:	f7ff ffb9 	bl	8001786 <Error_Handler>
    Error_Handler();
 8001814:	f7ff ffb7 	bl	8001786 <Error_Handler>

08001818 <main>:
{
 8001818:	b508      	push	{r3, lr}
  HAL_Init();
 800181a:	f002 fa17 	bl	8003c4c <HAL_Init>
  SystemClock_Config();
 800181e:	f7ff ffb4 	bl	800178a <SystemClock_Config>
  MX_GPIO_Init();
 8001822:	f7ff fe4f 	bl	80014c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001826:	f7ff fec5 	bl	80015b4 <MX_I2C1_Init>
  osKernelInitialize();
 800182a:	f007 fbb7 	bl	8008f9c <osKernelInitialize>
  MX_FREERTOS_Init();
 800182e:	f7ff fc55 	bl	80010dc <MX_FREERTOS_Init>
  osKernelStart();
 8001832:	f007 fbd1 	bl	8008fd8 <osKernelStart>
  while (1)
 8001836:	e7fe      	b.n	8001836 <main+0x1e>

08001838 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001838:	b500      	push	{lr}
 800183a:	b08d      	sub	sp, #52	@ 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 800183c:	222c      	movs	r2, #44	@ 0x2c
 800183e:	2100      	movs	r1, #0
 8001840:	a801      	add	r0, sp, #4
 8001842:	f014 fc5b 	bl	80160fc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001846:	4819      	ldr	r0, [pc, #100]	@ (80018ac <MX_RTC_Init+0x74>)
 8001848:	4b19      	ldr	r3, [pc, #100]	@ (80018b0 <MX_RTC_Init+0x78>)
 800184a:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 800184c:	231f      	movs	r3, #31
 800184e:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001850:	2300      	movs	r3, #0
 8001852:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001854:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001856:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001858:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800185c:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800185e:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001860:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001864:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001866:	f005 fcaf 	bl	80071c8 <HAL_RTC_Init>
 800186a:	b9a8      	cbnz	r0, 8001898 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800186c:	480f      	ldr	r0, [pc, #60]	@ (80018ac <MX_RTC_Init+0x74>)
 800186e:	f005 fdef 	bl	8007450 <HAL_RTCEx_SetSSRU_IT>
 8001872:	b9a0      	cbnz	r0, 800189e <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001874:	2200      	movs	r2, #0
 8001876:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001878:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800187a:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800187c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001880:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001882:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001886:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001888:	a901      	add	r1, sp, #4
 800188a:	4808      	ldr	r0, [pc, #32]	@ (80018ac <MX_RTC_Init+0x74>)
 800188c:	f005 fd04 	bl	8007298 <HAL_RTC_SetAlarm_IT>
 8001890:	b940      	cbnz	r0, 80018a4 <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001892:	b00d      	add	sp, #52	@ 0x34
 8001894:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001898:	f7ff ff75 	bl	8001786 <Error_Handler>
 800189c:	e7e6      	b.n	800186c <MX_RTC_Init+0x34>
    Error_Handler();
 800189e:	f7ff ff72 	bl	8001786 <Error_Handler>
 80018a2:	e7e7      	b.n	8001874 <MX_RTC_Init+0x3c>
    Error_Handler();
 80018a4:	f7ff ff6f 	bl	8001786 <Error_Handler>
}
 80018a8:	e7f3      	b.n	8001892 <MX_RTC_Init+0x5a>
 80018aa:	bf00      	nop
 80018ac:	20000210 	.word	0x20000210
 80018b0:	40002800 	.word	0x40002800

080018b4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80018b4:	b510      	push	{r4, lr}
 80018b6:	b090      	sub	sp, #64	@ 0x40
 80018b8:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018ba:	2238      	movs	r2, #56	@ 0x38
 80018bc:	2100      	movs	r1, #0
 80018be:	a802      	add	r0, sp, #8
 80018c0:	f014 fc1c 	bl	80160fc <memset>
  if(rtcHandle->Instance==RTC)
 80018c4:	6822      	ldr	r2, [r4, #0]
 80018c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001930 <HAL_RTC_MspInit+0x7c>)
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d001      	beq.n	80018d0 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80018cc:	b010      	add	sp, #64	@ 0x40
 80018ce:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80018d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018d4:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80018d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018da:	930f      	str	r3, [sp, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018dc:	a802      	add	r0, sp, #8
 80018de:	f005 fa8b 	bl	8006df8 <HAL_RCCEx_PeriphCLKConfig>
 80018e2:	bb08      	cbnz	r0, 8001928 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80018e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018e8:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80018ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 80018f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80018f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80018fa:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80018fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001902:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001904:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 5, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	2105      	movs	r1, #5
 800190a:	2002      	movs	r0, #2
 800190c:	f002 ff2a 	bl	8004764 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001910:	2002      	movs	r0, #2
 8001912:	f002 ff37 	bl	8004784 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	2105      	movs	r1, #5
 800191a:	202a      	movs	r0, #42	@ 0x2a
 800191c:	f002 ff22 	bl	8004764 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001920:	202a      	movs	r0, #42	@ 0x2a
 8001922:	f002 ff2f 	bl	8004784 <HAL_NVIC_EnableIRQ>
}
 8001926:	e7d1      	b.n	80018cc <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8001928:	f7ff ff2d 	bl	8001786 <Error_Handler>
 800192c:	e7da      	b.n	80018e4 <HAL_RTC_MspInit+0x30>
 800192e:	bf00      	nop
 8001930:	40002800 	.word	0x40002800

08001934 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001934:	4770      	bx	lr

08001936 <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001936:	4770      	bx	lr

08001938 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001938:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 800193a:	f002 f99d 	bl	8003c78 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 800193e:	2001      	movs	r0, #1
 8001940:	4b02      	ldr	r3, [pc, #8]	@ (800194c <PWR_EnterStopMode+0x14>)
 8001942:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001946:	f004 fc8b 	bl	8006260 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 800194a:	bd08      	pop	{r3, pc}
 800194c:	58000400 	.word	0x58000400

08001950 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 8001950:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001952:	f002 f998 	bl	8003c86 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001956:	bd08      	pop	{r3, pc}

08001958 <PWR_ExitStopMode>:
{
 8001958:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 800195a:	f002 f994 	bl	8003c86 <HAL_ResumeTick>
  vcom_Resume();
 800195e:	f000 fc3d 	bl	80021dc <vcom_Resume>
}
 8001962:	bd08      	pop	{r3, pc}

08001964 <PWR_EnterSleepMode>:
{
 8001964:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 8001966:	f002 f987 	bl	8003c78 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800196a:	2101      	movs	r1, #1
 800196c:	2000      	movs	r0, #0
 800196e:	f004 fc1b 	bl	80061a8 <HAL_PWR_EnterSLEEPMode>
}
 8001972:	bd08      	pop	{r3, pc}

08001974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001974:	b508      	push	{r3, lr}

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	210f      	movs	r1, #15
 800197a:	f06f 0001 	mvn.w	r0, #1
 800197e:	f002 fef1 	bl	8004764 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001982:	bd08      	pop	{r3, pc}

08001984 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <NMI_Handler>

08001986 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001986:	e7fe      	b.n	8001986 <HardFault_Handler>

08001988 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001988:	e7fe      	b.n	8001988 <MemManage_Handler>

0800198a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800198a:	e7fe      	b.n	800198a <BusFault_Handler>

0800198c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800198c:	e7fe      	b.n	800198c <UsageFault_Handler>

0800198e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800198e:	4770      	bx	lr

08001990 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001990:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001992:	4802      	ldr	r0, [pc, #8]	@ (800199c <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8001994:	f005 fd88 	bl	80074a8 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001998:	bd08      	pop	{r3, pc}
 800199a:	bf00      	nop
 800199c:	20000210 	.word	0x20000210

080019a0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80019a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 80019a2:	2001      	movs	r0, #1
 80019a4:	f003 fc34 	bl	8005210 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80019a8:	bd08      	pop	{r3, pc}

080019aa <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80019aa:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 80019ac:	2002      	movs	r0, #2
 80019ae:	f003 fc2f 	bl	8005210 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80019b2:	bd08      	pop	{r3, pc}

080019b4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80019b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80019b6:	4802      	ldr	r0, [pc, #8]	@ (80019c0 <DMA1_Channel5_IRQHandler+0xc>)
 80019b8:	f003 f8ea 	bl	8004b90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80019bc:	bd08      	pop	{r3, pc}
 80019be:	bf00      	nop
 80019c0:	20000260 	.word	0x20000260

080019c4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 80019c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 80019c6:	2040      	movs	r0, #64	@ 0x40
 80019c8:	f003 fc22 	bl	8005210 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80019cc:	bd08      	pop	{r3, pc}
	...

080019d0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 Event Interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80019d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80019d2:	4802      	ldr	r0, [pc, #8]	@ (80019dc <I2C1_EV_IRQHandler+0xc>)
 80019d4:	f003 fdc4 	bl	8005560 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80019d8:	bd08      	pop	{r3, pc}
 80019da:	bf00      	nop
 80019dc:	200001bc 	.word	0x200001bc

080019e0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 Error Interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80019e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80019e2:	4802      	ldr	r0, [pc, #8]	@ (80019ec <I2C1_ER_IRQHandler+0xc>)
 80019e4:	f004 fb39 	bl	800605a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80019e8:	bd08      	pop	{r3, pc}
 80019ea:	bf00      	nop
 80019ec:	200001bc 	.word	0x200001bc

080019f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80019f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019f2:	4802      	ldr	r0, [pc, #8]	@ (80019fc <USART2_IRQHandler+0xc>)
 80019f4:	f006 fa1a 	bl	8007e2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019f8:	bd08      	pop	{r3, pc}
 80019fa:	bf00      	nop
 80019fc:	200002c0 	.word	0x200002c0

08001a00 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001a00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001a02:	4802      	ldr	r0, [pc, #8]	@ (8001a0c <RTC_Alarm_IRQHandler+0xc>)
 8001a04:	f005 fb5a 	bl	80070bc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001a08:	bd08      	pop	{r3, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000210 	.word	0x20000210

08001a10 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001a10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001a12:	4802      	ldr	r0, [pc, #8]	@ (8001a1c <SUBGHZ_Radio_IRQHandler+0xc>)
 8001a14:	f006 f800 	bl	8007a18 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001a18:	bd08      	pop	{r3, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000248 	.word	0x20000248

08001a20 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001a20:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001a22:	4805      	ldr	r0, [pc, #20]	@ (8001a38 <MX_SUBGHZ_Init+0x18>)
 8001a24:	2308      	movs	r3, #8
 8001a26:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001a28:	f005 fd74 	bl	8007514 <HAL_SUBGHZ_Init>
 8001a2c:	b900      	cbnz	r0, 8001a30 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001a2e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001a30:	f7ff fea9 	bl	8001786 <Error_Handler>
}
 8001a34:	e7fb      	b.n	8001a2e <MX_SUBGHZ_Init+0xe>
 8001a36:	bf00      	nop
 8001a38:	20000248 	.word	0x20000248

08001a3c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001a3c:	b500      	push	{lr}
 8001a3e:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001a40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a44:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001a46:	f042 0201 	orr.w	r2, r2, #1
 8001a4a:	665a      	str	r2, [r3, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001a4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001a54:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 5, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2105      	movs	r1, #5
 8001a5a:	2032      	movs	r0, #50	@ 0x32
 8001a5c:	f002 fe82 	bl	8004764 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001a60:	2032      	movs	r0, #50	@ 0x32
 8001a62:	f002 fe8f 	bl	8004784 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001a66:	b003      	add	sp, #12
 8001a68:	f85d fb04 	ldr.w	pc, [sp], #4

08001a6c <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001a6c:	b40c      	push	{r2, r3}
 8001a6e:	b500      	push	{lr}
 8001a70:	b083      	sub	sp, #12
 8001a72:	ab04      	add	r3, sp, #16
 8001a74:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001a78:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001a7a:	f014 fa7b 	bl	8015f74 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001a7e:	b003      	add	sp, #12
 8001a80:	f85d eb04 	ldr.w	lr, [sp], #4
 8001a84:	b002      	add	sp, #8
 8001a86:	4770      	bx	lr

08001a88 <TimestampNow>:
{
 8001a88:	b530      	push	{r4, r5, lr}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	4604      	mov	r4, r0
 8001a8e:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001a90:	a802      	add	r0, sp, #8
 8001a92:	f013 ffdd 	bl	8015a50 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001a96:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	9b02      	ldr	r3, [sp, #8]
 8001a9e:	4a05      	ldr	r2, [pc, #20]	@ (8001ab4 <TimestampNow+0x2c>)
 8001aa0:	2110      	movs	r1, #16
 8001aa2:	4620      	mov	r0, r4
 8001aa4:	f7ff ffe2 	bl	8001a6c <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	f7fe fb69 	bl	8000180 <strlen>
 8001aae:	8028      	strh	r0, [r5, #0]
}
 8001ab0:	b005      	add	sp, #20
 8001ab2:	bd30      	pop	{r4, r5, pc}
 8001ab4:	08016308 	.word	0x08016308

08001ab8 <SystemApp_Init>:
{
 8001ab8:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001aba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001abe:	6893      	ldr	r3, [r2, #8]
 8001ac0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001ac4:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 8001ac6:	f014 f847 	bl	8015b58 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001aca:	2401      	movs	r4, #1
 8001acc:	4b0e      	ldr	r3, [pc, #56]	@ (8001b08 <SystemApp_Init+0x50>)
 8001ace:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8001ad0:	f000 f8ba 	bl	8001c48 <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8001ad4:	f013 fdbe 	bl	8015654 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001ad8:	480c      	ldr	r0, [pc, #48]	@ (8001b0c <SystemApp_Init+0x54>)
 8001ada:	f013 fdd5 	bl	8015688 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001ade:	4b0c      	ldr	r3, [pc, #48]	@ (8001b10 <SystemApp_Init+0x58>)
 8001ae0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ae4:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001ae6:	2002      	movs	r0, #2
 8001ae8:	f013 fdd4 	bl	8015694 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8001aec:	f7ff fa14 	bl	8000f18 <SYS_InitMeasurement>
  EnvSensors_Init();
 8001af0:	f000 f912 	bl	8001d18 <EnvSensors_Init>
  initialize_bme280_sensor();
 8001af4:	f001 ff36 	bl	8003964 <initialize_bme280_sensor>
  UTIL_LPM_Init();
 8001af8:	f013 fedc 	bl	80158b4 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001afc:	4621      	mov	r1, r4
 8001afe:	4620      	mov	r0, r4
 8001b00:	f013 fef8 	bl	80158f4 <UTIL_LPM_SetOffMode>
}
 8001b04:	bd10      	pop	{r4, pc}
 8001b06:	bf00      	nop
 8001b08:	20000254 	.word	0x20000254
 8001b0c:	08001a89 	.word	0x08001a89
 8001b10:	58004000 	.word	0x58004000

08001b14 <GetBatteryLevel>:
{
 8001b14:	b508      	push	{r3, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001b16:	f7ff fa07 	bl	8000f28 <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 8001b1a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001b1e:	4298      	cmp	r0, r3
 8001b20:	d80d      	bhi.n	8001b3e <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 8001b22:	f5b0 6fe1 	cmp.w	r0, #1800	@ 0x708
 8001b26:	d30c      	bcc.n	8001b42 <GetBatteryLevel+0x2e>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001b28:	f5a0 60e1 	sub.w	r0, r0, #1800	@ 0x708
 8001b2c:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 8001b30:	0040      	lsls	r0, r0, #1
 8001b32:	4b05      	ldr	r3, [pc, #20]	@ (8001b48 <GetBatteryLevel+0x34>)
 8001b34:	fba3 3000 	umull	r3, r0, r3, r0
 8001b38:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 8001b3c:	e000      	b.n	8001b40 <GetBatteryLevel+0x2c>
    batteryLevel = LORAWAN_MAX_BAT;
 8001b3e:	20fe      	movs	r0, #254	@ 0xfe
}
 8001b40:	bd08      	pop	{r3, pc}
    batteryLevel = 0;
 8001b42:	2000      	movs	r0, #0
 8001b44:	e7fc      	b.n	8001b40 <GetBatteryLevel+0x2c>
 8001b46:	bf00      	nop
 8001b48:	1b4e81b5 	.word	0x1b4e81b5

08001b4c <GetTemperatureLevel>:
{
 8001b4c:	b500      	push	{lr}
 8001b4e:	b087      	sub	sp, #28
  EnvSensors_Read(&sensor_data);
 8001b50:	4668      	mov	r0, sp
 8001b52:	f000 f8c5 	bl	8001ce0 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001b56:	9801      	ldr	r0, [sp, #4]
 8001b58:	f7fe ff48 	bl	80009ec <__aeabi_f2iz>
}
 8001b5c:	b200      	sxth	r0, r0
 8001b5e:	b007      	add	sp, #28
 8001b60:	f85d fb04 	ldr.w	pc, [sp], #4

08001b64 <GetUniqueId>:
{
 8001b64:	b538      	push	{r3, r4, r5, lr}
 8001b66:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001b68:	4b18      	ldr	r3, [pc, #96]	@ (8001bcc <GetUniqueId+0x68>)
 8001b6a:	f8d3 3580 	ldr.w	r3, [r3, #1408]	@ 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b72:	d013      	beq.n	8001b9c <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 8001b74:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 8001b76:	0a1a      	lsrs	r2, r3, #8
 8001b78:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 8001b7a:	0c1a      	lsrs	r2, r3, #16
 8001b7c:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 8001b7e:	0e1b      	lsrs	r3, r3, #24
 8001b80:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001b82:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <GetUniqueId+0x68>)
 8001b84:	f8d3 2584 	ldr.w	r2, [r3, #1412]	@ 0x584
    id[3] = val & 0xFF;
 8001b88:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001b8a:	f8d3 3584 	ldr.w	r3, [r3, #1412]	@ 0x584
 8001b8e:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 8001b90:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 8001b92:	0c1a      	lsrs	r2, r3, #16
 8001b94:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 8001b96:	0e1b      	lsrs	r3, r3, #24
 8001b98:	7003      	strb	r3, [r0, #0]
}
 8001b9a:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001b9c:	f002 f87a 	bl	8003c94 <HAL_GetUIDw0>
 8001ba0:	4605      	mov	r5, r0
 8001ba2:	f002 f883 	bl	8003cac <HAL_GetUIDw2>
 8001ba6:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001ba8:	f002 f87a 	bl	8003ca0 <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 8001bac:	0e2b      	lsrs	r3, r5, #24
 8001bae:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 8001bb0:	0c2b      	lsrs	r3, r5, #16
 8001bb2:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 8001bb4:	0a2b      	lsrs	r3, r5, #8
 8001bb6:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 8001bb8:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 8001bba:	0e03      	lsrs	r3, r0, #24
 8001bbc:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 8001bbe:	0c03      	lsrs	r3, r0, #16
 8001bc0:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 8001bc2:	0a03      	lsrs	r3, r0, #8
 8001bc4:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 8001bc6:	7020      	strb	r0, [r4, #0]
 8001bc8:	e7e7      	b.n	8001b9a <GetUniqueId+0x36>
 8001bca:	bf00      	nop
 8001bcc:	1fff7000 	.word	0x1fff7000

08001bd0 <GetDevAddr>:
{
 8001bd0:	b538      	push	{r3, r4, r5, lr}
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bfc <GetDevAddr+0x2c>)
 8001bd4:	f8d3 3580 	ldr.w	r3, [r3, #1408]	@ 0x580
  *devAddr = LL_FLASH_GetUDN();
 8001bd8:	6003      	str	r3, [r0, #0]
  if (*devAddr == 0xFFFFFFFF)
 8001bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bde:	d000      	beq.n	8001be2 <GetDevAddr+0x12>
}
 8001be0:	bd38      	pop	{r3, r4, r5, pc}
 8001be2:	4604      	mov	r4, r0
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001be4:	f002 f856 	bl	8003c94 <HAL_GetUIDw0>
 8001be8:	4605      	mov	r5, r0
 8001bea:	f002 f859 	bl	8003ca0 <HAL_GetUIDw1>
 8001bee:	4045      	eors	r5, r0
 8001bf0:	f002 f85c 	bl	8003cac <HAL_GetUIDw2>
 8001bf4:	4045      	eors	r5, r0
 8001bf6:	6025      	str	r5, [r4, #0]
}
 8001bf8:	e7f2      	b.n	8001be0 <GetDevAddr+0x10>
 8001bfa:	bf00      	nop
 8001bfc:	1fff7000 	.word	0x1fff7000

08001c00 <UTIL_ADV_TRACE_PreSendHook>:
{
 8001c00:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001c02:	2101      	movs	r1, #1
 8001c04:	2002      	movs	r0, #2
 8001c06:	f013 fe5f 	bl	80158c8 <UTIL_LPM_SetStopMode>
}
 8001c0a:	bd08      	pop	{r3, pc}

08001c0c <UTIL_ADV_TRACE_PostSendHook>:
{
 8001c0c:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001c0e:	2100      	movs	r1, #0
 8001c10:	2002      	movs	r0, #2
 8001c12:	f013 fe59 	bl	80158c8 <UTIL_LPM_SetStopMode>
}
 8001c16:	bd08      	pop	{r3, pc}

08001c18 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001c18:	2000      	movs	r0, #0
 8001c1a:	4770      	bx	lr

08001c1c <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001c1c:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001c1e:	4b04      	ldr	r3, [pc, #16]	@ (8001c30 <HAL_GetTick+0x14>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	b90b      	cbnz	r3, 8001c28 <HAL_GetTick+0xc>
  uint32_t ret = 0;
 8001c24:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 8001c26:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 8001c28:	f000 f8a2 	bl	8001d70 <TIMER_IF_GetTimerValue>
 8001c2c:	e7fb      	b.n	8001c26 <HAL_GetTick+0xa>
 8001c2e:	bf00      	nop
 8001c30:	20000254 	.word	0x20000254

08001c34 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001c34:	b500      	push	{lr}
 8001c36:	b083      	sub	sp, #12
 8001c38:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001c3a:	9801      	ldr	r0, [sp, #4]
 8001c3c:	f000 f97e 	bl	8001f3c <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001c40:	b003      	add	sp, #12
 8001c42:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001c48 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c4a:	b089      	sub	sp, #36	@ 0x24
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001c4c:	4a22      	ldr	r2, [pc, #136]	@ (8001cd8 <DBG_Init+0x90>)
 8001c4e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001c52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c56:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001c5a:	f002 f82d 	bl	8003cb8 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8001c5e:	f002 f833 	bl	8003cc8 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8001c62:	f002 f839 	bl	8003cd8 <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001c66:	2400      	movs	r4, #0
 8001c68:	9403      	str	r4, [sp, #12]
 8001c6a:	9404      	str	r4, [sp, #16]
 8001c6c:	9405      	str	r4, [sp, #20]
 8001c6e:	9406      	str	r4, [sp, #24]
 8001c70:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001c72:	2301      	movs	r3, #1
 8001c74:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c76:	2303      	movs	r3, #3
 8001c78:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c80:	f042 0202 	orr.w	r2, r2, #2
 8001c84:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c88:	f002 0202 	and.w	r2, r2, #2
 8001c8c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001c8e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c90:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c92:	f042 0202 	orr.w	r2, r2, #2
 8001c96:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001ca0:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001ca2:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
 8001ca6:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001ca8:	4d0c      	ldr	r5, [pc, #48]	@ (8001cdc <DBG_Init+0x94>)
 8001caa:	a903      	add	r1, sp, #12
 8001cac:	4628      	mov	r0, r5
 8001cae:	f003 f951 	bl	8004f54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001cb2:	f44f 5600 	mov.w	r6, #8192	@ 0x2000
 8001cb6:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001cb8:	a903      	add	r1, sp, #12
 8001cba:	4628      	mov	r0, r5
 8001cbc:	f003 f94a 	bl	8004f54 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001cc0:	4622      	mov	r2, r4
 8001cc2:	4639      	mov	r1, r7
 8001cc4:	4628      	mov	r0, r5
 8001cc6:	f003 fa95 	bl	80051f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001cca:	4622      	mov	r2, r4
 8001ccc:	4631      	mov	r1, r6
 8001cce:	4628      	mov	r0, r5
 8001cd0:	f003 fa90 	bl	80051f4 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001cd4:	b009      	add	sp, #36	@ 0x24
 8001cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cd8:	58000800 	.word	0x58000800
 8001cdc:	48000400 	.word	0x48000400

08001ce0 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8001ce0:	b510      	push	{r4, lr}
 8001ce2:	4604      	mov	r4, r0
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8001ce4:	f7ff f942 	bl	8000f6c <SYS_GetTemperatureLevel>
 8001ce8:	f340 200f 	sbfx	r0, r0, #8, #16
 8001cec:	f7fe fe2a 	bl	8000944 <__aeabi_i2f>
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001cf0:	4b05      	ldr	r3, [pc, #20]	@ (8001d08 <EnvSensors_Read+0x28>)
 8001cf2:	60a3      	str	r3, [r4, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001cf4:	6060      	str	r0, [r4, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001cf6:	4b05      	ldr	r3, [pc, #20]	@ (8001d0c <EnvSensors_Read+0x2c>)
 8001cf8:	6023      	str	r3, [r4, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001cfa:	4b05      	ldr	r3, [pc, #20]	@ (8001d10 <EnvSensors_Read+0x30>)
 8001cfc:	60e3      	str	r3, [r4, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001cfe:	4b05      	ldr	r3, [pc, #20]	@ (8001d14 <EnvSensors_Read+0x34>)
 8001d00:	6123      	str	r3, [r4, #16]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 8001d02:	2000      	movs	r0, #0
 8001d04:	bd10      	pop	{r4, pc}
 8001d06:	bf00      	nop
 8001d08:	42480000 	.word	0x42480000
 8001d0c:	447a0000 	.word	0x447a0000
 8001d10:	003e090d 	.word	0x003e090d
 8001d14:	000503ab 	.word	0x000503ab

08001d18 <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8001d18:	2000      	movs	r0, #0
 8001d1a:	4770      	bx	lr

08001d1c <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001d1c:	4b06      	ldr	r3, [pc, #24]	@ (8001d38 <TIMER_IF_SetTimerContext+0x1c>)
 8001d1e:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001d20:	e001      	b.n	8001d26 <TIMER_IF_SetTimerContext+0xa>
 8001d22:	4b05      	ldr	r3, [pc, #20]	@ (8001d38 <TIMER_IF_SetTimerContext+0x1c>)
 8001d24:	6898      	ldr	r0, [r3, #8]
 8001d26:	4b04      	ldr	r3, [pc, #16]	@ (8001d38 <TIMER_IF_SetTimerContext+0x1c>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	4283      	cmp	r3, r0
 8001d2c:	d1f9      	bne.n	8001d22 <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 8001d2e:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8001d30:	4b02      	ldr	r3, [pc, #8]	@ (8001d3c <TIMER_IF_SetTimerContext+0x20>)
 8001d32:	6018      	str	r0, [r3, #0]
}
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40002800 	.word	0x40002800
 8001d3c:	20000258 	.word	0x20000258

08001d40 <TIMER_IF_GetTimerContext>:
}
 8001d40:	4b01      	ldr	r3, [pc, #4]	@ (8001d48 <TIMER_IF_GetTimerContext+0x8>)
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000258 	.word	0x20000258

08001d4c <TIMER_IF_GetTimerElapsedTime>:
 8001d4c:	4b06      	ldr	r3, [pc, #24]	@ (8001d68 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001d4e:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001d50:	e001      	b.n	8001d56 <TIMER_IF_GetTimerElapsedTime+0xa>
 8001d52:	4b05      	ldr	r3, [pc, #20]	@ (8001d68 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001d54:	6898      	ldr	r0, [r3, #8]
 8001d56:	4b04      	ldr	r3, [pc, #16]	@ (8001d68 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	4283      	cmp	r3, r0
 8001d5c:	d1f9      	bne.n	8001d52 <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 8001d5e:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001d60:	4b02      	ldr	r3, [pc, #8]	@ (8001d6c <TIMER_IF_GetTimerElapsedTime+0x20>)
 8001d62:	681b      	ldr	r3, [r3, #0]
}
 8001d64:	1ac0      	subs	r0, r0, r3
 8001d66:	4770      	bx	lr
 8001d68:	40002800 	.word	0x40002800
 8001d6c:	20000258 	.word	0x20000258

08001d70 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8001d70:	4b07      	ldr	r3, [pc, #28]	@ (8001d90 <TIMER_IF_GetTimerValue+0x20>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	b153      	cbz	r3, 8001d8c <TIMER_IF_GetTimerValue+0x1c>
 8001d76:	4b07      	ldr	r3, [pc, #28]	@ (8001d94 <TIMER_IF_GetTimerValue+0x24>)
 8001d78:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001d7a:	e001      	b.n	8001d80 <TIMER_IF_GetTimerValue+0x10>
 8001d7c:	4b05      	ldr	r3, [pc, #20]	@ (8001d94 <TIMER_IF_GetTimerValue+0x24>)
 8001d7e:	6898      	ldr	r0, [r3, #8]
 8001d80:	4b04      	ldr	r3, [pc, #16]	@ (8001d94 <TIMER_IF_GetTimerValue+0x24>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	4283      	cmp	r3, r0
 8001d86:	d1f9      	bne.n	8001d7c <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 8001d88:	43c0      	mvns	r0, r0
 8001d8a:	4770      	bx	lr
  uint32_t ret = 0;
 8001d8c:	2000      	movs	r0, #0
}
 8001d8e:	4770      	bx	lr
 8001d90:	2000025c 	.word	0x2000025c
 8001d94:	40002800 	.word	0x40002800

08001d98 <TIMER_IF_GetMinimumTimeout>:
}
 8001d98:	2003      	movs	r0, #3
 8001d9a:	4770      	bx	lr

08001d9c <TIMER_IF_Convert_ms2Tick>:
{
 8001d9c:	b508      	push	{r3, lr}
 8001d9e:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001da0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001da4:	2300      	movs	r3, #0
 8001da6:	0280      	lsls	r0, r0, #10
 8001da8:	0d89      	lsrs	r1, r1, #22
 8001daa:	f7fe feb5 	bl	8000b18 <__aeabi_uldivmod>
}
 8001dae:	bd08      	pop	{r3, pc}

08001db0 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001db0:	0ec2      	lsrs	r2, r0, #27
 8001db2:	0143      	lsls	r3, r0, #5
 8001db4:	1a1b      	subs	r3, r3, r0
 8001db6:	f162 0200 	sbc.w	r2, r2, #0
 8001dba:	0092      	lsls	r2, r2, #2
 8001dbc:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	181b      	adds	r3, r3, r0
 8001dc4:	f142 0000 	adc.w	r0, r2, #0
 8001dc8:	00c0      	lsls	r0, r0, #3
 8001dca:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001dce:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 8001dd2:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 8001dd6:	4770      	bx	lr

08001dd8 <TIMER_IF_StopTimer>:
{
 8001dd8:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001dda:	4b07      	ldr	r3, [pc, #28]	@ (8001df8 <TIMER_IF_StopTimer+0x20>)
 8001ddc:	2201      	movs	r2, #1
 8001dde:	65da      	str	r2, [r3, #92]	@ 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001de0:	4c06      	ldr	r4, [pc, #24]	@ (8001dfc <TIMER_IF_StopTimer+0x24>)
 8001de2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001de6:	4620      	mov	r0, r4
 8001de8:	f005 f928 	bl	800703c <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001dec:	f04f 33ff 	mov.w	r3, #4294967295
 8001df0:	6323      	str	r3, [r4, #48]	@ 0x30
}
 8001df2:	2000      	movs	r0, #0
 8001df4:	bd10      	pop	{r4, pc}
 8001df6:	bf00      	nop
 8001df8:	40002800 	.word	0x40002800
 8001dfc:	20000210 	.word	0x20000210

08001e00 <TIMER_IF_BkUp_Write_MSBticks>:
{
 8001e00:	b508      	push	{r3, lr}
 8001e02:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001e04:	2102      	movs	r1, #2
 8001e06:	4802      	ldr	r0, [pc, #8]	@ (8001e10 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8001e08:	f005 fb63 	bl	80074d2 <HAL_RTCEx_BKUPWrite>
}
 8001e0c:	bd08      	pop	{r3, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000210 	.word	0x20000210

08001e14 <TIMER_IF_Init>:
{
 8001e14:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8001e16:	4b0f      	ldr	r3, [pc, #60]	@ (8001e54 <TIMER_IF_Init+0x40>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	b10b      	cbz	r3, 8001e20 <TIMER_IF_Init+0xc>
}
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001e20:	4c0d      	ldr	r4, [pc, #52]	@ (8001e58 <TIMER_IF_Init+0x44>)
 8001e22:	f04f 35ff 	mov.w	r5, #4294967295
 8001e26:	6325      	str	r5, [r4, #48]	@ 0x30
    MX_RTC_Init();
 8001e28:	f7ff fd06 	bl	8001838 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8001e2c:	f7ff ffd4 	bl	8001dd8 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001e30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e34:	4620      	mov	r0, r4
 8001e36:	f005 f901 	bl	800703c <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001e3a:	6325      	str	r5, [r4, #48]	@ 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	f005 fae7 	bl	8007410 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001e42:	2000      	movs	r0, #0
 8001e44:	f7ff ffdc 	bl	8001e00 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8001e48:	f7ff ff68 	bl	8001d1c <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8001e4c:	4b01      	ldr	r3, [pc, #4]	@ (8001e54 <TIMER_IF_Init+0x40>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	701a      	strb	r2, [r3, #0]
 8001e52:	e7e3      	b.n	8001e1c <TIMER_IF_Init+0x8>
 8001e54:	2000025c 	.word	0x2000025c
 8001e58:	20000210 	.word	0x20000210

08001e5c <TIMER_IF_BkUp_Write_Seconds>:
{
 8001e5c:	b508      	push	{r3, lr}
 8001e5e:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001e60:	2100      	movs	r1, #0
 8001e62:	4802      	ldr	r0, [pc, #8]	@ (8001e6c <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8001e64:	f005 fb35 	bl	80074d2 <HAL_RTCEx_BKUPWrite>
}
 8001e68:	bd08      	pop	{r3, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000210 	.word	0x20000210

08001e70 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8001e70:	b508      	push	{r3, lr}
 8001e72:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001e74:	2101      	movs	r1, #1
 8001e76:	4802      	ldr	r0, [pc, #8]	@ (8001e80 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8001e78:	f005 fb2b 	bl	80074d2 <HAL_RTCEx_BKUPWrite>
}
 8001e7c:	bd08      	pop	{r3, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000210 	.word	0x20000210

08001e84 <TIMER_IF_StartTimer>:
{
 8001e84:	b510      	push	{r4, lr}
 8001e86:	b08c      	sub	sp, #48	@ 0x30
 8001e88:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 8001e8a:	222c      	movs	r2, #44	@ 0x2c
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	a801      	add	r0, sp, #4
 8001e90:	f014 f934 	bl	80160fc <memset>
  TIMER_IF_StopTimer();
 8001e94:	f7ff ffa0 	bl	8001dd8 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001e98:	4b0c      	ldr	r3, [pc, #48]	@ (8001ecc <TIMER_IF_StartTimer+0x48>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	441c      	add	r4, r3
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001ea2:	43e4      	mvns	r4, r4
 8001ea4:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001ea6:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001ea8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001eac:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001eae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001eb2:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	a901      	add	r1, sp, #4
 8001eb8:	4805      	ldr	r0, [pc, #20]	@ (8001ed0 <TIMER_IF_StartTimer+0x4c>)
 8001eba:	f005 f9ed 	bl	8007298 <HAL_RTC_SetAlarm_IT>
 8001ebe:	b910      	cbnz	r0, 8001ec6 <TIMER_IF_StartTimer+0x42>
}
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	b00c      	add	sp, #48	@ 0x30
 8001ec4:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001ec6:	f7ff fc5e 	bl	8001786 <Error_Handler>
 8001eca:	e7f9      	b.n	8001ec0 <TIMER_IF_StartTimer+0x3c>
 8001ecc:	20000258 	.word	0x20000258
 8001ed0:	20000210 	.word	0x20000210

08001ed4 <TIMER_IF_BkUp_Read_MSBticks>:
{
 8001ed4:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001ed6:	2102      	movs	r1, #2
 8001ed8:	4801      	ldr	r0, [pc, #4]	@ (8001ee0 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8001eda:	f005 fb01 	bl	80074e0 <HAL_RTCEx_BKUPRead>
}
 8001ede:	bd08      	pop	{r3, pc}
 8001ee0:	20000210 	.word	0x20000210

08001ee4 <TIMER_IF_GetTime>:
{
 8001ee4:	b538      	push	{r3, r4, r5, lr}
 8001ee6:	4605      	mov	r5, r0
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f18 <TIMER_IF_GetTime+0x34>)
 8001eea:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001eec:	e001      	b.n	8001ef2 <TIMER_IF_GetTime+0xe>
 8001eee:	4b0a      	ldr	r3, [pc, #40]	@ (8001f18 <TIMER_IF_GetTime+0x34>)
 8001ef0:	689c      	ldr	r4, [r3, #8]
 8001ef2:	4a09      	ldr	r2, [pc, #36]	@ (8001f18 <TIMER_IF_GetTime+0x34>)
 8001ef4:	6892      	ldr	r2, [r2, #8]
 8001ef6:	42a2      	cmp	r2, r4
 8001ef8:	d1f9      	bne.n	8001eee <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 8001efa:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001efc:	f7ff ffea 	bl	8001ed4 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001f00:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001f02:	0aa4      	lsrs	r4, r4, #10
 8001f04:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8001f08:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8001f0c:	f7ff ff50 	bl	8001db0 <TIMER_IF_Convert_Tick2ms>
 8001f10:	8028      	strh	r0, [r5, #0]
}
 8001f12:	4620      	mov	r0, r4
 8001f14:	bd38      	pop	{r3, r4, r5, pc}
 8001f16:	bf00      	nop
 8001f18:	40002800 	.word	0x40002800

08001f1c <TIMER_IF_BkUp_Read_Seconds>:
{
 8001f1c:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8001f1e:	2100      	movs	r1, #0
 8001f20:	4801      	ldr	r0, [pc, #4]	@ (8001f28 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8001f22:	f005 fadd 	bl	80074e0 <HAL_RTCEx_BKUPRead>
}
 8001f26:	bd08      	pop	{r3, pc}
 8001f28:	20000210 	.word	0x20000210

08001f2c <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8001f2c:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001f2e:	2101      	movs	r1, #1
 8001f30:	4801      	ldr	r0, [pc, #4]	@ (8001f38 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8001f32:	f005 fad5 	bl	80074e0 <HAL_RTCEx_BKUPRead>
}
 8001f36:	bd08      	pop	{r3, pc}
 8001f38:	20000210 	.word	0x20000210

08001f3c <TIMER_IF_DelayMs>:
{
 8001f3c:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001f3e:	f7ff ff2d 	bl	8001d9c <TIMER_IF_Convert_ms2Tick>
 8001f42:	4b0d      	ldr	r3, [pc, #52]	@ (8001f78 <TIMER_IF_DelayMs+0x3c>)
 8001f44:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001f46:	e001      	b.n	8001f4c <TIMER_IF_DelayMs+0x10>
 8001f48:	4b0b      	ldr	r3, [pc, #44]	@ (8001f78 <TIMER_IF_DelayMs+0x3c>)
 8001f4a:	6899      	ldr	r1, [r3, #8]
 8001f4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f78 <TIMER_IF_DelayMs+0x3c>)
 8001f4e:	6892      	ldr	r2, [r2, #8]
 8001f50:	428a      	cmp	r2, r1
 8001f52:	d1f9      	bne.n	8001f48 <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 8001f54:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001f56:	e00a      	b.n	8001f6e <TIMER_IF_DelayMs+0x32>
 8001f58:	4b07      	ldr	r3, [pc, #28]	@ (8001f78 <TIMER_IF_DelayMs+0x3c>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	4a06      	ldr	r2, [pc, #24]	@ (8001f78 <TIMER_IF_DelayMs+0x3c>)
 8001f5e:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d1f9      	bne.n	8001f58 <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 8001f64:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001f66:	1a5b      	subs	r3, r3, r1
 8001f68:	4283      	cmp	r3, r0
 8001f6a:	d203      	bcs.n	8001f74 <TIMER_IF_DelayMs+0x38>
    __NOP();
 8001f6c:	bf00      	nop
 8001f6e:	4b02      	ldr	r3, [pc, #8]	@ (8001f78 <TIMER_IF_DelayMs+0x3c>)
 8001f70:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001f72:	e7f3      	b.n	8001f5c <TIMER_IF_DelayMs+0x20>
}
 8001f74:	bd08      	pop	{r3, pc}
 8001f76:	bf00      	nop
 8001f78:	40002800 	.word	0x40002800

08001f7c <HAL_RTC_AlarmAEventCallback>:
{
 8001f7c:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8001f7e:	f013 ff15 	bl	8015dac <UTIL_TIMER_IRQ_Handler>
}
 8001f82:	bd08      	pop	{r3, pc}

08001f84 <HAL_RTCEx_SSRUEventCallback>:
{
 8001f84:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001f86:	f7ff ffa5 	bl	8001ed4 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001f8a:	3001      	adds	r0, #1
 8001f8c:	f7ff ff38 	bl	8001e00 <TIMER_IF_BkUp_Write_MSBticks>
}
 8001f90:	bd08      	pop	{r3, pc}
	...

08001f94 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f94:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f96:	4817      	ldr	r0, [pc, #92]	@ (8001ff4 <MX_USART2_UART_Init+0x60>)
 8001f98:	4b17      	ldr	r3, [pc, #92]	@ (8001ff8 <MX_USART2_UART_Init+0x64>)
 8001f9a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001f9c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001fa0:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fa6:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fa8:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001faa:	220c      	movs	r2, #12
 8001fac:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fae:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb0:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fb2:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fb4:	6243      	str	r3, [r0, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fb6:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fb8:	f006 fdf0 	bl	8008b9c <HAL_UART_Init>
 8001fbc:	b970      	cbnz	r0, 8001fdc <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	480c      	ldr	r0, [pc, #48]	@ (8001ff4 <MX_USART2_UART_Init+0x60>)
 8001fc2:	f006 ffa0 	bl	8008f06 <HAL_UARTEx_SetTxFifoThreshold>
 8001fc6:	b960      	cbnz	r0, 8001fe2 <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fc8:	2100      	movs	r1, #0
 8001fca:	480a      	ldr	r0, [pc, #40]	@ (8001ff4 <MX_USART2_UART_Init+0x60>)
 8001fcc:	f006 ffc0 	bl	8008f50 <HAL_UARTEx_SetRxFifoThreshold>
 8001fd0:	b950      	cbnz	r0, 8001fe8 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8001fd2:	4808      	ldr	r0, [pc, #32]	@ (8001ff4 <MX_USART2_UART_Init+0x60>)
 8001fd4:	f006 ff73 	bl	8008ebe <HAL_UARTEx_EnableFifoMode>
 8001fd8:	b948      	cbnz	r0, 8001fee <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fda:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001fdc:	f7ff fbd3 	bl	8001786 <Error_Handler>
 8001fe0:	e7ed      	b.n	8001fbe <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8001fe2:	f7ff fbd0 	bl	8001786 <Error_Handler>
 8001fe6:	e7ef      	b.n	8001fc8 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8001fe8:	f7ff fbcd 	bl	8001786 <Error_Handler>
 8001fec:	e7f1      	b.n	8001fd2 <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8001fee:	f7ff fbca 	bl	8001786 <Error_Handler>
}
 8001ff2:	e7f2      	b.n	8001fda <MX_USART2_UART_Init+0x46>
 8001ff4:	200002c0 	.word	0x200002c0
 8001ff8:	40004400 	.word	0x40004400

08001ffc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ffc:	b530      	push	{r4, r5, lr}
 8001ffe:	b097      	sub	sp, #92	@ 0x5c
 8002000:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002002:	2100      	movs	r1, #0
 8002004:	9111      	str	r1, [sp, #68]	@ 0x44
 8002006:	9112      	str	r1, [sp, #72]	@ 0x48
 8002008:	9113      	str	r1, [sp, #76]	@ 0x4c
 800200a:	9114      	str	r1, [sp, #80]	@ 0x50
 800200c:	9115      	str	r1, [sp, #84]	@ 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800200e:	2238      	movs	r2, #56	@ 0x38
 8002010:	a803      	add	r0, sp, #12
 8002012:	f014 f873 	bl	80160fc <memset>
  if(uartHandle->Instance==USART2)
 8002016:	6822      	ldr	r2, [r4, #0]
 8002018:	4b2d      	ldr	r3, [pc, #180]	@ (80020d0 <HAL_UART_MspInit+0xd4>)
 800201a:	429a      	cmp	r2, r3
 800201c:	d001      	beq.n	8002022 <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800201e:	b017      	add	sp, #92	@ 0x5c
 8002020:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002022:	2302      	movs	r3, #2
 8002024:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8002026:	4b2b      	ldr	r3, [pc, #172]	@ (80020d4 <HAL_UART_MspInit+0xd8>)
 8002028:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800202a:	a803      	add	r0, sp, #12
 800202c:	f004 fee4 	bl	8006df8 <HAL_RCCEx_PeriphCLKConfig>
 8002030:	2800      	cmp	r0, #0
 8002032:	d144      	bne.n	80020be <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002034:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002038:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800203a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800203e:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002040:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002042:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8002046:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8002048:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800204a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800204c:	f042 0201 	orr.w	r2, r2, #1
 8002050:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800205a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 800205c:	230c      	movs	r3, #12
 800205e:	9311      	str	r3, [sp, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002060:	2302      	movs	r3, #2
 8002062:	9312      	str	r3, [sp, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2500      	movs	r5, #0
 8002066:	9513      	str	r5, [sp, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002068:	2303      	movs	r3, #3
 800206a:	9314      	str	r3, [sp, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800206c:	2307      	movs	r3, #7
 800206e:	9315      	str	r3, [sp, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002070:	a911      	add	r1, sp, #68	@ 0x44
 8002072:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002076:	f002 ff6d 	bl	8004f54 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 800207a:	4817      	ldr	r0, [pc, #92]	@ (80020d8 <HAL_UART_MspInit+0xdc>)
 800207c:	4b17      	ldr	r3, [pc, #92]	@ (80020dc <HAL_UART_MspInit+0xe0>)
 800207e:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002080:	2314      	movs	r3, #20
 8002082:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002084:	2310      	movs	r3, #16
 8002086:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002088:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800208a:	2380      	movs	r3, #128	@ 0x80
 800208c:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800208e:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002090:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002092:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002094:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002096:	f002 fbed 	bl	8004874 <HAL_DMA_Init>
 800209a:	b998      	cbnz	r0, 80020c4 <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800209c:	2110      	movs	r1, #16
 800209e:	480e      	ldr	r0, [pc, #56]	@ (80020d8 <HAL_UART_MspInit+0xdc>)
 80020a0:	f002 fded 	bl	8004c7e <HAL_DMA_ConfigChannelAttributes>
 80020a4:	b988      	cbnz	r0, 80020ca <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80020a6:	4b0c      	ldr	r3, [pc, #48]	@ (80020d8 <HAL_UART_MspInit+0xdc>)
 80020a8:	67e3      	str	r3, [r4, #124]	@ 0x7c
 80020aa:	629c      	str	r4, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 80020ac:	2200      	movs	r2, #0
 80020ae:	2107      	movs	r1, #7
 80020b0:	2025      	movs	r0, #37	@ 0x25
 80020b2:	f002 fb57 	bl	8004764 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020b6:	2025      	movs	r0, #37	@ 0x25
 80020b8:	f002 fb64 	bl	8004784 <HAL_NVIC_EnableIRQ>
}
 80020bc:	e7af      	b.n	800201e <HAL_UART_MspInit+0x22>
      Error_Handler();
 80020be:	f7ff fb62 	bl	8001786 <Error_Handler>
 80020c2:	e7b7      	b.n	8002034 <HAL_UART_MspInit+0x38>
      Error_Handler();
 80020c4:	f7ff fb5f 	bl	8001786 <Error_Handler>
 80020c8:	e7e8      	b.n	800209c <HAL_UART_MspInit+0xa0>
      Error_Handler();
 80020ca:	f7ff fb5c 	bl	8001786 <Error_Handler>
 80020ce:	e7ea      	b.n	80020a6 <HAL_UART_MspInit+0xaa>
 80020d0:	40004400 	.word	0x40004400
 80020d4:	000c0004 	.word	0x000c0004
 80020d8:	20000260 	.word	0x20000260
 80020dc:	40020058 	.word	0x40020058

080020e0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 80020e0:	6802      	ldr	r2, [r0, #0]
 80020e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002114 <HAL_UART_MspDeInit+0x34>)
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d000      	beq.n	80020ea <HAL_UART_MspDeInit+0xa>
 80020e8:	4770      	bx	lr
{
 80020ea:	b510      	push	{r4, lr}
 80020ec:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80020ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020f2:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80020f4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80020f8:	6593      	str	r3, [r2, #88]	@ 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 80020fa:	210c      	movs	r1, #12
 80020fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002100:	f002 fffa 	bl	80050f8 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002104:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8002106:	f002 fc27 	bl	8004958 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800210a:	2025      	movs	r0, #37	@ 0x25
 800210c:	f002 fb3e 	bl	800478c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002110:	bd10      	pop	{r4, pc}
 8002112:	bf00      	nop
 8002114:	40004400 	.word	0x40004400

08002118 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002118:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 800211a:	4b07      	ldr	r3, [pc, #28]	@ (8002138 <vcom_Init+0x20>)
 800211c:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 800211e:	f7fe fffb 	bl	8001118 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002122:	f7ff ff37 	bl	8001f94 <MX_USART2_UART_Init>
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002126:	4a05      	ldr	r2, [pc, #20]	@ (800213c <vcom_Init+0x24>)
 8002128:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 800212c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002130:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002134:	2000      	movs	r0, #0
 8002136:	bd08      	pop	{r3, pc}
 8002138:	20000358 	.word	0x20000358
 800213c:	58000800 	.word	0x58000800

08002140 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002140:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8002142:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002146:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002148:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800214c:	639a      	str	r2, [r3, #56]	@ 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 800214e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002150:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8002154:	639a      	str	r2, [r3, #56]	@ 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8002156:	4804      	ldr	r0, [pc, #16]	@ (8002168 <vcom_DeInit+0x28>)
 8002158:	f7ff ffc2 	bl	80020e0 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800215c:	200f      	movs	r0, #15
 800215e:	f002 fb15 	bl	800478c <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002162:	2000      	movs	r0, #0
 8002164:	bd08      	pop	{r3, pc}
 8002166:	bf00      	nop
 8002168:	200002c0 	.word	0x200002c0

0800216c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 800216c:	b508      	push	{r3, lr}
 800216e:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8002170:	4601      	mov	r1, r0
 8002172:	4802      	ldr	r0, [pc, #8]	@ (800217c <vcom_Trace_DMA+0x10>)
 8002174:	f005 fd96 	bl	8007ca4 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002178:	2000      	movs	r0, #0
 800217a:	bd08      	pop	{r3, pc}
 800217c:	200002c0 	.word	0x200002c0

08002180 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002180:	b510      	push	{r4, lr}
 8002182:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002184:	4b12      	ldr	r3, [pc, #72]	@ (80021d0 <vcom_ReceiveInit+0x50>)
 8002186:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002188:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800218c:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 800218e:	ab02      	add	r3, sp, #8
 8002190:	e913 0006 	ldmdb	r3, {r1, r2}
 8002194:	480f      	ldr	r0, [pc, #60]	@ (80021d4 <vcom_ReceiveInit+0x54>)
 8002196:	f006 fe3a 	bl	8008e0e <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 800219a:	4b0e      	ldr	r3, [pc, #56]	@ (80021d4 <vcom_ReceiveInit+0x54>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	69da      	ldr	r2, [r3, #28]
 80021a0:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 80021a4:	d1f9      	bne.n	800219a <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 80021a6:	69da      	ldr	r2, [r3, #28]
 80021a8:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 80021ac:	d0fb      	beq.n	80021a6 <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80021b4:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 80021b6:	4c07      	ldr	r4, [pc, #28]	@ (80021d4 <vcom_ReceiveInit+0x54>)
 80021b8:	4620      	mov	r0, r4
 80021ba:	f006 fe69 	bl	8008e90 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 80021be:	2201      	movs	r2, #1
 80021c0:	4905      	ldr	r1, [pc, #20]	@ (80021d8 <vcom_ReceiveInit+0x58>)
 80021c2:	4620      	mov	r0, r4
 80021c4:	f006 fdbc 	bl	8008d40 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80021c8:	2000      	movs	r0, #0
 80021ca:	b002      	add	sp, #8
 80021cc:	bd10      	pop	{r4, pc}
 80021ce:	bf00      	nop
 80021d0:	20000354 	.word	0x20000354
 80021d4:	200002c0 	.word	0x200002c0
 80021d8:	2000035c 	.word	0x2000035c

080021dc <vcom_Resume>:

void vcom_Resume(void)
{
 80021dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021de:	4807      	ldr	r0, [pc, #28]	@ (80021fc <vcom_Resume+0x20>)
 80021e0:	f006 fcdc 	bl	8008b9c <HAL_UART_Init>
 80021e4:	b920      	cbnz	r0, 80021f0 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80021e6:	4806      	ldr	r0, [pc, #24]	@ (8002200 <vcom_Resume+0x24>)
 80021e8:	f002 fb44 	bl	8004874 <HAL_DMA_Init>
 80021ec:	b918      	cbnz	r0, 80021f6 <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 80021ee:	bd08      	pop	{r3, pc}
    Error_Handler();
 80021f0:	f7ff fac9 	bl	8001786 <Error_Handler>
 80021f4:	e7f7      	b.n	80021e6 <vcom_Resume+0xa>
    Error_Handler();
 80021f6:	f7ff fac6 	bl	8001786 <Error_Handler>
}
 80021fa:	e7f8      	b.n	80021ee <vcom_Resume+0x12>
 80021fc:	200002c0 	.word	0x200002c0
 8002200:	20000260 	.word	0x20000260

08002204 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002204:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8002206:	6802      	ldr	r2, [r0, #0]
 8002208:	4b04      	ldr	r3, [pc, #16]	@ (800221c <HAL_UART_TxCpltCallback+0x18>)
 800220a:	429a      	cmp	r2, r3
 800220c:	d000      	beq.n	8002210 <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800220e:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 8002210:	4b03      	ldr	r3, [pc, #12]	@ (8002220 <HAL_UART_TxCpltCallback+0x1c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2000      	movs	r0, #0
 8002216:	4798      	blx	r3
}
 8002218:	e7f9      	b.n	800220e <HAL_UART_TxCpltCallback+0xa>
 800221a:	bf00      	nop
 800221c:	40004400 	.word	0x40004400
 8002220:	20000358 	.word	0x20000358

08002224 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8002224:	6802      	ldr	r2, [r0, #0]
 8002226:	4b0a      	ldr	r3, [pc, #40]	@ (8002250 <HAL_UART_RxCpltCallback+0x2c>)
 8002228:	429a      	cmp	r2, r3
 800222a:	d000      	beq.n	800222e <HAL_UART_RxCpltCallback+0xa>
 800222c:	4770      	bx	lr
{
 800222e:	b510      	push	{r4, lr}
 8002230:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002232:	4b08      	ldr	r3, [pc, #32]	@ (8002254 <HAL_UART_RxCpltCallback+0x30>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	b12b      	cbz	r3, 8002244 <HAL_UART_RxCpltCallback+0x20>
 8002238:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
 800223c:	b912      	cbnz	r2, 8002244 <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 800223e:	2101      	movs	r1, #1
 8002240:	4805      	ldr	r0, [pc, #20]	@ (8002258 <HAL_UART_RxCpltCallback+0x34>)
 8002242:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002244:	2201      	movs	r2, #1
 8002246:	4904      	ldr	r1, [pc, #16]	@ (8002258 <HAL_UART_RxCpltCallback+0x34>)
 8002248:	4620      	mov	r0, r4
 800224a:	f006 fd79 	bl	8008d40 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 800224e:	bd10      	pop	{r4, pc}
 8002250:	40004400 	.word	0x40004400
 8002254:	20000354 	.word	0x20000354
 8002258:	2000035c 	.word	0x2000035c

0800225c <CayenneLppReset>:
  /* USER CODE END CayenneLppCursor */
}

void CayenneLppReset(void)
{
  CayenneLppCursor = 0;
 800225c:	4b01      	ldr	r3, [pc, #4]	@ (8002264 <CayenneLppReset+0x8>)
 800225e:	2200      	movs	r2, #0
 8002260:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN CayenneLppReset */

  /* USER CODE END CayenneLppReset */
}
 8002262:	4770      	bx	lr
 8002264:	2000035d 	.word	0x2000035d

08002268 <CayenneLppGetSize>:
{
  /* USER CODE BEGIN CayenneLppGetSize */

  /* USER CODE END CayenneLppGetSize */
  return CayenneLppCursor;
}
 8002268:	4b01      	ldr	r3, [pc, #4]	@ (8002270 <CayenneLppGetSize+0x8>)
 800226a:	7818      	ldrb	r0, [r3, #0]
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	2000035d 	.word	0x2000035d

08002274 <CayenneLppCopy>:
  /* USER CODE END CayenneLppGetBuffer */
  return CayenneLppBuffer;
}

uint8_t CayenneLppCopy(uint8_t *dst)
{
 8002274:	b510      	push	{r4, lr}
  /* USER CODE BEGIN CayenneLppCopy_1 */

  /* USER CODE END CayenneLppCopy_1 */
  UTIL_MEM_cpy_8(dst, CayenneLppBuffer, CayenneLppCursor);
 8002276:	4c03      	ldr	r4, [pc, #12]	@ (8002284 <CayenneLppCopy+0x10>)
 8002278:	7822      	ldrb	r2, [r4, #0]
 800227a:	4903      	ldr	r1, [pc, #12]	@ (8002288 <CayenneLppCopy+0x14>)
 800227c:	f013 fb74 	bl	8015968 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN CayenneLppCopy_2 */

  /* USER CODE END CayenneLppCopy_2 */
  return CayenneLppCursor;
}
 8002280:	7820      	ldrb	r0, [r4, #0]
 8002282:	bd10      	pop	{r4, pc}
 8002284:	2000035d 	.word	0x2000035d
 8002288:	20000360 	.word	0x20000360

0800228c <CayenneLppAddDigitalInput>:
uint8_t CayenneLppAddDigitalInput(uint8_t channel, uint8_t value)
{
  /* USER CODE BEGIN CayenneLppAddDigitalInput_1 */

  /* USER CODE END CayenneLppAddDigitalInput_1 */
  if ((CayenneLppCursor + LPP_DIGITAL_INPUT_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 800228c:	4b0d      	ldr	r3, [pc, #52]	@ (80022c4 <CayenneLppAddDigitalInput+0x38>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2bef      	cmp	r3, #239	@ 0xef
 8002292:	d815      	bhi.n	80022c0 <CayenneLppAddDigitalInput+0x34>
{
 8002294:	b430      	push	{r4, r5}
  {
    return 0;
  }
  CayenneLppBuffer[CayenneLppCursor++] = channel;
 8002296:	f103 0c01 	add.w	ip, r3, #1
 800229a:	fa5f fc8c 	uxtb.w	ip, ip
 800229e:	4d09      	ldr	r5, [pc, #36]	@ (80022c4 <CayenneLppAddDigitalInput+0x38>)
 80022a0:	f885 c000 	strb.w	ip, [r5]
 80022a4:	4c08      	ldr	r4, [pc, #32]	@ (80022c8 <CayenneLppAddDigitalInput+0x3c>)
 80022a6:	54e0      	strb	r0, [r4, r3]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_DIGITAL_INPUT;
 80022a8:	1c9a      	adds	r2, r3, #2
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	702a      	strb	r2, [r5, #0]
 80022ae:	2000      	movs	r0, #0
 80022b0:	f804 000c 	strb.w	r0, [r4, ip]
  CayenneLppBuffer[CayenneLppCursor++] = value;
 80022b4:	1cd8      	adds	r0, r3, #3
 80022b6:	b2c0      	uxtb	r0, r0
 80022b8:	7028      	strb	r0, [r5, #0]
 80022ba:	54a1      	strb	r1, [r4, r2]
  /* USER CODE BEGIN CayenneLppAddDigitalInput_2 */

  /* USER CODE END CayenneLppAddDigitalInput_2 */
  return CayenneLppCursor;
}
 80022bc:	bc30      	pop	{r4, r5}
 80022be:	4770      	bx	lr
    return 0;
 80022c0:	2000      	movs	r0, #0
}
 80022c2:	4770      	bx	lr
 80022c4:	2000035d 	.word	0x2000035d
 80022c8:	20000360 	.word	0x20000360

080022cc <CayenneLppAddDigitalOutput>:
uint8_t CayenneLppAddDigitalOutput(uint8_t channel, uint8_t value)
{
  /* USER CODE BEGIN CayenneLppAddDigitalOutput_1 */

  /* USER CODE END CayenneLppAddDigitalOutput_1 */
  if ((CayenneLppCursor + LPP_DIGITAL_OUTPUT_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 80022cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002304 <CayenneLppAddDigitalOutput+0x38>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2bef      	cmp	r3, #239	@ 0xef
 80022d2:	d815      	bhi.n	8002300 <CayenneLppAddDigitalOutput+0x34>
{
 80022d4:	b430      	push	{r4, r5}
  {
    return 0;
  }
  CayenneLppBuffer[CayenneLppCursor++] = channel;
 80022d6:	f103 0c01 	add.w	ip, r3, #1
 80022da:	fa5f fc8c 	uxtb.w	ip, ip
 80022de:	4d09      	ldr	r5, [pc, #36]	@ (8002304 <CayenneLppAddDigitalOutput+0x38>)
 80022e0:	f885 c000 	strb.w	ip, [r5]
 80022e4:	4c08      	ldr	r4, [pc, #32]	@ (8002308 <CayenneLppAddDigitalOutput+0x3c>)
 80022e6:	54e0      	strb	r0, [r4, r3]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_DIGITAL_OUTPUT;
 80022e8:	1c9a      	adds	r2, r3, #2
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	702a      	strb	r2, [r5, #0]
 80022ee:	2001      	movs	r0, #1
 80022f0:	f804 000c 	strb.w	r0, [r4, ip]
  CayenneLppBuffer[CayenneLppCursor++] = value;
 80022f4:	1cd8      	adds	r0, r3, #3
 80022f6:	b2c0      	uxtb	r0, r0
 80022f8:	7028      	strb	r0, [r5, #0]
 80022fa:	54a1      	strb	r1, [r4, r2]
  /* USER CODE BEGIN CayenneLppAddDigitalOutput_2 */

  /* USER CODE END CayenneLppAddDigitalOutput_2 */
  return CayenneLppCursor;
}
 80022fc:	bc30      	pop	{r4, r5}
 80022fe:	4770      	bx	lr
    return 0;
 8002300:	2000      	movs	r0, #0
}
 8002302:	4770      	bx	lr
 8002304:	2000035d 	.word	0x2000035d
 8002308:	20000360 	.word	0x20000360

0800230c <CayenneLppAddTemperature>:
  /* USER CODE END CayenneLppAddPresence_2 */
  return CayenneLppCursor;
}

uint8_t CayenneLppAddTemperature(uint8_t channel, float celsius)
{
 800230c:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN CayenneLppAddTemperature_1 */

  /* USER CODE END CayenneLppAddTemperature_1 */
  if ((CayenneLppCursor + LPP_TEMPERATURE_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 800230e:	4b12      	ldr	r3, [pc, #72]	@ (8002358 <CayenneLppAddTemperature+0x4c>)
 8002310:	781c      	ldrb	r4, [r3, #0]
 8002312:	2cee      	cmp	r4, #238	@ 0xee
 8002314:	d81e      	bhi.n	8002354 <CayenneLppAddTemperature+0x48>
 8002316:	4605      	mov	r5, r0
 8002318:	4608      	mov	r0, r1
  {
    return 0;
  }
  int16_t val = (int16_t)(celsius * 10);
 800231a:	4910      	ldr	r1, [pc, #64]	@ (800235c <CayenneLppAddTemperature+0x50>)
 800231c:	f7fd ff38 	bl	8000190 <__aeabi_fmul>
 8002320:	f7fe fb64 	bl	80009ec <__aeabi_f2iz>
 8002324:	4684      	mov	ip, r0
  CayenneLppBuffer[CayenneLppCursor++] = channel;
 8002326:	1c63      	adds	r3, r4, #1
 8002328:	b2db      	uxtb	r3, r3
 800232a:	490b      	ldr	r1, [pc, #44]	@ (8002358 <CayenneLppAddTemperature+0x4c>)
 800232c:	700b      	strb	r3, [r1, #0]
 800232e:	4a0c      	ldr	r2, [pc, #48]	@ (8002360 <CayenneLppAddTemperature+0x54>)
 8002330:	5515      	strb	r5, [r2, r4]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_TEMPERATURE;
 8002332:	1ca5      	adds	r5, r4, #2
 8002334:	b2ed      	uxtb	r5, r5
 8002336:	700d      	strb	r5, [r1, #0]
 8002338:	2067      	movs	r0, #103	@ 0x67
 800233a:	54d0      	strb	r0, [r2, r3]
  CayenneLppBuffer[CayenneLppCursor++] = val >> 8;
 800233c:	1ce3      	adds	r3, r4, #3
 800233e:	b2db      	uxtb	r3, r3
 8002340:	700b      	strb	r3, [r1, #0]
 8002342:	f34c 2007 	sbfx	r0, ip, #8, #8
 8002346:	5550      	strb	r0, [r2, r5]
  CayenneLppBuffer[CayenneLppCursor++] = val;
 8002348:	3404      	adds	r4, #4
 800234a:	b2e0      	uxtb	r0, r4
 800234c:	7008      	strb	r0, [r1, #0]
 800234e:	f802 c003 	strb.w	ip, [r2, r3]
  /* USER CODE BEGIN CayenneLppAddTemperature_2 */

  /* USER CODE END CayenneLppAddTemperature_2 */
  return CayenneLppCursor;
}
 8002352:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
 8002354:	2000      	movs	r0, #0
 8002356:	e7fc      	b.n	8002352 <CayenneLppAddTemperature+0x46>
 8002358:	2000035d 	.word	0x2000035d
 800235c:	41200000 	.word	0x41200000
 8002360:	20000360 	.word	0x20000360

08002364 <CayenneLppAddRelativeHumidity>:

uint8_t CayenneLppAddRelativeHumidity(uint8_t channel, float rh)
{
 8002364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE BEGIN CayenneLppAddRelativeHumidity_1 */

  /* USER CODE END CayenneLppAddRelativeHumidity_1 */
  if ((CayenneLppCursor + LPP_RELATIVE_HUMIDITY_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 8002366:	4b0e      	ldr	r3, [pc, #56]	@ (80023a0 <CayenneLppAddRelativeHumidity+0x3c>)
 8002368:	781c      	ldrb	r4, [r3, #0]
 800236a:	2cef      	cmp	r4, #239	@ 0xef
 800236c:	d815      	bhi.n	800239a <CayenneLppAddRelativeHumidity+0x36>
  {
    return 0;
  }
  CayenneLppBuffer[CayenneLppCursor++] = channel;
 800236e:	1c63      	adds	r3, r4, #1
 8002370:	b2db      	uxtb	r3, r3
 8002372:	4f0b      	ldr	r7, [pc, #44]	@ (80023a0 <CayenneLppAddRelativeHumidity+0x3c>)
 8002374:	703b      	strb	r3, [r7, #0]
 8002376:	4e0b      	ldr	r6, [pc, #44]	@ (80023a4 <CayenneLppAddRelativeHumidity+0x40>)
 8002378:	5530      	strb	r0, [r6, r4]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_RELATIVE_HUMIDITY;
 800237a:	1ca5      	adds	r5, r4, #2
 800237c:	b2ed      	uxtb	r5, r5
 800237e:	703d      	strb	r5, [r7, #0]
 8002380:	2268      	movs	r2, #104	@ 0x68
 8002382:	54f2      	strb	r2, [r6, r3]
  CayenneLppBuffer[CayenneLppCursor++] = (uint8_t)(rh * 2);
 8002384:	4608      	mov	r0, r1
 8002386:	f7fe fa29 	bl	80007dc <__addsf3>
 800238a:	3403      	adds	r4, #3
 800238c:	b2e4      	uxtb	r4, r4
 800238e:	703c      	strb	r4, [r7, #0]
 8002390:	f7fe fb52 	bl	8000a38 <__aeabi_f2uiz>
 8002394:	5570      	strb	r0, [r6, r5]
  /* USER CODE BEGIN CayenneLppAddRelativeHumidity_2 */

  /* USER CODE END CayenneLppAddRelativeHumidity_2 */
  return CayenneLppCursor;
}
 8002396:	4620      	mov	r0, r4
 8002398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return 0;
 800239a:	2400      	movs	r4, #0
 800239c:	e7fb      	b.n	8002396 <CayenneLppAddRelativeHumidity+0x32>
 800239e:	bf00      	nop
 80023a0:	2000035d 	.word	0x2000035d
 80023a4:	20000360 	.word	0x20000360

080023a8 <CayenneLppAddBarometricPressure>:
  /* USER CODE END CayenneLppAddAccelerometer_2 */
  return CayenneLppCursor;
}

uint8_t CayenneLppAddBarometricPressure(uint8_t channel, float hpa)
{
 80023a8:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN CayenneLppAddBarometricPressure_1 */

  /* USER CODE END CayenneLppAddBarometricPressure_1 */
  if ((CayenneLppCursor + LPP_BAROMETRIC_PRESSURE_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 80023aa:	4b12      	ldr	r3, [pc, #72]	@ (80023f4 <CayenneLppAddBarometricPressure+0x4c>)
 80023ac:	781c      	ldrb	r4, [r3, #0]
 80023ae:	2cee      	cmp	r4, #238	@ 0xee
 80023b0:	d81e      	bhi.n	80023f0 <CayenneLppAddBarometricPressure+0x48>
 80023b2:	4605      	mov	r5, r0
 80023b4:	4608      	mov	r0, r1
  {
    return 0;
  }
  int16_t val = (int16_t)(hpa * 10);
 80023b6:	4910      	ldr	r1, [pc, #64]	@ (80023f8 <CayenneLppAddBarometricPressure+0x50>)
 80023b8:	f7fd feea 	bl	8000190 <__aeabi_fmul>
 80023bc:	f7fe fb16 	bl	80009ec <__aeabi_f2iz>
 80023c0:	4684      	mov	ip, r0

  CayenneLppBuffer[CayenneLppCursor++] = channel;
 80023c2:	1c63      	adds	r3, r4, #1
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	490b      	ldr	r1, [pc, #44]	@ (80023f4 <CayenneLppAddBarometricPressure+0x4c>)
 80023c8:	700b      	strb	r3, [r1, #0]
 80023ca:	4a0c      	ldr	r2, [pc, #48]	@ (80023fc <CayenneLppAddBarometricPressure+0x54>)
 80023cc:	5515      	strb	r5, [r2, r4]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_BAROMETRIC_PRESSURE;
 80023ce:	1ca5      	adds	r5, r4, #2
 80023d0:	b2ed      	uxtb	r5, r5
 80023d2:	700d      	strb	r5, [r1, #0]
 80023d4:	2073      	movs	r0, #115	@ 0x73
 80023d6:	54d0      	strb	r0, [r2, r3]
  CayenneLppBuffer[CayenneLppCursor++] = val >> 8;
 80023d8:	1ce3      	adds	r3, r4, #3
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	700b      	strb	r3, [r1, #0]
 80023de:	f34c 2007 	sbfx	r0, ip, #8, #8
 80023e2:	5550      	strb	r0, [r2, r5]
  CayenneLppBuffer[CayenneLppCursor++] = val;
 80023e4:	3404      	adds	r4, #4
 80023e6:	b2e0      	uxtb	r0, r4
 80023e8:	7008      	strb	r0, [r1, #0]
 80023ea:	f802 c003 	strb.w	ip, [r2, r3]
  /* USER CODE BEGIN CayenneLppAddBarometricPressure_2 */

  /* USER CODE END CayenneLppAddBarometricPressure_2 */
  return CayenneLppCursor;
}
 80023ee:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
 80023f0:	2000      	movs	r0, #0
 80023f2:	e7fc      	b.n	80023ee <CayenneLppAddBarometricPressure+0x46>
 80023f4:	2000035d 	.word	0x2000035d
 80023f8:	41200000 	.word	0x41200000
 80023fc:	20000360 	.word	0x20000360

08002400 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8002400:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8002402:	f7ff fb59 	bl	8001ab8 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8002406:	f000 fbb1 	bl	8002b6c <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800240a:	bd08      	pop	{r3, pc}

0800240c <__NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800240c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002410:	4905      	ldr	r1, [pc, #20]	@ (8002428 <__NVIC_SystemReset+0x1c>)
 8002412:	68ca      	ldr	r2, [r1, #12]
 8002414:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002418:	4b04      	ldr	r3, [pc, #16]	@ (800242c <__NVIC_SystemReset+0x20>)
 800241a:	4313      	orrs	r3, r2
 800241c:	60cb      	str	r3, [r1, #12]
 800241e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002422:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002424:	e7fd      	b.n	8002422 <__NVIC_SystemReset+0x16>
 8002426:	bf00      	nop
 8002428:	e000ed00 	.word	0xe000ed00
 800242c:	05fa0004 	.word	0x05fa0004

08002430 <OnSysTimeUpdate>:
static void OnSysTimeUpdate(void)
{
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 8002430:	4770      	bx	lr
	...

08002434 <OnTxFrameCtrlChanged>:
static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 8002434:	4b01      	ldr	r3, [pc, #4]	@ (800243c <OnTxFrameCtrlChanged+0x8>)
 8002436:	70d8      	strb	r0, [r3, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	2000000c 	.word	0x2000000c

08002440 <OnPingSlotPeriodicityChanged>:
static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 8002440:	4b01      	ldr	r3, [pc, #4]	@ (8002448 <OnPingSlotPeriodicityChanged+0x8>)
 8002442:	7418      	strb	r0, [r3, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	2000000c 	.word	0x2000000c

0800244c <OnBeaconStatusChange>:
  if (params != NULL)
 800244c:	2800      	cmp	r0, #0
 800244e:	d03f      	beq.n	80024d0 <OnBeaconStatusChange+0x84>
{
 8002450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002454:	b08c      	sub	sp, #48	@ 0x30
 8002456:	4603      	mov	r3, r0
    switch (params->State)
 8002458:	7842      	ldrb	r2, [r0, #1]
 800245a:	2a02      	cmp	r2, #2
 800245c:	d00a      	beq.n	8002474 <OnBeaconStatusChange+0x28>
 800245e:	2a03      	cmp	r2, #3
 8002460:	d02f      	beq.n	80024c2 <OnBeaconStatusChange+0x76>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 8002462:	4b1c      	ldr	r3, [pc, #112]	@ (80024d4 <OnBeaconStatusChange+0x88>)
 8002464:	2200      	movs	r2, #0
 8002466:	4611      	mov	r1, r2
 8002468:	2002      	movs	r0, #2
 800246a:	f013 f967 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
}
 800246e:	b00c      	add	sp, #48	@ 0x30
 8002470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        APP_LOG(TS_OFF, VLEVEL_M,
 8002474:	7c02      	ldrb	r2, [r0, #16]
 8002476:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 800247a:	f990 0014 	ldrsb.w	r0, [r0, #20]
 800247e:	7d5c      	ldrb	r4, [r3, #21]
 8002480:	7d9d      	ldrb	r5, [r3, #22]
 8002482:	7dde      	ldrb	r6, [r3, #23]
 8002484:	7e1f      	ldrb	r7, [r3, #24]
 8002486:	f893 c019 	ldrb.w	ip, [r3, #25]
 800248a:	f893 e01a 	ldrb.w	lr, [r3, #26]
 800248e:	f893 801b 	ldrb.w	r8, [r3, #27]
 8002492:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 8002496:	f8cd e028 	str.w	lr, [sp, #40]	@ 0x28
 800249a:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 800249e:	9708      	str	r7, [sp, #32]
 80024a0:	9607      	str	r6, [sp, #28]
 80024a2:	9506      	str	r5, [sp, #24]
 80024a4:	9405      	str	r4, [sp, #20]
 80024a6:	685c      	ldr	r4, [r3, #4]
 80024a8:	9404      	str	r4, [sp, #16]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	9303      	str	r3, [sp, #12]
 80024ae:	9002      	str	r0, [sp, #8]
 80024b0:	9101      	str	r1, [sp, #4]
 80024b2:	9200      	str	r2, [sp, #0]
 80024b4:	4b08      	ldr	r3, [pc, #32]	@ (80024d8 <OnBeaconStatusChange+0x8c>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	4611      	mov	r1, r2
 80024ba:	2002      	movs	r0, #2
 80024bc:	f013 f93e 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
        break;
 80024c0:	e7d5      	b.n	800246e <OnBeaconStatusChange+0x22>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 80024c2:	4b06      	ldr	r3, [pc, #24]	@ (80024dc <OnBeaconStatusChange+0x90>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	4611      	mov	r1, r2
 80024c8:	2002      	movs	r0, #2
 80024ca:	f013 f937 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
}
 80024ce:	e7ce      	b.n	800246e <OnBeaconStatusChange+0x22>
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	08016364 	.word	0x08016364
 80024d8:	0801637c 	.word	0x0801637c
 80024dc:	080163f0 	.word	0x080163f0

080024e0 <OnClassChange>:
{
 80024e0:	b500      	push	{lr}
 80024e2:	b083      	sub	sp, #12
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 80024e4:	4b05      	ldr	r3, [pc, #20]	@ (80024fc <OnClassChange+0x1c>)
 80024e6:	5c1b      	ldrb	r3, [r3, r0]
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	4b05      	ldr	r3, [pc, #20]	@ (8002500 <OnClassChange+0x20>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	4611      	mov	r1, r2
 80024f0:	2002      	movs	r0, #2
 80024f2:	f013 f923 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
}
 80024f6:	b003      	add	sp, #12
 80024f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80024fc:	0801642c 	.word	0x0801642c
 8002500:	08016410 	.word	0x08016410

08002504 <OnNvmDataChange>:

  /* USER CODE END StoreContext_Last */
}

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 8002504:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 8002506:	2801      	cmp	r0, #1
 8002508:	d006      	beq.n	8002518 <OnNvmDataChange+0x14>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800250a:	4b07      	ldr	r3, [pc, #28]	@ (8002528 <OnNvmDataChange+0x24>)
 800250c:	2200      	movs	r2, #0
 800250e:	4611      	mov	r1, r2
 8002510:	2002      	movs	r0, #2
 8002512:	f013 f913 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 8002516:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 8002518:	4b04      	ldr	r3, [pc, #16]	@ (800252c <OnNvmDataChange+0x28>)
 800251a:	2200      	movs	r2, #0
 800251c:	4611      	mov	r1, r2
 800251e:	2002      	movs	r0, #2
 8002520:	f013 f90c 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
 8002524:	e7f7      	b.n	8002516 <OnNvmDataChange+0x12>
 8002526:	bf00      	nop
 8002528:	08016444 	.word	0x08016444
 800252c:	08016430 	.word	0x08016430

08002530 <OnTxTimerEvent>:
{
 8002530:	b508      	push	{r3, lr}
  osThreadFlagsSet(Thd_LoraSendProcessId, 1);
 8002532:	2101      	movs	r1, #1
 8002534:	4b03      	ldr	r3, [pc, #12]	@ (8002544 <OnTxTimerEvent+0x14>)
 8002536:	6818      	ldr	r0, [r3, #0]
 8002538:	f006 fdde 	bl	80090f8 <osThreadFlagsSet>
  UTIL_TIMER_Start(&TxTimer);
 800253c:	4802      	ldr	r0, [pc, #8]	@ (8002548 <OnTxTimerEvent+0x18>)
 800253e:	f013 fbd5 	bl	8015cec <UTIL_TIMER_Start>
}
 8002542:	bd08      	pop	{r3, pc}
 8002544:	200005a0 	.word	0x200005a0
 8002548:	200005bc 	.word	0x200005bc

0800254c <OnMacProcessNotify>:
{
 800254c:	b508      	push	{r3, lr}
  osThreadFlagsSet(Thd_LmHandlerProcessId, 1);
 800254e:	2101      	movs	r1, #1
 8002550:	4b02      	ldr	r3, [pc, #8]	@ (800255c <OnMacProcessNotify+0x10>)
 8002552:	6818      	ldr	r0, [r3, #0]
 8002554:	f006 fdd0 	bl	80090f8 <osThreadFlagsSet>
}
 8002558:	bd08      	pop	{r3, pc}
 800255a:	bf00      	nop
 800255c:	20000594 	.word	0x20000594

08002560 <OnSystemReset>:
{
 8002560:	b508      	push	{r3, lr}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002562:	f009 fac3 	bl	800baec <LmHandlerHalt>
 8002566:	b100      	cbz	r0, 800256a <OnSystemReset+0xa>
}
 8002568:	bd08      	pop	{r3, pc}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800256a:	f008 ff1d 	bl	800b3a8 <LmHandlerJoinStatus>
 800256e:	2801      	cmp	r0, #1
 8002570:	d1fa      	bne.n	8002568 <OnSystemReset+0x8>
    NVIC_SystemReset();
 8002572:	f7ff ff4b 	bl	800240c <__NVIC_SystemReset>
	...

08002578 <OnTxPeriodicityChanged>:
{
 8002578:	b510      	push	{r4, lr}
  TxPeriodicity = periodicity;
 800257a:	4b09      	ldr	r3, [pc, #36]	@ (80025a0 <OnTxPeriodicityChanged+0x28>)
 800257c:	6018      	str	r0, [r3, #0]
  if (TxPeriodicity == 0)
 800257e:	b910      	cbnz	r0, 8002586 <OnTxPeriodicityChanged+0xe>
    TxPeriodicity = APP_TX_DUTYCYCLE;
 8002580:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002584:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Stop(&TxTimer);
 8002586:	4c07      	ldr	r4, [pc, #28]	@ (80025a4 <OnTxPeriodicityChanged+0x2c>)
 8002588:	4620      	mov	r0, r4
 800258a:	f013 fb55 	bl	8015c38 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800258e:	4b04      	ldr	r3, [pc, #16]	@ (80025a0 <OnTxPeriodicityChanged+0x28>)
 8002590:	6819      	ldr	r1, [r3, #0]
 8002592:	4620      	mov	r0, r4
 8002594:	f013 fbf0 	bl	8015d78 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 8002598:	4620      	mov	r0, r4
 800259a:	f013 fba7 	bl	8015cec <UTIL_TIMER_Start>
}
 800259e:	bd10      	pop	{r4, pc}
 80025a0:	20000008 	.word	0x20000008
 80025a4:	200005bc 	.word	0x200005bc

080025a8 <OnTxData>:
  if ((params != NULL))
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d042      	beq.n	8002632 <OnTxData+0x8a>
{
 80025ac:	b510      	push	{r4, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 80025b2:	7803      	ldrb	r3, [r0, #0]
 80025b4:	b90b      	cbnz	r3, 80025ba <OnTxData+0x12>
}
 80025b6:	b004      	add	sp, #16
 80025b8:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 80025ba:	2201      	movs	r2, #1
 80025bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80025c0:	481c      	ldr	r0, [pc, #112]	@ (8002634 <OnTxData+0x8c>)
 80025c2:	f002 fe17 	bl	80051f4 <HAL_GPIO_WritePin>
      UTIL_TIMER_Start(&TxLedTimer);
 80025c6:	481c      	ldr	r0, [pc, #112]	@ (8002638 <OnTxData+0x90>)
 80025c8:	f013 fb90 	bl	8015cec <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 80025cc:	4b1b      	ldr	r3, [pc, #108]	@ (800263c <OnTxData+0x94>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	4611      	mov	r1, r2
 80025d2:	2002      	movs	r0, #2
 80025d4:	f013 f8b2 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 80025d8:	7c23      	ldrb	r3, [r4, #16]
 80025da:	f994 200a 	ldrsb.w	r2, [r4, #10]
 80025de:	f994 1018 	ldrsb.w	r1, [r4, #24]
 80025e2:	9103      	str	r1, [sp, #12]
 80025e4:	9202      	str	r2, [sp, #8]
 80025e6:	9301      	str	r3, [sp, #4]
 80025e8:	68e3      	ldr	r3, [r4, #12]
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	4b14      	ldr	r3, [pc, #80]	@ (8002640 <OnTxData+0x98>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	4611      	mov	r1, r2
 80025f2:	2003      	movs	r0, #3
 80025f4:	f013 f8a2 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 80025f8:	4b12      	ldr	r3, [pc, #72]	@ (8002644 <OnTxData+0x9c>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	4611      	mov	r1, r2
 80025fe:	2003      	movs	r0, #3
 8002600:	f013 f89c 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 8002604:	7a23      	ldrb	r3, [r4, #8]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d10c      	bne.n	8002624 <OnTxData+0x7c>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800260a:	7a63      	ldrb	r3, [r4, #9]
 800260c:	b143      	cbz	r3, 8002620 <OnTxData+0x78>
 800260e:	4b0e      	ldr	r3, [pc, #56]	@ (8002648 <OnTxData+0xa0>)
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	4b0e      	ldr	r3, [pc, #56]	@ (800264c <OnTxData+0xa4>)
 8002614:	2200      	movs	r2, #0
 8002616:	4611      	mov	r1, r2
 8002618:	2003      	movs	r0, #3
 800261a:	f013 f88f 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
 800261e:	e7ca      	b.n	80025b6 <OnTxData+0xe>
 8002620:	4b0b      	ldr	r3, [pc, #44]	@ (8002650 <OnTxData+0xa8>)
 8002622:	e7f5      	b.n	8002610 <OnTxData+0x68>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 8002624:	4b0b      	ldr	r3, [pc, #44]	@ (8002654 <OnTxData+0xac>)
 8002626:	2200      	movs	r2, #0
 8002628:	4611      	mov	r1, r2
 800262a:	2003      	movs	r0, #3
 800262c:	f013 f886 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
}
 8002630:	e7c1      	b.n	80025b6 <OnTxData+0xe>
 8002632:	4770      	bx	lr
 8002634:	48000400 	.word	0x48000400
 8002638:	20000484 	.word	0x20000484
 800263c:	08016464 	.word	0x08016464
 8002640:	08016498 	.word	0x08016498
 8002644:	080164cc 	.word	0x080164cc
 8002648:	08016458 	.word	0x08016458
 800264c:	080164dc 	.word	0x080164dc
 8002650:	0801645c 	.word	0x0801645c
 8002654:	080164f0 	.word	0x080164f0

08002658 <OnJoinRequest>:
  if (joinParams != NULL)
 8002658:	2800      	cmp	r0, #0
 800265a:	d039      	beq.n	80026d0 <OnJoinRequest+0x78>
{
 800265c:	b510      	push	{r4, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 8002662:	f990 3006 	ldrsb.w	r3, [r0, #6]
 8002666:	b9fb      	cbnz	r3, 80026a8 <OnJoinRequest+0x50>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8002668:	481a      	ldr	r0, [pc, #104]	@ (80026d4 <OnJoinRequest+0x7c>)
 800266a:	f013 fae5 	bl	8015c38 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 800266e:	2200      	movs	r2, #0
 8002670:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002674:	4818      	ldr	r0, [pc, #96]	@ (80026d8 <OnJoinRequest+0x80>)
 8002676:	f002 fdbd 	bl	80051f4 <HAL_GPIO_WritePin>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800267a:	4b18      	ldr	r3, [pc, #96]	@ (80026dc <OnJoinRequest+0x84>)
 800267c:	2200      	movs	r2, #0
 800267e:	4611      	mov	r1, r2
 8002680:	2002      	movs	r0, #2
 8002682:	f013 f85b 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 8002686:	79e3      	ldrb	r3, [r4, #7]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d006      	beq.n	800269a <OnJoinRequest+0x42>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800268c:	4b14      	ldr	r3, [pc, #80]	@ (80026e0 <OnJoinRequest+0x88>)
 800268e:	2200      	movs	r2, #0
 8002690:	4611      	mov	r1, r2
 8002692:	2002      	movs	r0, #2
 8002694:	f013 f852 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
 8002698:	e00c      	b.n	80026b4 <OnJoinRequest+0x5c>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800269a:	4b12      	ldr	r3, [pc, #72]	@ (80026e4 <OnJoinRequest+0x8c>)
 800269c:	2200      	movs	r2, #0
 800269e:	4611      	mov	r1, r2
 80026a0:	2002      	movs	r0, #2
 80026a2:	f013 f84b 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
 80026a6:	e005      	b.n	80026b4 <OnJoinRequest+0x5c>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 80026a8:	4b0f      	ldr	r3, [pc, #60]	@ (80026e8 <OnJoinRequest+0x90>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	4611      	mov	r1, r2
 80026ae:	2002      	movs	r0, #2
 80026b0:	f013 f844 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:JOIN | DR:%d | PWR:%d\r\n", joinParams->Datarate, joinParams->TxPower);
 80026b4:	f994 3004 	ldrsb.w	r3, [r4, #4]
 80026b8:	f994 2005 	ldrsb.w	r2, [r4, #5]
 80026bc:	9201      	str	r2, [sp, #4]
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	4b0a      	ldr	r3, [pc, #40]	@ (80026ec <OnJoinRequest+0x94>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	4611      	mov	r1, r2
 80026c6:	2003      	movs	r0, #3
 80026c8:	f013 f838 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
}
 80026cc:	b002      	add	sp, #8
 80026ce:	bd10      	pop	{r4, pc}
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20000454 	.word	0x20000454
 80026d8:	48000400 	.word	0x48000400
 80026dc:	08016500 	.word	0x08016500
 80026e0:	08016538 	.word	0x08016538
 80026e4:	08016518 	.word	0x08016518
 80026e8:	08016558 	.word	0x08016558
 80026ec:	08016574 	.word	0x08016574

080026f0 <OnStopJoinTimerEvent>:
{
 80026f0:	b510      	push	{r4, lr}
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 80026f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002730 <OnStopJoinTimerEvent+0x40>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d013      	beq.n	8002722 <OnStopJoinTimerEvent+0x32>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 80026fa:	4c0e      	ldr	r4, [pc, #56]	@ (8002734 <OnStopJoinTimerEvent+0x44>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002702:	4620      	mov	r0, r4
 8002704:	f002 fd76 	bl	80051f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 8002708:	2200      	movs	r2, #0
 800270a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800270e:	4620      	mov	r0, r4
 8002710:	f002 fd70 	bl	80051f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002714:	2200      	movs	r2, #0
 8002716:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800271a:	4620      	mov	r0, r4
 800271c:	f002 fd6a 	bl	80051f4 <HAL_GPIO_WritePin>
}
 8002720:	bd10      	pop	{r4, pc}
    osThreadFlagsSet(Thd_LoraStopJoinId, 1);
 8002722:	2101      	movs	r1, #1
 8002724:	4b04      	ldr	r3, [pc, #16]	@ (8002738 <OnStopJoinTimerEvent+0x48>)
 8002726:	6818      	ldr	r0, [r3, #0]
 8002728:	f006 fce6 	bl	80090f8 <osThreadFlagsSet>
 800272c:	e7e5      	b.n	80026fa <OnStopJoinTimerEvent+0xa>
 800272e:	bf00      	nop
 8002730:	20000070 	.word	0x20000070
 8002734:	48000400 	.word	0x48000400
 8002738:	20000598 	.word	0x20000598

0800273c <OnRxTimerLedEvent>:
{
 800273c:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 800273e:	2200      	movs	r2, #0
 8002740:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002744:	4801      	ldr	r0, [pc, #4]	@ (800274c <OnRxTimerLedEvent+0x10>)
 8002746:	f002 fd55 	bl	80051f4 <HAL_GPIO_WritePin>
}
 800274a:	bd08      	pop	{r3, pc}
 800274c:	48000400 	.word	0x48000400

08002750 <OnTxTimerLedEvent>:
{
 8002750:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 8002752:	2200      	movs	r2, #0
 8002754:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002758:	4801      	ldr	r0, [pc, #4]	@ (8002760 <OnTxTimerLedEvent+0x10>)
 800275a:	f002 fd4b 	bl	80051f4 <HAL_GPIO_WritePin>
}
 800275e:	bd08      	pop	{r3, pc}
 8002760:	48000400 	.word	0x48000400

08002764 <OnRxData>:
  if (params != NULL)
 8002764:	2900      	cmp	r1, #0
 8002766:	d06e      	beq.n	8002846 <OnRxData+0xe2>
{
 8002768:	b570      	push	{r4, r5, r6, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	4604      	mov	r4, r0
 800276e:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 8002770:	2201      	movs	r2, #1
 8002772:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002776:	4834      	ldr	r0, [pc, #208]	@ (8002848 <OnRxData+0xe4>)
 8002778:	f002 fd3c 	bl	80051f4 <HAL_GPIO_WritePin>
    UTIL_TIMER_Start(&RxLedTimer);
 800277c:	4833      	ldr	r0, [pc, #204]	@ (800284c <OnRxData+0xe8>)
 800277e:	f013 fab5 	bl	8015cec <UTIL_TIMER_Start>
    if (params->IsMcpsIndication)
 8002782:	782e      	ldrb	r6, [r5, #0]
 8002784:	2e00      	cmp	r6, #0
 8002786:	d042      	beq.n	800280e <OnRxData+0xaa>
      if (appData != NULL)
 8002788:	2c00      	cmp	r4, #0
 800278a:	d03f      	beq.n	800280c <OnRxData+0xa8>
        RxPort = appData->Port;
 800278c:	7826      	ldrb	r6, [r4, #0]
        if (appData->Buffer != NULL)
 800278e:	6863      	ldr	r3, [r4, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d03c      	beq.n	800280e <OnRxData+0xaa>
          switch (appData->Port)
 8002794:	2e02      	cmp	r6, #2
 8002796:	d016      	beq.n	80027c6 <OnRxData+0x62>
 8002798:	2e03      	cmp	r6, #3
 800279a:	d138      	bne.n	800280e <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 800279c:	7862      	ldrb	r2, [r4, #1]
 800279e:	2a01      	cmp	r2, #1
 80027a0:	d135      	bne.n	800280e <OnRxData+0xaa>
                switch (appData->Buffer[0])
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d006      	beq.n	80027b6 <OnRxData+0x52>
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d008      	beq.n	80027be <OnRxData+0x5a>
 80027ac:	bb7b      	cbnz	r3, 800280e <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_A);
 80027ae:	2000      	movs	r0, #0
 80027b0:	f008 fe0c 	bl	800b3cc <LmHandlerRequestClass>
                    break;
 80027b4:	e02b      	b.n	800280e <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_B);
 80027b6:	2001      	movs	r0, #1
 80027b8:	f008 fe08 	bl	800b3cc <LmHandlerRequestClass>
                    break;
 80027bc:	e027      	b.n	800280e <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_C);
 80027be:	2002      	movs	r0, #2
 80027c0:	f008 fe04 	bl	800b3cc <LmHandlerRequestClass>
                    break;
 80027c4:	e023      	b.n	800280e <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 80027c6:	7862      	ldrb	r2, [r4, #1]
 80027c8:	2a01      	cmp	r2, #1
 80027ca:	d120      	bne.n	800280e <OnRxData+0xaa>
                AppLedStateOn = appData->Buffer[0] & 0x01;
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002850 <OnRxData+0xec>)
 80027d4:	7013      	strb	r3, [r2, #0]
                if (AppLedStateOn == RESET)
 80027d6:	b963      	cbnz	r3, 80027f2 <OnRxData+0x8e>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 80027d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002854 <OnRxData+0xf0>)
 80027da:	2200      	movs	r2, #0
 80027dc:	4611      	mov	r1, r2
 80027de:	2003      	movs	r0, #3
 80027e0:	f012 ffac 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80027e4:	2200      	movs	r2, #0
 80027e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80027ea:	4817      	ldr	r0, [pc, #92]	@ (8002848 <OnRxData+0xe4>)
 80027ec:	f002 fd02 	bl	80051f4 <HAL_GPIO_WritePin>
 80027f0:	e00d      	b.n	800280e <OnRxData+0xaa>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 80027f2:	4b19      	ldr	r3, [pc, #100]	@ (8002858 <OnRxData+0xf4>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	4611      	mov	r1, r2
 80027f8:	2003      	movs	r0, #3
 80027fa:	f012 ff9f 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 80027fe:	2201      	movs	r2, #1
 8002800:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002804:	4810      	ldr	r0, [pc, #64]	@ (8002848 <OnRxData+0xe4>)
 8002806:	f002 fcf5 	bl	80051f4 <HAL_GPIO_WritePin>
 800280a:	e000      	b.n	800280e <OnRxData+0xaa>
  uint8_t RxPort = 0;
 800280c:	2600      	movs	r6, #0
    if (params->RxSlot < RX_SLOT_NONE)
 800280e:	7c2b      	ldrb	r3, [r5, #16]
 8002810:	2b05      	cmp	r3, #5
 8002812:	d901      	bls.n	8002818 <OnRxData+0xb4>
}
 8002814:	b006      	add	sp, #24
 8002816:	bd70      	pop	{r4, r5, r6, pc}
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 8002818:	f995 2008 	ldrsb.w	r2, [r5, #8]
 800281c:	f995 1009 	ldrsb.w	r1, [r5, #9]
 8002820:	f995 000a 	ldrsb.w	r0, [r5, #10]
 8002824:	9005      	str	r0, [sp, #20]
 8002826:	9104      	str	r1, [sp, #16]
 8002828:	490c      	ldr	r1, [pc, #48]	@ (800285c <OnRxData+0xf8>)
 800282a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800282e:	9303      	str	r3, [sp, #12]
 8002830:	9202      	str	r2, [sp, #8]
 8002832:	9601      	str	r6, [sp, #4]
 8002834:	68eb      	ldr	r3, [r5, #12]
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	4b09      	ldr	r3, [pc, #36]	@ (8002860 <OnRxData+0xfc>)
 800283a:	2200      	movs	r2, #0
 800283c:	4611      	mov	r1, r2
 800283e:	2003      	movs	r0, #3
 8002840:	f012 ff7c 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
}
 8002844:	e7e6      	b.n	8002814 <OnRxData+0xb0>
 8002846:	4770      	bx	lr
 8002848:	48000400 	.word	0x48000400
 800284c:	2000046c 	.word	0x2000046c
 8002850:	2000049c 	.word	0x2000049c
 8002854:	080165a0 	.word	0x080165a0
 8002858:	080165ac 	.word	0x080165ac
 800285c:	08016894 	.word	0x08016894
 8002860:	080165b8 	.word	0x080165b8

08002864 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002864:	b538      	push	{r3, r4, r5, lr}
 8002866:	4604      	mov	r4, r0
 8002868:	460d      	mov	r5, r1
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800286a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800286e:	4805      	ldr	r0, [pc, #20]	@ (8002884 <OnStoreContextRequest+0x20>)
 8002870:	f7fe fe0c 	bl	800148c <FLASH_IF_Erase>
 8002874:	b100      	cbz	r0, 8002878 <OnStoreContextRequest+0x14>
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 8002876:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 8002878:	462a      	mov	r2, r5
 800287a:	4621      	mov	r1, r4
 800287c:	4801      	ldr	r0, [pc, #4]	@ (8002884 <OnStoreContextRequest+0x20>)
 800287e:	f7fe fdcd 	bl	800141c <FLASH_IF_Write>
}
 8002882:	e7f8      	b.n	8002876 <OnStoreContextRequest+0x12>
 8002884:	0803f000 	.word	0x0803f000

08002888 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002888:	b508      	push	{r3, lr}
 800288a:	460a      	mov	r2, r1
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800288c:	4901      	ldr	r1, [pc, #4]	@ (8002894 <OnRestoreContextRequest+0xc>)
 800288e:	f7fe fde1 	bl	8001454 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 8002892:	bd08      	pop	{r3, pc}
 8002894:	0803f000 	.word	0x0803f000

08002898 <StopJoin>:
{
 8002898:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 800289a:	4c1e      	ldr	r4, [pc, #120]	@ (8002914 <StopJoin+0x7c>)
 800289c:	2201      	movs	r2, #1
 800289e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028a2:	4620      	mov	r0, r4
 80028a4:	f002 fca6 	bl	80051f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 80028a8:	2201      	movs	r2, #1
 80028aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80028ae:	4620      	mov	r0, r4
 80028b0:	f002 fca0 	bl	80051f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 80028b4:	2201      	movs	r2, #1
 80028b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80028ba:	4620      	mov	r0, r4
 80028bc:	f002 fc9a 	bl	80051f4 <HAL_GPIO_WritePin>
  UTIL_TIMER_Stop(&TxTimer);
 80028c0:	4815      	ldr	r0, [pc, #84]	@ (8002918 <StopJoin+0x80>)
 80028c2:	f013 f9b9 	bl	8015c38 <UTIL_TIMER_Stop>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 80028c6:	f009 f909 	bl	800badc <LmHandlerStop>
 80028ca:	b148      	cbz	r0, 80028e0 <StopJoin+0x48>
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 80028cc:	4b13      	ldr	r3, [pc, #76]	@ (800291c <StopJoin+0x84>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	4611      	mov	r1, r2
 80028d2:	2002      	movs	r0, #2
 80028d4:	f012 ff32 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Start(&StopJoinTimer);
 80028d8:	4811      	ldr	r0, [pc, #68]	@ (8002920 <StopJoin+0x88>)
 80028da:	f013 fa07 	bl	8015cec <UTIL_TIMER_Start>
}
 80028de:	bd38      	pop	{r3, r4, r5, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 80028e0:	4b10      	ldr	r3, [pc, #64]	@ (8002924 <StopJoin+0x8c>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	4611      	mov	r1, r2
 80028e6:	2002      	movs	r0, #2
 80028e8:	f012 ff28 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_ABP;
 80028ec:	4c0e      	ldr	r4, [pc, #56]	@ (8002928 <StopJoin+0x90>)
 80028ee:	2501      	movs	r5, #1
 80028f0:	7025      	strb	r5, [r4, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 80028f2:	4b0e      	ldr	r3, [pc, #56]	@ (800292c <StopJoin+0x94>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	4611      	mov	r1, r2
 80028f8:	2002      	movs	r0, #2
 80028fa:	f012 ff1f 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
    LmHandlerConfigure(&LmHandlerParams);
 80028fe:	480c      	ldr	r0, [pc, #48]	@ (8002930 <StopJoin+0x98>)
 8002900:	f008 ff74 	bl	800b7ec <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 8002904:	4629      	mov	r1, r5
 8002906:	7820      	ldrb	r0, [r4, #0]
 8002908:	f008 fdba 	bl	800b480 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800290c:	4802      	ldr	r0, [pc, #8]	@ (8002918 <StopJoin+0x80>)
 800290e:	f013 f9ed 	bl	8015cec <UTIL_TIMER_Start>
 8002912:	e7e1      	b.n	80028d8 <StopJoin+0x40>
 8002914:	48000400 	.word	0x48000400
 8002918:	200005bc 	.word	0x200005bc
 800291c:	08016600 	.word	0x08016600
 8002920:	200005a4 	.word	0x200005a4
 8002924:	08016620 	.word	0x08016620
 8002928:	20000070 	.word	0x20000070
 800292c:	08016634 	.word	0x08016634
 8002930:	2000000c 	.word	0x2000000c

08002934 <Thd_LoraStopJoin>:
{
 8002934:	b508      	push	{r3, lr}
    osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8002936:	f04f 32ff 	mov.w	r2, #4294967295
 800293a:	2100      	movs	r1, #0
 800293c:	2001      	movs	r0, #1
 800293e:	f006 fc23 	bl	8009188 <osThreadFlagsWait>
    StopJoin();  /*what you want to do*/
 8002942:	f7ff ffa9 	bl	8002898 <StopJoin>
  for (;;)
 8002946:	e7f6      	b.n	8002936 <Thd_LoraStopJoin+0x2>

08002948 <StoreContext>:
{
 8002948:	b508      	push	{r3, lr}
  status = LmHandlerNvmDataStore();
 800294a:	f009 f95b 	bl	800bc04 <LmHandlerNvmDataStore>
  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800294e:	f110 0f08 	cmn.w	r0, #8
 8002952:	d003      	beq.n	800295c <StoreContext+0x14>
  else if (status == LORAMAC_HANDLER_ERROR)
 8002954:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002958:	d007      	beq.n	800296a <StoreContext+0x22>
}
 800295a:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800295c:	4b06      	ldr	r3, [pc, #24]	@ (8002978 <StoreContext+0x30>)
 800295e:	2200      	movs	r2, #0
 8002960:	4611      	mov	r1, r2
 8002962:	2002      	movs	r0, #2
 8002964:	f012 feea 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
 8002968:	e7f7      	b.n	800295a <StoreContext+0x12>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800296a:	4b04      	ldr	r3, [pc, #16]	@ (800297c <StoreContext+0x34>)
 800296c:	2200      	movs	r2, #0
 800296e:	4611      	mov	r1, r2
 8002970:	2002      	movs	r0, #2
 8002972:	f012 fee3 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
}
 8002976:	e7f0      	b.n	800295a <StoreContext+0x12>
 8002978:	08016654 	.word	0x08016654
 800297c:	0801666c 	.word	0x0801666c

08002980 <Thd_LoraStoreContext>:
{
 8002980:	b508      	push	{r3, lr}
    osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8002982:	f04f 32ff 	mov.w	r2, #4294967295
 8002986:	2100      	movs	r1, #0
 8002988:	2001      	movs	r0, #1
 800298a:	f006 fbfd 	bl	8009188 <osThreadFlagsWait>
    StoreContext();  /*what you want to do*/
 800298e:	f7ff ffdb 	bl	8002948 <StoreContext>
  for (;;)
 8002992:	e7f6      	b.n	8002982 <Thd_LoraStoreContext+0x2>

08002994 <SendTxData>:
{
 8002994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002996:	b087      	sub	sp, #28
  uint8_t batteryLevel = GetBatteryLevel();
 8002998:	f7ff f8bc 	bl	8001b14 <GetBatteryLevel>
 800299c:	4604      	mov	r4, r0
  if (LmHandlerIsBusy() == false)
 800299e:	f008 fde9 	bl	800b574 <LmHandlerIsBusy>
 80029a2:	b190      	cbz	r0, 80029ca <SendTxData+0x36>
  UTIL_TIMER_Time_t nextTxIn = 0;
 80029a4:	2500      	movs	r5, #0
    UTIL_TIMER_Stop(&TxTimer);
 80029a6:	4c54      	ldr	r4, [pc, #336]	@ (8002af8 <SendTxData+0x164>)
 80029a8:	4620      	mov	r0, r4
 80029aa:	f013 f945 	bl	8015c38 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 80029ae:	4b53      	ldr	r3, [pc, #332]	@ (8002afc <SendTxData+0x168>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4629      	mov	r1, r5
 80029b4:	429d      	cmp	r5, r3
 80029b6:	bf38      	it	cc
 80029b8:	4619      	movcc	r1, r3
 80029ba:	4620      	mov	r0, r4
 80029bc:	f013 f9dc 	bl	8015d78 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 80029c0:	4620      	mov	r0, r4
 80029c2:	f013 f993 	bl	8015cec <UTIL_TIMER_Start>
}
 80029c6:	b007      	add	sp, #28
 80029c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sensor_data = sensor_data_acquisition();
 80029ca:	a803      	add	r0, sp, #12
 80029cc:	f001 f83a 	bl	8003a44 <sensor_data_acquisition>
    APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 80029d0:	9400      	str	r4, [sp, #0]
 80029d2:	4b4b      	ldr	r3, [pc, #300]	@ (8002b00 <SendTxData+0x16c>)
 80029d4:	2201      	movs	r2, #1
 80029d6:	2100      	movs	r1, #0
 80029d8:	2002      	movs	r0, #2
 80029da:	f012 feaf 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 80029de:	9d04      	ldr	r5, [sp, #16]
 80029e0:	4628      	mov	r0, r5
 80029e2:	f7fe f803 	bl	80009ec <__aeabi_f2iz>
 80029e6:	b200      	sxth	r0, r0
 80029e8:	9000      	str	r0, [sp, #0]
 80029ea:	4b46      	ldr	r3, [pc, #280]	@ (8002b04 <SendTxData+0x170>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	2100      	movs	r1, #0
 80029f0:	2002      	movs	r0, #2
 80029f2:	f012 fea3 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_ON, VLEVEL_M, "hum: %d\r\n", (int16_t)(sensor_data.humidity));
 80029f6:	9e05      	ldr	r6, [sp, #20]
 80029f8:	4630      	mov	r0, r6
 80029fa:	f7fd fff7 	bl	80009ec <__aeabi_f2iz>
 80029fe:	b200      	sxth	r0, r0
 8002a00:	9000      	str	r0, [sp, #0]
 8002a02:	4b41      	ldr	r3, [pc, #260]	@ (8002b08 <SendTxData+0x174>)
 8002a04:	2201      	movs	r2, #1
 8002a06:	2100      	movs	r1, #0
 8002a08:	2002      	movs	r0, #2
 8002a0a:	f012 fe97 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_ON, VLEVEL_M, "press: %d\r\n", (int16_t)(sensor_data.pressure));
 8002a0e:	9f03      	ldr	r7, [sp, #12]
 8002a10:	4638      	mov	r0, r7
 8002a12:	f7fd ffeb 	bl	80009ec <__aeabi_f2iz>
 8002a16:	b200      	sxth	r0, r0
 8002a18:	9000      	str	r0, [sp, #0]
 8002a1a:	4b3c      	ldr	r3, [pc, #240]	@ (8002b0c <SendTxData+0x178>)
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	2100      	movs	r1, #0
 8002a20:	2002      	movs	r0, #2
 8002a22:	f012 fe8b 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
    AppData.Port = LORAWAN_USER_APP_PORT;
 8002a26:	2402      	movs	r4, #2
 8002a28:	4b39      	ldr	r3, [pc, #228]	@ (8002b10 <SendTxData+0x17c>)
 8002a2a:	701c      	strb	r4, [r3, #0]
    CayenneLppReset();
 8002a2c:	f7ff fc16 	bl	800225c <CayenneLppReset>
    CayenneLppAddBarometricPressure(channel++, sensor_data.pressure);
 8002a30:	4639      	mov	r1, r7
 8002a32:	2000      	movs	r0, #0
 8002a34:	f7ff fcb8 	bl	80023a8 <CayenneLppAddBarometricPressure>
    CayenneLppAddTemperature(channel++, sensor_data.temperature);
 8002a38:	4629      	mov	r1, r5
 8002a3a:	2001      	movs	r0, #1
 8002a3c:	f7ff fc66 	bl	800230c <CayenneLppAddTemperature>
    CayenneLppAddRelativeHumidity(channel++, (uint16_t)(sensor_data.humidity));
 8002a40:	4630      	mov	r0, r6
 8002a42:	f7fd fff9 	bl	8000a38 <__aeabi_f2uiz>
 8002a46:	b280      	uxth	r0, r0
 8002a48:	f7fd ff78 	bl	800093c <__aeabi_ui2f>
 8002a4c:	4601      	mov	r1, r0
 8002a4e:	4620      	mov	r0, r4
 8002a50:	f7ff fc88 	bl	8002364 <CayenneLppAddRelativeHumidity>
    if ((LmHandlerParams.ActiveRegion != LORAMAC_REGION_US915) && (LmHandlerParams.ActiveRegion != LORAMAC_REGION_AU915)
 8002a54:	4b2f      	ldr	r3, [pc, #188]	@ (8002b14 <SendTxData+0x180>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d002      	beq.n	8002a62 <SendTxData+0xce>
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d000      	beq.n	8002a62 <SendTxData+0xce>
        && (LmHandlerParams.ActiveRegion != LORAMAC_REGION_AS923))
 8002a60:	b9ab      	cbnz	r3, 8002a8e <SendTxData+0xfa>
    CayenneLppCopy(AppData.Buffer);
 8002a62:	4c2b      	ldr	r4, [pc, #172]	@ (8002b10 <SendTxData+0x17c>)
 8002a64:	6860      	ldr	r0, [r4, #4]
 8002a66:	f7ff fc05 	bl	8002274 <CayenneLppCopy>
    AppData.BufferSize = CayenneLppGetSize();
 8002a6a:	f7ff fbfd 	bl	8002268 <CayenneLppGetSize>
 8002a6e:	7060      	strb	r0, [r4, #1]
    if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002a70:	4b29      	ldr	r3, [pc, #164]	@ (8002b18 <SendTxData+0x184>)
 8002a72:	7a5b      	ldrb	r3, [r3, #9]
 8002a74:	b9bb      	cbnz	r3, 8002aa6 <SendTxData+0x112>
    status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 8002a76:	2200      	movs	r2, #0
 8002a78:	4b26      	ldr	r3, [pc, #152]	@ (8002b14 <SendTxData+0x180>)
 8002a7a:	78d9      	ldrb	r1, [r3, #3]
 8002a7c:	4824      	ldr	r0, [pc, #144]	@ (8002b10 <SendTxData+0x17c>)
 8002a7e:	f008 fd97 	bl	800b5b0 <LmHandlerSend>
    if (LORAMAC_HANDLER_SUCCESS == status)
 8002a82:	b1f0      	cbz	r0, 8002ac2 <SendTxData+0x12e>
    else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 8002a84:	f110 0f06 	cmn.w	r0, #6
 8002a88:	d023      	beq.n	8002ad2 <SendTxData+0x13e>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002a8a:	2500      	movs	r5, #0
 8002a8c:	e78b      	b.n	80029a6 <SendTxData+0x12>
      CayenneLppAddDigitalInput(channel++, GetBatteryLevel());
 8002a8e:	f7ff f841 	bl	8001b14 <GetBatteryLevel>
 8002a92:	4601      	mov	r1, r0
 8002a94:	2003      	movs	r0, #3
 8002a96:	f7ff fbf9 	bl	800228c <CayenneLppAddDigitalInput>
      CayenneLppAddDigitalOutput(channel++, AppLedStateOn);
 8002a9a:	4b20      	ldr	r3, [pc, #128]	@ (8002b1c <SendTxData+0x188>)
 8002a9c:	7819      	ldrb	r1, [r3, #0]
 8002a9e:	2004      	movs	r0, #4
 8002aa0:	f7ff fc14 	bl	80022cc <CayenneLppAddDigitalOutput>
 8002aa4:	e7dd      	b.n	8002a62 <SendTxData+0xce>
    if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002aa6:	f008 fc7f 	bl	800b3a8 <LmHandlerJoinStatus>
 8002aaa:	2801      	cmp	r0, #1
 8002aac:	d1e3      	bne.n	8002a76 <SendTxData+0xe2>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8002aae:	481a      	ldr	r0, [pc, #104]	@ (8002b18 <SendTxData+0x184>)
 8002ab0:	f013 f8c2 	bl	8015c38 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002aba:	4819      	ldr	r0, [pc, #100]	@ (8002b20 <SendTxData+0x18c>)
 8002abc:	f002 fb9a 	bl	80051f4 <HAL_GPIO_WritePin>
 8002ac0:	e7d9      	b.n	8002a76 <SendTxData+0xe2>
      APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8002ac2:	4b18      	ldr	r3, [pc, #96]	@ (8002b24 <SendTxData+0x190>)
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	4610      	mov	r0, r2
 8002aca:	f012 fe37 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002ace:	2500      	movs	r5, #0
 8002ad0:	e769      	b.n	80029a6 <SendTxData+0x12>
      nextTxIn = LmHandlerGetDutyCycleWaitTime();
 8002ad2:	f008 fc63 	bl	800b39c <LmHandlerGetDutyCycleWaitTime>
      if (nextTxIn > 0)
 8002ad6:	4605      	mov	r5, r0
 8002ad8:	2800      	cmp	r0, #0
 8002ada:	f43f af64 	beq.w	80029a6 <SendTxData+0x12>
        APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8002ade:	4b12      	ldr	r3, [pc, #72]	@ (8002b28 <SendTxData+0x194>)
 8002ae0:	fba3 2300 	umull	r2, r3, r3, r0
 8002ae4:	099b      	lsrs	r3, r3, #6
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	4b10      	ldr	r3, [pc, #64]	@ (8002b2c <SendTxData+0x198>)
 8002aea:	2201      	movs	r2, #1
 8002aec:	2100      	movs	r1, #0
 8002aee:	4610      	mov	r0, r2
 8002af0:	f012 fe24 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
 8002af4:	e757      	b.n	80029a6 <SendTxData+0x12>
 8002af6:	bf00      	nop
 8002af8:	200005bc 	.word	0x200005bc
 8002afc:	20000008 	.word	0x20000008
 8002b00:	08016684 	.word	0x08016684
 8002b04:	08016690 	.word	0x08016690
 8002b08:	0801669c 	.word	0x0801669c
 8002b0c:	080166a8 	.word	0x080166a8
 8002b10:	20000000 	.word	0x20000000
 8002b14:	2000000c 	.word	0x2000000c
 8002b18:	20000454 	.word	0x20000454
 8002b1c:	2000049c 	.word	0x2000049c
 8002b20:	48000400 	.word	0x48000400
 8002b24:	080166b4 	.word	0x080166b4
 8002b28:	10624dd3 	.word	0x10624dd3
 8002b2c:	080166c4 	.word	0x080166c4

08002b30 <Thd_LoraSendProcess>:
{
 8002b30:	b508      	push	{r3, lr}
    osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8002b32:	f04f 32ff 	mov.w	r2, #4294967295
 8002b36:	2100      	movs	r1, #0
 8002b38:	2001      	movs	r0, #1
 8002b3a:	f006 fb25 	bl	8009188 <osThreadFlagsWait>
    SendTxData();  /*what you want to do*/
 8002b3e:	f7ff ff29 	bl	8002994 <SendTxData>
  for (;;)
 8002b42:	e7f6      	b.n	8002b32 <Thd_LoraSendProcess+0x2>

08002b44 <Thd_LmHandlerProcess>:
{
 8002b44:	b508      	push	{r3, lr}
    osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8002b46:	f04f 32ff 	mov.w	r2, #4294967295
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	2001      	movs	r0, #1
 8002b4e:	f006 fb1b 	bl	8009188 <osThreadFlagsWait>
    LmHandlerProcess(); /*what you want to do*/
 8002b52:	f008 fc1b 	bl	800b38c <LmHandlerProcess>
  for (;;)
 8002b56:	e7f6      	b.n	8002b46 <Thd_LmHandlerProcess+0x2>

08002b58 <OnJoinTimerLedEvent>:
{
 8002b58:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 8002b5a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002b5e:	4802      	ldr	r0, [pc, #8]	@ (8002b68 <OnJoinTimerLedEvent+0x10>)
 8002b60:	f002 fb4d 	bl	80051fe <HAL_GPIO_TogglePin>
}
 8002b64:	bd08      	pop	{r3, pc}
 8002b66:	bf00      	nop
 8002b68:	48000400 	.word	0x48000400

08002b6c <LoRaWAN_Init>:
{
 8002b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b6e:	b087      	sub	sp, #28
  uint32_t feature_version = 0UL;
 8002b70:	2400      	movs	r4, #0
 8002b72:	9405      	str	r4, [sp, #20]
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 8002b74:	9402      	str	r4, [sp, #8]
 8002b76:	2703      	movs	r7, #3
 8002b78:	9701      	str	r7, [sp, #4]
 8002b7a:	2601      	movs	r6, #1
 8002b7c:	9600      	str	r6, [sp, #0]
 8002b7e:	4b5c      	ldr	r3, [pc, #368]	@ (8002cf0 <LoRaWAN_Init+0x184>)
 8002b80:	4622      	mov	r2, r4
 8002b82:	4621      	mov	r1, r4
 8002b84:	2002      	movs	r0, #2
 8002b86:	f012 fdd9 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 8002b8a:	9402      	str	r4, [sp, #8]
 8002b8c:	2305      	movs	r3, #5
 8002b8e:	9301      	str	r3, [sp, #4]
 8002b90:	2502      	movs	r5, #2
 8002b92:	9500      	str	r5, [sp, #0]
 8002b94:	4b57      	ldr	r3, [pc, #348]	@ (8002cf4 <LoRaWAN_Init+0x188>)
 8002b96:	4622      	mov	r2, r4
 8002b98:	4621      	mov	r1, r4
 8002b9a:	4628      	mov	r0, r5
 8002b9c:	f012 fdce 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 8002ba0:	9402      	str	r4, [sp, #8]
 8002ba2:	9701      	str	r7, [sp, #4]
 8002ba4:	9600      	str	r6, [sp, #0]
 8002ba6:	4b54      	ldr	r3, [pc, #336]	@ (8002cf8 <LoRaWAN_Init+0x18c>)
 8002ba8:	4622      	mov	r2, r4
 8002baa:	4621      	mov	r1, r4
 8002bac:	4628      	mov	r0, r5
 8002bae:	f012 fdc5 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 8002bb2:	a905      	add	r1, sp, #20
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	f008 ff7b 	bl	800bab0 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 8002bba:	9b05      	ldr	r3, [sp, #20]
 8002bbc:	0e1a      	lsrs	r2, r3, #24
 8002bbe:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002bc2:	9102      	str	r1, [sp, #8]
 8002bc4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002bc8:	9301      	str	r3, [sp, #4]
 8002bca:	9200      	str	r2, [sp, #0]
 8002bcc:	4b4b      	ldr	r3, [pc, #300]	@ (8002cfc <LoRaWAN_Init+0x190>)
 8002bce:	4622      	mov	r2, r4
 8002bd0:	4621      	mov	r1, r4
 8002bd2:	4628      	mov	r0, r5
 8002bd4:	f012 fdb2 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 8002bd8:	a905      	add	r1, sp, #20
 8002bda:	4630      	mov	r0, r6
 8002bdc:	f008 ff68 	bl	800bab0 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 8002be0:	9b05      	ldr	r3, [sp, #20]
 8002be2:	0e1a      	lsrs	r2, r3, #24
 8002be4:	b2d9      	uxtb	r1, r3
 8002be6:	9103      	str	r1, [sp, #12]
 8002be8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002bec:	9102      	str	r1, [sp, #8]
 8002bee:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002bf2:	9301      	str	r3, [sp, #4]
 8002bf4:	9200      	str	r2, [sp, #0]
 8002bf6:	4b42      	ldr	r3, [pc, #264]	@ (8002d00 <LoRaWAN_Init+0x194>)
 8002bf8:	4622      	mov	r2, r4
 8002bfa:	4621      	mov	r1, r4
 8002bfc:	4628      	mov	r0, r5
 8002bfe:	f012 fd9d 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8002c02:	9400      	str	r4, [sp, #0]
 8002c04:	4b3f      	ldr	r3, [pc, #252]	@ (8002d04 <LoRaWAN_Init+0x198>)
 8002c06:	4622      	mov	r2, r4
 8002c08:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002c0c:	483e      	ldr	r0, [pc, #248]	@ (8002d08 <LoRaWAN_Init+0x19c>)
 8002c0e:	f012 ffaf 	bl	8015b70 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8002c12:	9400      	str	r4, [sp, #0]
 8002c14:	4b3d      	ldr	r3, [pc, #244]	@ (8002d0c <LoRaWAN_Init+0x1a0>)
 8002c16:	4622      	mov	r2, r4
 8002c18:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002c1c:	483c      	ldr	r0, [pc, #240]	@ (8002d10 <LoRaWAN_Init+0x1a4>)
 8002c1e:	f012 ffa7 	bl	8015b70 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8002c22:	9400      	str	r4, [sp, #0]
 8002c24:	4b3b      	ldr	r3, [pc, #236]	@ (8002d14 <LoRaWAN_Init+0x1a8>)
 8002c26:	4632      	mov	r2, r6
 8002c28:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002c2c:	483a      	ldr	r0, [pc, #232]	@ (8002d18 <LoRaWAN_Init+0x1ac>)
 8002c2e:	f012 ff9f 	bl	8015b70 <UTIL_TIMER_Create>
  if (FLASH_IF_Init(NULL) != FLASH_IF_OK)
 8002c32:	4620      	mov	r0, r4
 8002c34:	f7fe fbec 	bl	8001410 <FLASH_IF_Init>
 8002c38:	2800      	cmp	r0, #0
 8002c3a:	d149      	bne.n	8002cd0 <LoRaWAN_Init+0x164>
  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 8002c3c:	2400      	movs	r4, #0
 8002c3e:	9400      	str	r4, [sp, #0]
 8002c40:	4b36      	ldr	r3, [pc, #216]	@ (8002d1c <LoRaWAN_Init+0x1b0>)
 8002c42:	4622      	mov	r2, r4
 8002c44:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002c48:	4835      	ldr	r0, [pc, #212]	@ (8002d20 <LoRaWAN_Init+0x1b4>)
 8002c4a:	f012 ff91 	bl	8015b70 <UTIL_TIMER_Create>
  Thd_LmHandlerProcessId = osThreadNew(Thd_LmHandlerProcess, NULL, &Thd_LmHandlerProcess_attr);
 8002c4e:	4a35      	ldr	r2, [pc, #212]	@ (8002d24 <LoRaWAN_Init+0x1b8>)
 8002c50:	4621      	mov	r1, r4
 8002c52:	4835      	ldr	r0, [pc, #212]	@ (8002d28 <LoRaWAN_Init+0x1bc>)
 8002c54:	f006 f9e4 	bl	8009020 <osThreadNew>
 8002c58:	4b34      	ldr	r3, [pc, #208]	@ (8002d2c <LoRaWAN_Init+0x1c0>)
 8002c5a:	6018      	str	r0, [r3, #0]
  if (Thd_LmHandlerProcessId == NULL)
 8002c5c:	2800      	cmp	r0, #0
 8002c5e:	d03a      	beq.n	8002cd6 <LoRaWAN_Init+0x16a>
  Thd_LoraSendProcessId = osThreadNew(Thd_LoraSendProcess, NULL, &Thd_LoraSendProcess_attr);
 8002c60:	4a33      	ldr	r2, [pc, #204]	@ (8002d30 <LoRaWAN_Init+0x1c4>)
 8002c62:	2100      	movs	r1, #0
 8002c64:	4833      	ldr	r0, [pc, #204]	@ (8002d34 <LoRaWAN_Init+0x1c8>)
 8002c66:	f006 f9db 	bl	8009020 <osThreadNew>
 8002c6a:	4b33      	ldr	r3, [pc, #204]	@ (8002d38 <LoRaWAN_Init+0x1cc>)
 8002c6c:	6018      	str	r0, [r3, #0]
  if (Thd_LoraSendProcessId == NULL)
 8002c6e:	2800      	cmp	r0, #0
 8002c70:	d034      	beq.n	8002cdc <LoRaWAN_Init+0x170>
  Thd_LoraStoreContextId = osThreadNew(Thd_LoraStoreContext, NULL, &Thd_LoraStoreContext_attr);
 8002c72:	4a32      	ldr	r2, [pc, #200]	@ (8002d3c <LoRaWAN_Init+0x1d0>)
 8002c74:	2100      	movs	r1, #0
 8002c76:	4832      	ldr	r0, [pc, #200]	@ (8002d40 <LoRaWAN_Init+0x1d4>)
 8002c78:	f006 f9d2 	bl	8009020 <osThreadNew>
 8002c7c:	4b31      	ldr	r3, [pc, #196]	@ (8002d44 <LoRaWAN_Init+0x1d8>)
 8002c7e:	6018      	str	r0, [r3, #0]
  if (Thd_LoraStoreContextId == NULL)
 8002c80:	b378      	cbz	r0, 8002ce2 <LoRaWAN_Init+0x176>
  Thd_LoraStopJoinId = osThreadNew(Thd_LoraStopJoin, NULL, &Thd_LoraStopJoin_attr);
 8002c82:	4a31      	ldr	r2, [pc, #196]	@ (8002d48 <LoRaWAN_Init+0x1dc>)
 8002c84:	2100      	movs	r1, #0
 8002c86:	4831      	ldr	r0, [pc, #196]	@ (8002d4c <LoRaWAN_Init+0x1e0>)
 8002c88:	f006 f9ca 	bl	8009020 <osThreadNew>
 8002c8c:	4b30      	ldr	r3, [pc, #192]	@ (8002d50 <LoRaWAN_Init+0x1e4>)
 8002c8e:	6018      	str	r0, [r3, #0]
  if (Thd_LoraStopJoinId == NULL)
 8002c90:	b350      	cbz	r0, 8002ce8 <LoRaWAN_Init+0x17c>
  LoraInfo_Init();
 8002c92:	f000 f883 	bl	8002d9c <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 8002c96:	492f      	ldr	r1, [pc, #188]	@ (8002d54 <LoRaWAN_Init+0x1e8>)
 8002c98:	482f      	ldr	r0, [pc, #188]	@ (8002d58 <LoRaWAN_Init+0x1ec>)
 8002c9a:	f008 fec9 	bl	800ba30 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 8002c9e:	482f      	ldr	r0, [pc, #188]	@ (8002d5c <LoRaWAN_Init+0x1f0>)
 8002ca0:	f008 fda4 	bl	800b7ec <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 8002ca4:	481c      	ldr	r0, [pc, #112]	@ (8002d18 <LoRaWAN_Init+0x1ac>)
 8002ca6:	f013 f821 	bl	8015cec <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType, ForceRejoin);
 8002caa:	2100      	movs	r1, #0
 8002cac:	4b2c      	ldr	r3, [pc, #176]	@ (8002d60 <LoRaWAN_Init+0x1f4>)
 8002cae:	7818      	ldrb	r0, [r3, #0]
 8002cb0:	f008 fbe6 	bl	800b480 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8002cb4:	4c2b      	ldr	r4, [pc, #172]	@ (8002d64 <LoRaWAN_Init+0x1f8>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	9200      	str	r2, [sp, #0]
 8002cba:	4b2b      	ldr	r3, [pc, #172]	@ (8002d68 <LoRaWAN_Init+0x1fc>)
 8002cbc:	492b      	ldr	r1, [pc, #172]	@ (8002d6c <LoRaWAN_Init+0x200>)
 8002cbe:	6809      	ldr	r1, [r1, #0]
 8002cc0:	4620      	mov	r0, r4
 8002cc2:	f012 ff55 	bl	8015b70 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	f013 f810 	bl	8015cec <UTIL_TIMER_Start>
}
 8002ccc:	b007      	add	sp, #28
 8002cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8002cd0:	f7fe fd59 	bl	8001786 <Error_Handler>
 8002cd4:	e7b2      	b.n	8002c3c <LoRaWAN_Init+0xd0>
    Error_Handler();
 8002cd6:	f7fe fd56 	bl	8001786 <Error_Handler>
 8002cda:	e7c1      	b.n	8002c60 <LoRaWAN_Init+0xf4>
    Error_Handler();
 8002cdc:	f7fe fd53 	bl	8001786 <Error_Handler>
 8002ce0:	e7c7      	b.n	8002c72 <LoRaWAN_Init+0x106>
    Error_Handler();
 8002ce2:	f7fe fd50 	bl	8001786 <Error_Handler>
 8002ce6:	e7cc      	b.n	8002c82 <LoRaWAN_Init+0x116>
    Error_Handler();
 8002ce8:	f7fe fd4d 	bl	8001786 <Error_Handler>
 8002cec:	e7d1      	b.n	8002c92 <LoRaWAN_Init+0x126>
 8002cee:	bf00      	nop
 8002cf0:	080166e4 	.word	0x080166e4
 8002cf4:	08016708 	.word	0x08016708
 8002cf8:	0801672c 	.word	0x0801672c
 8002cfc:	08016750 	.word	0x08016750
 8002d00:	08016774 	.word	0x08016774
 8002d04:	08002751 	.word	0x08002751
 8002d08:	20000484 	.word	0x20000484
 8002d0c:	0800273d 	.word	0x0800273d
 8002d10:	2000046c 	.word	0x2000046c
 8002d14:	08002b59 	.word	0x08002b59
 8002d18:	20000454 	.word	0x20000454
 8002d1c:	080026f1 	.word	0x080026f1
 8002d20:	200005a4 	.word	0x200005a4
 8002d24:	08016804 	.word	0x08016804
 8002d28:	08002b45 	.word	0x08002b45
 8002d2c:	20000594 	.word	0x20000594
 8002d30:	08016870 	.word	0x08016870
 8002d34:	08002b31 	.word	0x08002b31
 8002d38:	200005a0 	.word	0x200005a0
 8002d3c:	0801684c 	.word	0x0801684c
 8002d40:	08002981 	.word	0x08002981
 8002d44:	2000059c 	.word	0x2000059c
 8002d48:	08016828 	.word	0x08016828
 8002d4c:	08002935 	.word	0x08002935
 8002d50:	20000598 	.word	0x20000598
 8002d54:	01030000 	.word	0x01030000
 8002d58:	20000024 	.word	0x20000024
 8002d5c:	2000000c 	.word	0x2000000c
 8002d60:	20000070 	.word	0x20000070
 8002d64:	200005bc 	.word	0x200005bc
 8002d68:	08002531 	.word	0x08002531
 8002d6c:	20000008 	.word	0x20000008

08002d70 <HAL_GPIO_EXTI_Callback>:
{
 8002d70:	b508      	push	{r3, lr}
  switch (GPIO_Pin)
 8002d72:	2802      	cmp	r0, #2
 8002d74:	d002      	beq.n	8002d7c <HAL_GPIO_EXTI_Callback+0xc>
 8002d76:	2840      	cmp	r0, #64	@ 0x40
 8002d78:	d006      	beq.n	8002d88 <HAL_GPIO_EXTI_Callback+0x18>
}
 8002d7a:	bd08      	pop	{r3, pc}
      osThreadFlagsSet(Thd_LoraStopJoinId, 1);
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	4b05      	ldr	r3, [pc, #20]	@ (8002d94 <HAL_GPIO_EXTI_Callback+0x24>)
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	f006 f9b9 	bl	80090f8 <osThreadFlagsSet>
      break;
 8002d86:	e7f8      	b.n	8002d7a <HAL_GPIO_EXTI_Callback+0xa>
      osThreadFlagsSet(Thd_LoraStoreContextId, 1);
 8002d88:	2101      	movs	r1, #1
 8002d8a:	4b03      	ldr	r3, [pc, #12]	@ (8002d98 <HAL_GPIO_EXTI_Callback+0x28>)
 8002d8c:	6818      	ldr	r0, [r3, #0]
 8002d8e:	f006 f9b3 	bl	80090f8 <osThreadFlagsSet>
}
 8002d92:	e7f2      	b.n	8002d7a <HAL_GPIO_EXTI_Callback+0xa>
 8002d94:	20000598 	.word	0x20000598
 8002d98:	2000059c 	.word	0x2000059c

08002d9c <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ContextManagement = 0;
 8002d9c:	4b06      	ldr	r3, [pc, #24]	@ (8002db8 <LoraInfo_Init+0x1c>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8002da2:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8002da4:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8002da6:	60da      	str	r2, [r3, #12]

#ifdef  REGION_AS923
  loraInfo.Region |= (1 << LORAMAC_REGION_AS923);
#endif /* REGION_AS923 */
#ifdef  REGION_AU915
  loraInfo.Region |= (1 << LORAMAC_REGION_AU915);
 8002da8:	2202      	movs	r2, #2
 8002daa:	605a      	str	r2, [r3, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 8002dac:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8002db0:	605a      	str	r2, [r3, #4]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 8002db2:	2201      	movs	r2, #1
 8002db4:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8002db6:	4770      	bx	lr
 8002db8:	200005d4 	.word	0x200005d4

08002dbc <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 8002dbc:	4800      	ldr	r0, [pc, #0]	@ (8002dc0 <LoraInfo_GetPtr+0x4>)
 8002dbe:	4770      	bx	lr
 8002dc0:	200005d4 	.word	0x200005d4

08002dc4 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8002dc4:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8002dc6:	f000 fea5 	bl	8003b14 <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002dca:	bd08      	pop	{r3, pc}

08002dcc <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8002dcc:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8002dce:	f000 fee3 	bl	8003b98 <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8002dd2:	bd08      	pop	{r3, pc}

08002dd4 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8002dd4:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8002dd6:	f000 ff2d 	bl	8003c34 <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8002dda:	bd08      	pop	{r3, pc}

08002ddc <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8002ddc:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8002dde:	f000 ff2b 	bl	8003c38 <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002de2:	bd08      	pop	{r3, pc}

08002de4 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8002de4:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8002de6:	f000 ff29 	bl	8003c3c <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002dea:	bd08      	pop	{r3, pc}

08002dec <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8002dec:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8002dee:	f000 ff27 	bl	8003c40 <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8002df2:	bd08      	pop	{r3, pc}

08002df4 <fill_filter_settings>:
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8002df4:	7803      	ldrb	r3, [r0, #0]
 8002df6:	78ca      	ldrb	r2, [r1, #3]
 8002df8:	0092      	lsls	r2, r2, #2
 8002dfa:	f002 021c 	and.w	r2, r2, #28
 8002dfe:	f023 031c 	bic.w	r3, r3, #28
 8002e02:	4313      	orrs	r3, r2
 8002e04:	7003      	strb	r3, [r0, #0]
}
 8002e06:	4770      	bx	lr

08002e08 <fill_standby_settings>:
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8002e08:	7803      	ldrb	r3, [r0, #0]
 8002e0a:	790a      	ldrb	r2, [r1, #4]
 8002e0c:	f003 031f 	and.w	r3, r3, #31
 8002e10:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8002e14:	7003      	strb	r3, [r0, #0]
}
 8002e16:	4770      	bx	lr

08002e18 <fill_osr_press_settings>:
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8002e18:	7803      	ldrb	r3, [r0, #0]
 8002e1a:	780a      	ldrb	r2, [r1, #0]
 8002e1c:	0092      	lsls	r2, r2, #2
 8002e1e:	f002 021c 	and.w	r2, r2, #28
 8002e22:	f023 031c 	bic.w	r3, r3, #28
 8002e26:	4313      	orrs	r3, r2
 8002e28:	7003      	strb	r3, [r0, #0]
}
 8002e2a:	4770      	bx	lr

08002e2c <fill_osr_temp_settings>:
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8002e2c:	7803      	ldrb	r3, [r0, #0]
 8002e2e:	784a      	ldrb	r2, [r1, #1]
 8002e30:	f003 031f 	and.w	r3, r3, #31
 8002e34:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8002e38:	7003      	strb	r3, [r0, #0]
}
 8002e3a:	4770      	bx	lr

08002e3c <parse_device_settings>:
 * and humidity), filter and standby duration settings and store in the
 * bme280_settings structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8002e3c:	7803      	ldrb	r3, [r0, #0]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	708b      	strb	r3, [r1, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8002e44:	7883      	ldrb	r3, [r0, #2]
 8002e46:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8002e4a:	700b      	strb	r3, [r1, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8002e4c:	7883      	ldrb	r3, [r0, #2]
 8002e4e:	095b      	lsrs	r3, r3, #5
 8002e50:	704b      	strb	r3, [r1, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8002e52:	78c3      	ldrb	r3, [r0, #3]
 8002e54:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8002e58:	70cb      	strb	r3, [r1, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8002e5a:	78c3      	ldrb	r3, [r0, #3]
 8002e5c:	095b      	lsrs	r3, r3, #5
 8002e5e:	710b      	strb	r3, [r1, #4]
}
 8002e60:	4770      	bx	lr

08002e62 <parse_sensor_data>:
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << BME280_12_BIT_SHIFT;
 8002e62:	f890 c000 	ldrb.w	ip, [r0]
    data_lsb = (uint32_t)reg_data[1] << BME280_4_BIT_SHIFT;
 8002e66:	7843      	ldrb	r3, [r0, #1]
 8002e68:	011b      	lsls	r3, r3, #4
    data_xlsb = (uint32_t)reg_data[2] >> BME280_4_BIT_SHIFT;
 8002e6a:	7882      	ldrb	r2, [r0, #2]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8002e6c:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 8002e70:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8002e74:	600b      	str	r3, [r1, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << BME280_12_BIT_SHIFT;
 8002e76:	f890 c003 	ldrb.w	ip, [r0, #3]
    data_lsb = (uint32_t)reg_data[4] << BME280_4_BIT_SHIFT;
 8002e7a:	7903      	ldrb	r3, [r0, #4]
 8002e7c:	011b      	lsls	r3, r3, #4
    data_xlsb = (uint32_t)reg_data[5] >> BME280_4_BIT_SHIFT;
 8002e7e:	7942      	ldrb	r2, [r0, #5]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8002e80:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 8002e84:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8002e88:	604b      	str	r3, [r1, #4]

    /* Store the parsed register values for humidity data */
    data_msb = (uint32_t)reg_data[6] << BME280_8_BIT_SHIFT;
 8002e8a:	7982      	ldrb	r2, [r0, #6]
    data_lsb = (uint32_t)reg_data[7];
 8002e8c:	79c3      	ldrb	r3, [r0, #7]
    uncomp_data->humidity = data_msb | data_lsb;
 8002e8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002e92:	608b      	str	r3, [r1, #8]
}
 8002e94:	4770      	bx	lr
	...

08002e98 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
                                      struct bme280_calib_data *calib_data)
{
 8002e98:	b410      	push	{r4}
    int32_t var2;
    int32_t temperature;
    int32_t temperature_min = -4000;
    int32_t temperature_max = 8500;

    var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_t1 * 2));
 8002e9a:	6844      	ldr	r4, [r0, #4]
 8002e9c:	880a      	ldrh	r2, [r1, #0]
 8002e9e:	0050      	lsls	r0, r2, #1
 8002ea0:	ebc0 00d4 	rsb	r0, r0, r4, lsr #3
    var1 = (var1 * ((int32_t)calib_data->dig_t2)) / 2048;
 8002ea4:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8002ea8:	fb00 f303 	mul.w	r3, r0, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	db1e      	blt.n	8002eee <compensate_temperature+0x56>
 8002eb0:	12db      	asrs	r3, r3, #11
    var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_t1));
 8002eb2:	ebc2 1214 	rsb	r2, r2, r4, lsr #4
    var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_t3)) / 16384;
 8002eb6:	fb02 f202 	mul.w	r2, r2, r2
 8002eba:	2a00      	cmp	r2, #0
 8002ebc:	db1a      	blt.n	8002ef4 <compensate_temperature+0x5c>
 8002ebe:	1312      	asrs	r2, r2, #12
 8002ec0:	f9b1 0004 	ldrsh.w	r0, [r1, #4]
 8002ec4:	fb00 f202 	mul.w	r2, r0, r2
 8002ec8:	2a00      	cmp	r2, #0
 8002eca:	db16      	blt.n	8002efa <compensate_temperature+0x62>
    calib_data->t_fine = var1 + var2;
 8002ecc:	eb03 33a2 	add.w	r3, r3, r2, asr #14
 8002ed0:	624b      	str	r3, [r1, #36]	@ 0x24
    temperature = (calib_data->t_fine * 5 + 128) / 256;
 8002ed2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002ed6:	f113 0080 	adds.w	r0, r3, #128	@ 0x80
 8002eda:	d412      	bmi.n	8002f02 <compensate_temperature+0x6a>
 8002edc:	1200      	asrs	r0, r0, #8

    if (temperature < temperature_min)
 8002ede:	4a0c      	ldr	r2, [pc, #48]	@ (8002f10 <compensate_temperature+0x78>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	db10      	blt.n	8002f06 <compensate_temperature+0x6e>
    {
        temperature = temperature_min;
    }
    else if (temperature > temperature_max)
 8002ee4:	4a0b      	ldr	r2, [pc, #44]	@ (8002f14 <compensate_temperature+0x7c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	da0f      	bge.n	8002f0a <compensate_temperature+0x72>
    {
        temperature = temperature_max;
    }

    return temperature;
}
 8002eea:	bc10      	pop	{r4}
 8002eec:	4770      	bx	lr
    var1 = (var1 * ((int32_t)calib_data->dig_t2)) / 2048;
 8002eee:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8002ef2:	e7dd      	b.n	8002eb0 <compensate_temperature+0x18>
    var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_t3)) / 16384;
 8002ef4:	f602 72ff 	addw	r2, r2, #4095	@ 0xfff
 8002ef8:	e7e1      	b.n	8002ebe <compensate_temperature+0x26>
 8002efa:	f502 527f 	add.w	r2, r2, #16320	@ 0x3fc0
 8002efe:	323f      	adds	r2, #63	@ 0x3f
 8002f00:	e7e4      	b.n	8002ecc <compensate_temperature+0x34>
    temperature = (calib_data->t_fine * 5 + 128) / 256;
 8002f02:	30ff      	adds	r0, #255	@ 0xff
 8002f04:	e7ea      	b.n	8002edc <compensate_temperature+0x44>
        temperature = temperature_min;
 8002f06:	4804      	ldr	r0, [pc, #16]	@ (8002f18 <compensate_temperature+0x80>)
 8002f08:	e7ef      	b.n	8002eea <compensate_temperature+0x52>
        temperature = temperature_max;
 8002f0a:	f242 1034 	movw	r0, #8500	@ 0x2134
    return temperature;
 8002f0e:	e7ec      	b.n	8002eea <compensate_temperature+0x52>
 8002f10:	fff05e81 	.word	0xfff05e81
 8002f14:	00213480 	.word	0x00213480
 8002f18:	fffff060 	.word	0xfffff060

08002f1c <compensate_pressure>:
 * return the compensated pressure data in integer data type with higher
 * accuracy.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                    const struct bme280_calib_data *calib_data)
{
 8002f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f20:	460c      	mov	r4, r1
    int64_t var4;
    uint32_t pressure;
    uint32_t pressure_min = 3000000;
    uint32_t pressure_max = 11000000;

    var1 = ((int64_t)calib_data->t_fine) - 128000;
 8002f22:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8002f24:	17eb      	asrs	r3, r5, #31
 8002f26:	f5b5 35fa 	subs.w	r5, r5, #128000	@ 0x1f400
 8002f2a:	f143 33ff 	adc.w	r3, r3, #4294967295
    var2 = var1 * var1 * (int64_t)calib_data->dig_p6;
 8002f2e:	fb05 f203 	mul.w	r2, r5, r3
 8002f32:	fba5 e605 	umull	lr, r6, r5, r5
 8002f36:	eb06 0642 	add.w	r6, r6, r2, lsl #1
 8002f3a:	f9b1 2010 	ldrsh.w	r2, [r1, #16]
 8002f3e:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 8002f42:	fb0e fc0c 	mul.w	ip, lr, ip
 8002f46:	fb02 cc06 	mla	ip, r2, r6, ip
 8002f4a:	fbae 7202 	umull	r7, r2, lr, r2
 8002f4e:	4494      	add	ip, r2
    var2 = var2 + ((var1 * (int64_t)calib_data->dig_p5) * 131072);
 8002f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f54:	ea4f 78e1 	mov.w	r8, r1, asr #31
 8002f58:	fb01 f203 	mul.w	r2, r1, r3
 8002f5c:	fb05 2208 	mla	r2, r5, r8, r2
 8002f60:	fba1 1805 	umull	r1, r8, r1, r5
 8002f64:	4442      	add	r2, r8
 8002f66:	0452      	lsls	r2, r2, #17
 8002f68:	ea42 32d1 	orr.w	r2, r2, r1, lsr #15
 8002f6c:	0449      	lsls	r1, r1, #17
 8002f6e:	19c9      	adds	r1, r1, r7
 8002f70:	eb4c 0c02 	adc.w	ip, ip, r2
    var2 = var2 + (((int64_t)calib_data->dig_p4) * 34359738368);
 8002f74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f78:	eb0c 0cc2 	add.w	ip, ip, r2, lsl #3
    var1 = ((var1 * var1 * (int64_t)calib_data->dig_p3) / 256) + ((var1 * ((int64_t)calib_data->dig_p2) * 4096));
 8002f7c:	f9b4 700a 	ldrsh.w	r7, [r4, #10]
 8002f80:	17fa      	asrs	r2, r7, #31
 8002f82:	fb0e f202 	mul.w	r2, lr, r2
 8002f86:	fb07 2206 	mla	r2, r7, r6, r2
 8002f8a:	fbae e707 	umull	lr, r7, lr, r7
 8002f8e:	443a      	add	r2, r7
 8002f90:	4616      	mov	r6, r2
 8002f92:	2a00      	cmp	r2, #0
 8002f94:	f2c0 80c4 	blt.w	8003120 <compensate_pressure+0x204>
 8002f98:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8002f9c:	ea4e 6e06 	orr.w	lr, lr, r6, lsl #24
 8002fa0:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8002fa4:	17d7      	asrs	r7, r2, #31
 8002fa6:	fb02 f303 	mul.w	r3, r2, r3
 8002faa:	fb05 3307 	mla	r3, r5, r7, r3
 8002fae:	fba2 5205 	umull	r5, r2, r2, r5
 8002fb2:	4413      	add	r3, r2
 8002fb4:	031b      	lsls	r3, r3, #12
 8002fb6:	ea43 5315 	orr.w	r3, r3, r5, lsr #20
 8002fba:	032a      	lsls	r2, r5, #12
 8002fbc:	eb1e 0202 	adds.w	r2, lr, r2
 8002fc0:	eb43 2326 	adc.w	r3, r3, r6, asr #8
    var3 = ((int64_t)1) * 140737488355328;
    var1 = (var3 + var1) * ((int64_t)calib_data->dig_p1) / 8589934592;
 8002fc4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8002fc8:	88e6      	ldrh	r6, [r4, #6]
 8002fca:	fba2 2506 	umull	r2, r5, r2, r6
 8002fce:	fb06 5303 	mla	r3, r6, r3, r5
 8002fd2:	461d      	mov	r5, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f2c0 80a8 	blt.w	800312a <compensate_pressure+0x20e>
 8002fda:	106a      	asrs	r2, r5, #1
 8002fdc:	17eb      	asrs	r3, r5, #31

    /* To avoid divide by zero exception */
    if (var1 != 0)
 8002fde:	ea53 0565 	orrs.w	r5, r3, r5, asr #1
 8002fe2:	f000 80bf 	beq.w	8003164 <compensate_pressure+0x248>
    {
        var4 = 1048576 - uncomp_data->pressure;
 8002fe6:	6806      	ldr	r6, [r0, #0]
 8002fe8:	f5c6 1680 	rsb	r6, r6, #1048576	@ 0x100000
        var4 = (((var4 * INT64_C(2147483648)) - var2) * 3125) / var1;
 8002fec:	0875      	lsrs	r5, r6, #1
 8002fee:	07f6      	lsls	r6, r6, #31
 8002ff0:	1a76      	subs	r6, r6, r1
 8002ff2:	eb65 050c 	sbc.w	r5, r5, ip
 8002ff6:	eb16 0c06 	adds.w	ip, r6, r6
 8002ffa:	eb45 0105 	adc.w	r1, r5, r5
 8002ffe:	eb1c 0c06 	adds.w	ip, ip, r6
 8003002:	eb45 0101 	adc.w	r1, r5, r1
 8003006:	0188      	lsls	r0, r1, #6
 8003008:	ea40 609c 	orr.w	r0, r0, ip, lsr #26
 800300c:	ea4f 178c 	mov.w	r7, ip, lsl #6
 8003010:	eb1c 0c07 	adds.w	ip, ip, r7
 8003014:	eb41 0100 	adc.w	r1, r1, r0
 8003018:	0089      	lsls	r1, r1, #2
 800301a:	ea41 719c 	orr.w	r1, r1, ip, lsr #30
 800301e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003022:	eb1c 0c06 	adds.w	ip, ip, r6
 8003026:	eb45 0101 	adc.w	r1, r5, r1
 800302a:	0089      	lsls	r1, r1, #2
 800302c:	ea41 719c 	orr.w	r1, r1, ip, lsr #30
 8003030:	ea4f 008c 	mov.w	r0, ip, lsl #2
 8003034:	1980      	adds	r0, r0, r6
 8003036:	eb45 0101 	adc.w	r1, r5, r1
 800303a:	f7fd fd1d 	bl	8000a78 <__aeabi_ldivmod>
 800303e:	4603      	mov	r3, r0
        var1 = (((int64_t)calib_data->dig_p9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8003040:	f9b4 5016 	ldrsh.w	r5, [r4, #22]
 8003044:	ea4f 7ce5 	mov.w	ip, r5, asr #31
 8003048:	462e      	mov	r6, r5
 800304a:	4602      	mov	r2, r0
 800304c:	460f      	mov	r7, r1
 800304e:	2900      	cmp	r1, #0
 8003050:	db6f      	blt.n	8003132 <compensate_pressure+0x216>
 8003052:	0b52      	lsrs	r2, r2, #13
 8003054:	ea42 42c7 	orr.w	r2, r2, r7, lsl #19
 8003058:	137f      	asrs	r7, r7, #13
 800305a:	fb07 f505 	mul.w	r5, r7, r5
 800305e:	fb02 550c 	mla	r5, r2, ip, r5
 8003062:	fba6 6c02 	umull	r6, ip, r6, r2
 8003066:	4465      	add	r5, ip
 8003068:	fb02 f505 	mul.w	r5, r2, r5
 800306c:	fb06 5507 	mla	r5, r6, r7, r5
 8003070:	fba2 2606 	umull	r2, r6, r2, r6
 8003074:	4435      	add	r5, r6
 8003076:	462f      	mov	r7, r5
 8003078:	2d00      	cmp	r5, #0
 800307a:	db60      	blt.n	800313e <compensate_pressure+0x222>
 800307c:	0e52      	lsrs	r2, r2, #25
 800307e:	167e      	asrs	r6, r7, #25
 8003080:	ea42 12c7 	orr.w	r2, r2, r7, lsl #7
        var2 = (((int64_t)calib_data->dig_p8) * var4) / 524288;
 8003084:	f9b4 5014 	ldrsh.w	r5, [r4, #20]
 8003088:	ea4f 7ce5 	mov.w	ip, r5, asr #31
 800308c:	fb05 f701 	mul.w	r7, r5, r1
 8003090:	fb0c 7000 	mla	r0, ip, r0, r7
 8003094:	fba5 5703 	umull	r5, r7, r5, r3
 8003098:	4438      	add	r0, r7
 800309a:	4607      	mov	r7, r0
 800309c:	2800      	cmp	r0, #0
 800309e:	db54      	blt.n	800314a <compensate_pressure+0x22e>
 80030a0:	0ce8      	lsrs	r0, r5, #19
 80030a2:	ea40 3047 	orr.w	r0, r0, r7, lsl #13
        var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_p7) * 16);
 80030a6:	189b      	adds	r3, r3, r2
 80030a8:	eb46 0201 	adc.w	r2, r6, r1
 80030ac:	181b      	adds	r3, r3, r0
 80030ae:	eb42 42e7 	adc.w	r2, r2, r7, asr #19
 80030b2:	4610      	mov	r0, r2
 80030b4:	2a00      	cmp	r2, #0
 80030b6:	db4d      	blt.n	8003154 <compensate_pressure+0x238>
 80030b8:	0a1b      	lsrs	r3, r3, #8
 80030ba:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80030be:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 80030c2:	17ca      	asrs	r2, r1, #31
 80030c4:	0112      	lsls	r2, r2, #4
 80030c6:	ea42 7211 	orr.w	r2, r2, r1, lsr #28
 80030ca:	0109      	lsls	r1, r1, #4
 80030cc:	185b      	adds	r3, r3, r1
 80030ce:	eb42 2220 	adc.w	r2, r2, r0, asr #8
        pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 80030d2:	0fd1      	lsrs	r1, r2, #31
 80030d4:	18c9      	adds	r1, r1, r3
 80030d6:	f142 0200 	adc.w	r2, r2, #0
 80030da:	0849      	lsrs	r1, r1, #1
 80030dc:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
 80030e0:	1052      	asrs	r2, r2, #1
 80030e2:	184b      	adds	r3, r1, r1
 80030e4:	eb42 0002 	adc.w	r0, r2, r2
 80030e8:	185b      	adds	r3, r3, r1
 80030ea:	eb42 0000 	adc.w	r0, r2, r0
 80030ee:	0144      	lsls	r4, r0, #5
 80030f0:	ea44 64d3 	orr.w	r4, r4, r3, lsr #27
 80030f4:	015d      	lsls	r5, r3, #5
 80030f6:	195b      	adds	r3, r3, r5
 80030f8:	eb40 0004 	adc.w	r0, r0, r4
 80030fc:	185b      	adds	r3, r3, r1
 80030fe:	eb42 0200 	adc.w	r2, r2, r0
 8003102:	4611      	mov	r1, r2
 8003104:	2a00      	cmp	r2, #0
 8003106:	db29      	blt.n	800315c <compensate_pressure+0x240>
 8003108:	09db      	lsrs	r3, r3, #7
 800310a:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800310e:	4618      	mov	r0, r3

        if (pressure < pressure_min)
 8003110:	4a17      	ldr	r2, [pc, #92]	@ (8003170 <compensate_pressure+0x254>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d929      	bls.n	800316a <compensate_pressure+0x24e>
        {
            pressure = pressure_min;
        }
        else if (pressure > pressure_max)
 8003116:	4a17      	ldr	r2, [pc, #92]	@ (8003174 <compensate_pressure+0x258>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d924      	bls.n	8003166 <compensate_pressure+0x24a>
        {
            pressure = pressure_max;
 800311c:	4815      	ldr	r0, [pc, #84]	@ (8003174 <compensate_pressure+0x258>)
    else
    {
        pressure = pressure_min;
    }

    return pressure;
 800311e:	e022      	b.n	8003166 <compensate_pressure+0x24a>
    var1 = ((var1 * var1 * (int64_t)calib_data->dig_p3) / 256) + ((var1 * ((int64_t)calib_data->dig_p2) * 4096));
 8003120:	f11e 0eff 	adds.w	lr, lr, #255	@ 0xff
 8003124:	f142 0600 	adc.w	r6, r2, #0
 8003128:	e736      	b.n	8002f98 <compensate_pressure+0x7c>
    var1 = (var3 + var1) * ((int64_t)calib_data->dig_p1) / 8589934592;
 800312a:	3a01      	subs	r2, #1
 800312c:	f143 0501 	adc.w	r5, r3, #1
 8003130:	e753      	b.n	8002fda <compensate_pressure+0xbe>
        var1 = (((int64_t)calib_data->dig_p9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8003132:	f641 77ff 	movw	r7, #8191	@ 0x1fff
 8003136:	19c2      	adds	r2, r0, r7
 8003138:	f141 0700 	adc.w	r7, r1, #0
 800313c:	e789      	b.n	8003052 <compensate_pressure+0x136>
 800313e:	f06f 467e 	mvn.w	r6, #4261412864	@ 0xfe000000
 8003142:	1992      	adds	r2, r2, r6
 8003144:	f145 0700 	adc.w	r7, r5, #0
 8003148:	e798      	b.n	800307c <compensate_pressure+0x160>
        var2 = (((int64_t)calib_data->dig_p8) * var4) / 524288;
 800314a:	4f0b      	ldr	r7, [pc, #44]	@ (8003178 <compensate_pressure+0x25c>)
 800314c:	19ed      	adds	r5, r5, r7
 800314e:	f140 0700 	adc.w	r7, r0, #0
 8003152:	e7a5      	b.n	80030a0 <compensate_pressure+0x184>
        var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_p7) * 16);
 8003154:	33ff      	adds	r3, #255	@ 0xff
 8003156:	f142 0000 	adc.w	r0, r2, #0
 800315a:	e7ad      	b.n	80030b8 <compensate_pressure+0x19c>
        pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 800315c:	337f      	adds	r3, #127	@ 0x7f
 800315e:	f142 0100 	adc.w	r1, r2, #0
 8003162:	e7d1      	b.n	8003108 <compensate_pressure+0x1ec>
        pressure = pressure_min;
 8003164:	4805      	ldr	r0, [pc, #20]	@ (800317c <compensate_pressure+0x260>)
}
 8003166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            pressure = pressure_min;
 800316a:	4804      	ldr	r0, [pc, #16]	@ (800317c <compensate_pressure+0x260>)
 800316c:	e7fb      	b.n	8003166 <compensate_pressure+0x24a>
 800316e:	bf00      	nop
 8003170:	002dc6bf 	.word	0x002dc6bf
 8003174:	00a7d8c0 	.word	0x00a7d8c0
 8003178:	0007ffff 	.word	0x0007ffff
 800317c:	002dc6c0 	.word	0x002dc6c0

08003180 <compensate_humidity>:
    int32_t var4;
    int32_t var5;
    uint32_t humidity;
    uint32_t humidity_max = 102400;

    var1 = calib_data->t_fine - ((int32_t)76800);
 8003180:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8003182:	f5a3 3c96 	sub.w	ip, r3, #76800	@ 0x12c00
    var2 = (int32_t)(uncomp_data->humidity * 16384);
 8003186:	6880      	ldr	r0, [r0, #8]
    var3 = (int32_t)(((int32_t)calib_data->dig_h4) * 1048576);
 8003188:	f9b1 301e 	ldrsh.w	r3, [r1, #30]
 800318c:	051b      	lsls	r3, r3, #20
    var4 = ((int32_t)calib_data->dig_h5) * var1;
 800318e:	f9b1 2020 	ldrsh.w	r2, [r1, #32]
    var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8003192:	ebc3 3380 	rsb	r3, r3, r0, lsl #14
 8003196:	fb0c 3312 	mls	r3, ip, r2, r3
 800319a:	f513 4380 	adds.w	r3, r3, #16384	@ 0x4000
 800319e:	d440      	bmi.n	8003222 <compensate_humidity+0xa2>
 80031a0:	13da      	asrs	r2, r3, #15
    var2 = (var1 * ((int32_t)calib_data->dig_h6)) / 1024;
 80031a2:	f991 3022 	ldrsb.w	r3, [r1, #34]	@ 0x22
 80031a6:	fb0c f303 	mul.w	r3, ip, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	db3d      	blt.n	800322a <compensate_humidity+0xaa>
 80031ae:	1298      	asrs	r0, r3, #10
    var3 = (var1 * ((int32_t)calib_data->dig_h3)) / 2048;
 80031b0:	7f0b      	ldrb	r3, [r1, #28]
 80031b2:	fb0c f303 	mul.w	r3, ip, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	db3a      	blt.n	8003230 <compensate_humidity+0xb0>
 80031ba:	12db      	asrs	r3, r3, #11
    var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 80031bc:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80031c0:	fb00 f303 	mul.w	r3, r0, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	db36      	blt.n	8003236 <compensate_humidity+0xb6>
 80031c8:	129b      	asrs	r3, r3, #10
 80031ca:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
    var2 = ((var4 * ((int32_t)calib_data->dig_h2)) + 8192) / 16384;
 80031ce:	f9b1 001a 	ldrsh.w	r0, [r1, #26]
 80031d2:	fb00 f303 	mul.w	r3, r0, r3
 80031d6:	f513 5300 	adds.w	r3, r3, #8192	@ 0x2000
 80031da:	d42f      	bmi.n	800323c <compensate_humidity+0xbc>
 80031dc:	139b      	asrs	r3, r3, #14
    var3 = var5 * var2;
 80031de:	fb02 f303 	mul.w	r3, r2, r3
    var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 80031e2:	461a      	mov	r2, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	db2d      	blt.n	8003244 <compensate_humidity+0xc4>
 80031e8:	13d2      	asrs	r2, r2, #15
 80031ea:	fb02 f202 	mul.w	r2, r2, r2
 80031ee:	2a00      	cmp	r2, #0
 80031f0:	db2c      	blt.n	800324c <compensate_humidity+0xcc>
 80031f2:	11d2      	asrs	r2, r2, #7
    var5 = var3 - ((var4 * ((int32_t)calib_data->dig_h1)) / 16);
 80031f4:	7e09      	ldrb	r1, [r1, #24]
 80031f6:	fb01 f202 	mul.w	r2, r1, r2
 80031fa:	2a00      	cmp	r2, #0
 80031fc:	db28      	blt.n	8003250 <compensate_humidity+0xd0>
 80031fe:	eba3 1322 	sub.w	r3, r3, r2, asr #4
    var5 = (var5 < 0 ? 0 : var5);
 8003202:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    var5 = (var5 > 419430400 ? 419430400 : var5);
 8003206:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 800320a:	bfa8      	it	ge
 800320c:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
    humidity = (uint32_t)(var5 / 4096);
 8003210:	461a      	mov	r2, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	db1e      	blt.n	8003254 <compensate_humidity+0xd4>
 8003216:	1313      	asrs	r3, r2, #12
 8003218:	4618      	mov	r0, r3

    if (humidity > humidity_max)
 800321a:	f5b3 3fc8 	cmp.w	r3, #102400	@ 0x19000
 800321e:	d81c      	bhi.n	800325a <compensate_humidity+0xda>
    {
        humidity = humidity_max;
    }

    return humidity;
}
 8003220:	4770      	bx	lr
    var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8003222:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8003226:	337f      	adds	r3, #127	@ 0x7f
 8003228:	e7ba      	b.n	80031a0 <compensate_humidity+0x20>
    var2 = (var1 * ((int32_t)calib_data->dig_h6)) / 1024;
 800322a:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800322e:	e7be      	b.n	80031ae <compensate_humidity+0x2e>
    var3 = (var1 * ((int32_t)calib_data->dig_h3)) / 2048;
 8003230:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8003234:	e7c1      	b.n	80031ba <compensate_humidity+0x3a>
    var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8003236:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800323a:	e7c5      	b.n	80031c8 <compensate_humidity+0x48>
    var2 = ((var4 * ((int32_t)calib_data->dig_h2)) + 8192) / 16384;
 800323c:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8003240:	333f      	adds	r3, #63	@ 0x3f
 8003242:	e7cb      	b.n	80031dc <compensate_humidity+0x5c>
    var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8003244:	f503 42ff 	add.w	r2, r3, #32640	@ 0x7f80
 8003248:	327f      	adds	r2, #127	@ 0x7f
 800324a:	e7cd      	b.n	80031e8 <compensate_humidity+0x68>
 800324c:	327f      	adds	r2, #127	@ 0x7f
 800324e:	e7d0      	b.n	80031f2 <compensate_humidity+0x72>
    var5 = var3 - ((var4 * ((int32_t)calib_data->dig_h1)) / 16);
 8003250:	320f      	adds	r2, #15
 8003252:	e7d4      	b.n	80031fe <compensate_humidity+0x7e>
    humidity = (uint32_t)(var5 / 4096);
 8003254:	f603 72ff 	addw	r2, r3, #4095	@ 0xfff
 8003258:	e7dd      	b.n	8003216 <compensate_humidity+0x96>
        humidity = humidity_max;
 800325a:	f44f 30c8 	mov.w	r0, #102400	@ 0x19000
    return humidity;
 800325e:	e7df      	b.n	8003220 <compensate_humidity+0xa0>

08003260 <interleave_reg_addr>:
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
    uint32_t index;

    for (index = 1; index < len; index++)
 8003260:	f04f 0c01 	mov.w	ip, #1
 8003264:	459c      	cmp	ip, r3
 8003266:	d211      	bcs.n	800328c <interleave_reg_addr+0x2c>
{
 8003268:	b510      	push	{r4, lr}
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 800326a:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
 800326e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8003272:	f810 400c 	ldrb.w	r4, [r0, ip]
 8003276:	f801 400e 	strb.w	r4, [r1, lr]
        temp_buff[index * 2] = reg_data[index];
 800327a:	f812 e00c 	ldrb.w	lr, [r2, ip]
 800327e:	f801 e01c 	strb.w	lr, [r1, ip, lsl #1]
    for (index = 1; index < len; index++)
 8003282:	f10c 0c01 	add.w	ip, ip, #1
 8003286:	459c      	cmp	ip, r3
 8003288:	d3ef      	bcc.n	800326a <interleave_reg_addr+0xa>
    }
}
 800328a:	bd10      	pop	{r4, pc}
 800328c:	4770      	bx	lr

0800328e <parse_temp_press_calib_data>:
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
    struct bme280_calib_data *calib_data = &dev->calib_data;

    calib_data->dig_t1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800328e:	7842      	ldrb	r2, [r0, #1]
 8003290:	7803      	ldrb	r3, [r0, #0]
 8003292:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003296:	830b      	strh	r3, [r1, #24]
    calib_data->dig_t2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8003298:	78c2      	ldrb	r2, [r0, #3]
 800329a:	7883      	ldrb	r3, [r0, #2]
 800329c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80032a0:	834b      	strh	r3, [r1, #26]
    calib_data->dig_t3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 80032a2:	7942      	ldrb	r2, [r0, #5]
 80032a4:	7903      	ldrb	r3, [r0, #4]
 80032a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80032aa:	838b      	strh	r3, [r1, #28]
    calib_data->dig_p1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 80032ac:	79c2      	ldrb	r2, [r0, #7]
 80032ae:	7983      	ldrb	r3, [r0, #6]
 80032b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80032b4:	83cb      	strh	r3, [r1, #30]
    calib_data->dig_p2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 80032b6:	7a42      	ldrb	r2, [r0, #9]
 80032b8:	7a03      	ldrb	r3, [r0, #8]
 80032ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80032be:	840b      	strh	r3, [r1, #32]
    calib_data->dig_p3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 80032c0:	7ac2      	ldrb	r2, [r0, #11]
 80032c2:	7a83      	ldrb	r3, [r0, #10]
 80032c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80032c8:	844b      	strh	r3, [r1, #34]	@ 0x22
    calib_data->dig_p4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80032ca:	7b42      	ldrb	r2, [r0, #13]
 80032cc:	7b03      	ldrb	r3, [r0, #12]
 80032ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80032d2:	848b      	strh	r3, [r1, #36]	@ 0x24
    calib_data->dig_p5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 80032d4:	7bc2      	ldrb	r2, [r0, #15]
 80032d6:	7b83      	ldrb	r3, [r0, #14]
 80032d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80032dc:	84cb      	strh	r3, [r1, #38]	@ 0x26
    calib_data->dig_p6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 80032de:	7c42      	ldrb	r2, [r0, #17]
 80032e0:	7c03      	ldrb	r3, [r0, #16]
 80032e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80032e6:	850b      	strh	r3, [r1, #40]	@ 0x28
    calib_data->dig_p7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 80032e8:	7cc2      	ldrb	r2, [r0, #19]
 80032ea:	7c83      	ldrb	r3, [r0, #18]
 80032ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80032f0:	854b      	strh	r3, [r1, #42]	@ 0x2a
    calib_data->dig_p8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 80032f2:	7d42      	ldrb	r2, [r0, #21]
 80032f4:	7d03      	ldrb	r3, [r0, #20]
 80032f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80032fa:	858b      	strh	r3, [r1, #44]	@ 0x2c
    calib_data->dig_p9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 80032fc:	7dc2      	ldrb	r2, [r0, #23]
 80032fe:	7d83      	ldrb	r3, [r0, #22]
 8003300:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003304:	85cb      	strh	r3, [r1, #46]	@ 0x2e
    calib_data->dig_h1 = reg_data[25];
 8003306:	7e43      	ldrb	r3, [r0, #25]
 8003308:	f881 3030 	strb.w	r3, [r1, #48]	@ 0x30
}
 800330c:	4770      	bx	lr

0800330e <parse_humidity_calib_data>:
    int16_t dig_h4_lsb;
    int16_t dig_h4_msb;
    int16_t dig_h5_lsb;
    int16_t dig_h5_msb;

    calib_data->dig_h2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800330e:	7842      	ldrb	r2, [r0, #1]
 8003310:	7803      	ldrb	r3, [r0, #0]
 8003312:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003316:	864b      	strh	r3, [r1, #50]	@ 0x32
    calib_data->dig_h3 = reg_data[2];
 8003318:	7883      	ldrb	r3, [r0, #2]
 800331a:	f881 3034 	strb.w	r3, [r1, #52]	@ 0x34
    dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 800331e:	f990 3003 	ldrsb.w	r3, [r0, #3]
 8003322:	b29b      	uxth	r3, r3
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	b21b      	sxth	r3, r3
    dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8003328:	7902      	ldrb	r2, [r0, #4]
 800332a:	f002 020f 	and.w	r2, r2, #15
    calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
 800332e:	4313      	orrs	r3, r2
 8003330:	86cb      	strh	r3, [r1, #54]	@ 0x36
    dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8003332:	f990 3005 	ldrsb.w	r3, [r0, #5]
 8003336:	b29b      	uxth	r3, r3
 8003338:	011b      	lsls	r3, r3, #4
 800333a:	b21b      	sxth	r3, r3
    dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
 800333c:	7902      	ldrb	r2, [r0, #4]
    calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
 800333e:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8003342:	870b      	strh	r3, [r1, #56]	@ 0x38
    calib_data->dig_h6 = (int8_t)reg_data[6];
 8003344:	f990 3006 	ldrsb.w	r3, [r0, #6]
 8003348:	f881 303a 	strb.w	r3, [r1, #58]	@ 0x3a
}
 800334c:	4770      	bx	lr

0800334e <are_settings_changed>:
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
    uint8_t settings_changed = FALSE;

    if (sub_settings & desired_settings)
 800334e:	4008      	ands	r0, r1
 8003350:	d000      	beq.n	8003354 <are_settings_changed+0x6>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8003352:	2001      	movs	r0, #1
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
    }

    return settings_changed;
}
 8003354:	4770      	bx	lr

08003356 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8003356:	b150      	cbz	r0, 800336e <null_ptr_check+0x18>
 8003358:	68c2      	ldr	r2, [r0, #12]
 800335a:	b15a      	cbz	r2, 8003374 <null_ptr_check+0x1e>
 800335c:	6902      	ldr	r2, [r0, #16]
 800335e:	b162      	cbz	r2, 800337a <null_ptr_check+0x24>
 8003360:	6943      	ldr	r3, [r0, #20]
 8003362:	b10b      	cbz	r3, 8003368 <null_ptr_check+0x12>
        rslt = BME280_E_NULL_PTR;
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 8003364:	2000      	movs	r0, #0
    }

    return rslt;
}
 8003366:	4770      	bx	lr
        rslt = BME280_E_NULL_PTR;
 8003368:	f04f 30ff 	mov.w	r0, #4294967295
 800336c:	4770      	bx	lr
 800336e:	f04f 30ff 	mov.w	r0, #4294967295
 8003372:	4770      	bx	lr
 8003374:	f04f 30ff 	mov.w	r0, #4294967295
 8003378:	4770      	bx	lr
 800337a:	f04f 30ff 	mov.w	r0, #4294967295
 800337e:	4770      	bx	lr

08003380 <bme280_get_regs>:
{
 8003380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003384:	4605      	mov	r5, r0
 8003386:	460e      	mov	r6, r1
 8003388:	4690      	mov	r8, r2
 800338a:	461c      	mov	r4, r3
    rslt = null_ptr_check(dev);
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff ffe2 	bl	8003356 <null_ptr_check>
    if ((rslt == BME280_OK) && (reg_data != NULL))
 8003392:	b988      	cbnz	r0, 80033b8 <bme280_get_regs+0x38>
 8003394:	4607      	mov	r7, r0
 8003396:	b196      	cbz	r6, 80033be <bme280_get_regs+0x3e>
        if (dev->intf != BME280_I2C_INTF)
 8003398:	7863      	ldrb	r3, [r4, #1]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d001      	beq.n	80033a2 <bme280_get_regs+0x22>
            reg_addr = reg_addr | 0x80;
 800339e:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80033a2:	6863      	ldr	r3, [r4, #4]
 80033a4:	4642      	mov	r2, r8
 80033a6:	4631      	mov	r1, r6
 80033a8:	4628      	mov	r0, r5
 80033aa:	68e5      	ldr	r5, [r4, #12]
 80033ac:	47a8      	blx	r5
 80033ae:	7220      	strb	r0, [r4, #8]
        if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 80033b0:	b940      	cbnz	r0, 80033c4 <bme280_get_regs+0x44>
}
 80033b2:	4638      	mov	r0, r7
 80033b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rslt = BME280_E_NULL_PTR;
 80033b8:	f04f 37ff 	mov.w	r7, #4294967295
 80033bc:	e7f9      	b.n	80033b2 <bme280_get_regs+0x32>
 80033be:	f04f 37ff 	mov.w	r7, #4294967295
 80033c2:	e7f6      	b.n	80033b2 <bme280_get_regs+0x32>
            rslt = BME280_E_COMM_FAIL;
 80033c4:	f06f 0701 	mvn.w	r7, #1
 80033c8:	e7f3      	b.n	80033b2 <bme280_get_regs+0x32>

080033ca <get_calib_data>:
{
 80033ca:	b530      	push	{r4, r5, lr}
 80033cc:	b089      	sub	sp, #36	@ 0x24
 80033ce:	4604      	mov	r4, r0
    uint8_t calib_data[BME280_LEN_TEMP_PRESS_CALIB_DATA] = { 0 };
 80033d0:	2200      	movs	r2, #0
 80033d2:	9201      	str	r2, [sp, #4]
 80033d4:	9202      	str	r2, [sp, #8]
 80033d6:	9203      	str	r2, [sp, #12]
 80033d8:	9204      	str	r2, [sp, #16]
 80033da:	9205      	str	r2, [sp, #20]
 80033dc:	9206      	str	r2, [sp, #24]
 80033de:	f8ad 201c 	strh.w	r2, [sp, #28]
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_LEN_TEMP_PRESS_CALIB_DATA, dev);
 80033e2:	4603      	mov	r3, r0
 80033e4:	221a      	movs	r2, #26
 80033e6:	a901      	add	r1, sp, #4
 80033e8:	2088      	movs	r0, #136	@ 0x88
 80033ea:	f7ff ffc9 	bl	8003380 <bme280_get_regs>
    if (rslt == BME280_OK)
 80033ee:	4605      	mov	r5, r0
 80033f0:	b110      	cbz	r0, 80033f8 <get_calib_data+0x2e>
}
 80033f2:	4628      	mov	r0, r5
 80033f4:	b009      	add	sp, #36	@ 0x24
 80033f6:	bd30      	pop	{r4, r5, pc}
        parse_temp_press_calib_data(calib_data, dev);
 80033f8:	4621      	mov	r1, r4
 80033fa:	a801      	add	r0, sp, #4
 80033fc:	f7ff ff47 	bl	800328e <parse_temp_press_calib_data>
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_LEN_HUMIDITY_CALIB_DATA, dev);
 8003400:	4623      	mov	r3, r4
 8003402:	2207      	movs	r2, #7
 8003404:	a901      	add	r1, sp, #4
 8003406:	20e1      	movs	r0, #225	@ 0xe1
 8003408:	f7ff ffba 	bl	8003380 <bme280_get_regs>
        if (rslt == BME280_OK)
 800340c:	4605      	mov	r5, r0
 800340e:	2800      	cmp	r0, #0
 8003410:	d1ef      	bne.n	80033f2 <get_calib_data+0x28>
            parse_humidity_calib_data(calib_data, dev);
 8003412:	4621      	mov	r1, r4
 8003414:	a801      	add	r0, sp, #4
 8003416:	f7ff ff7a 	bl	800330e <parse_humidity_calib_data>
 800341a:	e7ea      	b.n	80033f2 <get_calib_data+0x28>

0800341c <bme280_set_regs>:
{
 800341c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003420:	b086      	sub	sp, #24
 8003422:	4604      	mov	r4, r0
 8003424:	4688      	mov	r8, r1
 8003426:	4615      	mov	r5, r2
 8003428:	461e      	mov	r6, r3
    if (len > BME280_MAX_LEN)
 800342a:	2a0a      	cmp	r2, #10
 800342c:	d900      	bls.n	8003430 <bme280_set_regs+0x14>
        len = BME280_MAX_LEN;
 800342e:	250a      	movs	r5, #10
    rslt = null_ptr_check(dev);
 8003430:	4630      	mov	r0, r6
 8003432:	f7ff ff90 	bl	8003356 <null_ptr_check>
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8003436:	4607      	mov	r7, r0
 8003438:	bb78      	cbnz	r0, 800349a <bme280_set_regs+0x7e>
 800343a:	b38c      	cbz	r4, 80034a0 <bme280_set_regs+0x84>
 800343c:	f1b8 0f00 	cmp.w	r8, #0
 8003440:	d031      	beq.n	80034a6 <bme280_set_regs+0x8a>
        if (len != 0)
 8003442:	b39d      	cbz	r5, 80034ac <bme280_set_regs+0x90>
            temp_buff[0] = reg_data[0];
 8003444:	f898 3000 	ldrb.w	r3, [r8]
 8003448:	f88d 3004 	strb.w	r3, [sp, #4]
            if (dev->intf != BME280_I2C_INTF)
 800344c:	7873      	ldrb	r3, [r6, #1]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d00c      	beq.n	800346c <bme280_set_regs+0x50>
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8003452:	f04f 0c00 	mov.w	ip, #0
 8003456:	e007      	b.n	8003468 <bme280_set_regs+0x4c>
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8003458:	f814 e00c 	ldrb.w	lr, [r4, ip]
 800345c:	f00e 0e7f 	and.w	lr, lr, #127	@ 0x7f
 8003460:	f804 e00c 	strb.w	lr, [r4, ip]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8003464:	f10c 0c01 	add.w	ip, ip, #1
 8003468:	4565      	cmp	r5, ip
 800346a:	d8f5      	bhi.n	8003458 <bme280_set_regs+0x3c>
            if (len > 1)
 800346c:	2d01      	cmp	r5, #1
 800346e:	d80b      	bhi.n	8003488 <bme280_set_regs+0x6c>
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8003470:	6873      	ldr	r3, [r6, #4]
 8003472:	462a      	mov	r2, r5
 8003474:	a901      	add	r1, sp, #4
 8003476:	7820      	ldrb	r0, [r4, #0]
 8003478:	6934      	ldr	r4, [r6, #16]
 800347a:	47a0      	blx	r4
 800347c:	7230      	strb	r0, [r6, #8]
            if (dev->intf_rslt != BME280_INTF_RET_SUCCESS)
 800347e:	b9c0      	cbnz	r0, 80034b2 <bme280_set_regs+0x96>
}
 8003480:	4638      	mov	r0, r7
 8003482:	b006      	add	sp, #24
 8003484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8003488:	462b      	mov	r3, r5
 800348a:	4642      	mov	r2, r8
 800348c:	a901      	add	r1, sp, #4
 800348e:	4620      	mov	r0, r4
 8003490:	f7ff fee6 	bl	8003260 <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 8003494:	006d      	lsls	r5, r5, #1
 8003496:	3d01      	subs	r5, #1
 8003498:	e7ea      	b.n	8003470 <bme280_set_regs+0x54>
        rslt = BME280_E_NULL_PTR;
 800349a:	f04f 37ff 	mov.w	r7, #4294967295
 800349e:	e7ef      	b.n	8003480 <bme280_set_regs+0x64>
 80034a0:	f04f 37ff 	mov.w	r7, #4294967295
 80034a4:	e7ec      	b.n	8003480 <bme280_set_regs+0x64>
 80034a6:	f04f 37ff 	mov.w	r7, #4294967295
 80034aa:	e7e9      	b.n	8003480 <bme280_set_regs+0x64>
            rslt = BME280_E_INVALID_LEN;
 80034ac:	f06f 0702 	mvn.w	r7, #2
 80034b0:	e7e6      	b.n	8003480 <bme280_set_regs+0x64>
                rslt = BME280_E_COMM_FAIL;
 80034b2:	f06f 0701 	mvn.w	r7, #1
 80034b6:	e7e3      	b.n	8003480 <bme280_set_regs+0x64>

080034b8 <set_osr_humidity_settings>:
{
 80034b8:	b510      	push	{r4, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	460c      	mov	r4, r1
    uint8_t reg_addr = BME280_REG_CTRL_HUM;
 80034be:	23f2      	movs	r3, #242	@ 0xf2
 80034c0:	f88d 3005 	strb.w	r3, [sp, #5]
    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 80034c4:	7883      	ldrb	r3, [r0, #2]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 80034ce:	460b      	mov	r3, r1
 80034d0:	2201      	movs	r2, #1
 80034d2:	f10d 0107 	add.w	r1, sp, #7
 80034d6:	f10d 0005 	add.w	r0, sp, #5
 80034da:	f7ff ff9f 	bl	800341c <bme280_set_regs>
    if (rslt == BME280_OK)
 80034de:	b108      	cbz	r0, 80034e4 <set_osr_humidity_settings+0x2c>
}
 80034e0:	b002      	add	sp, #8
 80034e2:	bd10      	pop	{r4, pc}
        reg_addr = BME280_REG_CTRL_MEAS;
 80034e4:	20f4      	movs	r0, #244	@ 0xf4
 80034e6:	f88d 0005 	strb.w	r0, [sp, #5]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 80034ea:	4623      	mov	r3, r4
 80034ec:	2201      	movs	r2, #1
 80034ee:	f10d 0106 	add.w	r1, sp, #6
 80034f2:	f7ff ff45 	bl	8003380 <bme280_get_regs>
        if (rslt == BME280_OK)
 80034f6:	2800      	cmp	r0, #0
 80034f8:	d1f2      	bne.n	80034e0 <set_osr_humidity_settings+0x28>
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 80034fa:	4623      	mov	r3, r4
 80034fc:	2201      	movs	r2, #1
 80034fe:	f10d 0106 	add.w	r1, sp, #6
 8003502:	f10d 0005 	add.w	r0, sp, #5
 8003506:	f7ff ff89 	bl	800341c <bme280_set_regs>
 800350a:	e7e9      	b.n	80034e0 <set_osr_humidity_settings+0x28>

0800350c <set_osr_press_temp_settings>:
{
 800350c:	b570      	push	{r4, r5, r6, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	4605      	mov	r5, r0
 8003512:	460e      	mov	r6, r1
 8003514:	4614      	mov	r4, r2
    uint8_t reg_addr = BME280_REG_CTRL_MEAS;
 8003516:	20f4      	movs	r0, #244	@ 0xf4
 8003518:	f88d 0007 	strb.w	r0, [sp, #7]
    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800351c:	4613      	mov	r3, r2
 800351e:	2201      	movs	r2, #1
 8003520:	f10d 0106 	add.w	r1, sp, #6
 8003524:	f7ff ff2c 	bl	8003380 <bme280_get_regs>
    if (rslt == BME280_OK)
 8003528:	b968      	cbnz	r0, 8003546 <set_osr_press_temp_settings+0x3a>
        if (desired_settings & BME280_SEL_OSR_PRESS)
 800352a:	f015 0f01 	tst.w	r5, #1
 800352e:	d10c      	bne.n	800354a <set_osr_press_temp_settings+0x3e>
        if (desired_settings & BME280_SEL_OSR_TEMP)
 8003530:	f015 0f02 	tst.w	r5, #2
 8003534:	d10f      	bne.n	8003556 <set_osr_press_temp_settings+0x4a>
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8003536:	4623      	mov	r3, r4
 8003538:	2201      	movs	r2, #1
 800353a:	f10d 0106 	add.w	r1, sp, #6
 800353e:	f10d 0007 	add.w	r0, sp, #7
 8003542:	f7ff ff6b 	bl	800341c <bme280_set_regs>
}
 8003546:	b002      	add	sp, #8
 8003548:	bd70      	pop	{r4, r5, r6, pc}
            fill_osr_press_settings(&reg_data, settings);
 800354a:	4631      	mov	r1, r6
 800354c:	f10d 0006 	add.w	r0, sp, #6
 8003550:	f7ff fc62 	bl	8002e18 <fill_osr_press_settings>
 8003554:	e7ec      	b.n	8003530 <set_osr_press_temp_settings+0x24>
            fill_osr_temp_settings(&reg_data, settings);
 8003556:	4631      	mov	r1, r6
 8003558:	f10d 0006 	add.w	r0, sp, #6
 800355c:	f7ff fc66 	bl	8002e2c <fill_osr_temp_settings>
 8003560:	e7e9      	b.n	8003536 <set_osr_press_temp_settings+0x2a>

08003562 <set_osr_settings>:
{
 8003562:	b570      	push	{r4, r5, r6, lr}
 8003564:	4604      	mov	r4, r0
 8003566:	460d      	mov	r5, r1
 8003568:	4616      	mov	r6, r2
    if (desired_settings & BME280_SEL_OSR_HUM)
 800356a:	f010 0f04 	tst.w	r0, #4
 800356e:	d104      	bne.n	800357a <set_osr_settings+0x18>
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8003570:	2001      	movs	r0, #1
    if (desired_settings & (BME280_SEL_OSR_PRESS | BME280_SEL_OSR_TEMP))
 8003572:	f014 0f03 	tst.w	r4, #3
 8003576:	d105      	bne.n	8003584 <set_osr_settings+0x22>
}
 8003578:	bd70      	pop	{r4, r5, r6, pc}
        rslt = set_osr_humidity_settings(settings, dev);
 800357a:	4611      	mov	r1, r2
 800357c:	4628      	mov	r0, r5
 800357e:	f7ff ff9b 	bl	80034b8 <set_osr_humidity_settings>
 8003582:	e7f6      	b.n	8003572 <set_osr_settings+0x10>
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8003584:	4632      	mov	r2, r6
 8003586:	4629      	mov	r1, r5
 8003588:	4620      	mov	r0, r4
 800358a:	f7ff ffbf 	bl	800350c <set_osr_press_temp_settings>
 800358e:	e7f3      	b.n	8003578 <set_osr_settings+0x16>

08003590 <set_filter_standby_settings>:
{
 8003590:	b570      	push	{r4, r5, r6, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	4605      	mov	r5, r0
 8003596:	460e      	mov	r6, r1
 8003598:	4614      	mov	r4, r2
    uint8_t reg_addr = BME280_REG_CONFIG;
 800359a:	20f5      	movs	r0, #245	@ 0xf5
 800359c:	f88d 0007 	strb.w	r0, [sp, #7]
    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80035a0:	4613      	mov	r3, r2
 80035a2:	2201      	movs	r2, #1
 80035a4:	f10d 0106 	add.w	r1, sp, #6
 80035a8:	f7ff feea 	bl	8003380 <bme280_get_regs>
    if (rslt == BME280_OK)
 80035ac:	b968      	cbnz	r0, 80035ca <set_filter_standby_settings+0x3a>
        if (desired_settings & BME280_SEL_FILTER)
 80035ae:	f015 0f08 	tst.w	r5, #8
 80035b2:	d10c      	bne.n	80035ce <set_filter_standby_settings+0x3e>
        if (desired_settings & BME280_SEL_STANDBY)
 80035b4:	f015 0f10 	tst.w	r5, #16
 80035b8:	d10f      	bne.n	80035da <set_filter_standby_settings+0x4a>
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80035ba:	4623      	mov	r3, r4
 80035bc:	2201      	movs	r2, #1
 80035be:	f10d 0106 	add.w	r1, sp, #6
 80035c2:	f10d 0007 	add.w	r0, sp, #7
 80035c6:	f7ff ff29 	bl	800341c <bme280_set_regs>
}
 80035ca:	b002      	add	sp, #8
 80035cc:	bd70      	pop	{r4, r5, r6, pc}
            fill_filter_settings(&reg_data, settings);
 80035ce:	4631      	mov	r1, r6
 80035d0:	f10d 0006 	add.w	r0, sp, #6
 80035d4:	f7ff fc0e 	bl	8002df4 <fill_filter_settings>
 80035d8:	e7ec      	b.n	80035b4 <set_filter_standby_settings+0x24>
            fill_standby_settings(&reg_data, settings);
 80035da:	4631      	mov	r1, r6
 80035dc:	f10d 0006 	add.w	r0, sp, #6
 80035e0:	f7ff fc12 	bl	8002e08 <fill_standby_settings>
 80035e4:	e7e9      	b.n	80035ba <set_filter_standby_settings+0x2a>

080035e6 <reload_device_settings>:
{
 80035e6:	b538      	push	{r3, r4, r5, lr}
 80035e8:	4604      	mov	r4, r0
 80035ea:	460d      	mov	r5, r1
    rslt = set_osr_settings(BME280_SEL_ALL_SETTINGS, settings, dev);
 80035ec:	460a      	mov	r2, r1
 80035ee:	4601      	mov	r1, r0
 80035f0:	201f      	movs	r0, #31
 80035f2:	f7ff ffb6 	bl	8003562 <set_osr_settings>
    if (rslt == BME280_OK)
 80035f6:	b100      	cbz	r0, 80035fa <reload_device_settings+0x14>
}
 80035f8:	bd38      	pop	{r3, r4, r5, pc}
        rslt = set_filter_standby_settings(BME280_SEL_ALL_SETTINGS, settings, dev);
 80035fa:	462a      	mov	r2, r5
 80035fc:	4621      	mov	r1, r4
 80035fe:	201f      	movs	r0, #31
 8003600:	f7ff ffc6 	bl	8003590 <set_filter_standby_settings>
 8003604:	e7f8      	b.n	80035f8 <reload_device_settings+0x12>

08003606 <write_power_mode>:
{
 8003606:	b530      	push	{r4, r5, lr}
 8003608:	b083      	sub	sp, #12
 800360a:	4605      	mov	r5, r0
 800360c:	460c      	mov	r4, r1
    uint8_t reg_addr = BME280_REG_PWR_CTRL;
 800360e:	20f4      	movs	r0, #244	@ 0xf4
 8003610:	f88d 0007 	strb.w	r0, [sp, #7]
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8003614:	460b      	mov	r3, r1
 8003616:	2201      	movs	r2, #1
 8003618:	f10d 0106 	add.w	r1, sp, #6
 800361c:	f7ff feb0 	bl	8003380 <bme280_get_regs>
    if (rslt == BME280_OK)
 8003620:	b108      	cbz	r0, 8003626 <write_power_mode+0x20>
}
 8003622:	b003      	add	sp, #12
 8003624:	bd30      	pop	{r4, r5, pc}
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8003626:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800362a:	f023 0303 	bic.w	r3, r3, #3
 800362e:	f005 0003 	and.w	r0, r5, #3
 8003632:	4303      	orrs	r3, r0
 8003634:	f88d 3006 	strb.w	r3, [sp, #6]
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8003638:	4623      	mov	r3, r4
 800363a:	2201      	movs	r2, #1
 800363c:	f10d 0106 	add.w	r1, sp, #6
 8003640:	f10d 0007 	add.w	r0, sp, #7
 8003644:	f7ff feea 	bl	800341c <bme280_set_regs>
 8003648:	e7eb      	b.n	8003622 <write_power_mode+0x1c>

0800364a <bme280_get_sensor_settings>:
{
 800364a:	b530      	push	{r4, r5, lr}
 800364c:	b083      	sub	sp, #12
    if (settings != NULL)
 800364e:	b188      	cbz	r0, 8003674 <bme280_get_sensor_settings+0x2a>
 8003650:	460b      	mov	r3, r1
 8003652:	4605      	mov	r5, r0
        rslt = bme280_get_regs(BME280_REG_CTRL_HUM, reg_data, 4, dev);
 8003654:	2204      	movs	r2, #4
 8003656:	eb0d 0102 	add.w	r1, sp, r2
 800365a:	20f2      	movs	r0, #242	@ 0xf2
 800365c:	f7ff fe90 	bl	8003380 <bme280_get_regs>
        if (rslt == BME280_OK)
 8003660:	4604      	mov	r4, r0
 8003662:	b110      	cbz	r0, 800366a <bme280_get_sensor_settings+0x20>
}
 8003664:	4620      	mov	r0, r4
 8003666:	b003      	add	sp, #12
 8003668:	bd30      	pop	{r4, r5, pc}
            parse_device_settings(reg_data, settings);
 800366a:	4629      	mov	r1, r5
 800366c:	a801      	add	r0, sp, #4
 800366e:	f7ff fbe5 	bl	8002e3c <parse_device_settings>
 8003672:	e7f7      	b.n	8003664 <bme280_get_sensor_settings+0x1a>
        rslt = BME280_E_NULL_PTR;
 8003674:	f04f 34ff 	mov.w	r4, #4294967295
 8003678:	e7f4      	b.n	8003664 <bme280_get_sensor_settings+0x1a>

0800367a <bme280_get_sensor_mode>:
    if (sensor_mode != NULL)
 800367a:	b160      	cbz	r0, 8003696 <bme280_get_sensor_mode+0x1c>
{
 800367c:	b510      	push	{r4, lr}
 800367e:	460b      	mov	r3, r1
 8003680:	4604      	mov	r4, r0
        rslt = bme280_get_regs(BME280_REG_PWR_CTRL, sensor_mode, 1, dev);
 8003682:	2201      	movs	r2, #1
 8003684:	4601      	mov	r1, r0
 8003686:	20f4      	movs	r0, #244	@ 0xf4
 8003688:	f7ff fe7a 	bl	8003380 <bme280_get_regs>
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 800368c:	7823      	ldrb	r3, [r4, #0]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	7023      	strb	r3, [r4, #0]
}
 8003694:	bd10      	pop	{r4, pc}
        rslt = BME280_E_NULL_PTR;
 8003696:	f04f 30ff 	mov.w	r0, #4294967295
}
 800369a:	4770      	bx	lr

0800369c <bme280_soft_reset>:
{
 800369c:	b530      	push	{r4, r5, lr}
 800369e:	b083      	sub	sp, #12
 80036a0:	4604      	mov	r4, r0
    uint8_t reg_addr = BME280_REG_RESET;
 80036a2:	23e0      	movs	r3, #224	@ 0xe0
 80036a4:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t status_reg = 0;
 80036a8:	2300      	movs	r3, #0
 80036aa:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 80036ae:	23b6      	movs	r3, #182	@ 0xb6
 80036b0:	f88d 3005 	strb.w	r3, [sp, #5]
    rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80036b4:	4603      	mov	r3, r0
 80036b6:	2201      	movs	r2, #1
 80036b8:	f10d 0105 	add.w	r1, sp, #5
 80036bc:	f10d 0007 	add.w	r0, sp, #7
 80036c0:	f7ff feac 	bl	800341c <bme280_set_regs>
    if (rslt == BME280_OK)
 80036c4:	4602      	mov	r2, r0
 80036c6:	b9e0      	cbnz	r0, 8003702 <bme280_soft_reset+0x66>
    uint8_t try_run = 5;
 80036c8:	2505      	movs	r5, #5
 80036ca:	e000      	b.n	80036ce <bme280_soft_reset+0x32>
        } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 80036cc:	461d      	mov	r5, r3
            dev->delay_ms(BME280_STARTUP_DELAY, dev->intf_ptr);
 80036ce:	6963      	ldr	r3, [r4, #20]
 80036d0:	6861      	ldr	r1, [r4, #4]
 80036d2:	2002      	movs	r0, #2
 80036d4:	4798      	blx	r3
            rslt = bme280_get_regs(BME280_REG_STATUS, &status_reg, 1, dev);
 80036d6:	4623      	mov	r3, r4
 80036d8:	2201      	movs	r2, #1
 80036da:	f10d 0106 	add.w	r1, sp, #6
 80036de:	20f3      	movs	r0, #243	@ 0xf3
 80036e0:	f7ff fe4e 	bl	8003380 <bme280_get_regs>
        } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 80036e4:	4602      	mov	r2, r0
 80036e6:	b938      	cbnz	r0, 80036f8 <bme280_soft_reset+0x5c>
 80036e8:	1e6b      	subs	r3, r5, #1
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	b125      	cbz	r5, 80036f8 <bme280_soft_reset+0x5c>
 80036ee:	f89d 1006 	ldrb.w	r1, [sp, #6]
 80036f2:	f011 0f01 	tst.w	r1, #1
 80036f6:	d1e9      	bne.n	80036cc <bme280_soft_reset+0x30>
        if (status_reg & BME280_STATUS_IM_UPDATE)
 80036f8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80036fc:	f013 0f01 	tst.w	r3, #1
 8003700:	d102      	bne.n	8003708 <bme280_soft_reset+0x6c>
}
 8003702:	4610      	mov	r0, r2
 8003704:	b003      	add	sp, #12
 8003706:	bd30      	pop	{r4, r5, pc}
            rslt = BME280_E_NVM_COPY_FAILED;
 8003708:	f06f 0205 	mvn.w	r2, #5
 800370c:	e7f9      	b.n	8003702 <bme280_soft_reset+0x66>

0800370e <bme280_init>:
{
 800370e:	b510      	push	{r4, lr}
 8003710:	b082      	sub	sp, #8
 8003712:	4604      	mov	r4, r0
    uint8_t chip_id = 0;
 8003714:	2300      	movs	r3, #0
 8003716:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = bme280_get_regs(BME280_REG_CHIP_ID, &chip_id, 1, dev);
 800371a:	4603      	mov	r3, r0
 800371c:	2201      	movs	r2, #1
 800371e:	f10d 0107 	add.w	r1, sp, #7
 8003722:	20d0      	movs	r0, #208	@ 0xd0
 8003724:	f7ff fe2c 	bl	8003380 <bme280_get_regs>
    if (rslt == BME280_OK)
 8003728:	b940      	cbnz	r0, 800373c <bme280_init+0x2e>
        if (chip_id == BME280_CHIP_ID)
 800372a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800372e:	2b60      	cmp	r3, #96	@ 0x60
 8003730:	d10a      	bne.n	8003748 <bme280_init+0x3a>
            dev->chip_id = chip_id;
 8003732:	7023      	strb	r3, [r4, #0]
            rslt = bme280_soft_reset(dev);
 8003734:	4620      	mov	r0, r4
 8003736:	f7ff ffb1 	bl	800369c <bme280_soft_reset>
            if (rslt == BME280_OK)
 800373a:	b108      	cbz	r0, 8003740 <bme280_init+0x32>
}
 800373c:	b002      	add	sp, #8
 800373e:	bd10      	pop	{r4, pc}
                rslt = get_calib_data(dev);
 8003740:	4620      	mov	r0, r4
 8003742:	f7ff fe42 	bl	80033ca <get_calib_data>
 8003746:	e7f9      	b.n	800373c <bme280_init+0x2e>
            rslt = BME280_E_DEV_NOT_FOUND;
 8003748:	f06f 0003 	mvn.w	r0, #3
 800374c:	e7f6      	b.n	800373c <bme280_init+0x2e>

0800374e <put_device_to_sleep>:
{
 800374e:	b510      	push	{r4, lr}
 8003750:	b084      	sub	sp, #16
 8003752:	4604      	mov	r4, r0
    rslt = bme280_get_regs(BME280_REG_CTRL_HUM, reg_data, 4, dev);
 8003754:	4603      	mov	r3, r0
 8003756:	2204      	movs	r2, #4
 8003758:	a903      	add	r1, sp, #12
 800375a:	20f2      	movs	r0, #242	@ 0xf2
 800375c:	f7ff fe10 	bl	8003380 <bme280_get_regs>
    if (rslt == BME280_OK)
 8003760:	b108      	cbz	r0, 8003766 <put_device_to_sleep+0x18>
}
 8003762:	b004      	add	sp, #16
 8003764:	bd10      	pop	{r4, pc}
        parse_device_settings(reg_data, &settings);
 8003766:	a901      	add	r1, sp, #4
 8003768:	a803      	add	r0, sp, #12
 800376a:	f7ff fb67 	bl	8002e3c <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 800376e:	4620      	mov	r0, r4
 8003770:	f7ff ff94 	bl	800369c <bme280_soft_reset>
        if (rslt == BME280_OK)
 8003774:	2800      	cmp	r0, #0
 8003776:	d1f4      	bne.n	8003762 <put_device_to_sleep+0x14>
            rslt = reload_device_settings(&settings, dev);
 8003778:	4621      	mov	r1, r4
 800377a:	a801      	add	r0, sp, #4
 800377c:	f7ff ff33 	bl	80035e6 <reload_device_settings>
 8003780:	e7ef      	b.n	8003762 <put_device_to_sleep+0x14>

08003782 <bme280_set_sensor_settings>:
{
 8003782:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003784:	b083      	sub	sp, #12
    if (settings != NULL)
 8003786:	b371      	cbz	r1, 80037e6 <bme280_set_sensor_settings+0x64>
 8003788:	4606      	mov	r6, r0
 800378a:	4614      	mov	r4, r2
 800378c:	460f      	mov	r7, r1
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 800378e:	4611      	mov	r1, r2
 8003790:	f10d 0007 	add.w	r0, sp, #7
 8003794:	f7ff ff71 	bl	800367a <bme280_get_sensor_mode>
        if ((rslt == BME280_OK) && (sensor_mode != BME280_POWERMODE_SLEEP))
 8003798:	4605      	mov	r5, r0
 800379a:	b970      	cbnz	r0, 80037ba <bme280_set_sensor_settings+0x38>
 800379c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80037a0:	b973      	cbnz	r3, 80037c0 <bme280_set_sensor_settings+0x3e>
        if (rslt == BME280_OK)
 80037a2:	b955      	cbnz	r5, 80037ba <bme280_set_sensor_settings+0x38>
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 80037a4:	4631      	mov	r1, r6
 80037a6:	2007      	movs	r0, #7
 80037a8:	f7ff fdd1 	bl	800334e <are_settings_changed>
 80037ac:	b968      	cbnz	r0, 80037ca <bme280_set_sensor_settings+0x48>
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 80037ae:	b925      	cbnz	r5, 80037ba <bme280_set_sensor_settings+0x38>
 80037b0:	4631      	mov	r1, r6
 80037b2:	2018      	movs	r0, #24
 80037b4:	f7ff fdcb 	bl	800334e <are_settings_changed>
 80037b8:	b970      	cbnz	r0, 80037d8 <bme280_set_sensor_settings+0x56>
}
 80037ba:	4628      	mov	r0, r5
 80037bc:	b003      	add	sp, #12
 80037be:	bdf0      	pop	{r4, r5, r6, r7, pc}
            rslt = put_device_to_sleep(dev);
 80037c0:	4620      	mov	r0, r4
 80037c2:	f7ff ffc4 	bl	800374e <put_device_to_sleep>
 80037c6:	4605      	mov	r5, r0
 80037c8:	e7eb      	b.n	80037a2 <bme280_set_sensor_settings+0x20>
                rslt = set_osr_settings(desired_settings, settings, dev);
 80037ca:	4622      	mov	r2, r4
 80037cc:	4639      	mov	r1, r7
 80037ce:	4630      	mov	r0, r6
 80037d0:	f7ff fec7 	bl	8003562 <set_osr_settings>
 80037d4:	4605      	mov	r5, r0
 80037d6:	e7ea      	b.n	80037ae <bme280_set_sensor_settings+0x2c>
                rslt = set_filter_standby_settings(desired_settings, settings, dev);
 80037d8:	4622      	mov	r2, r4
 80037da:	4639      	mov	r1, r7
 80037dc:	4630      	mov	r0, r6
 80037de:	f7ff fed7 	bl	8003590 <set_filter_standby_settings>
 80037e2:	4605      	mov	r5, r0
 80037e4:	e7e9      	b.n	80037ba <bme280_set_sensor_settings+0x38>
        rslt = BME280_E_NULL_PTR;
 80037e6:	f04f 35ff 	mov.w	r5, #4294967295
 80037ea:	e7e6      	b.n	80037ba <bme280_set_sensor_settings+0x38>

080037ec <bme280_set_sensor_mode>:
{
 80037ec:	b530      	push	{r4, r5, lr}
 80037ee:	b083      	sub	sp, #12
 80037f0:	4605      	mov	r5, r0
 80037f2:	460c      	mov	r4, r1
    rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 80037f4:	f10d 0007 	add.w	r0, sp, #7
 80037f8:	f7ff ff3f 	bl	800367a <bme280_get_sensor_mode>
    if ((rslt == BME280_OK) && (last_set_mode != BME280_POWERMODE_SLEEP))
 80037fc:	4603      	mov	r3, r0
 80037fe:	b918      	cbnz	r0, 8003808 <bme280_set_sensor_mode+0x1c>
 8003800:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003804:	b91a      	cbnz	r2, 800380e <bme280_set_sensor_mode+0x22>
    if (rslt == BME280_OK)
 8003806:	b13b      	cbz	r3, 8003818 <bme280_set_sensor_mode+0x2c>
}
 8003808:	4618      	mov	r0, r3
 800380a:	b003      	add	sp, #12
 800380c:	bd30      	pop	{r4, r5, pc}
        rslt = put_device_to_sleep(dev);
 800380e:	4620      	mov	r0, r4
 8003810:	f7ff ff9d 	bl	800374e <put_device_to_sleep>
 8003814:	4603      	mov	r3, r0
 8003816:	e7f6      	b.n	8003806 <bme280_set_sensor_mode+0x1a>
        rslt = write_power_mode(sensor_mode, dev);
 8003818:	4621      	mov	r1, r4
 800381a:	4628      	mov	r0, r5
 800381c:	f7ff fef3 	bl	8003606 <write_power_mode>
 8003820:	4603      	mov	r3, r0
 8003822:	e7f1      	b.n	8003808 <bme280_set_sensor_mode+0x1c>

08003824 <bme280_compensate_data>:
    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8003824:	b329      	cbz	r1, 8003872 <bme280_compensate_data+0x4e>
{
 8003826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003828:	4607      	mov	r7, r0
 800382a:	4614      	mov	r4, r2
 800382c:	461d      	mov	r5, r3
 800382e:	460e      	mov	r6, r1
    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8003830:	b312      	cbz	r2, 8003878 <bme280_compensate_data+0x54>
 8003832:	b323      	cbz	r3, 800387e <bme280_compensate_data+0x5a>
        comp_data->temperature = 0;
 8003834:	2300      	movs	r3, #0
 8003836:	6053      	str	r3, [r2, #4]
        comp_data->pressure = 0;
 8003838:	6013      	str	r3, [r2, #0]
        comp_data->humidity = 0;
 800383a:	6093      	str	r3, [r2, #8]
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 800383c:	f010 0f07 	tst.w	r0, #7
 8003840:	d111      	bne.n	8003866 <bme280_compensate_data+0x42>
        if (sensor_comp & BME280_PRESS)
 8003842:	f017 0f01 	tst.w	r7, #1
 8003846:	d004      	beq.n	8003852 <bme280_compensate_data+0x2e>
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8003848:	4629      	mov	r1, r5
 800384a:	4630      	mov	r0, r6
 800384c:	f7ff fb66 	bl	8002f1c <compensate_pressure>
 8003850:	6020      	str	r0, [r4, #0]
        if (sensor_comp & BME280_HUM)
 8003852:	f017 0f04 	tst.w	r7, #4
 8003856:	d015      	beq.n	8003884 <bme280_compensate_data+0x60>
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8003858:	4629      	mov	r1, r5
 800385a:	4630      	mov	r0, r6
 800385c:	f7ff fc90 	bl	8003180 <compensate_humidity>
 8003860:	60a0      	str	r0, [r4, #8]
    int8_t rslt = BME280_OK;
 8003862:	2000      	movs	r0, #0
}
 8003864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8003866:	4629      	mov	r1, r5
 8003868:	4630      	mov	r0, r6
 800386a:	f7ff fb15 	bl	8002e98 <compensate_temperature>
 800386e:	6060      	str	r0, [r4, #4]
 8003870:	e7e7      	b.n	8003842 <bme280_compensate_data+0x1e>
        rslt = BME280_E_NULL_PTR;
 8003872:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003876:	4770      	bx	lr
        rslt = BME280_E_NULL_PTR;
 8003878:	f04f 30ff 	mov.w	r0, #4294967295
 800387c:	e7f2      	b.n	8003864 <bme280_compensate_data+0x40>
 800387e:	f04f 30ff 	mov.w	r0, #4294967295
 8003882:	e7ef      	b.n	8003864 <bme280_compensate_data+0x40>
    int8_t rslt = BME280_OK;
 8003884:	2000      	movs	r0, #0
 8003886:	e7ed      	b.n	8003864 <bme280_compensate_data+0x40>

08003888 <bme280_get_sensor_data>:
{
 8003888:	b570      	push	{r4, r5, r6, lr}
 800388a:	b086      	sub	sp, #24
    uint8_t reg_data[BME280_LEN_P_T_H_DATA] = { 0 };
 800388c:	2400      	movs	r4, #0
 800388e:	9404      	str	r4, [sp, #16]
 8003890:	9405      	str	r4, [sp, #20]
    struct bme280_uncomp_data uncomp_data = { 0 };
 8003892:	9401      	str	r4, [sp, #4]
 8003894:	9402      	str	r4, [sp, #8]
 8003896:	9403      	str	r4, [sp, #12]
    if (comp_data != NULL)
 8003898:	b1b9      	cbz	r1, 80038ca <bme280_get_sensor_data+0x42>
 800389a:	4606      	mov	r6, r0
 800389c:	4615      	mov	r5, r2
 800389e:	460c      	mov	r4, r1
        rslt = bme280_get_regs(BME280_REG_DATA, reg_data, BME280_LEN_P_T_H_DATA, dev);
 80038a0:	4613      	mov	r3, r2
 80038a2:	2208      	movs	r2, #8
 80038a4:	a904      	add	r1, sp, #16
 80038a6:	20f7      	movs	r0, #247	@ 0xf7
 80038a8:	f7ff fd6a 	bl	8003380 <bme280_get_regs>
        if (rslt == BME280_OK)
 80038ac:	b108      	cbz	r0, 80038b2 <bme280_get_sensor_data+0x2a>
}
 80038ae:	b006      	add	sp, #24
 80038b0:	bd70      	pop	{r4, r5, r6, pc}
            parse_sensor_data(reg_data, &uncomp_data);
 80038b2:	a901      	add	r1, sp, #4
 80038b4:	a804      	add	r0, sp, #16
 80038b6:	f7ff fad4 	bl	8002e62 <parse_sensor_data>
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80038ba:	f105 0318 	add.w	r3, r5, #24
 80038be:	4622      	mov	r2, r4
 80038c0:	a901      	add	r1, sp, #4
 80038c2:	4630      	mov	r0, r6
 80038c4:	f7ff ffae 	bl	8003824 <bme280_compensate_data>
 80038c8:	e7f1      	b.n	80038ae <bme280_get_sensor_data+0x26>
        rslt = BME280_E_NULL_PTR;
 80038ca:	f04f 30ff 	mov.w	r0, #4294967295
 80038ce:	e7ee      	b.n	80038ae <bme280_get_sensor_data+0x26>

080038d0 <onMeasurementTimer>:
	BME280_data = print_sensor_data(&comp_data);

	return BME280_data;
}

static void onMeasurementTimer(void *param){
 80038d0:	b508      	push	{r3, lr}
	APP_LOG(TS_OFF, VLEVEL_M, "Measurement timer expired.\r\n");
 80038d2:	4b03      	ldr	r3, [pc, #12]	@ (80038e0 <onMeasurementTimer+0x10>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	4611      	mov	r1, r2
 80038d8:	2002      	movs	r0, #2
 80038da:	f011 ff2f 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
}
 80038de:	bd08      	pop	{r3, pc}
 80038e0:	080168ac 	.word	0x080168ac

080038e4 <user_delay_ms>:
void user_delay_ms(uint32_t period, void *tmr_intf_ptr) {
 80038e4:	b508      	push	{r3, lr}
	HAL_Delay(period/1000);
 80038e6:	4b03      	ldr	r3, [pc, #12]	@ (80038f4 <user_delay_ms+0x10>)
 80038e8:	fba3 3000 	umull	r3, r0, r3, r0
 80038ec:	0980      	lsrs	r0, r0, #6
 80038ee:	f7fe f9a1 	bl	8001c34 <HAL_Delay>
}
 80038f2:	bd08      	pop	{r3, pc}
 80038f4:	10624dd3 	.word	0x10624dd3

080038f8 <configure_forced_mode_data_acquisition>:
int8_t configure_forced_mode_data_acquisition(bme280_dev_t *dev) {
 80038f8:	b530      	push	{r4, r5, lr}
 80038fa:	b085      	sub	sp, #20
 80038fc:	4604      	mov	r4, r0
	struct bme280_settings settings = { 0 };
 80038fe:	2300      	movs	r3, #0
 8003900:	9302      	str	r3, [sp, #8]
 8003902:	f88d 300c 	strb.w	r3, [sp, #12]
	rslt = bme280_get_sensor_settings(&settings, dev);
 8003906:	4601      	mov	r1, r0
 8003908:	a802      	add	r0, sp, #8
 800390a:	f7ff fe9e 	bl	800364a <bme280_get_sensor_settings>
	if (rslt != BME280_OK) {
 800390e:	b998      	cbnz	r0, 8003938 <configure_forced_mode_data_acquisition+0x40>
	settings.filter = BME280_FILTER_COEFF_OFF;
 8003910:	2300      	movs	r3, #0
 8003912:	f88d 300b 	strb.w	r3, [sp, #11]
	settings.osr_h = BME280_OVERSAMPLING_1X;
 8003916:	2301      	movs	r3, #1
 8003918:	f88d 300a 	strb.w	r3, [sp, #10]
	settings.osr_p = BME280_OVERSAMPLING_1X;
 800391c:	f88d 3008 	strb.w	r3, [sp, #8]
	settings.osr_t = BME280_OVERSAMPLING_1X;
 8003920:	f88d 3009 	strb.w	r3, [sp, #9]
	rslt = bme280_set_sensor_settings(BME280_SEL_ALL_SETTINGS, &settings, dev);
 8003924:	4622      	mov	r2, r4
 8003926:	a902      	add	r1, sp, #8
 8003928:	201f      	movs	r0, #31
 800392a:	f7ff ff2a 	bl	8003782 <bme280_set_sensor_settings>
	if (rslt != BME280_OK) {
 800392e:	4605      	mov	r5, r0
 8003930:	b958      	cbnz	r0, 800394a <configure_forced_mode_data_acquisition+0x52>
}
 8003932:	4628      	mov	r0, r5
 8003934:	b005      	add	sp, #20
 8003936:	bd30      	pop	{r4, r5, pc}
 8003938:	4605      	mov	r5, r0
		APP_LOG(TS_OFF, VLEVEL_M, "Failed to get sensor settings (code %d)\r\n", rslt);
 800393a:	9000      	str	r0, [sp, #0]
 800393c:	4b07      	ldr	r3, [pc, #28]	@ (800395c <configure_forced_mode_data_acquisition+0x64>)
 800393e:	2200      	movs	r2, #0
 8003940:	4611      	mov	r1, r2
 8003942:	2002      	movs	r0, #2
 8003944:	f011 fefa 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
		return rslt;
 8003948:	e7f3      	b.n	8003932 <configure_forced_mode_data_acquisition+0x3a>
		APP_LOG(TS_OFF, VLEVEL_M, "Failed to set sensor settings (code %d)\r\n", rslt);
 800394a:	9000      	str	r0, [sp, #0]
 800394c:	4b04      	ldr	r3, [pc, #16]	@ (8003960 <configure_forced_mode_data_acquisition+0x68>)
 800394e:	2200      	movs	r2, #0
 8003950:	4611      	mov	r1, r2
 8003952:	2002      	movs	r0, #2
 8003954:	f011 fef2 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
		return rslt;
 8003958:	e7eb      	b.n	8003932 <configure_forced_mode_data_acquisition+0x3a>
 800395a:	bf00      	nop
 800395c:	080168cc 	.word	0x080168cc
 8003960:	080168f8 	.word	0x080168f8

08003964 <initialize_bme280_sensor>:
void initialize_bme280_sensor(void) {
 8003964:	b510      	push	{r4, lr}
 8003966:	b082      	sub	sp, #8
	s_dev.intf = BME280_I2C_INTF;
 8003968:	4c1b      	ldr	r4, [pc, #108]	@ (80039d8 <initialize_bme280_sensor+0x74>)
 800396a:	2301      	movs	r3, #1
 800396c:	7063      	strb	r3, [r4, #1]
	s_dev.read = i2c_read;
 800396e:	4b1b      	ldr	r3, [pc, #108]	@ (80039dc <initialize_bme280_sensor+0x78>)
 8003970:	60e3      	str	r3, [r4, #12]
	s_dev.write = i2c_write;
 8003972:	4b1b      	ldr	r3, [pc, #108]	@ (80039e0 <initialize_bme280_sensor+0x7c>)
 8003974:	6123      	str	r3, [r4, #16]
	s_dev.delay_ms = user_delay_ms;
 8003976:	4b1b      	ldr	r3, [pc, #108]	@ (80039e4 <initialize_bme280_sensor+0x80>)
 8003978:	6163      	str	r3, [r4, #20]
	s_dev.intf_ptr = &id;
 800397a:	4b1b      	ldr	r3, [pc, #108]	@ (80039e8 <initialize_bme280_sensor+0x84>)
 800397c:	6063      	str	r3, [r4, #4]
	UTIL_TIMER_Create(&measurementTimer, MEASUREMENT_PERIOD_TIME, UTIL_TIMER_ONESHOT, onMeasurementTimer, NULL);
 800397e:	2200      	movs	r2, #0
 8003980:	9200      	str	r2, [sp, #0]
 8003982:	4b1a      	ldr	r3, [pc, #104]	@ (80039ec <initialize_bme280_sensor+0x88>)
 8003984:	2128      	movs	r1, #40	@ 0x28
 8003986:	481a      	ldr	r0, [pc, #104]	@ (80039f0 <initialize_bme280_sensor+0x8c>)
 8003988:	f012 f8f2 	bl	8015b70 <UTIL_TIMER_Create>
	rslt = bme280_init(&s_dev);
 800398c:	4620      	mov	r0, r4
 800398e:	f7ff febe 	bl	800370e <bme280_init>
 8003992:	b2c0      	uxtb	r0, r0
 8003994:	4b17      	ldr	r3, [pc, #92]	@ (80039f4 <initialize_bme280_sensor+0x90>)
 8003996:	7018      	strb	r0, [r3, #0]
	if (rslt != BME280_OK) {
 8003998:	b970      	cbnz	r0, 80039b8 <initialize_bme280_sensor+0x54>
	rslt = configure_forced_mode_data_acquisition(&s_dev);
 800399a:	480f      	ldr	r0, [pc, #60]	@ (80039d8 <initialize_bme280_sensor+0x74>)
 800399c:	f7ff ffac 	bl	80038f8 <configure_forced_mode_data_acquisition>
 80039a0:	b2c0      	uxtb	r0, r0
 80039a2:	4b14      	ldr	r3, [pc, #80]	@ (80039f4 <initialize_bme280_sensor+0x90>)
 80039a4:	7018      	strb	r0, [r3, #0]
	if (rslt != BME280_OK) {
 80039a6:	b978      	cbnz	r0, 80039c8 <initialize_bme280_sensor+0x64>
	APP_LOG(TS_OFF, VLEVEL_M, "BME280 initialized\r\n");
 80039a8:	4b13      	ldr	r3, [pc, #76]	@ (80039f8 <initialize_bme280_sensor+0x94>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	4611      	mov	r1, r2
 80039ae:	2002      	movs	r0, #2
 80039b0:	f011 fec4 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
}
 80039b4:	b002      	add	sp, #8
 80039b6:	bd10      	pop	{r4, pc}
		APP_LOG(TS_OFF, VLEVEL_M, "Failed to initialize the device (code %d)\r\n", rslt);
 80039b8:	9000      	str	r0, [sp, #0]
 80039ba:	4b10      	ldr	r3, [pc, #64]	@ (80039fc <initialize_bme280_sensor+0x98>)
 80039bc:	2200      	movs	r2, #0
 80039be:	4611      	mov	r1, r2
 80039c0:	2002      	movs	r0, #2
 80039c2:	f011 febb 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
 80039c6:	e7e8      	b.n	800399a <initialize_bme280_sensor+0x36>
		APP_LOG(TS_OFF, VLEVEL_M, "Failed to stream sensor data (code %d)\r\n", rslt);
 80039c8:	9000      	str	r0, [sp, #0]
 80039ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003a00 <initialize_bme280_sensor+0x9c>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	4611      	mov	r1, r2
 80039d0:	2002      	movs	r0, #2
 80039d2:	f011 feb3 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
 80039d6:	e7e7      	b.n	80039a8 <initialize_bme280_sensor+0x44>
 80039d8:	200005fc 	.word	0x200005fc
 80039dc:	080016bd 	.word	0x080016bd
 80039e0:	08001725 	.word	0x08001725
 80039e4:	080038e5 	.word	0x080038e5
 80039e8:	20000071 	.word	0x20000071
 80039ec:	080038d1 	.word	0x080038d1
 80039f0:	200005e4 	.word	0x200005e4
 80039f4:	2000063c 	.word	0x2000063c
 80039f8:	0801697c 	.word	0x0801697c
 80039fc:	08016924 	.word	0x08016924
 8003a00:	08016950 	.word	0x08016950

08003a04 <print_sensor_data>:
BME280_sensor_t print_sensor_data(bme280_data_t *comp_data) {
 8003a04:	b538      	push	{r3, r4, r5, lr}
 8003a06:	4604      	mov	r4, r0
 8003a08:	460d      	mov	r5, r1
	data.temperature = 0.01f * comp_data->temperature;
 8003a0a:	6848      	ldr	r0, [r1, #4]
 8003a0c:	f7fc ff9a 	bl	8000944 <__aeabi_i2f>
 8003a10:	490a      	ldr	r1, [pc, #40]	@ (8003a3c <print_sensor_data+0x38>)
 8003a12:	f7fc fbbd 	bl	8000190 <__aeabi_fmul>
 8003a16:	6060      	str	r0, [r4, #4]
	data.pressure = 0.0001f * comp_data->pressure;
 8003a18:	6828      	ldr	r0, [r5, #0]
 8003a1a:	f7fc ff8f 	bl	800093c <__aeabi_ui2f>
 8003a1e:	4908      	ldr	r1, [pc, #32]	@ (8003a40 <print_sensor_data+0x3c>)
 8003a20:	f7fc fbb6 	bl	8000190 <__aeabi_fmul>
 8003a24:	6020      	str	r0, [r4, #0]
	data.humidity = 1.0f / 1024.0f * comp_data->humidity;
 8003a26:	68a8      	ldr	r0, [r5, #8]
 8003a28:	f7fc ff88 	bl	800093c <__aeabi_ui2f>
 8003a2c:	f04f 516a 	mov.w	r1, #981467136	@ 0x3a800000
 8003a30:	f7fc fbae 	bl	8000190 <__aeabi_fmul>
 8003a34:	60a0      	str	r0, [r4, #8]
}
 8003a36:	4620      	mov	r0, r4
 8003a38:	bd38      	pop	{r3, r4, r5, pc}
 8003a3a:	bf00      	nop
 8003a3c:	3c23d70a 	.word	0x3c23d70a
 8003a40:	38d1b717 	.word	0x38d1b717

08003a44 <sensor_data_acquisition>:
BME280_sensor_t sensor_data_acquisition(void) {
 8003a44:	b510      	push	{r4, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	4604      	mov	r4, r0
	rslt = bme280_set_sensor_mode(BME280_POWERMODE_FORCED, &s_dev);
 8003a4a:	4918      	ldr	r1, [pc, #96]	@ (8003aac <sensor_data_acquisition+0x68>)
 8003a4c:	2001      	movs	r0, #1
 8003a4e:	f7ff fecd 	bl	80037ec <bme280_set_sensor_mode>
 8003a52:	b2c0      	uxtb	r0, r0
 8003a54:	4a16      	ldr	r2, [pc, #88]	@ (8003ab0 <sensor_data_acquisition+0x6c>)
 8003a56:	7010      	strb	r0, [r2, #0]
	if (rslt != BME280_OK) {
 8003a58:	b9b8      	cbnz	r0, 8003a8a <sensor_data_acquisition+0x46>
	UTIL_TIMER_Start(&measurementTimer);
 8003a5a:	4816      	ldr	r0, [pc, #88]	@ (8003ab4 <sensor_data_acquisition+0x70>)
 8003a5c:	f012 f946 	bl	8015cec <UTIL_TIMER_Start>
	while (UTIL_TIMER_IsRunning(&measurementTimer));
 8003a60:	4814      	ldr	r0, [pc, #80]	@ (8003ab4 <sensor_data_acquisition+0x70>)
 8003a62:	f012 f8a3 	bl	8015bac <UTIL_TIMER_IsRunning>
 8003a66:	2800      	cmp	r0, #0
 8003a68:	d1fa      	bne.n	8003a60 <sensor_data_acquisition+0x1c>
	rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &s_dev);
 8003a6a:	4a10      	ldr	r2, [pc, #64]	@ (8003aac <sensor_data_acquisition+0x68>)
 8003a6c:	a903      	add	r1, sp, #12
 8003a6e:	2007      	movs	r0, #7
 8003a70:	f7ff ff0a 	bl	8003888 <bme280_get_sensor_data>
 8003a74:	b2c0      	uxtb	r0, r0
 8003a76:	4a0e      	ldr	r2, [pc, #56]	@ (8003ab0 <sensor_data_acquisition+0x6c>)
 8003a78:	7010      	strb	r0, [r2, #0]
	if (rslt != BME280_OK) {
 8003a7a:	b970      	cbnz	r0, 8003a9a <sensor_data_acquisition+0x56>
	BME280_data = print_sensor_data(&comp_data);
 8003a7c:	a903      	add	r1, sp, #12
 8003a7e:	4620      	mov	r0, r4
 8003a80:	f7ff ffc0 	bl	8003a04 <print_sensor_data>
}
 8003a84:	4620      	mov	r0, r4
 8003a86:	b006      	add	sp, #24
 8003a88:	bd10      	pop	{r4, pc}
		APP_LOG(TS_OFF, VLEVEL_M, "Failed to set sensor mode (code %d).\r\n", rslt);
 8003a8a:	9000      	str	r0, [sp, #0]
 8003a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ab8 <sensor_data_acquisition+0x74>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	4611      	mov	r1, r2
 8003a92:	2002      	movs	r0, #2
 8003a94:	f011 fe52 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
 8003a98:	e7df      	b.n	8003a5a <sensor_data_acquisition+0x16>
		APP_LOG(TS_OFF, VLEVEL_M, "Failed to get sensor data(code %d).\r\n", rslt);
 8003a9a:	9000      	str	r0, [sp, #0]
 8003a9c:	4b07      	ldr	r3, [pc, #28]	@ (8003abc <sensor_data_acquisition+0x78>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	4611      	mov	r1, r2
 8003aa2:	2002      	movs	r0, #2
 8003aa4:	f011 fe4a 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
 8003aa8:	e7e8      	b.n	8003a7c <sensor_data_acquisition+0x38>
 8003aaa:	bf00      	nop
 8003aac:	200005fc 	.word	0x200005fc
 8003ab0:	2000063c 	.word	0x2000063c
 8003ab4:	200005e4 	.word	0x200005e4
 8003ab8:	08016994 	.word	0x08016994
 8003abc:	080169bc 	.word	0x080169bc

08003ac0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003ac0:	480d      	ldr	r0, [pc, #52]	@ (8003af8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003ac2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003ac4:	f000 f8c1 	bl	8003c4a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ac8:	480c      	ldr	r0, [pc, #48]	@ (8003afc <LoopForever+0x6>)
  ldr r1, =_edata
 8003aca:	490d      	ldr	r1, [pc, #52]	@ (8003b00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003acc:	4a0d      	ldr	r2, [pc, #52]	@ (8003b04 <LoopForever+0xe>)
  movs r3, #0
 8003ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ad0:	e002      	b.n	8003ad8 <LoopCopyDataInit>

08003ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ad6:	3304      	adds	r3, #4

08003ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003adc:	d3f9      	bcc.n	8003ad2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ade:	4a0a      	ldr	r2, [pc, #40]	@ (8003b08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ae0:	4c0a      	ldr	r4, [pc, #40]	@ (8003b0c <LoopForever+0x16>)
  movs r3, #0
 8003ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ae4:	e001      	b.n	8003aea <LoopFillZerobss>

08003ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ae8:	3204      	adds	r2, #4

08003aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003aec:	d3fb      	bcc.n	8003ae6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003aee:	f012 fb0d 	bl	801610c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003af2:	f7fd fe91 	bl	8001818 <main>

08003af6 <LoopForever>:

LoopForever:
    b LoopForever
 8003af6:	e7fe      	b.n	8003af6 <LoopForever>
  ldr   r0, =_estack
 8003af8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b00:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 8003b04:	08017458 	.word	0x08017458
  ldr r2, =_sbss
 8003b08:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8003b0c:	20004368 	.word	0x20004368

08003b10 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b10:	e7fe      	b.n	8003b10 <ADC_IRQHandler>
	...

08003b14 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8003b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b18:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8003b1a:	2400      	movs	r4, #0
 8003b1c:	9401      	str	r4, [sp, #4]
 8003b1e:	9402      	str	r4, [sp, #8]
 8003b20:	9403      	str	r4, [sp, #12]
 8003b22:	9404      	str	r4, [sp, #16]
 8003b24:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003b26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003b2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003b2c:	f042 0204 	orr.w	r2, r2, #4
 8003b30:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8003b3a:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8003b3c:	2710      	movs	r7, #16
 8003b3e:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003b40:	2301      	movs	r3, #1
 8003b42:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b44:	2303      	movs	r3, #3
 8003b46:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8003b48:	4d12      	ldr	r5, [pc, #72]	@ (8003b94 <BSP_RADIO_Init+0x80>)
 8003b4a:	a901      	add	r1, sp, #4
 8003b4c:	4628      	mov	r0, r5
 8003b4e:	f001 fa01 	bl	8004f54 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8003b52:	f04f 0820 	mov.w	r8, #32
 8003b56:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8003b5a:	a901      	add	r1, sp, #4
 8003b5c:	4628      	mov	r0, r5
 8003b5e:	f001 f9f9 	bl	8004f54 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8003b62:	2608      	movs	r6, #8
 8003b64:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8003b66:	a901      	add	r1, sp, #4
 8003b68:	4628      	mov	r0, r5
 8003b6a:	f001 f9f3 	bl	8004f54 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003b6e:	4622      	mov	r2, r4
 8003b70:	4641      	mov	r1, r8
 8003b72:	4628      	mov	r0, r5
 8003b74:	f001 fb3e 	bl	80051f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003b78:	4622      	mov	r2, r4
 8003b7a:	4639      	mov	r1, r7
 8003b7c:	4628      	mov	r0, r5
 8003b7e:	f001 fb39 	bl	80051f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8003b82:	4622      	mov	r2, r4
 8003b84:	4631      	mov	r1, r6
 8003b86:	4628      	mov	r0, r5
 8003b88:	f001 fb34 	bl	80051f4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	b006      	add	sp, #24
 8003b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b94:	48000800 	.word	0x48000800

08003b98 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8003b98:	b510      	push	{r4, lr}
  switch (Config)
 8003b9a:	2803      	cmp	r0, #3
 8003b9c:	d813      	bhi.n	8003bc6 <BSP_RADIO_ConfigRFSwitch+0x2e>
 8003b9e:	e8df f000 	tbb	[pc, r0]
 8003ba2:	1402      	.short	0x1402
 8003ba4:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8003ba6:	4c22      	ldr	r4, [pc, #136]	@ (8003c30 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	2108      	movs	r1, #8
 8003bac:	4620      	mov	r0, r4
 8003bae:	f001 fb21 	bl	80051f4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2110      	movs	r1, #16
 8003bb6:	4620      	mov	r0, r4
 8003bb8:	f001 fb1c 	bl	80051f4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	2120      	movs	r1, #32
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	f001 fb17 	bl	80051f4 <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8003bca:	4c19      	ldr	r4, [pc, #100]	@ (8003c30 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003bcc:	2201      	movs	r2, #1
 8003bce:	2108      	movs	r1, #8
 8003bd0:	4620      	mov	r0, r4
 8003bd2:	f001 fb0f 	bl	80051f4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	2110      	movs	r1, #16
 8003bda:	4620      	mov	r0, r4
 8003bdc:	f001 fb0a 	bl	80051f4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003be0:	2200      	movs	r2, #0
 8003be2:	2120      	movs	r1, #32
 8003be4:	4620      	mov	r0, r4
 8003be6:	f001 fb05 	bl	80051f4 <HAL_GPIO_WritePin>
      break;
 8003bea:	e7ec      	b.n	8003bc6 <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8003bec:	4c10      	ldr	r4, [pc, #64]	@ (8003c30 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003bee:	2201      	movs	r2, #1
 8003bf0:	2108      	movs	r1, #8
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	f001 fafe 	bl	80051f4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	2110      	movs	r1, #16
 8003bfc:	4620      	mov	r0, r4
 8003bfe:	f001 faf9 	bl	80051f4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003c02:	2201      	movs	r2, #1
 8003c04:	2120      	movs	r1, #32
 8003c06:	4620      	mov	r0, r4
 8003c08:	f001 faf4 	bl	80051f4 <HAL_GPIO_WritePin>
      break;
 8003c0c:	e7db      	b.n	8003bc6 <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8003c0e:	4c08      	ldr	r4, [pc, #32]	@ (8003c30 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003c10:	2201      	movs	r2, #1
 8003c12:	2108      	movs	r1, #8
 8003c14:	4620      	mov	r0, r4
 8003c16:	f001 faed 	bl	80051f4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	2110      	movs	r1, #16
 8003c1e:	4620      	mov	r0, r4
 8003c20:	f001 fae8 	bl	80051f4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003c24:	2201      	movs	r2, #1
 8003c26:	2120      	movs	r1, #32
 8003c28:	4620      	mov	r0, r4
 8003c2a:	f001 fae3 	bl	80051f4 <HAL_GPIO_WritePin>
      break;
 8003c2e:	e7ca      	b.n	8003bc6 <BSP_RADIO_ConfigRFSwitch+0x2e>
 8003c30:	48000800 	.word	0x48000800

08003c34 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 8003c34:	2000      	movs	r0, #0
 8003c36:	4770      	bx	lr

08003c38 <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 8003c38:	2001      	movs	r0, #1
 8003c3a:	4770      	bx	lr

08003c3c <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8003c3c:	2001      	movs	r0, #1
 8003c3e:	4770      	bx	lr

08003c40 <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8003c40:	b908      	cbnz	r0, 8003c46 <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8003c42:	200f      	movs	r0, #15
 8003c44:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8003c46:	2016      	movs	r0, #22
  }

  return ret;
}
 8003c48:	4770      	bx	lr

08003c4a <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8003c4a:	4770      	bx	lr

08003c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c4c:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c4e:	2003      	movs	r0, #3
 8003c50:	f000 fd76 	bl	8004740 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003c54:	f002 fc2a 	bl	80064ac <HAL_RCC_GetHCLKFreq>
 8003c58:	4b06      	ldr	r3, [pc, #24]	@ (8003c74 <HAL_Init+0x28>)
 8003c5a:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c5c:	200f      	movs	r0, #15
 8003c5e:	f7fd ffdb 	bl	8001c18 <HAL_InitTick>
 8003c62:	b110      	cbz	r0, 8003c6a <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8003c64:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8003c66:	4620      	mov	r0, r4
 8003c68:	bd10      	pop	{r4, pc}
 8003c6a:	4604      	mov	r4, r0
    HAL_MspInit();
 8003c6c:	f7fd fe82 	bl	8001974 <HAL_MspInit>
 8003c70:	e7f9      	b.n	8003c66 <HAL_Init+0x1a>
 8003c72:	bf00      	nop
 8003c74:	20000074 	.word	0x20000074

08003c78 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003c78:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8003c7c:	6913      	ldr	r3, [r2, #16]
 8003c7e:	f023 0302 	bic.w	r3, r3, #2
 8003c82:	6113      	str	r3, [r2, #16]
}
 8003c84:	4770      	bx	lr

08003c86 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003c86:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8003c8a:	6913      	ldr	r3, [r2, #16]
 8003c8c:	f043 0302 	orr.w	r3, r3, #2
 8003c90:	6113      	str	r3, [r2, #16]
}
 8003c92:	4770      	bx	lr

08003c94 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 8003c94:	4b01      	ldr	r3, [pc, #4]	@ (8003c9c <HAL_GetUIDw0+0x8>)
 8003c96:	f8d3 0590 	ldr.w	r0, [r3, #1424]	@ 0x590
 8003c9a:	4770      	bx	lr
 8003c9c:	1fff7000 	.word	0x1fff7000

08003ca0 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8003ca0:	4b01      	ldr	r3, [pc, #4]	@ (8003ca8 <HAL_GetUIDw1+0x8>)
 8003ca2:	f8d3 0594 	ldr.w	r0, [r3, #1428]	@ 0x594
 8003ca6:	4770      	bx	lr
 8003ca8:	1fff7000 	.word	0x1fff7000

08003cac <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8003cac:	4b01      	ldr	r3, [pc, #4]	@ (8003cb4 <HAL_GetUIDw2+0x8>)
 8003cae:	f8d3 0598 	ldr.w	r0, [r3, #1432]	@ 0x598
 8003cb2:	4770      	bx	lr
 8003cb4:	1fff7000 	.word	0x1fff7000

08003cb8 <HAL_DBGMCU_EnableDBGSleepMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003cb8:	4a02      	ldr	r2, [pc, #8]	@ (8003cc4 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 8003cba:	6853      	ldr	r3, [r2, #4]
 8003cbc:	f043 0301 	orr.w	r3, r3, #1
 8003cc0:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 8003cc2:	4770      	bx	lr
 8003cc4:	e0042000 	.word	0xe0042000

08003cc8 <HAL_DBGMCU_EnableDBGStopMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003cc8:	4a02      	ldr	r2, [pc, #8]	@ (8003cd4 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 8003cca:	6853      	ldr	r3, [r2, #4]
 8003ccc:	f043 0302 	orr.w	r3, r3, #2
 8003cd0:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  LL_DBGMCU_EnableDBGStopMode();
}
 8003cd2:	4770      	bx	lr
 8003cd4:	e0042000 	.word	0xe0042000

08003cd8 <HAL_DBGMCU_EnableDBGStandbyMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003cd8:	4a02      	ldr	r2, [pc, #8]	@ (8003ce4 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 8003cda:	6853      	ldr	r3, [r2, #4]
 8003cdc:	f043 0304 	orr.w	r3, r3, #4
 8003ce0:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  LL_DBGMCU_EnableDBGStandbyMode();
}
 8003ce2:	4770      	bx	lr
 8003ce4:	e0042000 	.word	0xe0042000

08003ce8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ce8:	b530      	push	{r4, r5, lr}
 8003cea:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003cec:	2300      	movs	r3, #0
 8003cee:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003cf0:	2800      	cmp	r0, #0
 8003cf2:	f000 8106 	beq.w	8003f02 <HAL_ADC_Init+0x21a>
 8003cf6:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003cf8:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003cfa:	b1bb      	cbz	r3, 8003d2c <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003cfc:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003cfe:	6893      	ldr	r3, [r2, #8]
 8003d00:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8003d04:	d11f      	bne.n	8003d46 <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 8003d06:	6893      	ldr	r3, [r2, #8]
 8003d08:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003d0c:	f023 0317 	bic.w	r3, r3, #23
 8003d10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d14:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d16:	4b7c      	ldr	r3, [pc, #496]	@ (8003f08 <HAL_ADC_Init+0x220>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	099b      	lsrs	r3, r3, #6
 8003d1c:	4a7b      	ldr	r2, [pc, #492]	@ (8003f0c <HAL_ADC_Init+0x224>)
 8003d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d22:	099b      	lsrs	r3, r3, #6
 8003d24:	3301      	adds	r3, #1
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003d2a:	e009      	b.n	8003d40 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 8003d2c:	f7fd f898 	bl	8000e60 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003d30:	2300      	movs	r3, #0
 8003d32:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8003d34:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8003d38:	e7e0      	b.n	8003cfc <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8003d3a:	9b01      	ldr	r3, [sp, #4]
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003d40:	9b01      	ldr	r3, [sp, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1f9      	bne.n	8003d3a <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d46:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d48:	6893      	ldr	r3, [r2, #8]
 8003d4a:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8003d4e:	f040 809a 	bne.w	8003e86 <HAL_ADC_Init+0x19e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003d54:	f043 0310 	orr.w	r3, r3, #16
 8003d58:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d5a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003d5c:	f043 0301 	orr.w	r3, r3, #1
 8003d60:	65e3      	str	r3, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d62:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d64:	6893      	ldr	r3, [r2, #8]
 8003d66:	f013 0304 	ands.w	r3, r3, #4
 8003d6a:	d000      	beq.n	8003d6e <HAL_ADC_Init+0x86>
 8003d6c:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d6e:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8003d70:	f011 0f10 	tst.w	r1, #16
 8003d74:	f040 80be 	bne.w	8003ef4 <HAL_ADC_Init+0x20c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f040 80bb 	bne.w	8003ef4 <HAL_ADC_Init+0x20c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d7e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003d80:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003d84:	f043 0302 	orr.w	r3, r3, #2
 8003d88:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d8a:	6893      	ldr	r3, [r2, #8]
 8003d8c:	f013 0f01 	tst.w	r3, #1
 8003d90:	d14f      	bne.n	8003e32 <HAL_ADC_Init+0x14a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003d92:	68a3      	ldr	r3, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003d94:	7e21      	ldrb	r1, [r4, #24]
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003d96:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003d9a:	7e61      	ldrb	r1, [r4, #25]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003d9c:	ea43 33c1 	orr.w	r3, r3, r1, lsl #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003da0:	7ea5      	ldrb	r5, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003da2:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003da6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003da8:	b109      	cbz	r1, 8003dae <HAL_ADC_Init+0xc6>
 8003daa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003dae:	430b      	orrs	r3, r1
                   hadc->Init.DataAlign                                           |
 8003db0:	68e1      	ldr	r1, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003db2:	430b      	orrs	r3, r1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003db4:	6921      	ldr	r1, [r4, #16]
 8003db6:	2900      	cmp	r1, #0
 8003db8:	db67      	blt.n	8003e8a <HAL_ADC_Init+0x1a2>
 8003dba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 8003dbe:	430b      	orrs	r3, r1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003dc0:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003dc4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003dc8:	f894 1020 	ldrb.w	r1, [r4, #32]
 8003dcc:	2901      	cmp	r1, #1
 8003dce:	d05f      	beq.n	8003e90 <HAL_ADC_Init+0x1a8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003dd0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003dd2:	b121      	cbz	r1, 8003dde <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003dd4:	f401 71e0 	and.w	r1, r1, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003dd8:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003dda:	4329      	orrs	r1, r5
 8003ddc:	430b      	orrs	r3, r1
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003dde:	68d1      	ldr	r1, [r2, #12]
 8003de0:	f421 31fe 	bic.w	r1, r1, #130048	@ 0x1fc00
 8003de4:	f421 71ff 	bic.w	r1, r1, #510	@ 0x1fe
 8003de8:	4319      	orrs	r1, r3
 8003dea:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003dec:	6863      	ldr	r3, [r4, #4]
 8003dee:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003df2:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003df4:	431a      	orrs	r2, r3
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003df6:	f894 103c 	ldrb.w	r1, [r4, #60]	@ 0x3c
 8003dfa:	2901      	cmp	r1, #1
 8003dfc:	d055      	beq.n	8003eaa <HAL_ADC_Init+0x1c2>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003dfe:	6821      	ldr	r1, [r4, #0]
 8003e00:	690d      	ldr	r5, [r1, #16]
 8003e02:	4b43      	ldr	r3, [pc, #268]	@ (8003f10 <HAL_ADC_Init+0x228>)
 8003e04:	402b      	ands	r3, r5
 8003e06:	4313      	orrs	r3, r2
 8003e08:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003e0a:	6863      	ldr	r3, [r4, #4]
 8003e0c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003e10:	d00f      	beq.n	8003e32 <HAL_ADC_Init+0x14a>
 8003e12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e16:	d00c      	beq.n	8003e32 <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003e18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e1c:	d009      	beq.n	8003e32 <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003e1e:	493d      	ldr	r1, [pc, #244]	@ (8003f14 <HAL_ADC_Init+0x22c>)
 8003e20:	f8d1 2708 	ldr.w	r2, [r1, #1800]	@ 0x708
 8003e24:	f422 1270 	bic.w	r2, r2, #3932160	@ 0x3c0000
 8003e28:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c1 3708 	str.w	r3, [r1, #1800]	@ 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003e32:	6821      	ldr	r1, [r4, #0]
 8003e34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  MODIFY_REG(ADCx->SMPR,
 8003e36:	694a      	ldr	r2, [r1, #20]
 8003e38:	f022 0207 	bic.w	r2, r2, #7
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	614b      	str	r3, [r1, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003e40:	6822      	ldr	r2, [r4, #0]
 8003e42:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8003e44:	6953      	ldr	r3, [r2, #20]
 8003e46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e4a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8003e4e:	6153      	str	r3, [r2, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003e50:	6923      	ldr	r3, [r4, #16]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d133      	bne.n	8003ebe <HAL_ADC_Init+0x1d6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003e56:	6822      	ldr	r2, [r4, #0]
 8003e58:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8003e5a:	f063 030f 	orn	r3, r3, #15
 8003e5e:	6293      	str	r3, [r2, #40]	@ 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003e60:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	f003 0307 	and.w	r3, r3, #7
      == hadc->Init.SamplingTimeCommon1)
 8003e68:	6b62      	ldr	r2, [r4, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d039      	beq.n	8003ee2 <HAL_ADC_Init+0x1fa>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003e6e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003e70:	f023 0312 	bic.w	r3, r3, #18
 8003e74:	f043 0310 	orr.w	r3, r3, #16
 8003e78:	65a3      	str	r3, [r4, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e7a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003e7c:	f043 0301 	orr.w	r3, r3, #1
 8003e80:	65e3      	str	r3, [r4, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8003e82:	2001      	movs	r0, #1
 8003e84:	e03b      	b.n	8003efe <HAL_ADC_Init+0x216>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e86:	2000      	movs	r0, #0
 8003e88:	e76c      	b.n	8003d64 <HAL_ADC_Init+0x7c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003e8a:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8003e8e:	e796      	b.n	8003dbe <HAL_ADC_Init+0xd6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003e90:	b915      	cbnz	r5, 8003e98 <HAL_ADC_Init+0x1b0>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003e92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e96:	e79b      	b.n	8003dd0 <HAL_ADC_Init+0xe8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e98:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8003e9a:	f041 0120 	orr.w	r1, r1, #32
 8003e9e:	65a1      	str	r1, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ea0:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8003ea2:	f041 0101 	orr.w	r1, r1, #1
 8003ea6:	65e1      	str	r1, [r4, #92]	@ 0x5c
 8003ea8:	e792      	b.n	8003dd0 <HAL_ADC_Init+0xe8>
                     hadc->Init.Oversampling.Ratio         |
 8003eaa:	6c21      	ldr	r1, [r4, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003eac:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.RightBitShift |
 8003eae:	6c61      	ldr	r1, [r4, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003eb0:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.TriggeredMode
 8003eb2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003eb4:	430b      	orrs	r3, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	f042 0201 	orr.w	r2, r2, #1
 8003ebc:	e79f      	b.n	8003dfe <HAL_ADC_Init+0x116>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ebe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ec2:	d1cd      	bne.n	8003e60 <HAL_ADC_Init+0x178>
      MODIFY_REG(hadc->Instance->CHSELR,
 8003ec4:	6821      	ldr	r1, [r4, #0]
 8003ec6:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8003ec8:	69e3      	ldr	r3, [r4, #28]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	f003 031c 	and.w	r3, r3, #28
 8003ed2:	f06f 020f 	mvn.w	r2, #15
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8003edc:	4313      	orrs	r3, r2
 8003ede:	628b      	str	r3, [r1, #40]	@ 0x28
 8003ee0:	e7be      	b.n	8003e60 <HAL_ADC_Init+0x178>
      ADC_CLEAR_ERRORCODE(hadc);
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8003ee6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003ee8:	f023 0303 	bic.w	r3, r3, #3
 8003eec:	f043 0301 	orr.w	r3, r3, #1
 8003ef0:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003ef2:	e004      	b.n	8003efe <HAL_ADC_Init+0x216>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ef4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003ef6:	f043 0310 	orr.w	r3, r3, #16
 8003efa:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003efc:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8003efe:	b003      	add	sp, #12
 8003f00:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8003f02:	2001      	movs	r0, #1
 8003f04:	e7fb      	b.n	8003efe <HAL_ADC_Init+0x216>
 8003f06:	bf00      	nop
 8003f08:	20000074 	.word	0x20000074
 8003f0c:	053e2d63 	.word	0x053e2d63
 8003f10:	1ffffc02 	.word	0x1ffffc02
 8003f14:	40012000 	.word	0x40012000

08003f18 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f1a:	4604      	mov	r4, r0
 8003f1c:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003f1e:	6946      	ldr	r6, [r0, #20]
 8003f20:	2e08      	cmp	r6, #8
 8003f22:	d005      	beq.n	8003f30 <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003f24:	6803      	ldr	r3, [r0, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f013 0f01 	tst.w	r3, #1
 8003f2c:	d11e      	bne.n	8003f6c <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003f2e:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003f30:	f7fd fe74 	bl	8001c1c <HAL_GetTick>
 8003f34:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003f36:	6823      	ldr	r3, [r4, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	4232      	tst	r2, r6
 8003f3c:	d11c      	bne.n	8003f78 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003f3e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003f42:	d0f8      	beq.n	8003f36 <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003f44:	f7fd fe6a 	bl	8001c1c <HAL_GetTick>
 8003f48:	1bc3      	subs	r3, r0, r7
 8003f4a:	42ab      	cmp	r3, r5
 8003f4c:	d801      	bhi.n	8003f52 <HAL_ADC_PollForConversion+0x3a>
 8003f4e:	2d00      	cmp	r5, #0
 8003f50:	d1f1      	bne.n	8003f36 <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003f52:	6823      	ldr	r3, [r4, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4233      	tst	r3, r6
 8003f58:	d1ed      	bne.n	8003f36 <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003f5a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003f5c:	f043 0304 	orr.w	r3, r3, #4
 8003f60:	65a3      	str	r3, [r4, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8003f62:	2300      	movs	r3, #0
 8003f64:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54

          return HAL_TIMEOUT;
 8003f68:	2003      	movs	r0, #3
 8003f6a:	e028      	b.n	8003fbe <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f6c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003f6e:	f043 0320 	orr.w	r3, r3, #32
 8003f72:	6583      	str	r3, [r0, #88]	@ 0x58
      return HAL_ERROR;
 8003f74:	2001      	movs	r0, #1
 8003f76:	e022      	b.n	8003fbe <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f78:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003f7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f7e:	65a2      	str	r2, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8003f86:	d115      	bne.n	8003fb4 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003f88:	7ea2      	ldrb	r2, [r4, #26]
 8003f8a:	b99a      	cbnz	r2, 8003fb4 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	f012 0f08 	tst.w	r2, #8
 8003f92:	d00f      	beq.n	8003fb4 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f94:	689a      	ldr	r2, [r3, #8]
 8003f96:	f012 0f04 	tst.w	r2, #4
 8003f9a:	d111      	bne.n	8003fc0 <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	f022 020c 	bic.w	r2, r2, #12
 8003fa2:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003fa4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003fa6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003faa:	f023 0301 	bic.w	r3, r3, #1
 8003fae:	f043 0301 	orr.w	r3, r3, #1
 8003fb2:	65a3      	str	r3, [r4, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003fb4:	7e20      	ldrb	r0, [r4, #24]
 8003fb6:	b960      	cbnz	r0, 8003fd2 <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003fb8:	6823      	ldr	r3, [r4, #0]
 8003fba:	220c      	movs	r2, #12
 8003fbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8003fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fc0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003fc2:	f043 0320 	orr.w	r3, r3, #32
 8003fc6:	65a3      	str	r3, [r4, #88]	@ 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fc8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003fca:	f043 0301 	orr.w	r3, r3, #1
 8003fce:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8003fd0:	e7f0      	b.n	8003fb4 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 8003fd2:	2000      	movs	r0, #0
 8003fd4:	e7f3      	b.n	8003fbe <HAL_ADC_PollForConversion+0xa6>

08003fd6 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003fd6:	6803      	ldr	r3, [r0, #0]
 8003fd8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 8003fda:	4770      	bx	lr

08003fdc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003fdc:	b470      	push	{r4, r5, r6}
 8003fde:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003fe4:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003fe6:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
 8003fea:	2a01      	cmp	r2, #1
 8003fec:	f000 8103 	beq.w	80041f6 <HAL_ADC_ConfigChannel+0x21a>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f880 2054 	strb.w	r2, [r0, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ff8:	6802      	ldr	r2, [r0, #0]
 8003ffa:	6890      	ldr	r0, [r2, #8]
 8003ffc:	f010 0f04 	tst.w	r0, #4
 8004000:	d00a      	beq.n	8004018 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004002:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004004:	f042 0220 	orr.w	r2, r2, #32
 8004008:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800400a:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
}
 8004012:	b003      	add	sp, #12
 8004014:	bc70      	pop	{r4, r5, r6}
 8004016:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 8004018:	6848      	ldr	r0, [r1, #4]
 800401a:	2802      	cmp	r0, #2
 800401c:	f000 809c 	beq.w	8004158 <HAL_ADC_ConfigChannel+0x17c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004020:	f1b4 4f00 	cmp.w	r4, #2147483648	@ 0x80000000
 8004024:	d027      	beq.n	8004076 <HAL_ADC_ConfigChannel+0x9a>
 8004026:	4d75      	ldr	r5, [pc, #468]	@ (80041fc <HAL_ADC_ConfigChannel+0x220>)
 8004028:	42ac      	cmp	r4, r5
 800402a:	d024      	beq.n	8004076 <HAL_ADC_ConfigChannel+0x9a>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800402c:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 800402e:	f000 001f 	and.w	r0, r0, #31
 8004032:	250f      	movs	r5, #15
 8004034:	4085      	lsls	r5, r0
 8004036:	ea24 0505 	bic.w	r5, r4, r5
 800403a:	680c      	ldr	r4, [r1, #0]
 800403c:	f3c4 0611 	ubfx	r6, r4, #0, #18
 8004040:	2e00      	cmp	r6, #0
 8004042:	d131      	bne.n	80040a8 <HAL_ADC_ConfigChannel+0xcc>
 8004044:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8004048:	4084      	lsls	r4, r0
 800404a:	432c      	orrs	r4, r5
 800404c:	661c      	str	r4, [r3, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800404e:	684c      	ldr	r4, [r1, #4]
 8004050:	08a0      	lsrs	r0, r4, #2
 8004052:	3001      	adds	r0, #1
 8004054:	69dd      	ldr	r5, [r3, #28]
 8004056:	42a8      	cmp	r0, r5
 8004058:	d813      	bhi.n	8004082 <HAL_ADC_ConfigChannel+0xa6>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800405a:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 800405c:	6a90      	ldr	r0, [r2, #40]	@ 0x28
 800405e:	f004 041f 	and.w	r4, r4, #31
 8004062:	260f      	movs	r6, #15
 8004064:	40a6      	lsls	r6, r4
 8004066:	ea20 0006 	bic.w	r0, r0, r6
 800406a:	f3c5 6583 	ubfx	r5, r5, #26, #4
 800406e:	40a5      	lsls	r5, r4
 8004070:	4328      	orrs	r0, r5
 8004072:	6290      	str	r0, [r2, #40]	@ 0x28
}
 8004074:	e005      	b.n	8004082 <HAL_ADC_ConfigChannel+0xa6>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004076:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004078:	6a90      	ldr	r0, [r2, #40]	@ 0x28
 800407a:	f3c4 0411 	ubfx	r4, r4, #0, #18
 800407e:	4320      	orrs	r0, r4
 8004080:	6290      	str	r0, [r2, #40]	@ 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004082:	681c      	ldr	r4, [r3, #0]
 8004084:	680d      	ldr	r5, [r1, #0]
 8004086:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8004088:	6960      	ldr	r0, [r4, #20]
 800408a:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 800408e:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 8004092:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8004096:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800409a:	4302      	orrs	r2, r0
 800409c:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800409e:	680a      	ldr	r2, [r1, #0]
 80040a0:	2a00      	cmp	r2, #0
 80040a2:	db09      	blt.n	80040b8 <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040a4:	2000      	movs	r0, #0
 80040a6:	e7b1      	b.n	800400c <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a8:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80040ac:	b114      	cbz	r4, 80040b4 <HAL_ADC_ConfigChannel+0xd8>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80040ae:	fab4 f484 	clz	r4, r4
 80040b2:	e7c9      	b.n	8004048 <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 80040b4:	2420      	movs	r4, #32
 80040b6:	e7c7      	b.n	8004048 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80040b8:	4951      	ldr	r1, [pc, #324]	@ (8004200 <HAL_ADC_ConfigChannel+0x224>)
 80040ba:	f8d1 0708 	ldr.w	r0, [r1, #1800]	@ 0x708
 80040be:	f000 71e0 	and.w	r1, r0, #29360128	@ 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80040c2:	4c50      	ldr	r4, [pc, #320]	@ (8004204 <HAL_ADC_ConfigChannel+0x228>)
 80040c4:	42a2      	cmp	r2, r4
 80040c6:	d007      	beq.n	80040d8 <HAL_ADC_ConfigChannel+0xfc>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80040c8:	4c4f      	ldr	r4, [pc, #316]	@ (8004208 <HAL_ADC_ConfigChannel+0x22c>)
 80040ca:	42a2      	cmp	r2, r4
 80040cc:	d026      	beq.n	800411c <HAL_ADC_ConfigChannel+0x140>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80040ce:	4c4f      	ldr	r4, [pc, #316]	@ (800420c <HAL_ADC_ConfigChannel+0x230>)
 80040d0:	42a2      	cmp	r2, r4
 80040d2:	d032      	beq.n	800413a <HAL_ADC_ConfigChannel+0x15e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040d4:	2000      	movs	r0, #0
 80040d6:	e799      	b.n	800400c <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80040d8:	f410 0f00 	tst.w	r0, #8388608	@ 0x800000
 80040dc:	d1f4      	bne.n	80040c8 <HAL_ADC_ConfigChannel+0xec>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040de:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80040e2:	4847      	ldr	r0, [pc, #284]	@ (8004200 <HAL_ADC_ConfigChannel+0x224>)
 80040e4:	f8d0 2708 	ldr.w	r2, [r0, #1800]	@ 0x708
 80040e8:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80040ec:	4311      	orrs	r1, r2
 80040ee:	f8c0 1708 	str.w	r1, [r0, #1800]	@ 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80040f2:	4a47      	ldr	r2, [pc, #284]	@ (8004210 <HAL_ADC_ConfigChannel+0x234>)
 80040f4:	6812      	ldr	r2, [r2, #0]
 80040f6:	0992      	lsrs	r2, r2, #6
 80040f8:	4946      	ldr	r1, [pc, #280]	@ (8004214 <HAL_ADC_ConfigChannel+0x238>)
 80040fa:	fba1 1202 	umull	r1, r2, r1, r2
 80040fe:	0992      	lsrs	r2, r2, #6
 8004100:	3201      	adds	r2, #1
 8004102:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004106:	0092      	lsls	r2, r2, #2
 8004108:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800410a:	e002      	b.n	8004112 <HAL_ADC_ConfigChannel+0x136>
            wait_loop_index--;
 800410c:	9a01      	ldr	r2, [sp, #4]
 800410e:	3a01      	subs	r2, #1
 8004110:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8004112:	9a01      	ldr	r2, [sp, #4]
 8004114:	2a00      	cmp	r2, #0
 8004116:	d1f9      	bne.n	800410c <HAL_ADC_ConfigChannel+0x130>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004118:	2000      	movs	r0, #0
 800411a:	e777      	b.n	800400c <HAL_ADC_ConfigChannel+0x30>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800411c:	f010 7f80 	tst.w	r0, #16777216	@ 0x1000000
 8004120:	d1d5      	bne.n	80040ce <HAL_ADC_ConfigChannel+0xf2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004122:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
 8004126:	4836      	ldr	r0, [pc, #216]	@ (8004200 <HAL_ADC_ConfigChannel+0x224>)
 8004128:	f8d0 2708 	ldr.w	r2, [r0, #1800]	@ 0x708
 800412c:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8004130:	4311      	orrs	r1, r2
 8004132:	f8c0 1708 	str.w	r1, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004136:	2000      	movs	r0, #0
}
 8004138:	e768      	b.n	800400c <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800413a:	f410 0f80 	tst.w	r0, #4194304	@ 0x400000
 800413e:	d158      	bne.n	80041f2 <HAL_ADC_ConfigChannel+0x216>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004140:	f441 0280 	orr.w	r2, r1, #4194304	@ 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004144:	482e      	ldr	r0, [pc, #184]	@ (8004200 <HAL_ADC_ConfigChannel+0x224>)
 8004146:	f8d0 1708 	ldr.w	r1, [r0, #1800]	@ 0x708
 800414a:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 800414e:	430a      	orrs	r2, r1
 8004150:	f8c0 2708 	str.w	r2, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004154:	2000      	movs	r0, #0
}
 8004156:	e759      	b.n	800400c <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004158:	f1b4 4f00 	cmp.w	r4, #2147483648	@ 0x80000000
 800415c:	d002      	beq.n	8004164 <HAL_ADC_ConfigChannel+0x188>
 800415e:	4827      	ldr	r0, [pc, #156]	@ (80041fc <HAL_ADC_ConfigChannel+0x220>)
 8004160:	4284      	cmp	r4, r0
 8004162:	d106      	bne.n	8004172 <HAL_ADC_ConfigChannel+0x196>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004164:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004166:	6a90      	ldr	r0, [r2, #40]	@ 0x28
 8004168:	f3c4 0411 	ubfx	r4, r4, #0, #18
 800416c:	ea20 0004 	bic.w	r0, r0, r4
 8004170:	6290      	str	r0, [r2, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004172:	680a      	ldr	r2, [r1, #0]
 8004174:	2a00      	cmp	r2, #0
 8004176:	db01      	blt.n	800417c <HAL_ADC_ConfigChannel+0x1a0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004178:	2000      	movs	r0, #0
 800417a:	e747      	b.n	800400c <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800417c:	4920      	ldr	r1, [pc, #128]	@ (8004200 <HAL_ADC_ConfigChannel+0x224>)
 800417e:	f8d1 1708 	ldr.w	r1, [r1, #1800]	@ 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004182:	4820      	ldr	r0, [pc, #128]	@ (8004204 <HAL_ADC_ConfigChannel+0x228>)
 8004184:	4282      	cmp	r2, r0
 8004186:	d007      	beq.n	8004198 <HAL_ADC_ConfigChannel+0x1bc>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004188:	481f      	ldr	r0, [pc, #124]	@ (8004208 <HAL_ADC_ConfigChannel+0x22c>)
 800418a:	4282      	cmp	r2, r0
 800418c:	d013      	beq.n	80041b6 <HAL_ADC_ConfigChannel+0x1da>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800418e:	481f      	ldr	r0, [pc, #124]	@ (800420c <HAL_ADC_ConfigChannel+0x230>)
 8004190:	4282      	cmp	r2, r0
 8004192:	d01f      	beq.n	80041d4 <HAL_ADC_ConfigChannel+0x1f8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004194:	2000      	movs	r0, #0
 8004196:	e739      	b.n	800400c <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004198:	f001 71a0 	and.w	r1, r1, #20971520	@ 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800419c:	f100 4010 	add.w	r0, r0, #2415919104	@ 0x90000000
 80041a0:	f500 3088 	add.w	r0, r0, #69632	@ 0x11000
 80041a4:	f8d0 2708 	ldr.w	r2, [r0, #1800]	@ 0x708
 80041a8:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80041ac:	4311      	orrs	r1, r2
 80041ae:	f8c0 1708 	str.w	r1, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041b2:	2000      	movs	r0, #0
}
 80041b4:	e72a      	b.n	800400c <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041b6:	f401 0240 	and.w	r2, r1, #12582912	@ 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80041ba:	f100 4008 	add.w	r0, r0, #2281701376	@ 0x88000000
 80041be:	f500 4060 	add.w	r0, r0, #57344	@ 0xe000
 80041c2:	f8d0 1708 	ldr.w	r1, [r0, #1800]	@ 0x708
 80041c6:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 80041ca:	430a      	orrs	r2, r1
 80041cc:	f8c0 2708 	str.w	r2, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041d0:	2000      	movs	r0, #0
}
 80041d2:	e71b      	b.n	800400c <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041d4:	f001 72c0 	and.w	r2, r1, #25165824	@ 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80041d8:	f100 400c 	add.w	r0, r0, #2348810240	@ 0x8c000000
 80041dc:	f500 3080 	add.w	r0, r0, #65536	@ 0x10000
 80041e0:	f8d0 1708 	ldr.w	r1, [r0, #1800]	@ 0x708
 80041e4:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 80041e8:	430a      	orrs	r2, r1
 80041ea:	f8c0 2708 	str.w	r2, [r0, #1800]	@ 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041ee:	2000      	movs	r0, #0
}
 80041f0:	e70c      	b.n	800400c <HAL_ADC_ConfigChannel+0x30>
 80041f2:	2000      	movs	r0, #0
 80041f4:	e70a      	b.n	800400c <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 80041f6:	2002      	movs	r0, #2
 80041f8:	e70b      	b.n	8004012 <HAL_ADC_ConfigChannel+0x36>
 80041fa:	bf00      	nop
 80041fc:	80000004 	.word	0x80000004
 8004200:	40012000 	.word	0x40012000
 8004204:	b0001000 	.word	0xb0001000
 8004208:	b8004000 	.word	0xb8004000
 800420c:	b4002000 	.word	0xb4002000
 8004210:	20000074 	.word	0x20000074
 8004214:	053e2d63 	.word	0x053e2d63

08004218 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004218:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800421a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800421c:	689a      	ldr	r2, [r3, #8]
 800421e:	f012 0f04 	tst.w	r2, #4
 8004222:	d02a      	beq.n	800427a <ADC_ConversionStop+0x62>
 8004224:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	f012 0f02 	tst.w	r2, #2
 800422c:	d107      	bne.n	800423e <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004234:	f022 0217 	bic.w	r2, r2, #23
 8004238:	f042 0210 	orr.w	r2, r2, #16
 800423c:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800423e:	f7fd fced 	bl	8001c1c <HAL_GetTick>
 8004242:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f013 0f04 	tst.w	r3, #4
 800424c:	d013      	beq.n	8004276 <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800424e:	f7fd fce5 	bl	8001c1c <HAL_GetTick>
 8004252:	1b43      	subs	r3, r0, r5
 8004254:	2b02      	cmp	r3, #2
 8004256:	d9f5      	bls.n	8004244 <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004258:	6823      	ldr	r3, [r4, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f013 0f04 	tst.w	r3, #4
 8004260:	d0f0      	beq.n	8004244 <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004262:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004264:	f043 0310 	orr.w	r3, r3, #16
 8004268:	65a3      	str	r3, [r4, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800426a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800426c:	f043 0301 	orr.w	r3, r3, #1
 8004270:	65e3      	str	r3, [r4, #92]	@ 0x5c

          return HAL_ERROR;
 8004272:	2001      	movs	r0, #1
 8004274:	e002      	b.n	800427c <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004276:	2000      	movs	r0, #0
 8004278:	e000      	b.n	800427c <ADC_ConversionStop+0x64>
 800427a:	2000      	movs	r0, #0
}
 800427c:	bd38      	pop	{r3, r4, r5, pc}
	...

08004280 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004280:	b530      	push	{r4, r5, lr}
 8004282:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004284:	2300      	movs	r3, #0
 8004286:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004288:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	f012 0f01 	tst.w	r2, #1
 8004290:	d15b      	bne.n	800434a <ADC_Enable+0xca>
 8004292:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004294:	6899      	ldr	r1, [r3, #8]
 8004296:	4a2e      	ldr	r2, [pc, #184]	@ (8004350 <ADC_Enable+0xd0>)
 8004298:	4211      	tst	r1, r2
 800429a:	d117      	bne.n	80042cc <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 800429c:	689a      	ldr	r2, [r3, #8]
 800429e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80042a2:	f022 0217 	bic.w	r2, r2, #23
 80042a6:	f042 0201 	orr.w	r2, r2, #1
 80042aa:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80042ac:	4b29      	ldr	r3, [pc, #164]	@ (8004354 <ADC_Enable+0xd4>)
 80042ae:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80042b2:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 80042b6:	d019      	beq.n	80042ec <ADC_Enable+0x6c>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042b8:	4b27      	ldr	r3, [pc, #156]	@ (8004358 <ADC_Enable+0xd8>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	099b      	lsrs	r3, r3, #6
 80042be:	4a27      	ldr	r2, [pc, #156]	@ (800435c <ADC_Enable+0xdc>)
 80042c0:	fba2 2303 	umull	r2, r3, r2, r3
 80042c4:	099b      	lsrs	r3, r3, #6
 80042c6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80042c8:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80042ca:	e00c      	b.n	80042e6 <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042cc:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80042ce:	f043 0310 	orr.w	r3, r3, #16
 80042d2:	6583      	str	r3, [r0, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042d4:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80042d6:	f043 0301 	orr.w	r3, r3, #1
 80042da:	65c3      	str	r3, [r0, #92]	@ 0x5c
      return HAL_ERROR;
 80042dc:	2001      	movs	r0, #1
 80042de:	e035      	b.n	800434c <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 80042e0:	9b01      	ldr	r3, [sp, #4]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80042e6:	9b01      	ldr	r3, [sp, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1f9      	bne.n	80042e0 <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80042ec:	7e63      	ldrb	r3, [r4, #25]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d101      	bne.n	80042f6 <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80042f2:	2000      	movs	r0, #0
 80042f4:	e02a      	b.n	800434c <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 80042f6:	f7fd fc91 	bl	8001c1c <HAL_GetTick>
 80042fa:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042fc:	6823      	ldr	r3, [r4, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	f012 0f01 	tst.w	r2, #1
 8004304:	d11f      	bne.n	8004346 <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	f012 0f01 	tst.w	r2, #1
 800430c:	d107      	bne.n	800431e <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004314:	f022 0217 	bic.w	r2, r2, #23
 8004318:	f042 0201 	orr.w	r2, r2, #1
 800431c:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800431e:	f7fd fc7d 	bl	8001c1c <HAL_GetTick>
 8004322:	1b40      	subs	r0, r0, r5
 8004324:	2802      	cmp	r0, #2
 8004326:	d9e9      	bls.n	80042fc <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004328:	6823      	ldr	r3, [r4, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f013 0f01 	tst.w	r3, #1
 8004330:	d1e4      	bne.n	80042fc <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004332:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004334:	f043 0310 	orr.w	r3, r3, #16
 8004338:	65a3      	str	r3, [r4, #88]	@ 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800433a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800433c:	f043 0301 	orr.w	r3, r3, #1
 8004340:	65e3      	str	r3, [r4, #92]	@ 0x5c
            return HAL_ERROR;
 8004342:	2001      	movs	r0, #1
 8004344:	e002      	b.n	800434c <ADC_Enable+0xcc>
  return HAL_OK;
 8004346:	2000      	movs	r0, #0
 8004348:	e000      	b.n	800434c <ADC_Enable+0xcc>
 800434a:	2000      	movs	r0, #0
}
 800434c:	b003      	add	sp, #12
 800434e:	bd30      	pop	{r4, r5, pc}
 8004350:	80000017 	.word	0x80000017
 8004354:	40012000 	.word	0x40012000
 8004358:	20000074 	.word	0x20000074
 800435c:	053e2d63 	.word	0x053e2d63

08004360 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004360:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f013 0f04 	tst.w	r3, #4
 8004368:	d128      	bne.n	80043bc <HAL_ADC_Start+0x5c>
{
 800436a:	b510      	push	{r4, lr}
 800436c:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 800436e:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8004372:	2b01      	cmp	r3, #1
 8004374:	d024      	beq.n	80043c0 <HAL_ADC_Start+0x60>
 8004376:	2301      	movs	r3, #1
 8004378:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
    tmp_hal_status = ADC_Enable(hadc);
 800437c:	f7ff ff80 	bl	8004280 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8004380:	b9c0      	cbnz	r0, 80043b4 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 8004382:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004384:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004388:	f023 0301 	bic.w	r3, r3, #1
 800438c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004390:	65a3      	str	r3, [r4, #88]	@ 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8004392:	2300      	movs	r3, #0
 8004394:	65e3      	str	r3, [r4, #92]	@ 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004396:	6822      	ldr	r2, [r4, #0]
 8004398:	211c      	movs	r1, #28
 800439a:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 800439c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 80043a0:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80043a2:	6893      	ldr	r3, [r2, #8]
 80043a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80043a8:	f023 0317 	bic.w	r3, r3, #23
 80043ac:	f043 0304 	orr.w	r3, r3, #4
 80043b0:	6093      	str	r3, [r2, #8]
}
 80043b2:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 80043b4:	2300      	movs	r3, #0
 80043b6:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 80043ba:	e7fa      	b.n	80043b2 <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 80043bc:	2002      	movs	r0, #2
}
 80043be:	4770      	bx	lr
    __HAL_LOCK(hadc);
 80043c0:	2002      	movs	r0, #2
 80043c2:	e7f6      	b.n	80043b2 <HAL_ADC_Start+0x52>

080043c4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80043c4:	b538      	push	{r3, r4, r5, lr}
 80043c6:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80043c8:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80043ca:	6893      	ldr	r3, [r2, #8]
 80043cc:	f013 0302 	ands.w	r3, r3, #2
 80043d0:	d000      	beq.n	80043d4 <ADC_Disable+0x10>
 80043d2:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043d4:	6891      	ldr	r1, [r2, #8]
 80043d6:	f011 0f01 	tst.w	r1, #1
 80043da:	d039      	beq.n	8004450 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d139      	bne.n	8004454 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80043e0:	6893      	ldr	r3, [r2, #8]
 80043e2:	f003 0305 	and.w	r3, r3, #5
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d009      	beq.n	80043fe <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80043ec:	f043 0310 	orr.w	r3, r3, #16
 80043f0:	65a3      	str	r3, [r4, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043f2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80043f4:	f043 0301 	orr.w	r3, r3, #1
 80043f8:	65e3      	str	r3, [r4, #92]	@ 0x5c

      return HAL_ERROR;
 80043fa:	2001      	movs	r0, #1
 80043fc:	e029      	b.n	8004452 <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 80043fe:	6893      	ldr	r3, [r2, #8]
 8004400:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004404:	f023 0317 	bic.w	r3, r3, #23
 8004408:	f043 0302 	orr.w	r3, r3, #2
 800440c:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800440e:	6823      	ldr	r3, [r4, #0]
 8004410:	2203      	movs	r2, #3
 8004412:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004414:	f7fd fc02 	bl	8001c1c <HAL_GetTick>
 8004418:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800441a:	6823      	ldr	r3, [r4, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f013 0f01 	tst.w	r3, #1
 8004422:	d013      	beq.n	800444c <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004424:	f7fd fbfa 	bl	8001c1c <HAL_GetTick>
 8004428:	1b40      	subs	r0, r0, r5
 800442a:	2802      	cmp	r0, #2
 800442c:	d9f5      	bls.n	800441a <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800442e:	6823      	ldr	r3, [r4, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f013 0f01 	tst.w	r3, #1
 8004436:	d0f0      	beq.n	800441a <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004438:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800443a:	f043 0310 	orr.w	r3, r3, #16
 800443e:	65a3      	str	r3, [r4, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004440:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004442:	f043 0301 	orr.w	r3, r3, #1
 8004446:	65e3      	str	r3, [r4, #92]	@ 0x5c

          return HAL_ERROR;
 8004448:	2001      	movs	r0, #1
 800444a:	e002      	b.n	8004452 <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800444c:	2000      	movs	r0, #0
 800444e:	e000      	b.n	8004452 <ADC_Disable+0x8e>
 8004450:	2000      	movs	r0, #0
}
 8004452:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8004454:	2000      	movs	r0, #0
 8004456:	e7fc      	b.n	8004452 <ADC_Disable+0x8e>

08004458 <HAL_ADC_DeInit>:
{
 8004458:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 800445a:	2800      	cmp	r0, #0
 800445c:	d056      	beq.n	800450c <HAL_ADC_DeInit+0xb4>
 800445e:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8004460:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8004462:	f043 0302 	orr.w	r3, r3, #2
 8004466:	6583      	str	r3, [r0, #88]	@ 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004468:	f7ff fed6 	bl	8004218 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800446c:	4606      	mov	r6, r0
 800446e:	2800      	cmp	r0, #0
 8004470:	d03d      	beq.n	80044ee <HAL_ADC_DeInit+0x96>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8004472:	6822      	ldr	r2, [r4, #0]
 8004474:	6853      	ldr	r3, [r2, #4]
 8004476:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 800447a:	f023 0303 	bic.w	r3, r3, #3
 800447e:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8004480:	6823      	ldr	r3, [r4, #0]
 8004482:	f240 329f 	movw	r2, #927	@ 0x39f
 8004486:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8004488:	6822      	ldr	r2, [r4, #0]
 800448a:	68d1      	ldr	r1, [r2, #12]
 800448c:	4b20      	ldr	r3, [pc, #128]	@ (8004510 <HAL_ADC_DeInit+0xb8>)
 800448e:	400b      	ands	r3, r1
 8004490:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8004492:	6822      	ldr	r2, [r4, #0]
 8004494:	6913      	ldr	r3, [r2, #16]
 8004496:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800449a:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 800449c:	6822      	ldr	r2, [r4, #0]
 800449e:	6953      	ldr	r3, [r2, #20]
 80044a0:	f023 0307 	bic.w	r3, r3, #7
 80044a4:	6153      	str	r3, [r2, #20]
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 80044a6:	6822      	ldr	r2, [r4, #0]
 80044a8:	6a13      	ldr	r3, [r2, #32]
 80044aa:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 80044ae:	6213      	str	r3, [r2, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 80044b0:	6822      	ldr	r2, [r4, #0]
 80044b2:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80044b4:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 80044b8:	6253      	str	r3, [r2, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 80044ba:	6822      	ldr	r2, [r4, #0]
 80044bc:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80044be:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 80044c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80044c4:	6823      	ldr	r3, [r4, #0]
 80044c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044c8:	2500      	movs	r5, #0
 80044ca:	629d      	str	r5, [r3, #40]	@ 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 80044cc:	4a11      	ldr	r2, [pc, #68]	@ (8004514 <HAL_ADC_DeInit+0xbc>)
 80044ce:	f8d2 3708 	ldr.w	r3, [r2, #1800]	@ 0x708
 80044d2:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 80044d6:	f8c2 3708 	str.w	r3, [r2, #1800]	@ 0x708
  HAL_ADC_MspDeInit(hadc);
 80044da:	4620      	mov	r0, r4
 80044dc:	f7fc fcd6 	bl	8000e8c <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80044e0:	6625      	str	r5, [r4, #96]	@ 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 80044e2:	65e5      	str	r5, [r4, #92]	@ 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 80044e4:	65a5      	str	r5, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 80044e6:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
}
 80044ea:	4630      	mov	r0, r6
 80044ec:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80044ee:	4620      	mov	r0, r4
 80044f0:	f7ff ff68 	bl	80043c4 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80044f4:	4606      	mov	r6, r0
 80044f6:	b908      	cbnz	r0, 80044fc <HAL_ADC_DeInit+0xa4>
      hadc->State = HAL_ADC_STATE_READY;
 80044f8:	2301      	movs	r3, #1
 80044fa:	65a3      	str	r3, [r4, #88]	@ 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80044fc:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80044fe:	6893      	ldr	r3, [r2, #8]
 8004500:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004504:	f023 0317 	bic.w	r3, r3, #23
 8004508:	6093      	str	r3, [r2, #8]
}
 800450a:	e7b2      	b.n	8004472 <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 800450c:	2601      	movs	r6, #1
 800450e:	e7ec      	b.n	80044ea <HAL_ADC_DeInit+0x92>
 8004510:	833e0200 	.word	0x833e0200
 8004514:	40012000 	.word	0x40012000

08004518 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8004518:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 800451c:	2b01      	cmp	r3, #1
 800451e:	d019      	beq.n	8004554 <HAL_ADC_Stop+0x3c>
{
 8004520:	b510      	push	{r4, lr}
 8004522:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8004524:	2301      	movs	r3, #1
 8004526:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 800452a:	f7ff fe75 	bl	8004218 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800452e:	b118      	cbz	r0, 8004538 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 8004530:	2300      	movs	r3, #0
 8004532:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
}
 8004536:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8004538:	4620      	mov	r0, r4
 800453a:	f7ff ff43 	bl	80043c4 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800453e:	2800      	cmp	r0, #0
 8004540:	d1f6      	bne.n	8004530 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 8004542:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004544:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004548:	f023 0301 	bic.w	r3, r3, #1
 800454c:	f043 0301 	orr.w	r3, r3, #1
 8004550:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004552:	e7ed      	b.n	8004530 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 8004554:	2002      	movs	r0, #2
}
 8004556:	4770      	bx	lr

08004558 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800455a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800455c:	2300      	movs	r3, #0
 800455e:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004560:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8004564:	2b01      	cmp	r3, #1
 8004566:	f000 8094 	beq.w	8004692 <HAL_ADCEx_Calibration_Start+0x13a>
 800456a:	4604      	mov	r4, r0
 800456c:	2301      	movs	r3, #1
 800456e:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004572:	f7ff ff27 	bl	80043c4 <ADC_Disable>
 8004576:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004578:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	f012 0201 	ands.w	r2, r2, #1
 8004580:	d009      	beq.n	8004596 <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004582:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004584:	f043 0310 	orr.w	r3, r3, #16
 8004588:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800458a:	2300      	movs	r3, #0
 800458c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54

  return tmp_hal_status;
}
 8004590:	4628      	mov	r0, r5
 8004592:	b003      	add	sp, #12
 8004594:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8004596:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8004598:	f421 7181 	bic.w	r1, r1, #258	@ 0x102
 800459c:	f041 0102 	orr.w	r1, r1, #2
 80045a0:	65a1      	str	r1, [r4, #88]	@ 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80045a2:	68de      	ldr	r6, [r3, #12]
 80045a4:	f426 46ff 	bic.w	r6, r6, #32640	@ 0x7f80
 80045a8:	f026 067c 	bic.w	r6, r6, #124	@ 0x7c
 80045ac:	0436      	lsls	r6, r6, #16
 80045ae:	0c36      	lsrs	r6, r6, #16
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80045b0:	68d9      	ldr	r1, [r3, #12]
 80045b2:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 80045b6:	f021 0103 	bic.w	r1, r1, #3
 80045ba:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 80045bc:	4610      	mov	r0, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80045be:	e005      	b.n	80045cc <HAL_ADCEx_Calibration_Start+0x74>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80045c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80045c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80045c8:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80045ca:	3201      	adds	r2, #1
 80045cc:	2a07      	cmp	r2, #7
 80045ce:	d81e      	bhi.n	800460e <HAL_ADCEx_Calibration_Start+0xb6>
      LL_ADC_StartCalibration(hadc->Instance);
 80045d0:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80045d2:	688b      	ldr	r3, [r1, #8]
 80045d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80045d8:	f023 0317 	bic.w	r3, r3, #23
 80045dc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80045e0:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80045e2:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80045e4:	6899      	ldr	r1, [r3, #8]
 80045e6:	2900      	cmp	r1, #0
 80045e8:	daea      	bge.n	80045c0 <HAL_ADCEx_Calibration_Start+0x68>
        wait_loop_index++;
 80045ea:	9b01      	ldr	r3, [sp, #4]
 80045ec:	3301      	adds	r3, #1
 80045ee:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80045f0:	9b01      	ldr	r3, [sp, #4]
 80045f2:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 80045f6:	d3f4      	bcc.n	80045e2 <HAL_ADCEx_Calibration_Start+0x8a>
          ADC_STATE_CLR_SET(hadc->State,
 80045f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80045fa:	f023 0312 	bic.w	r3, r3, #18
 80045fe:	f043 0310 	orr.w	r3, r3, #16
 8004602:	65a3      	str	r3, [r4, #88]	@ 0x58
          __HAL_UNLOCK(hadc);
 8004604:	2300      	movs	r3, #0
 8004606:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
          return HAL_ERROR;
 800460a:	2501      	movs	r5, #1
 800460c:	e7c0      	b.n	8004590 <HAL_ADCEx_Calibration_Start+0x38>
    calibration_factor_accumulated /= calibration_index;
 800460e:	fbb0 f0f2 	udiv	r0, r0, r2
    LL_ADC_Enable(hadc->Instance);
 8004612:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8004614:	6893      	ldr	r3, [r2, #8]
 8004616:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800461a:	f023 0317 	bic.w	r3, r3, #23
 800461e:	f043 0301 	orr.w	r3, r3, #1
 8004622:	6093      	str	r3, [r2, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8004624:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 8004626:	f8d2 30b4 	ldr.w	r3, [r2, #180]	@ 0xb4
 800462a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800462e:	4318      	orrs	r0, r3
 8004630:	f8c2 00b4 	str.w	r0, [r2, #180]	@ 0xb4
    LL_ADC_Disable(hadc->Instance);
 8004634:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8004636:	6893      	ldr	r3, [r2, #8]
 8004638:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800463c:	f023 0317 	bic.w	r3, r3, #23
 8004640:	f043 0302 	orr.w	r3, r3, #2
 8004644:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8004646:	f7fd fae9 	bl	8001c1c <HAL_GetTick>
 800464a:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800464c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	f012 0f01 	tst.w	r2, #1
 8004654:	d109      	bne.n	800466a <HAL_ADCEx_Calibration_Start+0x112>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	4332      	orrs	r2, r6
 800465a:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 800465c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800465e:	f023 0303 	bic.w	r3, r3, #3
 8004662:	f043 0301 	orr.w	r3, r3, #1
 8004666:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004668:	e78f      	b.n	800458a <HAL_ADCEx_Calibration_Start+0x32>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800466a:	f7fd fad7 	bl	8001c1c <HAL_GetTick>
 800466e:	1bc3      	subs	r3, r0, r7
 8004670:	2b02      	cmp	r3, #2
 8004672:	d9eb      	bls.n	800464c <HAL_ADCEx_Calibration_Start+0xf4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004674:	6823      	ldr	r3, [r4, #0]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f013 0f01 	tst.w	r3, #1
 800467c:	d0e6      	beq.n	800464c <HAL_ADCEx_Calibration_Start+0xf4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800467e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004680:	f043 0310 	orr.w	r3, r3, #16
 8004684:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004686:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004688:	f043 0301 	orr.w	r3, r3, #1
 800468c:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 800468e:	2501      	movs	r5, #1
 8004690:	e77e      	b.n	8004590 <HAL_ADCEx_Calibration_Start+0x38>
  __HAL_LOCK(hadc);
 8004692:	2502      	movs	r5, #2
 8004694:	e77c      	b.n	8004590 <HAL_ADCEx_Calibration_Start+0x38>
	...

08004698 <__NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004698:	2800      	cmp	r0, #0
 800469a:	db07      	blt.n	80046ac <__NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800469c:	f000 021f 	and.w	r2, r0, #31
 80046a0:	0940      	lsrs	r0, r0, #5
 80046a2:	2301      	movs	r3, #1
 80046a4:	4093      	lsls	r3, r2
 80046a6:	4a02      	ldr	r2, [pc, #8]	@ (80046b0 <__NVIC_EnableIRQ+0x18>)
 80046a8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	e000e100 	.word	0xe000e100

080046b4 <__NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80046b4:	2800      	cmp	r0, #0
 80046b6:	db0c      	blt.n	80046d2 <__NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046b8:	f000 021f 	and.w	r2, r0, #31
 80046bc:	0940      	lsrs	r0, r0, #5
 80046be:	2301      	movs	r3, #1
 80046c0:	4093      	lsls	r3, r2
 80046c2:	3020      	adds	r0, #32
 80046c4:	4a03      	ldr	r2, [pc, #12]	@ (80046d4 <__NVIC_DisableIRQ+0x20>)
 80046c6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80046ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80046ce:	f3bf 8f6f 	isb	sy
}
 80046d2:	4770      	bx	lr
 80046d4:	e000e100 	.word	0xe000e100

080046d8 <__NVIC_SetPriority>:
  if ((int32_t)(IRQn) >= 0)
 80046d8:	2800      	cmp	r0, #0
 80046da:	db08      	blt.n	80046ee <__NVIC_SetPriority+0x16>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046dc:	0109      	lsls	r1, r1, #4
 80046de:	b2c9      	uxtb	r1, r1
 80046e0:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80046e4:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80046e8:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 80046ec:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046ee:	f000 000f 	and.w	r0, r0, #15
 80046f2:	0109      	lsls	r1, r1, #4
 80046f4:	b2c9      	uxtb	r1, r1
 80046f6:	4b01      	ldr	r3, [pc, #4]	@ (80046fc <__NVIC_SetPriority+0x24>)
 80046f8:	5419      	strb	r1, [r3, r0]
}
 80046fa:	4770      	bx	lr
 80046fc:	e000ed14 	.word	0xe000ed14

08004700 <NVIC_EncodePriority>:
{
 8004700:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004702:	f000 0007 	and.w	r0, r0, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004706:	f1c0 0c07 	rsb	ip, r0, #7
 800470a:	f1bc 0f04 	cmp.w	ip, #4
 800470e:	bf28      	it	cs
 8004710:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004714:	1d03      	adds	r3, r0, #4
 8004716:	2b06      	cmp	r3, #6
 8004718:	d90f      	bls.n	800473a <NVIC_EncodePriority+0x3a>
 800471a:	1ec3      	subs	r3, r0, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800471c:	f04f 3eff 	mov.w	lr, #4294967295
 8004720:	fa0e f00c 	lsl.w	r0, lr, ip
 8004724:	ea21 0100 	bic.w	r1, r1, r0
 8004728:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800472a:	fa0e fe03 	lsl.w	lr, lr, r3
 800472e:	ea22 020e 	bic.w	r2, r2, lr
}
 8004732:	ea41 0002 	orr.w	r0, r1, r2
 8004736:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800473a:	2300      	movs	r3, #0
 800473c:	e7ee      	b.n	800471c <NVIC_EncodePriority+0x1c>
	...

08004740 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004740:	4a07      	ldr	r2, [pc, #28]	@ (8004760 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004742:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004744:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004748:	041b      	lsls	r3, r3, #16
 800474a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800474c:	0200      	lsls	r0, r0, #8
 800474e:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004752:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8004754:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004758:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800475c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800475e:	4770      	bx	lr
 8004760:	e000ed00 	.word	0xe000ed00

08004764 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004764:	b510      	push	{r4, lr}
 8004766:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004768:	4b05      	ldr	r3, [pc, #20]	@ (8004780 <HAL_NVIC_SetPriority+0x1c>)
 800476a:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800476c:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8004770:	f7ff ffc6 	bl	8004700 <NVIC_EncodePriority>
 8004774:	4601      	mov	r1, r0
 8004776:	4620      	mov	r0, r4
 8004778:	f7ff ffae 	bl	80046d8 <__NVIC_SetPriority>
}
 800477c:	bd10      	pop	{r4, pc}
 800477e:	bf00      	nop
 8004780:	e000ed00 	.word	0xe000ed00

08004784 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004784:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004786:	f7ff ff87 	bl	8004698 <__NVIC_EnableIRQ>
}
 800478a:	bd08      	pop	{r3, pc}

0800478c <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800478c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800478e:	f7ff ff91 	bl	80046b4 <__NVIC_DisableIRQ>
}
 8004792:	bd08      	pop	{r3, pc}

08004794 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004794:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004796:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 8004798:	f8d0 c050 	ldr.w	ip, [r0, #80]	@ 0x50
 800479c:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 80047a0:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 80047a2:	b124      	cbz	r4, 80047ae <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047a4:	6d84      	ldr	r4, [r0, #88]	@ 0x58
 80047a6:	f8d0 c05c 	ldr.w	ip, [r0, #92]	@ 0x5c
 80047aa:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80047ae:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80047b0:	f004 0c1c 	and.w	ip, r4, #28
 80047b4:	2401      	movs	r4, #1
 80047b6:	fa04 f40c 	lsl.w	r4, r4, ip
 80047ba:	f8d0 c040 	ldr.w	ip, [r0, #64]	@ 0x40
 80047be:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80047c2:	6804      	ldr	r4, [r0, #0]
 80047c4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047c6:	6883      	ldr	r3, [r0, #8]
 80047c8:	2b10      	cmp	r3, #16
 80047ca:	d005      	beq.n	80047d8 <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80047cc:	6803      	ldr	r3, [r0, #0]
 80047ce:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80047d0:	6803      	ldr	r3, [r0, #0]
 80047d2:	60da      	str	r2, [r3, #12]
  }
}
 80047d4:	bc10      	pop	{r4}
 80047d6:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80047d8:	6803      	ldr	r3, [r0, #0]
 80047da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80047dc:	6803      	ldr	r3, [r0, #0]
 80047de:	60d9      	str	r1, [r3, #12]
 80047e0:	e7f8      	b.n	80047d4 <DMA_SetConfig+0x40>
	...

080047e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80047e4:	6803      	ldr	r3, [r0, #0]
 80047e6:	4a14      	ldr	r2, [pc, #80]	@ (8004838 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d816      	bhi.n	800481a <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80047ec:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 80047ee:	f022 0203 	bic.w	r2, r2, #3
 80047f2:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80047f6:	f502 3202 	add.w	r2, r2, #133120	@ 0x20800
 80047fa:	6482      	str	r2, [r0, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	3b08      	subs	r3, #8
 8004800:	4a0e      	ldr	r2, [pc, #56]	@ (800483c <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8004802:	fba2 2303 	umull	r2, r3, r2, r3
 8004806:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004808:	4a0d      	ldr	r2, [pc, #52]	@ (8004840 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 800480a:	64c2      	str	r2, [r0, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800480c:	f003 031f 	and.w	r3, r3, #31
 8004810:	2201      	movs	r2, #1
 8004812:	fa02 f303 	lsl.w	r3, r2, r3
 8004816:	6503      	str	r3, [r0, #80]	@ 0x50
}
 8004818:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800481a:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800481c:	f022 0103 	bic.w	r1, r2, #3
 8004820:	4a08      	ldr	r2, [pc, #32]	@ (8004844 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8004822:	440a      	add	r2, r1
 8004824:	6482      	str	r2, [r0, #72]	@ 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004826:	b2db      	uxtb	r3, r3
 8004828:	3b08      	subs	r3, #8
 800482a:	4a04      	ldr	r2, [pc, #16]	@ (800483c <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 800482c:	fba2 2303 	umull	r2, r3, r2, r3
 8004830:	091b      	lsrs	r3, r3, #4
 8004832:	3307      	adds	r3, #7
 8004834:	e7e8      	b.n	8004808 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 8004836:	bf00      	nop
 8004838:	40020407 	.word	0x40020407
 800483c:	cccccccd 	.word	0xcccccccd
 8004840:	40020880 	.word	0x40020880
 8004844:	4002081c 	.word	0x4002081c

08004848 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004848:	6843      	ldr	r3, [r0, #4]
 800484a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800484e:	4a07      	ldr	r2, [pc, #28]	@ (800486c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8004850:	441a      	add	r2, r3
 8004852:	0092      	lsls	r2, r2, #2
 8004854:	6542      	str	r2, [r0, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004856:	4a06      	ldr	r2, [pc, #24]	@ (8004870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8004858:	6582      	str	r2, [r0, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800485a:	3b01      	subs	r3, #1
 800485c:	f003 0303 	and.w	r3, r3, #3
 8004860:	2201      	movs	r2, #1
 8004862:	fa02 f303 	lsl.w	r3, r2, r3
 8004866:	65c3      	str	r3, [r0, #92]	@ 0x5c
}
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	1000823f 	.word	0x1000823f
 8004870:	40020940 	.word	0x40020940

08004874 <HAL_DMA_Init>:
  if (hdma == NULL)
 8004874:	2800      	cmp	r0, #0
 8004876:	d060      	beq.n	800493a <HAL_DMA_Init+0xc6>
{
 8004878:	b510      	push	{r4, lr}
 800487a:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800487c:	6802      	ldr	r2, [r0, #0]
 800487e:	4b30      	ldr	r3, [pc, #192]	@ (8004940 <HAL_DMA_Init+0xcc>)
 8004880:	429a      	cmp	r2, r3
 8004882:	d842      	bhi.n	800490a <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004884:	4b2f      	ldr	r3, [pc, #188]	@ (8004944 <HAL_DMA_Init+0xd0>)
 8004886:	4413      	add	r3, r2
 8004888:	492f      	ldr	r1, [pc, #188]	@ (8004948 <HAL_DMA_Init+0xd4>)
 800488a:	fba1 1303 	umull	r1, r3, r1, r3
 800488e:	091b      	lsrs	r3, r3, #4
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004894:	4b2d      	ldr	r3, [pc, #180]	@ (800494c <HAL_DMA_Init+0xd8>)
 8004896:	6403      	str	r3, [r0, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8004898:	2302      	movs	r3, #2
 800489a:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800489e:	6813      	ldr	r3, [r2, #0]
 80048a0:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80048a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048a8:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80048aa:	6821      	ldr	r1, [r4, #0]
 80048ac:	680a      	ldr	r2, [r1, #0]
 80048ae:	68a3      	ldr	r3, [r4, #8]
 80048b0:	68e0      	ldr	r0, [r4, #12]
 80048b2:	4303      	orrs	r3, r0
 80048b4:	6920      	ldr	r0, [r4, #16]
 80048b6:	4303      	orrs	r3, r0
 80048b8:	6960      	ldr	r0, [r4, #20]
 80048ba:	4303      	orrs	r3, r0
 80048bc:	69a0      	ldr	r0, [r4, #24]
 80048be:	4303      	orrs	r3, r0
 80048c0:	69e0      	ldr	r0, [r4, #28]
 80048c2:	4303      	orrs	r3, r0
 80048c4:	6a20      	ldr	r0, [r4, #32]
 80048c6:	4303      	orrs	r3, r0
 80048c8:	4313      	orrs	r3, r2
 80048ca:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80048cc:	4620      	mov	r0, r4
 80048ce:	f7ff ff89 	bl	80047e4 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80048d2:	68a3      	ldr	r3, [r4, #8]
 80048d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048d8:	d022      	beq.n	8004920 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80048da:	6863      	ldr	r3, [r4, #4]
 80048dc:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80048de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048e2:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048e4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80048e6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80048e8:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80048ea:	6863      	ldr	r3, [r4, #4]
 80048ec:	3b01      	subs	r3, #1
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	d919      	bls.n	8004926 <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = NULL;
 80048f2:	2300      	movs	r3, #0
 80048f4:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 80048f6:	65a3      	str	r3, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80048f8:	65e3      	str	r3, [r4, #92]	@ 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048fa:	2000      	movs	r0, #0
 80048fc:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 80048fe:	2301      	movs	r3, #1
 8004900:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
  __HAL_UNLOCK(hdma);
 8004904:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 8004908:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800490a:	4b11      	ldr	r3, [pc, #68]	@ (8004950 <HAL_DMA_Init+0xdc>)
 800490c:	4413      	add	r3, r2
 800490e:	490e      	ldr	r1, [pc, #56]	@ (8004948 <HAL_DMA_Init+0xd4>)
 8004910:	fba1 1303 	umull	r1, r3, r1, r3
 8004914:	091b      	lsrs	r3, r3, #4
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800491a:	4b0e      	ldr	r3, [pc, #56]	@ (8004954 <HAL_DMA_Init+0xe0>)
 800491c:	6403      	str	r3, [r0, #64]	@ 0x40
 800491e:	e7bb      	b.n	8004898 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004920:	2300      	movs	r3, #0
 8004922:	6063      	str	r3, [r4, #4]
 8004924:	e7d9      	b.n	80048da <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004926:	4620      	mov	r0, r4
 8004928:	f7ff ff8e 	bl	8004848 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800492c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800492e:	2200      	movs	r2, #0
 8004930:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004932:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004934:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004936:	605a      	str	r2, [r3, #4]
 8004938:	e7df      	b.n	80048fa <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 800493a:	2001      	movs	r0, #1
}
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	40020407 	.word	0x40020407
 8004944:	bffdfff8 	.word	0xbffdfff8
 8004948:	cccccccd 	.word	0xcccccccd
 800494c:	40020000 	.word	0x40020000
 8004950:	bffdfbf8 	.word	0xbffdfbf8
 8004954:	40020400 	.word	0x40020400

08004958 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8004958:	2800      	cmp	r0, #0
 800495a:	d04b      	beq.n	80049f4 <HAL_DMA_DeInit+0x9c>
{
 800495c:	b538      	push	{r3, r4, r5, lr}
 800495e:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8004960:	6802      	ldr	r2, [r0, #0]
 8004962:	6813      	ldr	r3, [r2, #0]
 8004964:	f023 0301 	bic.w	r3, r3, #1
 8004968:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800496a:	6802      	ldr	r2, [r0, #0]
 800496c:	4b22      	ldr	r3, [pc, #136]	@ (80049f8 <HAL_DMA_DeInit+0xa0>)
 800496e:	429a      	cmp	r2, r3
 8004970:	d82c      	bhi.n	80049cc <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004972:	4b22      	ldr	r3, [pc, #136]	@ (80049fc <HAL_DMA_DeInit+0xa4>)
 8004974:	4413      	add	r3, r2
 8004976:	4922      	ldr	r1, [pc, #136]	@ (8004a00 <HAL_DMA_DeInit+0xa8>)
 8004978:	fba1 1303 	umull	r1, r3, r1, r3
 800497c:	091b      	lsrs	r3, r3, #4
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004982:	4b20      	ldr	r3, [pc, #128]	@ (8004a04 <HAL_DMA_DeInit+0xac>)
 8004984:	6403      	str	r3, [r0, #64]	@ 0x40
  hdma->Instance->CCR = 0U;
 8004986:	2500      	movs	r5, #0
 8004988:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800498a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800498c:	f003 021c 	and.w	r2, r3, #28
 8004990:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8004992:	2301      	movs	r3, #1
 8004994:	4093      	lsls	r3, r2
 8004996:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004998:	4620      	mov	r0, r4
 800499a:	f7ff ff23 	bl	80047e4 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 800499e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80049a0:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049a2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80049a4:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80049a6:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80049a8:	6863      	ldr	r3, [r4, #4]
 80049aa:	3b01      	subs	r3, #1
 80049ac:	2b03      	cmp	r3, #3
 80049ae:	d918      	bls.n	80049e2 <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = NULL;
 80049b0:	2000      	movs	r0, #0
 80049b2:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 80049b4:	65a0      	str	r0, [r4, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80049b6:	65e0      	str	r0, [r4, #92]	@ 0x5c
  hdma->XferCpltCallback = NULL;
 80049b8:	62e0      	str	r0, [r4, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80049ba:	6320      	str	r0, [r4, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 80049bc:	6360      	str	r0, [r4, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 80049be:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049c0:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 80049c2:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
  __HAL_UNLOCK(hdma);
 80049c6:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 80049ca:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80049cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004a08 <HAL_DMA_DeInit+0xb0>)
 80049ce:	4413      	add	r3, r2
 80049d0:	490b      	ldr	r1, [pc, #44]	@ (8004a00 <HAL_DMA_DeInit+0xa8>)
 80049d2:	fba1 1303 	umull	r1, r3, r1, r3
 80049d6:	091b      	lsrs	r3, r3, #4
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80049dc:	4b0b      	ldr	r3, [pc, #44]	@ (8004a0c <HAL_DMA_DeInit+0xb4>)
 80049de:	6403      	str	r3, [r0, #64]	@ 0x40
 80049e0:	e7d1      	b.n	8004986 <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80049e2:	4620      	mov	r0, r4
 80049e4:	f7ff ff30 	bl	8004848 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80049e8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80049ea:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80049ee:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80049f0:	605a      	str	r2, [r3, #4]
 80049f2:	e7dd      	b.n	80049b0 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 80049f4:	2001      	movs	r0, #1
}
 80049f6:	4770      	bx	lr
 80049f8:	40020407 	.word	0x40020407
 80049fc:	bffdfff8 	.word	0xbffdfff8
 8004a00:	cccccccd 	.word	0xcccccccd
 8004a04:	40020000 	.word	0x40020000
 8004a08:	bffdfbf8 	.word	0xbffdfbf8
 8004a0c:	40020400 	.word	0x40020400

08004a10 <HAL_DMA_Start_IT>:
{
 8004a10:	b538      	push	{r3, r4, r5, lr}
 8004a12:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8004a14:	f890 0024 	ldrb.w	r0, [r0, #36]	@ 0x24
 8004a18:	2801      	cmp	r0, #1
 8004a1a:	d043      	beq.n	8004aa4 <HAL_DMA_Start_IT+0x94>
 8004a1c:	2001      	movs	r0, #1
 8004a1e:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8004a22:	f894 0025 	ldrb.w	r0, [r4, #37]	@ 0x25
 8004a26:	b2c0      	uxtb	r0, r0
 8004a28:	2801      	cmp	r0, #1
 8004a2a:	d006      	beq.n	8004a3a <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004a2c:	2380      	movs	r3, #128	@ 0x80
 8004a2e:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8004a30:	2300      	movs	r3, #0
 8004a32:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    status = HAL_ERROR;
 8004a36:	2001      	movs	r0, #1
}
 8004a38:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a3a:	2002      	movs	r0, #2
 8004a3c:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a40:	2000      	movs	r0, #0
 8004a42:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004a44:	6825      	ldr	r5, [r4, #0]
 8004a46:	6828      	ldr	r0, [r5, #0]
 8004a48:	f020 0001 	bic.w	r0, r0, #1
 8004a4c:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a4e:	4620      	mov	r0, r4
 8004a50:	f7ff fea0 	bl	8004794 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8004a54:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004a56:	b1d3      	cbz	r3, 8004a8e <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a58:	6822      	ldr	r2, [r4, #0]
 8004a5a:	6813      	ldr	r3, [r2, #0]
 8004a5c:	f043 030e 	orr.w	r3, r3, #14
 8004a60:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004a62:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8004a6a:	d003      	beq.n	8004a74 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a72:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != NULL)
 8004a74:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004a76:	b11b      	cbz	r3, 8004a80 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a7e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8004a80:	6822      	ldr	r2, [r4, #0]
 8004a82:	6813      	ldr	r3, [r2, #0]
 8004a84:	f043 0301 	orr.w	r3, r3, #1
 8004a88:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	e7d4      	b.n	8004a38 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a8e:	6822      	ldr	r2, [r4, #0]
 8004a90:	6813      	ldr	r3, [r2, #0]
 8004a92:	f023 0304 	bic.w	r3, r3, #4
 8004a96:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004a98:	6822      	ldr	r2, [r4, #0]
 8004a9a:	6813      	ldr	r3, [r2, #0]
 8004a9c:	f043 030a 	orr.w	r3, r3, #10
 8004aa0:	6013      	str	r3, [r2, #0]
 8004aa2:	e7de      	b.n	8004a62 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8004aa4:	2002      	movs	r0, #2
 8004aa6:	e7c7      	b.n	8004a38 <HAL_DMA_Start_IT+0x28>

08004aa8 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2800      	cmp	r0, #0
 8004aac:	d034      	beq.n	8004b18 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004aae:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8004ab2:	b2d2      	uxtb	r2, r2
 8004ab4:	2a02      	cmp	r2, #2
 8004ab6:	d006      	beq.n	8004ac6 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ab8:	2204      	movs	r2, #4
 8004aba:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8004abc:	2200      	movs	r2, #0
 8004abe:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    return HAL_ERROR;
 8004ac2:	2001      	movs	r0, #1
 8004ac4:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ac6:	6801      	ldr	r1, [r0, #0]
 8004ac8:	680a      	ldr	r2, [r1, #0]
 8004aca:	f022 020e 	bic.w	r2, r2, #14
 8004ace:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ad0:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8004ad2:	680a      	ldr	r2, [r1, #0]
 8004ad4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ad8:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8004ada:	6801      	ldr	r1, [r0, #0]
 8004adc:	680a      	ldr	r2, [r1, #0]
 8004ade:	f022 0201 	bic.w	r2, r2, #1
 8004ae2:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004ae4:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8004ae6:	f002 011c 	and.w	r1, r2, #28
 8004aea:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 8004aec:	2201      	movs	r2, #1
 8004aee:	408a      	lsls	r2, r1
 8004af0:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004af2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004af4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004af6:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8004af8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004afa:	b132      	cbz	r2, 8004b0a <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004afc:	6811      	ldr	r1, [r2, #0]
 8004afe:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8004b02:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b04:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004b06:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8004b08:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8004b10:	2000      	movs	r0, #0
 8004b12:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  return HAL_OK;
 8004b16:	4770      	bx	lr
    return HAL_ERROR;
 8004b18:	2001      	movs	r0, #1
}
 8004b1a:	4770      	bx	lr

08004b1c <HAL_DMA_Abort_IT>:
{
 8004b1c:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004b1e:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d003      	beq.n	8004b30 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b28:	2304      	movs	r3, #4
 8004b2a:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 8004b2c:	2001      	movs	r0, #1
}
 8004b2e:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b30:	6802      	ldr	r2, [r0, #0]
 8004b32:	6813      	ldr	r3, [r2, #0]
 8004b34:	f023 030e 	bic.w	r3, r3, #14
 8004b38:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004b3a:	6802      	ldr	r2, [r0, #0]
 8004b3c:	6813      	ldr	r3, [r2, #0]
 8004b3e:	f023 0301 	bic.w	r3, r3, #1
 8004b42:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b44:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8004b46:	6813      	ldr	r3, [r2, #0]
 8004b48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b4c:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b4e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8004b50:	f003 021c 	and.w	r2, r3, #28
 8004b54:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8004b56:	2301      	movs	r3, #1
 8004b58:	4093      	lsls	r3, r2
 8004b5a:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b5c:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8004b5e:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8004b60:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8004b62:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8004b64:	b133      	cbz	r3, 8004b74 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b6c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b6e:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8004b70:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8004b72:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004b74:	2301      	movs	r3, #1
 8004b76:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferAbortCallback != NULL)
 8004b80:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8004b82:	b113      	cbz	r3, 8004b8a <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8004b84:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8004b86:	2000      	movs	r0, #0
 8004b88:	e7d1      	b.n	8004b2e <HAL_DMA_Abort_IT+0x12>
 8004b8a:	2000      	movs	r0, #0
 8004b8c:	e7cf      	b.n	8004b2e <HAL_DMA_Abort_IT+0x12>
	...

08004b90 <HAL_DMA_IRQHandler>:
{
 8004b90:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b92:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004b94:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004b96:	6804      	ldr	r4, [r0, #0]
 8004b98:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004b9a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8004b9c:	f003 031c 	and.w	r3, r3, #28
 8004ba0:	2204      	movs	r2, #4
 8004ba2:	409a      	lsls	r2, r3
 8004ba4:	420a      	tst	r2, r1
 8004ba6:	d015      	beq.n	8004bd4 <HAL_DMA_IRQHandler+0x44>
 8004ba8:	f015 0f04 	tst.w	r5, #4
 8004bac:	d012      	beq.n	8004bd4 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004bae:	6823      	ldr	r3, [r4, #0]
 8004bb0:	f013 0f20 	tst.w	r3, #32
 8004bb4:	d103      	bne.n	8004bbe <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	f023 0304 	bic.w	r3, r3, #4
 8004bbc:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004bbe:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8004bc0:	f003 021c 	and.w	r2, r3, #28
 8004bc4:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8004bc6:	2304      	movs	r3, #4
 8004bc8:	4093      	lsls	r3, r2
 8004bca:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8004bcc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004bce:	b103      	cbz	r3, 8004bd2 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8004bd0:	4798      	blx	r3
}
 8004bd2:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004bd4:	2202      	movs	r2, #2
 8004bd6:	409a      	lsls	r2, r3
 8004bd8:	420a      	tst	r2, r1
 8004bda:	d028      	beq.n	8004c2e <HAL_DMA_IRQHandler+0x9e>
 8004bdc:	f015 0f02 	tst.w	r5, #2
 8004be0:	d025      	beq.n	8004c2e <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004be2:	6823      	ldr	r3, [r4, #0]
 8004be4:	f013 0f20 	tst.w	r3, #32
 8004be8:	d106      	bne.n	8004bf8 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004bea:	6823      	ldr	r3, [r4, #0]
 8004bec:	f023 030a 	bic.w	r3, r3, #10
 8004bf0:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004bf8:	6802      	ldr	r2, [r0, #0]
 8004bfa:	4b1c      	ldr	r3, [pc, #112]	@ (8004c6c <HAL_DMA_IRQHandler+0xdc>)
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d90e      	bls.n	8004c1e <HAL_DMA_IRQHandler+0x8e>
 8004c00:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8004c02:	f003 021c 	and.w	r2, r3, #28
 8004c06:	2302      	movs	r3, #2
 8004c08:	4093      	lsls	r3, r2
 8004c0a:	4a19      	ldr	r2, [pc, #100]	@ (8004c70 <HAL_DMA_IRQHandler+0xe0>)
 8004c0c:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
      if (hdma->XferCpltCallback != NULL)
 8004c14:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d0db      	beq.n	8004bd2 <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8004c1a:	4798      	blx	r3
 8004c1c:	e7d9      	b.n	8004bd2 <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004c1e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8004c20:	f003 021c 	and.w	r2, r3, #28
 8004c24:	2302      	movs	r3, #2
 8004c26:	4093      	lsls	r3, r2
 8004c28:	4a12      	ldr	r2, [pc, #72]	@ (8004c74 <HAL_DMA_IRQHandler+0xe4>)
 8004c2a:	6053      	str	r3, [r2, #4]
 8004c2c:	e7ef      	b.n	8004c0e <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004c2e:	2208      	movs	r2, #8
 8004c30:	fa02 f303 	lsl.w	r3, r2, r3
 8004c34:	420b      	tst	r3, r1
 8004c36:	d0cc      	beq.n	8004bd2 <HAL_DMA_IRQHandler+0x42>
 8004c38:	f015 0f08 	tst.w	r5, #8
 8004c3c:	d0c9      	beq.n	8004bd2 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c3e:	6823      	ldr	r3, [r4, #0]
 8004c40:	f023 030e 	bic.w	r3, r3, #14
 8004c44:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c46:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8004c48:	f003 031c 	and.w	r3, r3, #28
 8004c4c:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8004c4e:	2201      	movs	r2, #1
 8004c50:	fa02 f303 	lsl.w	r3, r2, r3
 8004c54:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c56:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8004c58:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferErrorCallback != NULL)
 8004c62:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0b4      	beq.n	8004bd2 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8004c68:	4798      	blx	r3
  return;
 8004c6a:	e7b2      	b.n	8004bd2 <HAL_DMA_IRQHandler+0x42>
 8004c6c:	40020080 	.word	0x40020080
 8004c70:	40020400 	.word	0x40020400
 8004c74:	40020000 	.word	0x40020000

08004c78 <HAL_DMA_GetState>:
  return hdma->State;
 8004c78:	f890 0025 	ldrb.w	r0, [r0, #37]	@ 0x25
}
 8004c7c:	4770      	bx	lr

08004c7e <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8004c7e:	b178      	cbz	r0, 8004ca0 <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 8004c80:	6803      	ldr	r3, [r0, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8004c84:	f011 0f10 	tst.w	r1, #16
 8004c88:	d004      	beq.n	8004c94 <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8004c8a:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8004c8e:	d004      	beq.n	8004c9a <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 8004c90:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 8004c94:	601a      	str	r2, [r3, #0]
  return status;
 8004c96:	2000      	movs	r0, #0
 8004c98:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8004c9a:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8004c9e:	e7f9      	b.n	8004c94 <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 8004ca0:	2001      	movs	r0, #1
}
 8004ca2:	4770      	bx	lr

08004ca4 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004ca4:	b410      	push	{r4}
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004ca6:	4c05      	ldr	r4, [pc, #20]	@ (8004cbc <FLASH_Program_DoubleWord+0x18>)
 8004ca8:	6961      	ldr	r1, [r4, #20]
 8004caa:	f041 0101 	orr.w	r1, r1, #1
 8004cae:	6161      	str	r1, [r4, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004cb0:	6002      	str	r2, [r0, #0]
 8004cb2:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004cb6:	6043      	str	r3, [r0, #4]
}
 8004cb8:	bc10      	pop	{r4}
 8004cba:	4770      	bx	lr
 8004cbc:	58004000 	.word	0x58004000

08004cc0 <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004cc0:	4a0c      	ldr	r2, [pc, #48]	@ (8004cf4 <FLASH_Program_Fast+0x34>)
 8004cc2:	6953      	ldr	r3, [r2, #20]
 8004cc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cc8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cca:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004cce:	b672      	cpsid	i
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004cd0:	2340      	movs	r3, #64	@ 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004cd2:	f851 2b04 	ldr.w	r2, [r1], #4
 8004cd6:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 8004cda:	3b01      	subs	r3, #1
  }
  while (row_index != 0U);
 8004cdc:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 8004ce0:	d1f7      	bne.n	8004cd2 <FLASH_Program_Fast+0x12>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004ce2:	4b04      	ldr	r3, [pc, #16]	@ (8004cf4 <FLASH_Program_Fast+0x34>)
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8004cea:	d1fa      	bne.n	8004ce2 <FLASH_Program_Fast+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cec:	f38c 8810 	msr	PRIMASK, ip
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	58004000 	.word	0x58004000

08004cf8 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004cf8:	4b09      	ldr	r3, [pc, #36]	@ (8004d20 <HAL_FLASH_Unlock+0x28>)
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	db01      	blt.n	8004d04 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8004d00:	2000      	movs	r0, #0
 8004d02:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004d04:	4b06      	ldr	r3, [pc, #24]	@ (8004d20 <HAL_FLASH_Unlock+0x28>)
 8004d06:	4a07      	ldr	r2, [pc, #28]	@ (8004d24 <HAL_FLASH_Unlock+0x2c>)
 8004d08:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004d0a:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 8004d0e:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	db01      	blt.n	8004d1a <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8004d16:	2000      	movs	r0, #0
 8004d18:	4770      	bx	lr
      status = HAL_ERROR;
 8004d1a:	2001      	movs	r0, #1
}
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	58004000 	.word	0x58004000
 8004d24:	45670123 	.word	0x45670123

08004d28 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004d28:	4b05      	ldr	r3, [pc, #20]	@ (8004d40 <HAL_FLASH_Lock+0x18>)
 8004d2a:	695a      	ldr	r2, [r3, #20]
 8004d2c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004d30:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	db01      	blt.n	8004d3c <HAL_FLASH_Lock+0x14>
    status = HAL_ERROR;
 8004d38:	2001      	movs	r0, #1
}
 8004d3a:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	4770      	bx	lr
 8004d40:	58004000 	.word	0x58004000

08004d44 <FLASH_WaitForLastOperation>:
{
 8004d44:	b538      	push	{r3, r4, r5, lr}
 8004d46:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8004d48:	f7fc ff68 	bl	8001c1c <HAL_GetTick>
 8004d4c:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8004dbc <FLASH_WaitForLastOperation+0x78>)
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8004d56:	d006      	beq.n	8004d66 <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004d58:	f7fc ff60 	bl	8001c1c <HAL_GetTick>
 8004d5c:	1b00      	subs	r0, r0, r4
 8004d5e:	42a8      	cmp	r0, r5
 8004d60:	d3f5      	bcc.n	8004d4e <FLASH_WaitForLastOperation+0xa>
      return HAL_TIMEOUT;
 8004d62:	2003      	movs	r0, #3
}
 8004d64:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 8004d66:	4b15      	ldr	r3, [pc, #84]	@ (8004dbc <FLASH_WaitForLastOperation+0x78>)
 8004d68:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004d6a:	f013 0f01 	tst.w	r3, #1
 8004d6e:	d115      	bne.n	8004d9c <FLASH_WaitForLastOperation+0x58>
  error &= FLASH_FLAG_SR_ERRORS;
 8004d70:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8004d74:	f023 0305 	bic.w	r3, r3, #5
 8004d78:	041b      	lsls	r3, r3, #16
 8004d7a:	0c1b      	lsrs	r3, r3, #16
  __HAL_FLASH_CLEAR_FLAG(error);
 8004d7c:	b10b      	cbz	r3, 8004d82 <FLASH_WaitForLastOperation+0x3e>
 8004d7e:	4a0f      	ldr	r2, [pc, #60]	@ (8004dbc <FLASH_WaitForLastOperation+0x78>)
 8004d80:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 8004d82:	b9ab      	cbnz	r3, 8004db0 <FLASH_WaitForLastOperation+0x6c>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004d84:	4b0d      	ldr	r3, [pc, #52]	@ (8004dbc <FLASH_WaitForLastOperation+0x78>)
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8004d8c:	d014      	beq.n	8004db8 <FLASH_WaitForLastOperation+0x74>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004d8e:	f7fc ff45 	bl	8001c1c <HAL_GetTick>
 8004d92:	1b00      	subs	r0, r0, r4
 8004d94:	42a8      	cmp	r0, r5
 8004d96:	d3f5      	bcc.n	8004d84 <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 8004d98:	2003      	movs	r0, #3
 8004d9a:	e7e3      	b.n	8004d64 <FLASH_WaitForLastOperation+0x20>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004d9c:	4a07      	ldr	r2, [pc, #28]	@ (8004dbc <FLASH_WaitForLastOperation+0x78>)
 8004d9e:	2101      	movs	r1, #1
 8004da0:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 8004da2:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8004da6:	f023 0305 	bic.w	r3, r3, #5
 8004daa:	041b      	lsls	r3, r3, #16
 8004dac:	0c1b      	lsrs	r3, r3, #16
  __HAL_FLASH_CLEAR_FLAG(error);
 8004dae:	e7e5      	b.n	8004d7c <FLASH_WaitForLastOperation+0x38>
    pFlash.ErrorCode = error;
 8004db0:	4a03      	ldr	r2, [pc, #12]	@ (8004dc0 <FLASH_WaitForLastOperation+0x7c>)
 8004db2:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 8004db4:	2001      	movs	r0, #1
 8004db6:	e7d5      	b.n	8004d64 <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 8004db8:	2000      	movs	r0, #0
 8004dba:	e7d3      	b.n	8004d64 <FLASH_WaitForLastOperation+0x20>
 8004dbc:	58004000 	.word	0x58004000
 8004dc0:	20000640 	.word	0x20000640

08004dc4 <HAL_FLASH_Program>:
{
 8004dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc6:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8004dc8:	4b15      	ldr	r3, [pc, #84]	@ (8004e20 <HAL_FLASH_Program+0x5c>)
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d025      	beq.n	8004e1c <HAL_FLASH_Program+0x58>
 8004dd0:	4604      	mov	r4, r0
 8004dd2:	460d      	mov	r5, r1
 8004dd4:	4616      	mov	r6, r2
 8004dd6:	4b12      	ldr	r3, [pc, #72]	@ (8004e20 <HAL_FLASH_Program+0x5c>)
 8004dd8:	2201      	movs	r2, #1
 8004dda:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004ddc:	2200      	movs	r2, #0
 8004dde:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004de0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004de4:	f7ff ffae 	bl	8004d44 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8004de8:	b970      	cbnz	r0, 8004e08 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004dea:	2c01      	cmp	r4, #1
 8004dec:	d010      	beq.n	8004e10 <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004dee:	4631      	mov	r1, r6
 8004df0:	4628      	mov	r0, r5
 8004df2:	f7ff ff65 	bl	8004cc0 <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004df6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004dfa:	f7ff ffa3 	bl	8004d44 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004dfe:	4a09      	ldr	r2, [pc, #36]	@ (8004e24 <HAL_FLASH_Program+0x60>)
 8004e00:	6953      	ldr	r3, [r2, #20]
 8004e02:	ea23 0304 	bic.w	r3, r3, r4
 8004e06:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8004e08:	4b05      	ldr	r3, [pc, #20]	@ (8004e20 <HAL_FLASH_Program+0x5c>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	701a      	strb	r2, [r3, #0]
}
 8004e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 8004e10:	4632      	mov	r2, r6
 8004e12:	463b      	mov	r3, r7
 8004e14:	4628      	mov	r0, r5
 8004e16:	f7ff ff45 	bl	8004ca4 <FLASH_Program_DoubleWord>
 8004e1a:	e7ec      	b.n	8004df6 <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 8004e1c:	2002      	movs	r0, #2
 8004e1e:	e7f6      	b.n	8004e0e <HAL_FLASH_Program+0x4a>
 8004e20:	20000640 	.word	0x20000640
 8004e24:	58004000 	.word	0x58004000

08004e28 <FLASH_MassErase>:
{
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8004e28:	4a03      	ldr	r2, [pc, #12]	@ (8004e38 <FLASH_MassErase+0x10>)
 8004e2a:	6953      	ldr	r3, [r2, #20]
 8004e2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e30:	f043 0304 	orr.w	r3, r3, #4
 8004e34:	6153      	str	r3, [r2, #20]
#endif
}
 8004e36:	4770      	bx	lr
 8004e38:	58004000 	.word	0x58004000

08004e3c <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8004e3c:	4b18      	ldr	r3, [pc, #96]	@ (8004ea0 <FLASH_FlushCaches+0x64>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d006      	beq.n	8004e56 <FLASH_FlushCaches+0x1a>
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004e48:	4b15      	ldr	r3, [pc, #84]	@ (8004ea0 <FLASH_FlushCaches+0x64>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d012      	beq.n	8004e7a <FLASH_FlushCaches+0x3e>
    __HAL_FLASH_DATA_CACHE_RESET();
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
#endif
}
 8004e54:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004e56:	4b12      	ldr	r3, [pc, #72]	@ (8004ea0 <FLASH_FlushCaches+0x64>)
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004e5e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e6e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	e7e6      	b.n	8004e48 <FLASH_FlushCaches+0xc>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004e7a:	4b09      	ldr	r3, [pc, #36]	@ (8004ea0 <FLASH_FlushCaches+0x64>)
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e82:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004e92:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004e9a:	601a      	str	r2, [r3, #0]
}
 8004e9c:	e7da      	b.n	8004e54 <FLASH_FlushCaches+0x18>
 8004e9e:	bf00      	nop
 8004ea0:	58004000 	.word	0x58004000

08004ea4 <FLASH_AcknowledgePageErase>:
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004ea4:	4a03      	ldr	r2, [pc, #12]	@ (8004eb4 <FLASH_AcknowledgePageErase+0x10>)
 8004ea6:	6953      	ldr	r3, [r2, #20]
 8004ea8:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8004eac:	f023 0302 	bic.w	r3, r3, #2
 8004eb0:	6153      	str	r3, [r2, #20]
#endif
}
 8004eb2:	4770      	bx	lr
 8004eb4:	58004000 	.word	0x58004000

08004eb8 <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004eb8:	4a05      	ldr	r2, [pc, #20]	@ (8004ed0 <FLASH_PageErase+0x18>)
 8004eba:	6953      	ldr	r3, [r2, #20]
 8004ebc:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8004ec0:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 8004ec4:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 8004ec8:	f040 0002 	orr.w	r0, r0, #2
 8004ecc:	6150      	str	r0, [r2, #20]
}
 8004ece:	4770      	bx	lr
 8004ed0:	58004000 	.word	0x58004000

08004ed4 <HAL_FLASHEx_Erase>:
{
 8004ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8004ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8004f50 <HAL_FLASHEx_Erase+0x7c>)
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d035      	beq.n	8004f4a <HAL_FLASHEx_Erase+0x76>
 8004ede:	4605      	mov	r5, r0
 8004ee0:	460f      	mov	r7, r1
 8004ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8004f50 <HAL_FLASHEx_Erase+0x7c>)
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004ee8:	2200      	movs	r2, #0
 8004eea:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004eec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004ef0:	f7ff ff28 	bl	8004d44 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8004ef4:	4606      	mov	r6, r0
 8004ef6:	bb18      	cbnz	r0, 8004f40 <HAL_FLASHEx_Erase+0x6c>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004ef8:	682b      	ldr	r3, [r5, #0]
 8004efa:	2b04      	cmp	r3, #4
 8004efc:	d013      	beq.n	8004f26 <HAL_FLASHEx_Erase+0x52>
      *PageError = 0xFFFFFFFFU;
 8004efe:	f04f 33ff 	mov.w	r3, #4294967295
 8004f02:	603b      	str	r3, [r7, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004f04:	686c      	ldr	r4, [r5, #4]
 8004f06:	686b      	ldr	r3, [r5, #4]
 8004f08:	68aa      	ldr	r2, [r5, #8]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	42a3      	cmp	r3, r4
 8004f0e:	d913      	bls.n	8004f38 <HAL_FLASHEx_Erase+0x64>
        FLASH_PageErase(index);
 8004f10:	4620      	mov	r0, r4
 8004f12:	f7ff ffd1 	bl	8004eb8 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004f1a:	f7ff ff13 	bl	8004d44 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 8004f1e:	4606      	mov	r6, r0
 8004f20:	b948      	cbnz	r0, 8004f36 <HAL_FLASHEx_Erase+0x62>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004f22:	3401      	adds	r4, #1
 8004f24:	e7ef      	b.n	8004f06 <HAL_FLASHEx_Erase+0x32>
      FLASH_MassErase();
 8004f26:	f7ff ff7f 	bl	8004e28 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f2a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004f2e:	f7ff ff09 	bl	8004d44 <FLASH_WaitForLastOperation>
 8004f32:	4606      	mov	r6, r0
 8004f34:	e002      	b.n	8004f3c <HAL_FLASHEx_Erase+0x68>
          *PageError = index;
 8004f36:	603c      	str	r4, [r7, #0]
      FLASH_AcknowledgePageErase();
 8004f38:	f7ff ffb4 	bl	8004ea4 <FLASH_AcknowledgePageErase>
    FLASH_FlushCaches();
 8004f3c:	f7ff ff7e 	bl	8004e3c <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8004f40:	4b03      	ldr	r3, [pc, #12]	@ (8004f50 <HAL_FLASHEx_Erase+0x7c>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	701a      	strb	r2, [r3, #0]
}
 8004f46:	4630      	mov	r0, r6
 8004f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8004f4a:	2602      	movs	r6, #2
 8004f4c:	e7fb      	b.n	8004f46 <HAL_FLASHEx_Erase+0x72>
 8004f4e:	bf00      	nop
 8004f50:	20000640 	.word	0x20000640

08004f54 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f54:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 8004f56:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f58:	e069      	b.n	800502e <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f5a:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f5c:	005e      	lsls	r6, r3, #1
 8004f5e:	2403      	movs	r4, #3
 8004f60:	40b4      	lsls	r4, r6
 8004f62:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f66:	68cc      	ldr	r4, [r1, #12]
 8004f68:	40b4      	lsls	r4, r6
 8004f6a:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8004f6c:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f6e:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f70:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f74:	684c      	ldr	r4, [r1, #4]
 8004f76:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8004f7a:	409c      	lsls	r4, r3
 8004f7c:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8004f7e:	6044      	str	r4, [r0, #4]
 8004f80:	e066      	b.n	8005050 <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f82:	08dd      	lsrs	r5, r3, #3
 8004f84:	3508      	adds	r5, #8
 8004f86:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f8a:	f003 0c07 	and.w	ip, r3, #7
 8004f8e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004f92:	f04f 0e0f 	mov.w	lr, #15
 8004f96:	fa0e fe0c 	lsl.w	lr, lr, ip
 8004f9a:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f9e:	690c      	ldr	r4, [r1, #16]
 8004fa0:	fa04 f40c 	lsl.w	r4, r4, ip
 8004fa4:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8004fa8:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8004fac:	e067      	b.n	800507e <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004fae:	2402      	movs	r4, #2
 8004fb0:	e000      	b.n	8004fb4 <HAL_GPIO_Init+0x60>
 8004fb2:	2400      	movs	r4, #0
 8004fb4:	fa04 f40e 	lsl.w	r4, r4, lr
 8004fb8:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004fba:	f10c 0c02 	add.w	ip, ip, #2
 8004fbe:	4d4b      	ldr	r5, [pc, #300]	@ (80050ec <HAL_GPIO_Init+0x198>)
 8004fc0:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004fc4:	4c4a      	ldr	r4, [pc, #296]	@ (80050f0 <HAL_GPIO_Init+0x19c>)
 8004fc6:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8004fc8:	43d4      	mvns	r4, r2
 8004fca:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004fce:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8004fd2:	f41c 1f80 	tst.w	ip, #1048576	@ 0x100000
 8004fd6:	d001      	beq.n	8004fdc <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8004fd8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8004fdc:	4d44      	ldr	r5, [pc, #272]	@ (80050f0 <HAL_GPIO_Init+0x19c>)
 8004fde:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8004fe0:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8004fe2:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004fe6:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8004fea:	f41c 1f00 	tst.w	ip, #2097152	@ 0x200000
 8004fee:	d001      	beq.n	8004ff4 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 8004ff0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8004ff4:	4d3e      	ldr	r5, [pc, #248]	@ (80050f0 <HAL_GPIO_Init+0x19c>)
 8004ff6:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004ff8:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004ffc:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005000:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8005004:	f41c 3f80 	tst.w	ip, #65536	@ 0x10000
 8005008:	d001      	beq.n	800500e <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 800500a:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800500e:	4d38      	ldr	r5, [pc, #224]	@ (80050f0 <HAL_GPIO_Init+0x19c>)
 8005010:	f8c5 6080 	str.w	r6, [r5, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8005014:	f8d5 5084 	ldr.w	r5, [r5, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005018:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800501a:	684e      	ldr	r6, [r1, #4]
 800501c:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8005020:	d001      	beq.n	8005026 <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 8005022:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8005026:	4a32      	ldr	r2, [pc, #200]	@ (80050f0 <HAL_GPIO_Init+0x19c>)
 8005028:	f8c2 4084 	str.w	r4, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 800502c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800502e:	680a      	ldr	r2, [r1, #0]
 8005030:	fa32 f403 	lsrs.w	r4, r2, r3
 8005034:	d058      	beq.n	80050e8 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005036:	f04f 0c01 	mov.w	ip, #1
 800503a:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 800503e:	ea1c 0202 	ands.w	r2, ip, r2
 8005042:	d0f3      	beq.n	800502c <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005044:	684c      	ldr	r4, [r1, #4]
 8005046:	f004 0403 	and.w	r4, r4, #3
 800504a:	3c01      	subs	r4, #1
 800504c:	2c01      	cmp	r4, #1
 800504e:	d984      	bls.n	8004f5a <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005050:	684c      	ldr	r4, [r1, #4]
 8005052:	f004 0403 	and.w	r4, r4, #3
 8005056:	2c03      	cmp	r4, #3
 8005058:	d00c      	beq.n	8005074 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 800505a:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800505c:	005d      	lsls	r5, r3, #1
 800505e:	f04f 0c03 	mov.w	ip, #3
 8005062:	fa0c fc05 	lsl.w	ip, ip, r5
 8005066:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800506a:	688c      	ldr	r4, [r1, #8]
 800506c:	40ac      	lsls	r4, r5
 800506e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8005072:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005074:	684c      	ldr	r4, [r1, #4]
 8005076:	f004 0403 	and.w	r4, r4, #3
 800507a:	2c02      	cmp	r4, #2
 800507c:	d081      	beq.n	8004f82 <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 800507e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005080:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8005084:	f04f 0c03 	mov.w	ip, #3
 8005088:	fa0c fc0e 	lsl.w	ip, ip, lr
 800508c:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005090:	684c      	ldr	r4, [r1, #4]
 8005092:	f004 0403 	and.w	r4, r4, #3
 8005096:	fa04 f40e 	lsl.w	r4, r4, lr
 800509a:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800509e:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80050a0:	684c      	ldr	r4, [r1, #4]
 80050a2:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 80050a6:	d0c1      	beq.n	800502c <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 80050a8:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80050ac:	f10c 0502 	add.w	r5, ip, #2
 80050b0:	4c0e      	ldr	r4, [pc, #56]	@ (80050ec <HAL_GPIO_Init+0x198>)
 80050b2:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80050b6:	f003 0e03 	and.w	lr, r3, #3
 80050ba:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80050be:	2407      	movs	r4, #7
 80050c0:	fa04 f40e 	lsl.w	r4, r4, lr
 80050c4:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80050c8:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 80050cc:	f43f af71 	beq.w	8004fb2 <HAL_GPIO_Init+0x5e>
 80050d0:	4c08      	ldr	r4, [pc, #32]	@ (80050f4 <HAL_GPIO_Init+0x1a0>)
 80050d2:	42a0      	cmp	r0, r4
 80050d4:	d006      	beq.n	80050e4 <HAL_GPIO_Init+0x190>
 80050d6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80050da:	42a0      	cmp	r0, r4
 80050dc:	f43f af67 	beq.w	8004fae <HAL_GPIO_Init+0x5a>
 80050e0:	2407      	movs	r4, #7
 80050e2:	e767      	b.n	8004fb4 <HAL_GPIO_Init+0x60>
 80050e4:	2401      	movs	r4, #1
 80050e6:	e765      	b.n	8004fb4 <HAL_GPIO_Init+0x60>
  }
}
 80050e8:	bd70      	pop	{r4, r5, r6, pc}
 80050ea:	bf00      	nop
 80050ec:	40010000 	.word	0x40010000
 80050f0:	58000800 	.word	0x58000800
 80050f4:	48000400 	.word	0x48000400

080050f8 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 80050f8:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80050fa:	fa31 f203 	lsrs.w	r2, r1, r3
 80050fe:	d071      	beq.n	80051e4 <HAL_GPIO_DeInit+0xec>
{
 8005100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005102:	e02e      	b.n	8005162 <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005104:	2502      	movs	r5, #2
 8005106:	e000      	b.n	800510a <HAL_GPIO_DeInit+0x12>
 8005108:	2500      	movs	r5, #0
 800510a:	fa05 f50c 	lsl.w	r5, r5, ip
 800510e:	42a5      	cmp	r5, r4
 8005110:	d049      	beq.n	80051a6 <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005112:	6804      	ldr	r4, [r0, #0]
 8005114:	005d      	lsls	r5, r3, #1
 8005116:	f04f 0c03 	mov.w	ip, #3
 800511a:	fa0c fc05 	lsl.w	ip, ip, r5
 800511e:	ea44 040c 	orr.w	r4, r4, ip
 8005122:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005124:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8005128:	f10e 0e08 	add.w	lr, lr, #8
 800512c:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8005130:	f003 0607 	and.w	r6, r3, #7
 8005134:	00b6      	lsls	r6, r6, #2
 8005136:	250f      	movs	r5, #15
 8005138:	40b5      	lsls	r5, r6
 800513a:	ea24 0405 	bic.w	r4, r4, r5
 800513e:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005142:	6884      	ldr	r4, [r0, #8]
 8005144:	ea24 040c 	bic.w	r4, r4, ip
 8005148:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800514a:	6844      	ldr	r4, [r0, #4]
 800514c:	ea24 0202 	bic.w	r2, r4, r2
 8005150:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005152:	68c2      	ldr	r2, [r0, #12]
 8005154:	ea22 020c 	bic.w	r2, r2, ip
 8005158:	60c2      	str	r2, [r0, #12]
    }

    position++;
 800515a:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 800515c:	fa31 f203 	lsrs.w	r2, r1, r3
 8005160:	d03f      	beq.n	80051e2 <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005162:	2201      	movs	r2, #1
 8005164:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8005166:	ea12 0701 	ands.w	r7, r2, r1
 800516a:	d0f6      	beq.n	800515a <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 800516c:	089e      	lsrs	r6, r3, #2
 800516e:	1cb5      	adds	r5, r6, #2
 8005170:	4c1d      	ldr	r4, [pc, #116]	@ (80051e8 <HAL_GPIO_DeInit+0xf0>)
 8005172:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005176:	f003 0c03 	and.w	ip, r3, #3
 800517a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800517e:	f04f 0e07 	mov.w	lr, #7
 8005182:	fa0e fe0c 	lsl.w	lr, lr, ip
 8005186:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800518a:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 800518e:	d0bb      	beq.n	8005108 <HAL_GPIO_DeInit+0x10>
 8005190:	4d16      	ldr	r5, [pc, #88]	@ (80051ec <HAL_GPIO_DeInit+0xf4>)
 8005192:	42a8      	cmp	r0, r5
 8005194:	d005      	beq.n	80051a2 <HAL_GPIO_DeInit+0xaa>
 8005196:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800519a:	42a8      	cmp	r0, r5
 800519c:	d0b2      	beq.n	8005104 <HAL_GPIO_DeInit+0xc>
 800519e:	2507      	movs	r5, #7
 80051a0:	e7b3      	b.n	800510a <HAL_GPIO_DeInit+0x12>
 80051a2:	2501      	movs	r5, #1
 80051a4:	e7b1      	b.n	800510a <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 80051a6:	4c12      	ldr	r4, [pc, #72]	@ (80051f0 <HAL_GPIO_DeInit+0xf8>)
 80051a8:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
 80051ac:	ea25 0507 	bic.w	r5, r5, r7
 80051b0:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80051b4:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
 80051b8:	ea25 0507 	bic.w	r5, r5, r7
 80051bc:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 80051c0:	6825      	ldr	r5, [r4, #0]
 80051c2:	ea25 0507 	bic.w	r5, r5, r7
 80051c6:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80051c8:	6865      	ldr	r5, [r4, #4]
 80051ca:	ea25 0507 	bic.w	r5, r5, r7
 80051ce:	6065      	str	r5, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80051d0:	4d05      	ldr	r5, [pc, #20]	@ (80051e8 <HAL_GPIO_DeInit+0xf0>)
 80051d2:	3602      	adds	r6, #2
 80051d4:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 80051d8:	ea24 040e 	bic.w	r4, r4, lr
 80051dc:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 80051e0:	e797      	b.n	8005112 <HAL_GPIO_DeInit+0x1a>
  }
}
 80051e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	40010000 	.word	0x40010000
 80051ec:	48000400 	.word	0x48000400
 80051f0:	58000800 	.word	0x58000800

080051f4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051f4:	b10a      	cbz	r2, 80051fa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80051f6:	6181      	str	r1, [r0, #24]
 80051f8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80051fa:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 80051fc:	4770      	bx	lr

080051fe <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80051fe:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005200:	ea01 0203 	and.w	r2, r1, r3
 8005204:	ea21 0103 	bic.w	r1, r1, r3
 8005208:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800520c:	6181      	str	r1, [r0, #24]
}
 800520e:	4770      	bx	lr

08005210 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005210:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005212:	4b05      	ldr	r3, [pc, #20]	@ (8005228 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	4203      	tst	r3, r0
 8005218:	d100      	bne.n	800521c <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 800521a:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800521c:	4b02      	ldr	r3, [pc, #8]	@ (8005228 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800521e:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005220:	f7fd fda6 	bl	8002d70 <HAL_GPIO_EXTI_Callback>
}
 8005224:	e7f9      	b.n	800521a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8005226:	bf00      	nop
 8005228:	58000800 	.word	0x58000800

0800522c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800522c:	6803      	ldr	r3, [r0, #0]
 800522e:	699a      	ldr	r2, [r3, #24]
 8005230:	f012 0f02 	tst.w	r2, #2
 8005234:	d001      	beq.n	800523a <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005236:	2200      	movs	r2, #0
 8005238:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800523a:	6803      	ldr	r3, [r0, #0]
 800523c:	699a      	ldr	r2, [r3, #24]
 800523e:	f012 0f01 	tst.w	r2, #1
 8005242:	d103      	bne.n	800524c <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005244:	699a      	ldr	r2, [r3, #24]
 8005246:	f042 0201 	orr.w	r2, r2, #1
 800524a:	619a      	str	r2, [r3, #24]
  }
}
 800524c:	4770      	bx	lr

0800524e <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800524e:	b410      	push	{r4}
 8005250:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005252:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005256:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800525a:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800525c:	4321      	orrs	r1, r4
 800525e:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005262:	6802      	ldr	r2, [r0, #0]
 8005264:	6853      	ldr	r3, [r2, #4]
 8005266:	0d64      	lsrs	r4, r4, #21
 8005268:	f404 6480 	and.w	r4, r4, #1024	@ 0x400
 800526c:	f044 747f 	orr.w	r4, r4, #66846720	@ 0x3fc0000
 8005270:	f444 3458 	orr.w	r4, r4, #221184	@ 0x36000
 8005274:	f444 747f 	orr.w	r4, r4, #1020	@ 0x3fc
 8005278:	f044 0403 	orr.w	r4, r4, #3
 800527c:	ea23 0304 	bic.w	r3, r3, r4
 8005280:	430b      	orrs	r3, r1
 8005282:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005284:	bc10      	pop	{r4}
 8005286:	4770      	bx	lr

08005288 <I2C_Enable_IRQ>:
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005288:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800528a:	4a1c      	ldr	r2, [pc, #112]	@ (80052fc <I2C_Enable_IRQ+0x74>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d017      	beq.n	80052c0 <I2C_Enable_IRQ+0x38>
 8005290:	4a1b      	ldr	r2, [pc, #108]	@ (8005300 <I2C_Enable_IRQ+0x78>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d014      	beq.n	80052c0 <I2C_Enable_IRQ+0x38>
      tmpisr |= I2C_IT_TCI;
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005296:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 800529a:	d12a      	bne.n	80052f2 <I2C_Enable_IRQ+0x6a>
  uint32_t tmpisr = 0U;
 800529c:	2300      	movs	r3, #0
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800529e:	f011 0f01 	tst.w	r1, #1
 80052a2:	d001      	beq.n	80052a8 <I2C_Enable_IRQ+0x20>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80052a4:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80052a8:	f011 0f02 	tst.w	r1, #2
 80052ac:	d001      	beq.n	80052b2 <I2C_Enable_IRQ+0x2a>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80052ae:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80052b2:	2910      	cmp	r1, #16
 80052b4:	d01f      	beq.n	80052f6 <I2C_Enable_IRQ+0x6e>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80052b6:	2920      	cmp	r1, #32
 80052b8:	d10e      	bne.n	80052d8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80052ba:	f043 0320 	orr.w	r3, r3, #32
 80052be:	e00b      	b.n	80052d8 <I2C_Enable_IRQ+0x50>
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80052c0:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 80052c4:	d103      	bne.n	80052ce <I2C_Enable_IRQ+0x46>
    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80052c6:	2910      	cmp	r1, #16
 80052c8:	d00b      	beq.n	80052e2 <I2C_Enable_IRQ+0x5a>
  uint32_t tmpisr = 0U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	e000      	b.n	80052d0 <I2C_Enable_IRQ+0x48>
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80052ce:	23b8      	movs	r3, #184	@ 0xb8
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80052d0:	2920      	cmp	r1, #32
 80052d2:	d008      	beq.n	80052e6 <I2C_Enable_IRQ+0x5e>
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80052d4:	2940      	cmp	r1, #64	@ 0x40
 80052d6:	d009      	beq.n	80052ec <I2C_Enable_IRQ+0x64>
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80052d8:	6801      	ldr	r1, [r0, #0]
 80052da:	680a      	ldr	r2, [r1, #0]
 80052dc:	4313      	orrs	r3, r2
 80052de:	600b      	str	r3, [r1, #0]
}
 80052e0:	4770      	bx	lr
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80052e2:	2390      	movs	r3, #144	@ 0x90
 80052e4:	e7f4      	b.n	80052d0 <I2C_Enable_IRQ+0x48>
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80052e6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80052ea:	e7f3      	b.n	80052d4 <I2C_Enable_IRQ+0x4c>
      tmpisr |= I2C_IT_TCI;
 80052ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052f0:	e7f2      	b.n	80052d8 <I2C_Enable_IRQ+0x50>
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80052f2:	23b8      	movs	r3, #184	@ 0xb8
 80052f4:	e7d3      	b.n	800529e <I2C_Enable_IRQ+0x16>
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80052f6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80052fa:	e7dc      	b.n	80052b6 <I2C_Enable_IRQ+0x2e>
 80052fc:	08005f19 	.word	0x08005f19
 8005300:	08005df9 	.word	0x08005df9

08005304 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005304:	f011 0f01 	tst.w	r1, #1
 8005308:	d009      	beq.n	800531e <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800530a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800530e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005312:	2b28      	cmp	r3, #40	@ 0x28
 8005314:	d001      	beq.n	800531a <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005316:	23f2      	movs	r3, #242	@ 0xf2
 8005318:	e002      	b.n	8005320 <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800531a:	2342      	movs	r3, #66	@ 0x42
 800531c:	e000      	b.n	8005320 <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 800531e:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005320:	f011 0f02 	tst.w	r1, #2
 8005324:	d009      	beq.n	800533a <I2C_Disable_IRQ+0x36>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005326:	f043 0c44 	orr.w	ip, r3, #68	@ 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800532a:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800532e:	f002 0228 	and.w	r2, r2, #40	@ 0x28
 8005332:	2a28      	cmp	r2, #40	@ 0x28
 8005334:	d010      	beq.n	8005358 <I2C_Disable_IRQ+0x54>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005336:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800533a:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 800533e:	d10d      	bne.n	800535c <I2C_Disable_IRQ+0x58>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005340:	2910      	cmp	r1, #16
 8005342:	d00e      	beq.n	8005362 <I2C_Disable_IRQ+0x5e>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005344:	2920      	cmp	r1, #32
 8005346:	d00f      	beq.n	8005368 <I2C_Disable_IRQ+0x64>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005348:	2940      	cmp	r1, #64	@ 0x40
 800534a:	d010      	beq.n	800536e <I2C_Disable_IRQ+0x6a>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800534c:	6801      	ldr	r1, [r0, #0]
 800534e:	680a      	ldr	r2, [r1, #0]
 8005350:	ea22 0303 	bic.w	r3, r2, r3
 8005354:	600b      	str	r3, [r1, #0]
}
 8005356:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005358:	4663      	mov	r3, ip
 800535a:	e7ee      	b.n	800533a <I2C_Disable_IRQ+0x36>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800535c:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005360:	e7ee      	b.n	8005340 <I2C_Disable_IRQ+0x3c>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005362:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005366:	e7ed      	b.n	8005344 <I2C_Disable_IRQ+0x40>
    tmpisr |= I2C_IT_STOPI;
 8005368:	f043 0320 	orr.w	r3, r3, #32
 800536c:	e7ec      	b.n	8005348 <I2C_Disable_IRQ+0x44>
    tmpisr |= I2C_IT_TCI;
 800536e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005372:	e7eb      	b.n	800534c <I2C_Disable_IRQ+0x48>

08005374 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8005374:	2800      	cmp	r0, #0
 8005376:	d059      	beq.n	800542c <HAL_I2C_Init+0xb8>
{
 8005378:	b510      	push	{r4, lr}
 800537a:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800537c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8005380:	2b00      	cmp	r3, #0
 8005382:	d043      	beq.n	800540c <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005384:	2324      	movs	r3, #36	@ 0x24
 8005386:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800538a:	6822      	ldr	r2, [r4, #0]
 800538c:	6813      	ldr	r3, [r2, #0]
 800538e:	f023 0301 	bic.w	r3, r3, #1
 8005392:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005394:	6863      	ldr	r3, [r4, #4]
 8005396:	6822      	ldr	r2, [r4, #0]
 8005398:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800539c:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800539e:	6822      	ldr	r2, [r4, #0]
 80053a0:	6893      	ldr	r3, [r2, #8]
 80053a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80053a6:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053a8:	68e3      	ldr	r3, [r4, #12]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d033      	beq.n	8005416 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80053ae:	68a3      	ldr	r3, [r4, #8]
 80053b0:	6822      	ldr	r2, [r4, #0]
 80053b2:	f443 4304 	orr.w	r3, r3, #33792	@ 0x8400
 80053b6:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80053b8:	68e3      	ldr	r3, [r4, #12]
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d031      	beq.n	8005422 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80053be:	6822      	ldr	r2, [r4, #0]
 80053c0:	6853      	ldr	r3, [r2, #4]
 80053c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80053c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053ca:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80053cc:	6822      	ldr	r2, [r4, #0]
 80053ce:	68d3      	ldr	r3, [r2, #12]
 80053d0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80053d4:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80053d6:	6923      	ldr	r3, [r4, #16]
 80053d8:	6962      	ldr	r2, [r4, #20]
 80053da:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80053dc:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80053de:	6822      	ldr	r2, [r4, #0]
 80053e0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80053e4:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80053e6:	69e3      	ldr	r3, [r4, #28]
 80053e8:	6a21      	ldr	r1, [r4, #32]
 80053ea:	6822      	ldr	r2, [r4, #0]
 80053ec:	430b      	orrs	r3, r1
 80053ee:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80053f0:	6822      	ldr	r2, [r4, #0]
 80053f2:	6813      	ldr	r3, [r2, #0]
 80053f4:	f043 0301 	orr.w	r3, r3, #1
 80053f8:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053fa:	2000      	movs	r0, #0
 80053fc:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80053fe:	2320      	movs	r3, #32
 8005400:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005404:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005406:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 800540a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800540c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8005410:	f7fc f8fc 	bl	800160c <HAL_I2C_MspInit>
 8005414:	e7b6      	b.n	8005384 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005416:	68a3      	ldr	r3, [r4, #8]
 8005418:	6822      	ldr	r2, [r4, #0]
 800541a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800541e:	6093      	str	r3, [r2, #8]
 8005420:	e7ca      	b.n	80053b8 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005428:	605a      	str	r2, [r3, #4]
 800542a:	e7c8      	b.n	80053be <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 800542c:	2001      	movs	r0, #1
}
 800542e:	4770      	bx	lr

08005430 <HAL_I2C_Master_Transmit_IT>:
{
 8005430:	b530      	push	{r4, r5, lr}
 8005432:	b083      	sub	sp, #12
 8005434:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005436:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 800543a:	b2c0      	uxtb	r0, r0
 800543c:	2820      	cmp	r0, #32
 800543e:	d137      	bne.n	80054b0 <HAL_I2C_Master_Transmit_IT+0x80>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005440:	6820      	ldr	r0, [r4, #0]
 8005442:	6980      	ldr	r0, [r0, #24]
 8005444:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 8005448:	d134      	bne.n	80054b4 <HAL_I2C_Master_Transmit_IT+0x84>
    __HAL_LOCK(hi2c);
 800544a:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 800544e:	2801      	cmp	r0, #1
 8005450:	d032      	beq.n	80054b8 <HAL_I2C_Master_Transmit_IT+0x88>
 8005452:	2001      	movs	r0, #1
 8005454:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005458:	2021      	movs	r0, #33	@ 0x21
 800545a:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800545e:	2010      	movs	r0, #16
 8005460:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005464:	2000      	movs	r0, #0
 8005466:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->pBuffPtr    = pData;
 8005468:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800546a:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800546c:	4b13      	ldr	r3, [pc, #76]	@ (80054bc <HAL_I2C_Master_Transmit_IT+0x8c>)
 800546e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8005470:	4b13      	ldr	r3, [pc, #76]	@ (80054c0 <HAL_I2C_Master_Transmit_IT+0x90>)
 8005472:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005474:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005476:	b29b      	uxth	r3, r3
 8005478:	2bff      	cmp	r3, #255	@ 0xff
 800547a:	d914      	bls.n	80054a6 <HAL_I2C_Master_Transmit_IT+0x76>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800547c:	23ff      	movs	r3, #255	@ 0xff
 800547e:	8523      	strh	r3, [r4, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005480:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8005484:	4a0f      	ldr	r2, [pc, #60]	@ (80054c4 <HAL_I2C_Master_Transmit_IT+0x94>)
 8005486:	9200      	str	r2, [sp, #0]
 8005488:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 800548c:	4620      	mov	r0, r4
 800548e:	f7ff fede 	bl	800524e <I2C_TransferConfig>
    __HAL_UNLOCK(hi2c);
 8005492:	2500      	movs	r5, #0
 8005494:	f884 5040 	strb.w	r5, [r4, #64]	@ 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005498:	2101      	movs	r1, #1
 800549a:	4620      	mov	r0, r4
 800549c:	f7ff fef4 	bl	8005288 <I2C_Enable_IRQ>
    return HAL_OK;
 80054a0:	4628      	mov	r0, r5
}
 80054a2:	b003      	add	sp, #12
 80054a4:	bd30      	pop	{r4, r5, pc}
      hi2c->XferSize = hi2c->XferCount;
 80054a6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80054a8:	8523      	strh	r3, [r4, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80054aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80054ae:	e7e9      	b.n	8005484 <HAL_I2C_Master_Transmit_IT+0x54>
    return HAL_BUSY;
 80054b0:	2002      	movs	r0, #2
 80054b2:	e7f6      	b.n	80054a2 <HAL_I2C_Master_Transmit_IT+0x72>
      return HAL_BUSY;
 80054b4:	2002      	movs	r0, #2
 80054b6:	e7f4      	b.n	80054a2 <HAL_I2C_Master_Transmit_IT+0x72>
    __HAL_LOCK(hi2c);
 80054b8:	2002      	movs	r0, #2
 80054ba:	e7f2      	b.n	80054a2 <HAL_I2C_Master_Transmit_IT+0x72>
 80054bc:	ffff0000 	.word	0xffff0000
 80054c0:	08005c79 	.word	0x08005c79
 80054c4:	80002000 	.word	0x80002000

080054c8 <HAL_I2C_Master_Receive_IT>:
{
 80054c8:	b530      	push	{r4, r5, lr}
 80054ca:	b083      	sub	sp, #12
 80054cc:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80054ce:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 80054d2:	b2c0      	uxtb	r0, r0
 80054d4:	2820      	cmp	r0, #32
 80054d6:	d137      	bne.n	8005548 <HAL_I2C_Master_Receive_IT+0x80>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80054d8:	6820      	ldr	r0, [r4, #0]
 80054da:	6980      	ldr	r0, [r0, #24]
 80054dc:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 80054e0:	d134      	bne.n	800554c <HAL_I2C_Master_Receive_IT+0x84>
    __HAL_LOCK(hi2c);
 80054e2:	f894 0040 	ldrb.w	r0, [r4, #64]	@ 0x40
 80054e6:	2801      	cmp	r0, #1
 80054e8:	d032      	beq.n	8005550 <HAL_I2C_Master_Receive_IT+0x88>
 80054ea:	2001      	movs	r0, #1
 80054ec:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80054f0:	2022      	movs	r0, #34	@ 0x22
 80054f2:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80054f6:	2010      	movs	r0, #16
 80054f8:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80054fc:	2000      	movs	r0, #0
 80054fe:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->pBuffPtr    = pData;
 8005500:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005502:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005504:	4b13      	ldr	r3, [pc, #76]	@ (8005554 <HAL_I2C_Master_Receive_IT+0x8c>)
 8005506:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8005508:	4b13      	ldr	r3, [pc, #76]	@ (8005558 <HAL_I2C_Master_Receive_IT+0x90>)
 800550a:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800550c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800550e:	b29b      	uxth	r3, r3
 8005510:	2bff      	cmp	r3, #255	@ 0xff
 8005512:	d914      	bls.n	800553e <HAL_I2C_Master_Receive_IT+0x76>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005514:	23ff      	movs	r3, #255	@ 0xff
 8005516:	8523      	strh	r3, [r4, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005518:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800551c:	4a0f      	ldr	r2, [pc, #60]	@ (800555c <HAL_I2C_Master_Receive_IT+0x94>)
 800551e:	9200      	str	r2, [sp, #0]
 8005520:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 8005524:	4620      	mov	r0, r4
 8005526:	f7ff fe92 	bl	800524e <I2C_TransferConfig>
    __HAL_UNLOCK(hi2c);
 800552a:	2500      	movs	r5, #0
 800552c:	f884 5040 	strb.w	r5, [r4, #64]	@ 0x40
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005530:	2102      	movs	r1, #2
 8005532:	4620      	mov	r0, r4
 8005534:	f7ff fea8 	bl	8005288 <I2C_Enable_IRQ>
    return HAL_OK;
 8005538:	4628      	mov	r0, r5
}
 800553a:	b003      	add	sp, #12
 800553c:	bd30      	pop	{r4, r5, pc}
      hi2c->XferSize = hi2c->XferCount;
 800553e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005540:	8523      	strh	r3, [r4, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005542:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005546:	e7e9      	b.n	800551c <HAL_I2C_Master_Receive_IT+0x54>
    return HAL_BUSY;
 8005548:	2002      	movs	r0, #2
 800554a:	e7f6      	b.n	800553a <HAL_I2C_Master_Receive_IT+0x72>
      return HAL_BUSY;
 800554c:	2002      	movs	r0, #2
 800554e:	e7f4      	b.n	800553a <HAL_I2C_Master_Receive_IT+0x72>
    __HAL_LOCK(hi2c);
 8005550:	2002      	movs	r0, #2
 8005552:	e7f2      	b.n	800553a <HAL_I2C_Master_Receive_IT+0x72>
 8005554:	ffff0000 	.word	0xffff0000
 8005558:	08005c79 	.word	0x08005c79
 800555c:	80002400 	.word	0x80002400

08005560 <HAL_I2C_EV_IRQHandler>:
{
 8005560:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005562:	6803      	ldr	r3, [r0, #0]
 8005564:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005566:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8005568:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800556a:	b103      	cbz	r3, 800556e <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 800556c:	4798      	blx	r3
}
 800556e:	bd08      	pop	{r3, pc}

08005570 <I2C_ITMasterSeqCplt>:
{
 8005570:	b538      	push	{r3, r4, r5, lr}
 8005572:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005574:	2300      	movs	r3, #0
 8005576:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800557a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b21      	cmp	r3, #33	@ 0x21
 8005582:	d00f      	beq.n	80055a4 <I2C_ITMasterSeqCplt+0x34>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005584:	2320      	movs	r3, #32
 8005586:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800558a:	2312      	movs	r3, #18
 800558c:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800558e:	2500      	movs	r5, #0
 8005590:	6345      	str	r5, [r0, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005592:	2102      	movs	r1, #2
 8005594:	f7ff feb6 	bl	8005304 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005598:	f884 5040 	strb.w	r5, [r4, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800559c:	4620      	mov	r0, r4
 800559e:	f7fc f8f0 	bl	8001782 <HAL_I2C_MasterRxCpltCallback>
}
 80055a2:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->State         = HAL_I2C_STATE_READY;
 80055a4:	2320      	movs	r3, #32
 80055a6:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80055aa:	2311      	movs	r3, #17
 80055ac:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80055ae:	2500      	movs	r5, #0
 80055b0:	6345      	str	r5, [r0, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80055b2:	2101      	movs	r1, #1
 80055b4:	f7ff fea6 	bl	8005304 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80055b8:	f884 5040 	strb.w	r5, [r4, #64]	@ 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80055bc:	4620      	mov	r0, r4
 80055be:	f7fc f8df 	bl	8001780 <HAL_I2C_MasterTxCpltCallback>
 80055c2:	e7ee      	b.n	80055a2 <I2C_ITMasterSeqCplt+0x32>

080055c4 <HAL_I2C_SlaveTxCpltCallback>:
}
 80055c4:	4770      	bx	lr

080055c6 <HAL_I2C_SlaveRxCpltCallback>:
}
 80055c6:	4770      	bx	lr

080055c8 <I2C_ITSlaveSeqCplt>:
{
 80055c8:	b510      	push	{r4, lr}
 80055ca:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80055cc:	6803      	ldr	r3, [r0, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055d0:	2100      	movs	r1, #0
 80055d2:	f880 1042 	strb.w	r1, [r0, #66]	@ 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80055d6:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 80055da:	d00e      	beq.n	80055fa <I2C_ITSlaveSeqCplt+0x32>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80055e2:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80055e4:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b29      	cmp	r3, #41	@ 0x29
 80055ec:	d00d      	beq.n	800560a <I2C_ITSlaveSeqCplt+0x42>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80055ee:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80055f6:	d018      	beq.n	800562a <I2C_ITSlaveSeqCplt+0x62>
}
 80055f8:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80055fa:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 80055fe:	d0f1      	beq.n	80055e4 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005606:	601a      	str	r2, [r3, #0]
 8005608:	e7ec      	b.n	80055e4 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800560a:	2328      	movs	r3, #40	@ 0x28
 800560c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005610:	2321      	movs	r3, #33	@ 0x21
 8005612:	6323      	str	r3, [r4, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005614:	2101      	movs	r1, #1
 8005616:	4620      	mov	r0, r4
 8005618:	f7ff fe74 	bl	8005304 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800561c:	2300      	movs	r3, #0
 800561e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005622:	4620      	mov	r0, r4
 8005624:	f7ff ffce 	bl	80055c4 <HAL_I2C_SlaveTxCpltCallback>
 8005628:	e7e6      	b.n	80055f8 <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800562a:	2328      	movs	r3, #40	@ 0x28
 800562c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005630:	2322      	movs	r3, #34	@ 0x22
 8005632:	6323      	str	r3, [r4, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005634:	2102      	movs	r1, #2
 8005636:	4620      	mov	r0, r4
 8005638:	f7ff fe64 	bl	8005304 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800563c:	2300      	movs	r3, #0
 800563e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005642:	4620      	mov	r0, r4
 8005644:	f7ff ffbf 	bl	80055c6 <HAL_I2C_SlaveRxCpltCallback>
}
 8005648:	e7d6      	b.n	80055f8 <I2C_ITSlaveSeqCplt+0x30>

0800564a <HAL_I2C_AddrCallback>:
}
 800564a:	4770      	bx	lr

0800564c <I2C_ITAddrCplt>:
{
 800564c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564e:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005650:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8005654:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005658:	2b28      	cmp	r3, #40	@ 0x28
 800565a:	d006      	beq.n	800566a <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800565c:	6803      	ldr	r3, [r0, #0]
 800565e:	2208      	movs	r2, #8
 8005660:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005662:	2300      	movs	r3, #0
 8005664:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
}
 8005668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 800566a:	6803      	ldr	r3, [r0, #0]
 800566c:	699e      	ldr	r6, [r3, #24]
 800566e:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005672:	699a      	ldr	r2, [r3, #24]
 8005674:	0c12      	lsrs	r2, r2, #16
 8005676:	f002 05fe 	and.w	r5, r2, #254	@ 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005680:	68df      	ldr	r7, [r3, #12]
 8005682:	f007 07fe 	and.w	r7, r7, #254	@ 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005686:	68c1      	ldr	r1, [r0, #12]
 8005688:	2902      	cmp	r1, #2
 800568a:	d122      	bne.n	80056d2 <I2C_ITAddrCplt+0x86>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800568c:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8005690:	f015 0f06 	tst.w	r5, #6
 8005694:	d110      	bne.n	80056b8 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 8005696:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8005698:	3101      	adds	r1, #1
 800569a:	6481      	str	r1, [r0, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800569c:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800569e:	2902      	cmp	r1, #2
 80056a0:	d1e2      	bne.n	8005668 <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 80056a2:	2100      	movs	r1, #0
 80056a4:	6481      	str	r1, [r0, #72]	@ 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80056a6:	2008      	movs	r0, #8
 80056a8:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 80056aa:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80056ae:	4631      	mov	r1, r6
 80056b0:	4620      	mov	r0, r4
 80056b2:	f7ff ffca 	bl	800564a <HAL_I2C_AddrCallback>
 80056b6:	e7d7      	b.n	8005668 <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80056b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80056bc:	f7ff fe22 	bl	8005304 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80056c0:	2300      	movs	r3, #0
 80056c2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80056c6:	463a      	mov	r2, r7
 80056c8:	4631      	mov	r1, r6
 80056ca:	4620      	mov	r0, r4
 80056cc:	f7ff ffbd 	bl	800564a <HAL_I2C_AddrCallback>
 80056d0:	e7ca      	b.n	8005668 <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80056d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80056d6:	f7ff fe15 	bl	8005304 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80056da:	2300      	movs	r3, #0
 80056dc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80056e0:	462a      	mov	r2, r5
 80056e2:	4631      	mov	r1, r6
 80056e4:	4620      	mov	r0, r4
 80056e6:	f7ff ffb0 	bl	800564a <HAL_I2C_AddrCallback>
 80056ea:	e7bd      	b.n	8005668 <I2C_ITAddrCplt+0x1c>

080056ec <HAL_I2C_ListenCpltCallback>:
}
 80056ec:	4770      	bx	lr
	...

080056f0 <I2C_ITListenCplt>:
{
 80056f0:	b510      	push	{r4, lr}
 80056f2:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056f4:	4b17      	ldr	r3, [pc, #92]	@ (8005754 <I2C_ITListenCplt+0x64>)
 80056f6:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80056f8:	2300      	movs	r3, #0
 80056fa:	6303      	str	r3, [r0, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80056fc:	2220      	movs	r2, #32
 80056fe:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005702:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005706:	6343      	str	r3, [r0, #52]	@ 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005708:	f011 0f04 	tst.w	r1, #4
 800570c:	d013      	beq.n	8005736 <I2C_ITListenCplt+0x46>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800570e:	6803      	ldr	r3, [r0, #0]
 8005710:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005712:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8005714:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005716:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8005718:	3301      	adds	r3, #1
 800571a:	6243      	str	r3, [r0, #36]	@ 0x24
    if ((hi2c->XferSize > 0U))
 800571c:	8d03      	ldrh	r3, [r0, #40]	@ 0x28
 800571e:	b153      	cbz	r3, 8005736 <I2C_ITListenCplt+0x46>
      hi2c->XferSize--;
 8005720:	3b01      	subs	r3, #1
 8005722:	8503      	strh	r3, [r0, #40]	@ 0x28
      hi2c->XferCount--;
 8005724:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8005726:	b29b      	uxth	r3, r3
 8005728:	3b01      	subs	r3, #1
 800572a:	b29b      	uxth	r3, r3
 800572c:	8543      	strh	r3, [r0, #42]	@ 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800572e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8005730:	f043 0304 	orr.w	r3, r3, #4
 8005734:	6443      	str	r3, [r0, #68]	@ 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005736:	f248 0103 	movw	r1, #32771	@ 0x8003
 800573a:	4620      	mov	r0, r4
 800573c:	f7ff fde2 	bl	8005304 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005740:	6823      	ldr	r3, [r4, #0]
 8005742:	2210      	movs	r2, #16
 8005744:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8005746:	2300      	movs	r3, #0
 8005748:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 800574c:	4620      	mov	r0, r4
 800574e:	f7ff ffcd 	bl	80056ec <HAL_I2C_ListenCpltCallback>
}
 8005752:	bd10      	pop	{r4, pc}
 8005754:	ffff0000 	.word	0xffff0000

08005758 <HAL_I2C_MemTxCpltCallback>:
}
 8005758:	4770      	bx	lr

0800575a <HAL_I2C_MemRxCpltCallback>:
}
 800575a:	4770      	bx	lr

0800575c <HAL_I2C_AbortCpltCallback>:
}
 800575c:	4770      	bx	lr

0800575e <I2C_TreatErrorCallback>:
{
 800575e:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005760:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b60      	cmp	r3, #96	@ 0x60
 8005768:	d006      	beq.n	8005778 <I2C_TreatErrorCallback+0x1a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800576a:	2300      	movs	r3, #0
 800576c:	6303      	str	r3, [r0, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800576e:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005772:	f7fc f807 	bl	8001784 <HAL_I2C_ErrorCallback>
}
 8005776:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8005778:	2320      	movs	r3, #32
 800577a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800577e:	2300      	movs	r3, #0
 8005780:	6303      	str	r3, [r0, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005782:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8005786:	f7ff ffe9 	bl	800575c <HAL_I2C_AbortCpltCallback>
 800578a:	e7f4      	b.n	8005776 <I2C_TreatErrorCallback+0x18>

0800578c <I2C_ITError>:
{
 800578c:	b510      	push	{r4, lr}
 800578e:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005790:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005794:	2200      	movs	r2, #0
 8005796:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800579a:	483b      	ldr	r0, [pc, #236]	@ (8005888 <I2C_ITError+0xfc>)
 800579c:	62e0      	str	r0, [r4, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800579e:	8562      	strh	r2, [r4, #42]	@ 0x2a
  hi2c->ErrorCode |= ErrorCode;
 80057a0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80057a2:	430a      	orrs	r2, r1
 80057a4:	6462      	str	r2, [r4, #68]	@ 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80057a6:	3b28      	subs	r3, #40	@ 0x28
 80057a8:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d819      	bhi.n	80057e2 <I2C_ITError+0x56>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80057ae:	2103      	movs	r1, #3
 80057b0:	4620      	mov	r0, r4
 80057b2:	f7ff fda7 	bl	8005304 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80057b6:	2328      	movs	r3, #40	@ 0x28
 80057b8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80057bc:	4b33      	ldr	r3, [pc, #204]	@ (800588c <I2C_ITError+0x100>)
 80057be:	6363      	str	r3, [r4, #52]	@ 0x34
  tmppreviousstate = hi2c->PreviousState;
 80057c0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80057c2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80057c4:	b11a      	cbz	r2, 80057ce <I2C_ITError+0x42>
 80057c6:	2b11      	cmp	r3, #17
 80057c8:	d01b      	beq.n	8005802 <I2C_ITError+0x76>
 80057ca:	2b21      	cmp	r3, #33	@ 0x21
 80057cc:	d019      	beq.n	8005802 <I2C_ITError+0x76>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80057ce:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80057d0:	b11a      	cbz	r2, 80057da <I2C_ITError+0x4e>
 80057d2:	2b12      	cmp	r3, #18
 80057d4:	d036      	beq.n	8005844 <I2C_ITError+0xb8>
 80057d6:	2b22      	cmp	r3, #34	@ 0x22
 80057d8:	d034      	beq.n	8005844 <I2C_ITError+0xb8>
    I2C_TreatErrorCallback(hi2c);
 80057da:	4620      	mov	r0, r4
 80057dc:	f7ff ffbf 	bl	800575e <I2C_TreatErrorCallback>
}
 80057e0:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80057e2:	f248 0103 	movw	r1, #32771	@ 0x8003
 80057e6:	4620      	mov	r0, r4
 80057e8:	f7ff fd8c 	bl	8005304 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80057ec:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b60      	cmp	r3, #96	@ 0x60
 80057f4:	d002      	beq.n	80057fc <I2C_ITError+0x70>
      hi2c->State         = HAL_I2C_STATE_READY;
 80057f6:	2320      	movs	r3, #32
 80057f8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->XferISR       = NULL;
 80057fc:	2300      	movs	r3, #0
 80057fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8005800:	e7de      	b.n	80057c0 <I2C_ITError+0x34>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005802:	6823      	ldr	r3, [r4, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 800580a:	d003      	beq.n	8005814 <I2C_ITError+0x88>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005812:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005814:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8005816:	f7ff fa2f 	bl	8004c78 <HAL_DMA_GetState>
 800581a:	2801      	cmp	r0, #1
 800581c:	d00e      	beq.n	800583c <I2C_ITError+0xb0>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800581e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005820:	4a1b      	ldr	r2, [pc, #108]	@ (8005890 <I2C_ITError+0x104>)
 8005822:	639a      	str	r2, [r3, #56]	@ 0x38
      __HAL_UNLOCK(hi2c);
 8005824:	2300      	movs	r3, #0
 8005826:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800582a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800582c:	f7ff f976 	bl	8004b1c <HAL_DMA_Abort_IT>
 8005830:	2800      	cmp	r0, #0
 8005832:	d0d5      	beq.n	80057e0 <I2C_ITError+0x54>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005834:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8005836:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8005838:	4798      	blx	r3
 800583a:	e7d1      	b.n	80057e0 <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 800583c:	4620      	mov	r0, r4
 800583e:	f7ff ff8e 	bl	800575e <I2C_TreatErrorCallback>
 8005842:	e7cd      	b.n	80057e0 <I2C_ITError+0x54>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005844:	6823      	ldr	r3, [r4, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 800584c:	d003      	beq.n	8005856 <I2C_ITError+0xca>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005854:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005856:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005858:	f7ff fa0e 	bl	8004c78 <HAL_DMA_GetState>
 800585c:	2801      	cmp	r0, #1
 800585e:	d00e      	beq.n	800587e <I2C_ITError+0xf2>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005860:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005862:	4a0b      	ldr	r2, [pc, #44]	@ (8005890 <I2C_ITError+0x104>)
 8005864:	639a      	str	r2, [r3, #56]	@ 0x38
      __HAL_UNLOCK(hi2c);
 8005866:	2300      	movs	r3, #0
 8005868:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800586c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800586e:	f7ff f955 	bl	8004b1c <HAL_DMA_Abort_IT>
 8005872:	2800      	cmp	r0, #0
 8005874:	d0b4      	beq.n	80057e0 <I2C_ITError+0x54>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005876:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005878:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800587a:	4798      	blx	r3
 800587c:	e7b0      	b.n	80057e0 <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 800587e:	4620      	mov	r0, r4
 8005880:	f7ff ff6d 	bl	800575e <I2C_TreatErrorCallback>
 8005884:	e7ac      	b.n	80057e0 <I2C_ITError+0x54>
 8005886:	bf00      	nop
 8005888:	ffff0000 	.word	0xffff0000
 800588c:	080059fd 	.word	0x080059fd
 8005890:	080060c5 	.word	0x080060c5

08005894 <I2C_ITSlaveCplt>:
{
 8005894:	b570      	push	{r4, r5, r6, lr}
 8005896:	4604      	mov	r4, r0
 8005898:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800589a:	6802      	ldr	r2, [r0, #0]
 800589c:	6816      	ldr	r6, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800589e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80058a2:	b2db      	uxtb	r3, r3
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058a4:	2120      	movs	r1, #32
 80058a6:	61d1      	str	r1, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80058a8:	2b21      	cmp	r3, #33	@ 0x21
 80058aa:	d00d      	beq.n	80058c8 <I2C_ITSlaveCplt+0x34>
 80058ac:	2b29      	cmp	r3, #41	@ 0x29
 80058ae:	d00b      	beq.n	80058c8 <I2C_ITSlaveCplt+0x34>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80058b0:	2b22      	cmp	r3, #34	@ 0x22
 80058b2:	d001      	beq.n	80058b8 <I2C_ITSlaveCplt+0x24>
 80058b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80058b6:	d10e      	bne.n	80058d6 <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80058b8:	f248 0102 	movw	r1, #32770	@ 0x8002
 80058bc:	4620      	mov	r0, r4
 80058be:	f7ff fd21 	bl	8005304 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80058c2:	2322      	movs	r3, #34	@ 0x22
 80058c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80058c6:	e006      	b.n	80058d6 <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80058c8:	f248 0101 	movw	r1, #32769	@ 0x8001
 80058cc:	4620      	mov	r0, r4
 80058ce:	f7ff fd19 	bl	8005304 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80058d2:	2321      	movs	r3, #33	@ 0x21
 80058d4:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80058d6:	6822      	ldr	r2, [r4, #0]
 80058d8:	6853      	ldr	r3, [r2, #4]
 80058da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058de:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 80058e0:	6822      	ldr	r2, [r4, #0]
 80058e2:	6853      	ldr	r3, [r2, #4]
 80058e4:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 80058e8:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 80058ec:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80058f0:	f023 0301 	bic.w	r3, r3, #1
 80058f4:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 80058f6:	4620      	mov	r0, r4
 80058f8:	f7ff fc98 	bl	800522c <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80058fc:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 8005900:	d040      	beq.n	8005984 <I2C_ITSlaveCplt+0xf0>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005902:	6822      	ldr	r2, [r4, #0]
 8005904:	6813      	ldr	r3, [r2, #0]
 8005906:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800590a:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 800590c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800590e:	b11b      	cbz	r3, 8005918 <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	b29b      	uxth	r3, r3
 8005916:	8563      	strh	r3, [r4, #42]	@ 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005918:	f015 0f04 	tst.w	r5, #4
 800591c:	d011      	beq.n	8005942 <I2C_ITSlaveCplt+0xae>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800591e:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005922:	6823      	ldr	r3, [r4, #0]
 8005924:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005926:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005928:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800592a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800592c:	3301      	adds	r3, #1
 800592e:	6263      	str	r3, [r4, #36]	@ 0x24
    if ((hi2c->XferSize > 0U))
 8005930:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005932:	b133      	cbz	r3, 8005942 <I2C_ITSlaveCplt+0xae>
      hi2c->XferSize--;
 8005934:	3b01      	subs	r3, #1
 8005936:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8005938:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800593a:	b29b      	uxth	r3, r3
 800593c:	3b01      	subs	r3, #1
 800593e:	b29b      	uxth	r3, r3
 8005940:	8563      	strh	r3, [r4, #42]	@ 0x2a
  if (hi2c->XferCount != 0U)
 8005942:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005944:	b29b      	uxth	r3, r3
 8005946:	b11b      	cbz	r3, 8005950 <I2C_ITSlaveCplt+0xbc>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005948:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800594a:	f043 0304 	orr.w	r3, r3, #4
 800594e:	6463      	str	r3, [r4, #68]	@ 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005950:	2300      	movs	r3, #0
 8005952:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005956:	6363      	str	r3, [r4, #52]	@ 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005958:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800595a:	bb1b      	cbnz	r3, 80059a4 <I2C_ITSlaveCplt+0x110>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800595c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800595e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005962:	d12d      	bne.n	80059c0 <I2C_ITSlaveCplt+0x12c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005964:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b22      	cmp	r3, #34	@ 0x22
 800596c:	d038      	beq.n	80059e0 <I2C_ITSlaveCplt+0x14c>
    hi2c->State = HAL_I2C_STATE_READY;
 800596e:	2320      	movs	r3, #32
 8005970:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005974:	2300      	movs	r3, #0
 8005976:	6323      	str	r3, [r4, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005978:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800597c:	4620      	mov	r0, r4
 800597e:	f7ff fe21 	bl	80055c4 <HAL_I2C_SlaveTxCpltCallback>
}
 8005982:	e02c      	b.n	80059de <I2C_ITSlaveCplt+0x14a>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005984:	f416 4f00 	tst.w	r6, #32768	@ 0x8000
 8005988:	d0c6      	beq.n	8005918 <I2C_ITSlaveCplt+0x84>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800598a:	6822      	ldr	r2, [r4, #0]
 800598c:	6813      	ldr	r3, [r2, #0]
 800598e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005992:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 8005994:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005996:	2b00      	cmp	r3, #0
 8005998:	d0be      	beq.n	8005918 <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	b29b      	uxth	r3, r3
 80059a0:	8563      	strh	r3, [r4, #42]	@ 0x2a
 80059a2:	e7b9      	b.n	8005918 <I2C_ITSlaveCplt+0x84>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80059a4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80059a6:	4620      	mov	r0, r4
 80059a8:	f7ff fef0 	bl	800578c <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80059ac:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b28      	cmp	r3, #40	@ 0x28
 80059b4:	d113      	bne.n	80059de <I2C_ITSlaveCplt+0x14a>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80059b6:	4629      	mov	r1, r5
 80059b8:	4620      	mov	r0, r4
 80059ba:	f7ff fe99 	bl	80056f0 <I2C_ITListenCplt>
 80059be:	e00e      	b.n	80059de <I2C_ITSlaveCplt+0x14a>
    I2C_ITSlaveSeqCplt(hi2c);
 80059c0:	4620      	mov	r0, r4
 80059c2:	f7ff fe01 	bl	80055c8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059c6:	4b0c      	ldr	r3, [pc, #48]	@ (80059f8 <I2C_ITSlaveCplt+0x164>)
 80059c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80059ca:	2320      	movs	r3, #32
 80059cc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80059d0:	2300      	movs	r3, #0
 80059d2:	6323      	str	r3, [r4, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80059d4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80059d8:	4620      	mov	r0, r4
 80059da:	f7ff fe87 	bl	80056ec <HAL_I2C_ListenCpltCallback>
}
 80059de:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80059e0:	2320      	movs	r3, #32
 80059e2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80059e6:	2300      	movs	r3, #0
 80059e8:	6323      	str	r3, [r4, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80059ea:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80059ee:	4620      	mov	r0, r4
 80059f0:	f7ff fde9 	bl	80055c6 <HAL_I2C_SlaveRxCpltCallback>
 80059f4:	e7f3      	b.n	80059de <I2C_ITSlaveCplt+0x14a>
 80059f6:	bf00      	nop
 80059f8:	ffff0000 	.word	0xffff0000

080059fc <I2C_Slave_ISR_IT>:
{
 80059fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 80059fe:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
  __HAL_LOCK(hi2c);
 8005a00:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	f000 809e 	beq.w	8005b46 <I2C_Slave_ISR_IT+0x14a>
 8005a0a:	4604      	mov	r4, r0
 8005a0c:	460d      	mov	r5, r1
 8005a0e:	4616      	mov	r6, r2
 8005a10:	2301      	movs	r3, #1
 8005a12:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005a16:	f011 0f20 	tst.w	r1, #32
 8005a1a:	d002      	beq.n	8005a22 <I2C_Slave_ISR_IT+0x26>
 8005a1c:	f012 0f20 	tst.w	r2, #32
 8005a20:	d119      	bne.n	8005a56 <I2C_Slave_ISR_IT+0x5a>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005a22:	f015 0f10 	tst.w	r5, #16
 8005a26:	d03e      	beq.n	8005aa6 <I2C_Slave_ISR_IT+0xaa>
 8005a28:	f016 0f10 	tst.w	r6, #16
 8005a2c:	d03b      	beq.n	8005aa6 <I2C_Slave_ISR_IT+0xaa>
    if (hi2c->XferCount == 0U)
 8005a2e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	bb43      	cbnz	r3, 8005a86 <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005a34:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b28      	cmp	r3, #40	@ 0x28
 8005a3c:	d00e      	beq.n	8005a5c <I2C_Slave_ISR_IT+0x60>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005a3e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b29      	cmp	r3, #41	@ 0x29
 8005a46:	d011      	beq.n	8005a6c <I2C_Slave_ISR_IT+0x70>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a48:	6823      	ldr	r3, [r4, #0]
 8005a4a:	2210      	movs	r2, #16
 8005a4c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8005a4e:	2000      	movs	r0, #0
 8005a50:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
}
 8005a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005a56:	f7ff ff1d 	bl	8005894 <I2C_ITSlaveCplt>
 8005a5a:	e7e2      	b.n	8005a22 <I2C_Slave_ISR_IT+0x26>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005a5c:	f1b7 7f00 	cmp.w	r7, #33554432	@ 0x2000000
 8005a60:	d1ed      	bne.n	8005a3e <I2C_Slave_ISR_IT+0x42>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005a62:	4629      	mov	r1, r5
 8005a64:	4620      	mov	r0, r4
 8005a66:	f7ff fe43 	bl	80056f0 <I2C_ITListenCplt>
 8005a6a:	e7f0      	b.n	8005a4e <I2C_Slave_ISR_IT+0x52>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005a6c:	f517 3f80 	cmn.w	r7, #65536	@ 0x10000
 8005a70:	d0ea      	beq.n	8005a48 <I2C_Slave_ISR_IT+0x4c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a72:	6823      	ldr	r3, [r4, #0]
 8005a74:	2210      	movs	r2, #16
 8005a76:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8005a78:	4620      	mov	r0, r4
 8005a7a:	f7ff fbd7 	bl	800522c <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8005a7e:	4620      	mov	r0, r4
 8005a80:	f7ff fda2 	bl	80055c8 <I2C_ITSlaveSeqCplt>
 8005a84:	e7e3      	b.n	8005a4e <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a86:	6823      	ldr	r3, [r4, #0]
 8005a88:	2210      	movs	r2, #16
 8005a8a:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a8c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005a8e:	f043 0304 	orr.w	r3, r3, #4
 8005a92:	6463      	str	r3, [r4, #68]	@ 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005a94:	b117      	cbz	r7, 8005a9c <I2C_Slave_ISR_IT+0xa0>
 8005a96:	f1b7 7f80 	cmp.w	r7, #16777216	@ 0x1000000
 8005a9a:	d1d8      	bne.n	8005a4e <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005a9c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	f7ff fe74 	bl	800578c <I2C_ITError>
 8005aa4:	e7d3      	b.n	8005a4e <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005aa6:	f015 0f04 	tst.w	r5, #4
 8005aaa:	d01f      	beq.n	8005aec <I2C_Slave_ISR_IT+0xf0>
 8005aac:	f016 0f04 	tst.w	r6, #4
 8005ab0:	d01c      	beq.n	8005aec <I2C_Slave_ISR_IT+0xf0>
    if (hi2c->XferCount > 0U)
 8005ab2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	b173      	cbz	r3, 8005ad6 <I2C_Slave_ISR_IT+0xda>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ab8:	6823      	ldr	r3, [r4, #0]
 8005aba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005abc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005abe:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8005ac0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8005ac6:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8005acc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && \
 8005ad6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1b7      	bne.n	8005a4e <I2C_Slave_ISR_IT+0x52>
 8005ade:	f517 3f80 	cmn.w	r7, #65536	@ 0x10000
 8005ae2:	d0b4      	beq.n	8005a4e <I2C_Slave_ISR_IT+0x52>
      I2C_ITSlaveSeqCplt(hi2c);
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	f7ff fd6f 	bl	80055c8 <I2C_ITSlaveSeqCplt>
 8005aea:	e7b0      	b.n	8005a4e <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005aec:	f015 0f08 	tst.w	r5, #8
 8005af0:	d002      	beq.n	8005af8 <I2C_Slave_ISR_IT+0xfc>
 8005af2:	f016 0f08 	tst.w	r6, #8
 8005af6:	d118      	bne.n	8005b2a <I2C_Slave_ISR_IT+0x12e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005af8:	f015 0f02 	tst.w	r5, #2
 8005afc:	d0a7      	beq.n	8005a4e <I2C_Slave_ISR_IT+0x52>
 8005afe:	f016 0f02 	tst.w	r6, #2
 8005b02:	d0a4      	beq.n	8005a4e <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 8005b04:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	b1a3      	cbz	r3, 8005b34 <I2C_Slave_ISR_IT+0x138>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b0a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005b0c:	6823      	ldr	r3, [r4, #0]
 8005b0e:	7812      	ldrb	r2, [r2, #0]
 8005b10:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8005b12:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005b14:	3301      	adds	r3, #1
 8005b16:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8005b18:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8005b22:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005b24:	3b01      	subs	r3, #1
 8005b26:	8523      	strh	r3, [r4, #40]	@ 0x28
 8005b28:	e791      	b.n	8005a4e <I2C_Slave_ISR_IT+0x52>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005b2a:	4629      	mov	r1, r5
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	f7ff fd8d 	bl	800564c <I2C_ITAddrCplt>
 8005b32:	e78c      	b.n	8005a4e <I2C_Slave_ISR_IT+0x52>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005b34:	f1b7 7f80 	cmp.w	r7, #16777216	@ 0x1000000
 8005b38:	d001      	beq.n	8005b3e <I2C_Slave_ISR_IT+0x142>
 8005b3a:	2f00      	cmp	r7, #0
 8005b3c:	d187      	bne.n	8005a4e <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 8005b3e:	4620      	mov	r0, r4
 8005b40:	f7ff fd42 	bl	80055c8 <I2C_ITSlaveSeqCplt>
 8005b44:	e783      	b.n	8005a4e <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 8005b46:	2002      	movs	r0, #2
 8005b48:	e784      	b.n	8005a54 <I2C_Slave_ISR_IT+0x58>

08005b4a <I2C_ITMasterCplt>:
{
 8005b4a:	b530      	push	{r4, r5, lr}
 8005b4c:	b083      	sub	sp, #12
 8005b4e:	4604      	mov	r4, r0
 8005b50:	460d      	mov	r5, r1
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b52:	6803      	ldr	r3, [r0, #0]
 8005b54:	2220      	movs	r2, #32
 8005b56:	61da      	str	r2, [r3, #28]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005b58:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b21      	cmp	r3, #33	@ 0x21
 8005b60:	d033      	beq.n	8005bca <I2C_ITMasterCplt+0x80>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005b62:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b22      	cmp	r3, #34	@ 0x22
 8005b6a:	d034      	beq.n	8005bd6 <I2C_ITMasterCplt+0x8c>
  I2C_RESET_CR2(hi2c);
 8005b6c:	6822      	ldr	r2, [r4, #0]
 8005b6e:	6853      	ldr	r3, [r2, #4]
 8005b70:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8005b74:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8005b78:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8005b7c:	f023 0301 	bic.w	r3, r3, #1
 8005b80:	6053      	str	r3, [r2, #4]
  hi2c->XferISR       = NULL;
 8005b82:	2300      	movs	r3, #0
 8005b84:	6363      	str	r3, [r4, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005b86:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8005b8a:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005b8c:	f015 0f10 	tst.w	r5, #16
 8005b90:	d006      	beq.n	8005ba0 <I2C_ITMasterCplt+0x56>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b92:	6823      	ldr	r3, [r4, #0]
 8005b94:	2210      	movs	r2, #16
 8005b96:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b98:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005b9a:	f043 0304 	orr.w	r3, r3, #4
 8005b9e:	6463      	str	r3, [r4, #68]	@ 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005ba0:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b60      	cmp	r3, #96	@ 0x60
 8005ba8:	d01b      	beq.n	8005be2 <I2C_ITMasterCplt+0x98>
  I2C_Flush_TXDR(hi2c);
 8005baa:	4620      	mov	r0, r4
 8005bac:	f7ff fb3e 	bl	800522c <I2C_Flush_TXDR>
  tmperror = hi2c->ErrorCode;
 8005bb0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005bb2:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b60      	cmp	r3, #96	@ 0x60
 8005bba:	d000      	beq.n	8005bbe <I2C_ITMasterCplt+0x74>
 8005bbc:	b1d2      	cbz	r2, 8005bf4 <I2C_ITMasterCplt+0xaa>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005bbe:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	f7ff fde3 	bl	800578c <I2C_ITError>
}
 8005bc6:	b003      	add	sp, #12
 8005bc8:	bd30      	pop	{r4, r5, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005bca:	2101      	movs	r1, #1
 8005bcc:	f7ff fb9a 	bl	8005304 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005bd0:	2311      	movs	r3, #17
 8005bd2:	6323      	str	r3, [r4, #48]	@ 0x30
 8005bd4:	e7ca      	b.n	8005b6c <I2C_ITMasterCplt+0x22>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005bd6:	2102      	movs	r1, #2
 8005bd8:	f7ff fb94 	bl	8005304 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005bdc:	2312      	movs	r3, #18
 8005bde:	6323      	str	r3, [r4, #48]	@ 0x30
 8005be0:	e7c4      	b.n	8005b6c <I2C_ITMasterCplt+0x22>
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005be2:	f015 0f04 	tst.w	r5, #4
 8005be6:	d0e0      	beq.n	8005baa <I2C_ITMasterCplt+0x60>
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005be8:	6823      	ldr	r3, [r4, #0]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	9301      	str	r3, [sp, #4]
    UNUSED(tmpreg);
 8005bf0:	9b01      	ldr	r3, [sp, #4]
 8005bf2:	e7da      	b.n	8005baa <I2C_ITMasterCplt+0x60>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005bf4:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b21      	cmp	r3, #33	@ 0x21
 8005bfc:	d017      	beq.n	8005c2e <I2C_ITMasterCplt+0xe4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005bfe:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	2b22      	cmp	r3, #34	@ 0x22
 8005c06:	d1de      	bne.n	8005bc6 <I2C_ITMasterCplt+0x7c>
    hi2c->State = HAL_I2C_STATE_READY;
 8005c08:	2320      	movs	r3, #32
 8005c0a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	6323      	str	r3, [r4, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c12:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b40      	cmp	r3, #64	@ 0x40
 8005c1a:	d024      	beq.n	8005c66 <I2C_ITMasterCplt+0x11c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005c22:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005c26:	4620      	mov	r0, r4
 8005c28:	f7fb fdab 	bl	8001782 <HAL_I2C_MasterRxCpltCallback>
}
 8005c2c:	e7cb      	b.n	8005bc6 <I2C_ITMasterCplt+0x7c>
    hi2c->State = HAL_I2C_STATE_READY;
 8005c2e:	2320      	movs	r3, #32
 8005c30:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c34:	2300      	movs	r3, #0
 8005c36:	6323      	str	r3, [r4, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c38:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b40      	cmp	r3, #64	@ 0x40
 8005c40:	d008      	beq.n	8005c54 <I2C_ITMasterCplt+0x10a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c42:	2300      	movs	r3, #0
 8005c44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005c48:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	f7fb fd97 	bl	8001780 <HAL_I2C_MasterTxCpltCallback>
 8005c52:	e7b8      	b.n	8005bc6 <I2C_ITMasterCplt+0x7c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c54:	2300      	movs	r3, #0
 8005c56:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005c5a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005c5e:	4620      	mov	r0, r4
 8005c60:	f7ff fd7a 	bl	8005758 <HAL_I2C_MemTxCpltCallback>
 8005c64:	e7af      	b.n	8005bc6 <I2C_ITMasterCplt+0x7c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c66:	2300      	movs	r3, #0
 8005c68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005c6c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005c70:	4620      	mov	r0, r4
 8005c72:	f7ff fd72 	bl	800575a <HAL_I2C_MemRxCpltCallback>
 8005c76:	e7a6      	b.n	8005bc6 <I2C_ITMasterCplt+0x7c>

08005c78 <I2C_Master_ISR_IT>:
  __HAL_LOCK(hi2c);
 8005c78:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	f000 80b9 	beq.w	8005df4 <I2C_Master_ISR_IT+0x17c>
{
 8005c82:	b570      	push	{r4, r5, r6, lr}
 8005c84:	b082      	sub	sp, #8
 8005c86:	4604      	mov	r4, r0
 8005c88:	460d      	mov	r5, r1
 8005c8a:	4616      	mov	r6, r2
  __HAL_LOCK(hi2c);
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005c92:	f011 0f10 	tst.w	r1, #16
 8005c96:	d002      	beq.n	8005c9e <I2C_Master_ISR_IT+0x26>
 8005c98:	f012 0f10 	tst.w	r2, #16
 8005c9c:	d122      	bne.n	8005ce4 <I2C_Master_ISR_IT+0x6c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005c9e:	f015 0f04 	tst.w	r5, #4
 8005ca2:	d029      	beq.n	8005cf8 <I2C_Master_ISR_IT+0x80>
 8005ca4:	f016 0f04 	tst.w	r6, #4
 8005ca8:	d026      	beq.n	8005cf8 <I2C_Master_ISR_IT+0x80>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005caa:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005cae:	6823      	ldr	r3, [r4, #0]
 8005cb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005cb2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005cb4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005cb6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005cb8:	3301      	adds	r3, #1
 8005cba:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferSize--;
 8005cbc:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferCount--;
 8005cc2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	8563      	strh	r3, [r4, #42]	@ 0x2a
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005ccc:	f015 0f20 	tst.w	r5, #32
 8005cd0:	d003      	beq.n	8005cda <I2C_Master_ISR_IT+0x62>
 8005cd2:	f016 0f20 	tst.w	r6, #32
 8005cd6:	f040 8088 	bne.w	8005dea <I2C_Master_ISR_IT+0x172>
  __HAL_UNLOCK(hi2c);
 8005cda:	2000      	movs	r0, #0
 8005cdc:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
}
 8005ce0:	b002      	add	sp, #8
 8005ce2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ce4:	6803      	ldr	r3, [r0, #0]
 8005ce6:	2210      	movs	r2, #16
 8005ce8:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005cea:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8005cec:	f043 0304 	orr.w	r3, r3, #4
 8005cf0:	6443      	str	r3, [r0, #68]	@ 0x44
    I2C_Flush_TXDR(hi2c);
 8005cf2:	f7ff fa9b 	bl	800522c <I2C_Flush_TXDR>
 8005cf6:	e7e9      	b.n	8005ccc <I2C_Master_ISR_IT+0x54>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005cf8:	f015 0f02 	tst.w	r5, #2
 8005cfc:	d012      	beq.n	8005d24 <I2C_Master_ISR_IT+0xac>
 8005cfe:	f016 0f02 	tst.w	r6, #2
 8005d02:	d00f      	beq.n	8005d24 <I2C_Master_ISR_IT+0xac>
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005d04:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005d06:	6823      	ldr	r3, [r4, #0]
 8005d08:	7812      	ldrb	r2, [r2, #0]
 8005d0a:	629a      	str	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr++;
 8005d0c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005d0e:	3301      	adds	r3, #1
 8005d10:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferSize--;
 8005d12:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005d14:	3b01      	subs	r3, #1
 8005d16:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferCount--;
 8005d18:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8005d22:	e7d3      	b.n	8005ccc <I2C_Master_ISR_IT+0x54>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005d24:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8005d28:	d03f      	beq.n	8005daa <I2C_Master_ISR_IT+0x132>
 8005d2a:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8005d2e:	d03c      	beq.n	8005daa <I2C_Master_ISR_IT+0x132>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d30:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	b35b      	cbz	r3, 8005d8e <I2C_Master_ISR_IT+0x116>
 8005d36:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005d38:	bb4b      	cbnz	r3, 8005d8e <I2C_Master_ISR_IT+0x116>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005d3a:	6823      	ldr	r3, [r4, #0]
 8005d3c:	6859      	ldr	r1, [r3, #4]
 8005d3e:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d42:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	2bff      	cmp	r3, #255	@ 0xff
 8005d48:	d80e      	bhi.n	8005d68 <I2C_Master_ISR_IT+0xf0>
        hi2c->XferSize = hi2c->XferCount;
 8005d4a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8005d4c:	b292      	uxth	r2, r2
 8005d4e:	8522      	strh	r2, [r4, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005d50:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005d52:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005d56:	d011      	beq.n	8005d7c <I2C_Master_ISR_IT+0x104>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8005d58:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	9000      	str	r0, [sp, #0]
 8005d5e:	b2d2      	uxtb	r2, r2
 8005d60:	4620      	mov	r0, r4
 8005d62:	f7ff fa74 	bl	800524e <I2C_TransferConfig>
 8005d66:	e7b1      	b.n	8005ccc <I2C_Master_ISR_IT+0x54>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d68:	22ff      	movs	r2, #255	@ 0xff
 8005d6a:	8522      	strh	r2, [r4, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d74:	4620      	mov	r0, r4
 8005d76:	f7ff fa6a 	bl	800524e <I2C_TransferConfig>
 8005d7a:	e7a7      	b.n	8005ccc <I2C_Master_ISR_IT+0x54>
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d84:	b2d2      	uxtb	r2, r2
 8005d86:	4620      	mov	r0, r4
 8005d88:	f7ff fa61 	bl	800524e <I2C_TransferConfig>
 8005d8c:	e79e      	b.n	8005ccc <I2C_Master_ISR_IT+0x54>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005d96:	d103      	bne.n	8005da0 <I2C_Master_ISR_IT+0x128>
        I2C_ITMasterSeqCplt(hi2c);
 8005d98:	4620      	mov	r0, r4
 8005d9a:	f7ff fbe9 	bl	8005570 <I2C_ITMasterSeqCplt>
 8005d9e:	e795      	b.n	8005ccc <I2C_Master_ISR_IT+0x54>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005da0:	2140      	movs	r1, #64	@ 0x40
 8005da2:	4620      	mov	r0, r4
 8005da4:	f7ff fcf2 	bl	800578c <I2C_ITError>
 8005da8:	e790      	b.n	8005ccc <I2C_Master_ISR_IT+0x54>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005daa:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8005dae:	d08d      	beq.n	8005ccc <I2C_Master_ISR_IT+0x54>
 8005db0:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8005db4:	d08a      	beq.n	8005ccc <I2C_Master_ISR_IT+0x54>
    if (hi2c->XferCount == 0U)
 8005db6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	b98b      	cbnz	r3, 8005de0 <I2C_Master_ISR_IT+0x168>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005dbc:	6823      	ldr	r3, [r4, #0]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8005dc4:	d182      	bne.n	8005ccc <I2C_Master_ISR_IT+0x54>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005dc6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005dc8:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 8005dcc:	d104      	bne.n	8005dd8 <I2C_Master_ISR_IT+0x160>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005dce:	685a      	ldr	r2, [r3, #4]
 8005dd0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005dd4:	605a      	str	r2, [r3, #4]
 8005dd6:	e779      	b.n	8005ccc <I2C_Master_ISR_IT+0x54>
          I2C_ITMasterSeqCplt(hi2c);
 8005dd8:	4620      	mov	r0, r4
 8005dda:	f7ff fbc9 	bl	8005570 <I2C_ITMasterSeqCplt>
 8005dde:	e775      	b.n	8005ccc <I2C_Master_ISR_IT+0x54>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005de0:	2140      	movs	r1, #64	@ 0x40
 8005de2:	4620      	mov	r0, r4
 8005de4:	f7ff fcd2 	bl	800578c <I2C_ITError>
 8005de8:	e770      	b.n	8005ccc <I2C_Master_ISR_IT+0x54>
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005dea:	4629      	mov	r1, r5
 8005dec:	4620      	mov	r0, r4
 8005dee:	f7ff feac 	bl	8005b4a <I2C_ITMasterCplt>
 8005df2:	e772      	b.n	8005cda <I2C_Master_ISR_IT+0x62>
  __HAL_LOCK(hi2c);
 8005df4:	2002      	movs	r0, #2
}
 8005df6:	4770      	bx	lr

08005df8 <I2C_Slave_ISR_DMA>:
{
 8005df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 8005dfa:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
  __HAL_LOCK(hi2c);
 8005dfc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	f000 8087 	beq.w	8005f14 <I2C_Slave_ISR_DMA+0x11c>
 8005e06:	4604      	mov	r4, r0
 8005e08:	460d      	mov	r5, r1
 8005e0a:	4616      	mov	r6, r2
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005e12:	f011 0f20 	tst.w	r1, #32
 8005e16:	d002      	beq.n	8005e1e <I2C_Slave_ISR_DMA+0x26>
 8005e18:	f012 0f20 	tst.w	r2, #32
 8005e1c:	d112      	bne.n	8005e44 <I2C_Slave_ISR_DMA+0x4c>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005e1e:	f015 0f10 	tst.w	r5, #16
 8005e22:	d068      	beq.n	8005ef6 <I2C_Slave_ISR_DMA+0xfe>
 8005e24:	f016 0f10 	tst.w	r6, #16
 8005e28:	d065      	beq.n	8005ef6 <I2C_Slave_ISR_DMA+0xfe>
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005e2a:	f416 4f40 	tst.w	r6, #49152	@ 0xc000
 8005e2e:	d05e      	beq.n	8005eee <I2C_Slave_ISR_DMA+0xf6>
      if (hi2c->hdmarx != NULL)
 8005e30:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005e32:	b153      	cbz	r3, 8005e4a <I2C_Slave_ISR_DMA+0x52>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005e34:	f416 4200 	ands.w	r2, r6, #32768	@ 0x8000
 8005e38:	d008      	beq.n	8005e4c <I2C_Slave_ISR_DMA+0x54>
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	b33b      	cbz	r3, 8005e90 <I2C_Slave_ISR_DMA+0x98>
  uint32_t treatdmanack = 0U;
 8005e40:	2200      	movs	r2, #0
 8005e42:	e003      	b.n	8005e4c <I2C_Slave_ISR_DMA+0x54>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005e44:	f7ff fd26 	bl	8005894 <I2C_ITSlaveCplt>
 8005e48:	e7e9      	b.n	8005e1e <I2C_Slave_ISR_DMA+0x26>
  uint32_t treatdmanack = 0U;
 8005e4a:	2200      	movs	r2, #0
      if (hi2c->hdmatx != NULL)
 8005e4c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005e4e:	b12b      	cbz	r3, 8005e5c <I2C_Slave_ISR_DMA+0x64>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005e50:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 8005e54:	d002      	beq.n	8005e5c <I2C_Slave_ISR_DMA+0x64>
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	b1db      	cbz	r3, 8005e94 <I2C_Slave_ISR_DMA+0x9c>
      if (treatdmanack == 1U)
 8005e5c:	2a01      	cmp	r2, #1
 8005e5e:	d019      	beq.n	8005e94 <I2C_Slave_ISR_DMA+0x9c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e60:	6823      	ldr	r3, [r4, #0]
 8005e62:	2210      	movs	r2, #16
 8005e64:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e66:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005e68:	f043 0304 	orr.w	r3, r3, #4
 8005e6c:	6463      	str	r3, [r4, #68]	@ 0x44
        tmpstate = hi2c->State;
 8005e6e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8005e72:	b2db      	uxtb	r3, r3
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005e74:	b117      	cbz	r7, 8005e7c <I2C_Slave_ISR_DMA+0x84>
 8005e76:	f1b7 7f80 	cmp.w	r7, #16777216	@ 0x1000000
 8005e7a:	d142      	bne.n	8005f02 <I2C_Slave_ISR_DMA+0x10a>
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005e7c:	3b21      	subs	r3, #33	@ 0x21
 8005e7e:	2b09      	cmp	r3, #9
 8005e80:	d82d      	bhi.n	8005ede <I2C_Slave_ISR_DMA+0xe6>
 8005e82:	e8df f003 	tbb	[pc, r3]
 8005e86:	312a      	.short	0x312a
 8005e88:	2c2c2c2c 	.word	0x2c2c2c2c
 8005e8c:	312a2c2c 	.word	0x312a2c2c
            treatdmanack = 1U;
 8005e90:	2201      	movs	r2, #1
 8005e92:	e7db      	b.n	8005e4c <I2C_Slave_ISR_DMA+0x54>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005e94:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b28      	cmp	r3, #40	@ 0x28
 8005e9c:	d008      	beq.n	8005eb0 <I2C_Slave_ISR_DMA+0xb8>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005e9e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b29      	cmp	r3, #41	@ 0x29
 8005ea6:	d00b      	beq.n	8005ec0 <I2C_Slave_ISR_DMA+0xc8>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ea8:	6823      	ldr	r3, [r4, #0]
 8005eaa:	2210      	movs	r2, #16
 8005eac:	61da      	str	r2, [r3, #28]
 8005eae:	e028      	b.n	8005f02 <I2C_Slave_ISR_DMA+0x10a>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005eb0:	f1b7 7f00 	cmp.w	r7, #33554432	@ 0x2000000
 8005eb4:	d1f3      	bne.n	8005e9e <I2C_Slave_ISR_DMA+0xa6>
          I2C_ITListenCplt(hi2c, ITFlags);
 8005eb6:	4629      	mov	r1, r5
 8005eb8:	4620      	mov	r0, r4
 8005eba:	f7ff fc19 	bl	80056f0 <I2C_ITListenCplt>
 8005ebe:	e020      	b.n	8005f02 <I2C_Slave_ISR_DMA+0x10a>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005ec0:	f517 3f80 	cmn.w	r7, #65536	@ 0x10000
 8005ec4:	d0f0      	beq.n	8005ea8 <I2C_Slave_ISR_DMA+0xb0>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	2210      	movs	r2, #16
 8005eca:	61da      	str	r2, [r3, #28]
          I2C_Flush_TXDR(hi2c);
 8005ecc:	4620      	mov	r0, r4
 8005ece:	f7ff f9ad 	bl	800522c <I2C_Flush_TXDR>
          I2C_ITSlaveSeqCplt(hi2c);
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	f7ff fb78 	bl	80055c8 <I2C_ITSlaveSeqCplt>
 8005ed8:	e013      	b.n	8005f02 <I2C_Slave_ISR_DMA+0x10a>
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005eda:	2321      	movs	r3, #33	@ 0x21
 8005edc:	6323      	str	r3, [r4, #48]	@ 0x30
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8005ede:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	f7ff fc53 	bl	800578c <I2C_ITError>
 8005ee6:	e00c      	b.n	8005f02 <I2C_Slave_ISR_DMA+0x10a>
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005ee8:	2322      	movs	r3, #34	@ 0x22
 8005eea:	6323      	str	r3, [r4, #48]	@ 0x30
 8005eec:	e7f7      	b.n	8005ede <I2C_Slave_ISR_DMA+0xe6>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005eee:	6823      	ldr	r3, [r4, #0]
 8005ef0:	2210      	movs	r2, #16
 8005ef2:	61da      	str	r2, [r3, #28]
 8005ef4:	e005      	b.n	8005f02 <I2C_Slave_ISR_DMA+0x10a>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005ef6:	f015 0f08 	tst.w	r5, #8
 8005efa:	d002      	beq.n	8005f02 <I2C_Slave_ISR_DMA+0x10a>
 8005efc:	f016 0f08 	tst.w	r6, #8
 8005f00:	d103      	bne.n	8005f0a <I2C_Slave_ISR_DMA+0x112>
  __HAL_UNLOCK(hi2c);
 8005f02:	2000      	movs	r0, #0
 8005f04:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
}
 8005f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITAddrCplt(hi2c, ITFlags);
 8005f0a:	4629      	mov	r1, r5
 8005f0c:	4620      	mov	r0, r4
 8005f0e:	f7ff fb9d 	bl	800564c <I2C_ITAddrCplt>
 8005f12:	e7f6      	b.n	8005f02 <I2C_Slave_ISR_DMA+0x10a>
  __HAL_LOCK(hi2c);
 8005f14:	2002      	movs	r0, #2
 8005f16:	e7f7      	b.n	8005f08 <I2C_Slave_ISR_DMA+0x110>

08005f18 <I2C_Master_ISR_DMA>:
  __HAL_LOCK(hi2c);
 8005f18:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	f000 809a 	beq.w	8006056 <I2C_Master_ISR_DMA+0x13e>
{
 8005f22:	b510      	push	{r4, lr}
 8005f24:	b082      	sub	sp, #8
 8005f26:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 8005f28:	2301      	movs	r3, #1
 8005f2a:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005f2e:	f011 0f10 	tst.w	r1, #16
 8005f32:	d002      	beq.n	8005f3a <I2C_Master_ISR_DMA+0x22>
 8005f34:	f012 0f10 	tst.w	r2, #16
 8005f38:	d132      	bne.n	8005fa0 <I2C_Master_ISR_DMA+0x88>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005f3a:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8005f3e:	d060      	beq.n	8006002 <I2C_Master_ISR_DMA+0xea>
 8005f40:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8005f44:	d05d      	beq.n	8006002 <I2C_Master_ISR_DMA+0xea>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005f46:	6822      	ldr	r2, [r4, #0]
 8005f48:	6813      	ldr	r3, [r2, #0]
 8005f4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f4e:	6013      	str	r3, [r2, #0]
    if (hi2c->XferCount != 0U)
 8005f50:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d046      	beq.n	8005fe6 <I2C_Master_ISR_DMA+0xce>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005f58:	6823      	ldr	r3, [r4, #0]
 8005f5a:	6859      	ldr	r1, [r3, #4]
 8005f5c:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f60:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	2bff      	cmp	r3, #255	@ 0xff
 8005f66:	d92d      	bls.n	8005fc4 <I2C_Master_ISR_DMA+0xac>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f68:	23ff      	movs	r3, #255	@ 0xff
 8005f6a:	8523      	strh	r3, [r4, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8005f6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005f70:	2200      	movs	r2, #0
 8005f72:	9200      	str	r2, [sp, #0]
 8005f74:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 8005f78:	4620      	mov	r0, r4
 8005f7a:	f7ff f968 	bl	800524e <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 8005f7e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8005f84:	1a9b      	subs	r3, r3, r2
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f8a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b22      	cmp	r3, #34	@ 0x22
 8005f92:	d022      	beq.n	8005fda <I2C_Master_ISR_DMA+0xc2>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005f94:	6822      	ldr	r2, [r4, #0]
 8005f96:	6813      	ldr	r3, [r2, #0]
 8005f98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005f9c:	6013      	str	r3, [r2, #0]
 8005f9e:	e00c      	b.n	8005fba <I2C_Master_ISR_DMA+0xa2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fa0:	6803      	ldr	r3, [r0, #0]
 8005fa2:	2210      	movs	r2, #16
 8005fa4:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005fa6:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8005fa8:	f043 0304 	orr.w	r3, r3, #4
 8005fac:	6443      	str	r3, [r0, #68]	@ 0x44
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005fae:	2120      	movs	r1, #32
 8005fb0:	f7ff f96a 	bl	8005288 <I2C_Enable_IRQ>
    I2C_Flush_TXDR(hi2c);
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	f7ff f939 	bl	800522c <I2C_Flush_TXDR>
  __HAL_UNLOCK(hi2c);
 8005fba:	2000      	movs	r0, #0
 8005fbc:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
}
 8005fc0:	b002      	add	sp, #8
 8005fc2:	bd10      	pop	{r4, pc}
        hi2c->XferSize = hi2c->XferCount;
 8005fc4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005fc6:	8523      	strh	r3, [r4, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005fc8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005fca:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005fce:	d001      	beq.n	8005fd4 <I2C_Master_ISR_DMA+0xbc>
          xfermode = hi2c->XferOptions;
 8005fd0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005fd2:	e7cd      	b.n	8005f70 <I2C_Master_ISR_DMA+0x58>
          xfermode = I2C_AUTOEND_MODE;
 8005fd4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005fd8:	e7ca      	b.n	8005f70 <I2C_Master_ISR_DMA+0x58>
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005fda:	6822      	ldr	r2, [r4, #0]
 8005fdc:	6813      	ldr	r3, [r2, #0]
 8005fde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fe2:	6013      	str	r3, [r2, #0]
 8005fe4:	e7e9      	b.n	8005fba <I2C_Master_ISR_DMA+0xa2>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005fe6:	6823      	ldr	r3, [r4, #0]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005fee:	d103      	bne.n	8005ff8 <I2C_Master_ISR_DMA+0xe0>
        I2C_ITMasterSeqCplt(hi2c);
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	f7ff fabd 	bl	8005570 <I2C_ITMasterSeqCplt>
 8005ff6:	e7e0      	b.n	8005fba <I2C_Master_ISR_DMA+0xa2>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005ff8:	2140      	movs	r1, #64	@ 0x40
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	f7ff fbc6 	bl	800578c <I2C_ITError>
 8006000:	e7db      	b.n	8005fba <I2C_Master_ISR_DMA+0xa2>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006002:	f011 0f40 	tst.w	r1, #64	@ 0x40
 8006006:	d01c      	beq.n	8006042 <I2C_Master_ISR_DMA+0x12a>
 8006008:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800600c:	d019      	beq.n	8006042 <I2C_Master_ISR_DMA+0x12a>
    if (hi2c->XferCount == 0U)
 800600e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006010:	b29b      	uxth	r3, r3
 8006012:	b98b      	cbnz	r3, 8006038 <I2C_Master_ISR_DMA+0x120>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006014:	6823      	ldr	r3, [r4, #0]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800601c:	d1cd      	bne.n	8005fba <I2C_Master_ISR_DMA+0xa2>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800601e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006020:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 8006024:	d104      	bne.n	8006030 <I2C_Master_ISR_DMA+0x118>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006026:	685a      	ldr	r2, [r3, #4]
 8006028:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800602c:	605a      	str	r2, [r3, #4]
 800602e:	e7c4      	b.n	8005fba <I2C_Master_ISR_DMA+0xa2>
          I2C_ITMasterSeqCplt(hi2c);
 8006030:	4620      	mov	r0, r4
 8006032:	f7ff fa9d 	bl	8005570 <I2C_ITMasterSeqCplt>
 8006036:	e7c0      	b.n	8005fba <I2C_Master_ISR_DMA+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006038:	2140      	movs	r1, #64	@ 0x40
 800603a:	4620      	mov	r0, r4
 800603c:	f7ff fba6 	bl	800578c <I2C_ITError>
 8006040:	e7bb      	b.n	8005fba <I2C_Master_ISR_DMA+0xa2>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006042:	f011 0f20 	tst.w	r1, #32
 8006046:	d0b8      	beq.n	8005fba <I2C_Master_ISR_DMA+0xa2>
 8006048:	f012 0f20 	tst.w	r2, #32
 800604c:	d0b5      	beq.n	8005fba <I2C_Master_ISR_DMA+0xa2>
    I2C_ITMasterCplt(hi2c, ITFlags);
 800604e:	4620      	mov	r0, r4
 8006050:	f7ff fd7b 	bl	8005b4a <I2C_ITMasterCplt>
 8006054:	e7b1      	b.n	8005fba <I2C_Master_ISR_DMA+0xa2>
  __HAL_LOCK(hi2c);
 8006056:	2002      	movs	r0, #2
}
 8006058:	4770      	bx	lr

0800605a <HAL_I2C_ER_IRQHandler>:
{
 800605a:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800605c:	6802      	ldr	r2, [r0, #0]
 800605e:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006060:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006062:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8006066:	d009      	beq.n	800607c <HAL_I2C_ER_IRQHandler+0x22>
 8006068:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800606c:	d006      	beq.n	800607c <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800606e:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8006070:	f044 0401 	orr.w	r4, r4, #1
 8006074:	6444      	str	r4, [r0, #68]	@ 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006076:	f44f 7480 	mov.w	r4, #256	@ 0x100
 800607a:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800607c:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8006080:	d00a      	beq.n	8006098 <HAL_I2C_ER_IRQHandler+0x3e>
 8006082:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8006086:	d007      	beq.n	8006098 <HAL_I2C_ER_IRQHandler+0x3e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006088:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800608a:	f042 0208 	orr.w	r2, r2, #8
 800608e:	6442      	str	r2, [r0, #68]	@ 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006090:	6802      	ldr	r2, [r0, #0]
 8006092:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8006096:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006098:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800609c:	d00a      	beq.n	80060b4 <HAL_I2C_ER_IRQHandler+0x5a>
 800609e:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80060a2:	d007      	beq.n	80060b4 <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80060a4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80060a6:	f043 0302 	orr.w	r3, r3, #2
 80060aa:	6443      	str	r3, [r0, #68]	@ 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80060ac:	6803      	ldr	r3, [r0, #0]
 80060ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060b2:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 80060b4:	6c41      	ldr	r1, [r0, #68]	@ 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80060b6:	f011 0f0b 	tst.w	r1, #11
 80060ba:	d100      	bne.n	80060be <HAL_I2C_ER_IRQHandler+0x64>
}
 80060bc:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, tmperror);
 80060be:	f7ff fb65 	bl	800578c <I2C_ITError>
}
 80060c2:	e7fb      	b.n	80060bc <HAL_I2C_ER_IRQHandler+0x62>

080060c4 <I2C_DMAAbort>:
{
 80060c4:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80060c6:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if (hi2c->hdmatx != NULL)
 80060c8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80060ca:	b10b      	cbz	r3, 80060d0 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 80060cc:	2200      	movs	r2, #0
 80060ce:	639a      	str	r2, [r3, #56]	@ 0x38
  if (hi2c->hdmarx != NULL)
 80060d0:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80060d2:	b10b      	cbz	r3, 80060d8 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 80060d4:	2200      	movs	r2, #0
 80060d6:	639a      	str	r2, [r3, #56]	@ 0x38
  I2C_TreatErrorCallback(hi2c);
 80060d8:	f7ff fb41 	bl	800575e <I2C_TreatErrorCallback>
}
 80060dc:	bd08      	pop	{r3, pc}

080060de <HAL_I2C_GetState>:
  return hi2c->State;
 80060de:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 80060e2:	4770      	bx	lr

080060e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80060e4:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060e6:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 80060ea:	b2d2      	uxtb	r2, r2
 80060ec:	2a20      	cmp	r2, #32
 80060ee:	d123      	bne.n	8006138 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060f0:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 80060f4:	2a01      	cmp	r2, #1
 80060f6:	d021      	beq.n	800613c <HAL_I2CEx_ConfigAnalogFilter+0x58>
 80060f8:	2201      	movs	r2, #1
 80060fa:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060fe:	2224      	movs	r2, #36	@ 0x24
 8006100:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006104:	6800      	ldr	r0, [r0, #0]
 8006106:	6802      	ldr	r2, [r0, #0]
 8006108:	f022 0201 	bic.w	r2, r2, #1
 800610c:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800610e:	6818      	ldr	r0, [r3, #0]
 8006110:	6802      	ldr	r2, [r0, #0]
 8006112:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006116:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006118:	6818      	ldr	r0, [r3, #0]
 800611a:	6802      	ldr	r2, [r0, #0]
 800611c:	4311      	orrs	r1, r2
 800611e:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006120:	6819      	ldr	r1, [r3, #0]
 8006122:	680a      	ldr	r2, [r1, #0]
 8006124:	f042 0201 	orr.w	r2, r2, #1
 8006128:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800612a:	2220      	movs	r2, #32
 800612c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006130:	2000      	movs	r0, #0
 8006132:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 8006136:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8006138:	2002      	movs	r0, #2
 800613a:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800613c:	2002      	movs	r0, #2
  }
}
 800613e:	4770      	bx	lr

08006140 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006140:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006142:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8006146:	b2d2      	uxtb	r2, r2
 8006148:	2a20      	cmp	r2, #32
 800614a:	d121      	bne.n	8006190 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800614c:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8006150:	2a01      	cmp	r2, #1
 8006152:	d01f      	beq.n	8006194 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8006154:	2201      	movs	r2, #1
 8006156:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800615a:	2224      	movs	r2, #36	@ 0x24
 800615c:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006160:	6800      	ldr	r0, [r0, #0]
 8006162:	6802      	ldr	r2, [r0, #0]
 8006164:	f022 0201 	bic.w	r2, r2, #1
 8006168:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800616a:	6818      	ldr	r0, [r3, #0]
 800616c:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800616e:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006172:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006176:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006178:	6819      	ldr	r1, [r3, #0]
 800617a:	680a      	ldr	r2, [r1, #0]
 800617c:	f042 0201 	orr.w	r2, r2, #1
 8006180:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006182:	2220      	movs	r2, #32
 8006184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006188:	2000      	movs	r0, #0
 800618a:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 800618e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8006190:	2002      	movs	r0, #2
 8006192:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8006194:	2002      	movs	r0, #2
  }
}
 8006196:	4770      	bx	lr

08006198 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006198:	4a02      	ldr	r2, [pc, #8]	@ (80061a4 <HAL_PWR_EnableBkUpAccess+0xc>)
 800619a:	6813      	ldr	r3, [r2, #0]
 800619c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061a0:	6013      	str	r3, [r2, #0]
}
 80061a2:	4770      	bx	lr
 80061a4:	58000400 	.word	0x58000400

080061a8 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80061a8:	b510      	push	{r4, lr}
 80061aa:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80061ac:	b9a0      	cbnz	r0, 80061d8 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80061ae:	4b0f      	ldr	r3, [pc, #60]	@ (80061ec <HAL_PWR_EnterSLEEPMode+0x44>)
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80061b6:	d10a      	bne.n	80061ce <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80061b8:	4a0d      	ldr	r2, [pc, #52]	@ (80061f0 <HAL_PWR_EnterSLEEPMode+0x48>)
 80061ba:	6913      	ldr	r3, [r2, #16]
 80061bc:	f023 0304 	bic.w	r3, r3, #4
 80061c0:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80061c2:	2c01      	cmp	r4, #1
 80061c4:	d010      	beq.n	80061e8 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80061c6:	bf40      	sev
    __WFE();
 80061c8:	bf20      	wfe
    __WFE();
 80061ca:	bf20      	wfe
  }
}
 80061cc:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80061ce:	f000 f821 	bl	8006214 <HAL_PWREx_DisableLowPowerRunMode>
 80061d2:	2800      	cmp	r0, #0
 80061d4:	d0f0      	beq.n	80061b8 <HAL_PWR_EnterSLEEPMode+0x10>
 80061d6:	e7f9      	b.n	80061cc <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80061d8:	4b04      	ldr	r3, [pc, #16]	@ (80061ec <HAL_PWR_EnterSLEEPMode+0x44>)
 80061da:	695b      	ldr	r3, [r3, #20]
 80061dc:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80061e0:	d1ea      	bne.n	80061b8 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 80061e2:	f000 f80f 	bl	8006204 <HAL_PWREx_EnableLowPowerRunMode>
 80061e6:	e7e7      	b.n	80061b8 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 80061e8:	bf30      	wfi
 80061ea:	e7ef      	b.n	80061cc <HAL_PWR_EnterSLEEPMode+0x24>
 80061ec:	58000400 	.word	0x58000400
 80061f0:	e000ed00 	.word	0xe000ed00

080061f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 80061f4:	4b02      	ldr	r3, [pc, #8]	@ (8006200 <HAL_PWREx_GetVoltageRange+0xc>)
 80061f6:	6818      	ldr	r0, [r3, #0]
}
 80061f8:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	58000400 	.word	0x58000400

08006204 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8006204:	4a02      	ldr	r2, [pc, #8]	@ (8006210 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8006206:	6813      	ldr	r3, [r2, #0]
 8006208:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800620c:	6013      	str	r3, [r2, #0]
}
 800620e:	4770      	bx	lr
 8006210:	58000400 	.word	0x58000400

08006214 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8006214:	4a0f      	ldr	r2, [pc, #60]	@ (8006254 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8006216:	6813      	ldr	r3, [r2, #0]
 8006218:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800621c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800621e:	4b0e      	ldr	r3, [pc, #56]	@ (8006258 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2232      	movs	r2, #50	@ 0x32
 8006224:	fb02 f303 	mul.w	r3, r2, r3
 8006228:	4a0c      	ldr	r2, [pc, #48]	@ (800625c <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 800622a:	fba2 2303 	umull	r2, r3, r2, r3
 800622e:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006230:	e000      	b.n	8006234 <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 8006232:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006234:	4a07      	ldr	r2, [pc, #28]	@ (8006254 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8006236:	6952      	ldr	r2, [r2, #20]
 8006238:	f412 7f00 	tst.w	r2, #512	@ 0x200
 800623c:	d001      	beq.n	8006242 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1f7      	bne.n	8006232 <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8006242:	4b04      	ldr	r3, [pc, #16]	@ (8006254 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800624a:	d101      	bne.n	8006250 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 800624c:	2000      	movs	r0, #0
 800624e:	4770      	bx	lr
    return HAL_TIMEOUT;
 8006250:	2003      	movs	r0, #3
}
 8006252:	4770      	bx	lr
 8006254:	58000400 	.word	0x58000400
 8006258:	20000074 	.word	0x20000074
 800625c:	431bde83 	.word	0x431bde83

08006260 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8006260:	4a0c      	ldr	r2, [pc, #48]	@ (8006294 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 8006262:	6813      	ldr	r3, [r2, #0]
 8006264:	f023 0307 	bic.w	r3, r3, #7
 8006268:	f043 0302 	orr.w	r3, r3, #2
 800626c:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800626e:	4a0a      	ldr	r2, [pc, #40]	@ (8006298 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8006270:	6913      	ldr	r3, [r2, #16]
 8006272:	f043 0304 	orr.w	r3, r3, #4
 8006276:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8006278:	2801      	cmp	r0, #1
 800627a:	d008      	beq.n	800628e <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800627c:	bf40      	sev
    __WFE();
 800627e:	bf20      	wfe
    __WFE();
 8006280:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006282:	4a05      	ldr	r2, [pc, #20]	@ (8006298 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8006284:	6913      	ldr	r3, [r2, #16]
 8006286:	f023 0304 	bic.w	r3, r3, #4
 800628a:	6113      	str	r3, [r2, #16]
}
 800628c:	4770      	bx	lr
    __WFI();
 800628e:	bf30      	wfi
 8006290:	e7f7      	b.n	8006282 <HAL_PWREx_EnterSTOP2Mode+0x22>
 8006292:	bf00      	nop
 8006294:	58000400 	.word	0x58000400
 8006298:	e000ed00 	.word	0xe000ed00

0800629c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800629c:	b530      	push	{r4, r5, lr}
 800629e:	b089      	sub	sp, #36	@ 0x24
 80062a0:	4604      	mov	r4, r0
 80062a2:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80062a4:	4b2a      	ldr	r3, [pc, #168]	@ (8006350 <RCC_SetFlashLatency+0xb4>)
 80062a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80062aa:	9006      	str	r0, [sp, #24]
 80062ac:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80062b0:	f103 0208 	add.w	r2, r3, #8
 80062b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80062b8:	9004      	str	r0, [sp, #16]
 80062ba:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80062be:	ad01      	add	r5, sp, #4
 80062c0:	3310      	adds	r3, #16
 80062c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80062c6:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80062ca:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 80062ce:	d007      	beq.n	80062e0 <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80062d0:	2300      	movs	r3, #0
 80062d2:	e014      	b.n	80062fe <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 80062d4:	aa08      	add	r2, sp, #32
 80062d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80062da:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 80062de:	e01e      	b.n	800631e <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80062e0:	2300      	movs	r3, #0
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d808      	bhi.n	80062f8 <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80062e6:	aa08      	add	r2, sp, #32
 80062e8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80062ec:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 80062f0:	42a2      	cmp	r2, r4
 80062f2:	d2ef      	bcs.n	80062d4 <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80062f4:	3301      	adds	r3, #1
 80062f6:	e7f4      	b.n	80062e2 <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80062f8:	2500      	movs	r5, #0
 80062fa:	e010      	b.n	800631e <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80062fc:	3301      	adds	r3, #1
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d80c      	bhi.n	800631c <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006302:	aa08      	add	r2, sp, #32
 8006304:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8006308:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 800630c:	42a2      	cmp	r2, r4
 800630e:	d3f5      	bcc.n	80062fc <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006310:	aa08      	add	r2, sp, #32
 8006312:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006316:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 800631a:	e000      	b.n	800631e <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800631c:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800631e:	4a0d      	ldr	r2, [pc, #52]	@ (8006354 <RCC_SetFlashLatency+0xb8>)
 8006320:	6813      	ldr	r3, [r2, #0]
 8006322:	f023 0307 	bic.w	r3, r3, #7
 8006326:	432b      	orrs	r3, r5
 8006328:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800632a:	f7fb fc77 	bl	8001c1c <HAL_GetTick>
 800632e:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006330:	4b08      	ldr	r3, [pc, #32]	@ (8006354 <RCC_SetFlashLatency+0xb8>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0307 	and.w	r3, r3, #7
 8006338:	42ab      	cmp	r3, r5
 800633a:	d006      	beq.n	800634a <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800633c:	f7fb fc6e 	bl	8001c1c <HAL_GetTick>
 8006340:	1b00      	subs	r0, r0, r4
 8006342:	2802      	cmp	r0, #2
 8006344:	d9f4      	bls.n	8006330 <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 8006346:	2003      	movs	r0, #3
 8006348:	e000      	b.n	800634c <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 800634a:	2000      	movs	r0, #0
}
 800634c:	b009      	add	sp, #36	@ 0x24
 800634e:	bd30      	pop	{r4, r5, pc}
 8006350:	08016288 	.word	0x08016288
 8006354:	58004000 	.word	0x58004000

08006358 <RCC_SetFlashLatencyFromMSIRange>:
{
 8006358:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800635a:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800635e:	4b0c      	ldr	r3, [pc, #48]	@ (8006390 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 8006360:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006364:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006368:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800636c:	f003 030f 	and.w	r3, r3, #15
 8006370:	4a08      	ldr	r2, [pc, #32]	@ (8006394 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 8006372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006376:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800637a:	f7ff ff3b 	bl	80061f4 <HAL_PWREx_GetVoltageRange>
 800637e:	4601      	mov	r1, r0
 8006380:	4b05      	ldr	r3, [pc, #20]	@ (8006398 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 8006382:	fba3 3404 	umull	r3, r4, r3, r4
 8006386:	0ca0      	lsrs	r0, r4, #18
 8006388:	f7ff ff88 	bl	800629c <RCC_SetFlashLatency>
}
 800638c:	bd10      	pop	{r4, pc}
 800638e:	bf00      	nop
 8006390:	080169e4 	.word	0x080169e4
 8006394:	08016a44 	.word	0x08016a44
 8006398:	431bde83 	.word	0x431bde83

0800639c <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800639c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063a0:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80063a8:	f011 010c 	ands.w	r1, r1, #12
 80063ac:	d00a      	beq.n	80063c4 <HAL_RCC_GetSysClockFreq+0x28>
 80063ae:	290c      	cmp	r1, #12
 80063b0:	d006      	beq.n	80063c0 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80063b2:	2904      	cmp	r1, #4
 80063b4:	d047      	beq.n	8006446 <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80063b6:	2908      	cmp	r1, #8
 80063b8:	d03b      	beq.n	8006432 <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 80063ba:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 80063bc:	4610      	mov	r0, r2
 80063be:	e026      	b.n	800640e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d1f6      	bne.n	80063b2 <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80063c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f013 0308 	ands.w	r3, r3, #8
 80063ce:	d00d      	beq.n	80063ec <HAL_RCC_GetSysClockFreq+0x50>
 80063d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f013 0308 	ands.w	r3, r3, #8
 80063da:	d124      	bne.n	8006426 <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80063dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063e0:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80063e4:	4a2e      	ldr	r2, [pc, #184]	@ (80064a0 <HAL_RCC_GetSysClockFreq+0x104>)
 80063e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80063ea:	e00e      	b.n	800640a <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80063ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063f0:	6812      	ldr	r2, [r2, #0]
 80063f2:	f012 0f08 	tst.w	r2, #8
 80063f6:	d112      	bne.n	800641e <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80063f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006400:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8006404:	4a26      	ldr	r2, [pc, #152]	@ (80064a0 <HAL_RCC_GetSysClockFreq+0x104>)
 8006406:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800640a:	b1d1      	cbz	r1, 8006442 <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 800640c:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800640e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006418:	2b0c      	cmp	r3, #12
 800641a:	d01a      	beq.n	8006452 <HAL_RCC_GetSysClockFreq+0xb6>
}
 800641c:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800641e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006422:	6812      	ldr	r2, [r2, #0]
 8006424:	e7ee      	b.n	8006404 <HAL_RCC_GetSysClockFreq+0x68>
 8006426:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800642a:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800642c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006430:	e7d8      	b.n	80063e4 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006432:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	f412 1280 	ands.w	r2, r2, #1048576	@ 0x100000
 800643c:	d106      	bne.n	800644c <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 800643e:	4819      	ldr	r0, [pc, #100]	@ (80064a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006440:	e7e5      	b.n	800640e <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 8006442:	4610      	mov	r0, r2
 8006444:	e7e3      	b.n	800640e <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8006446:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 8006448:	4817      	ldr	r0, [pc, #92]	@ (80064a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800644a:	e7e0      	b.n	800640e <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 800644c:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 800644e:	4816      	ldr	r0, [pc, #88]	@ (80064a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006450:	e7dd      	b.n	800640e <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006452:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800645c:	2b02      	cmp	r3, #2
 800645e:	d009      	beq.n	8006474 <HAL_RCC_GetSysClockFreq+0xd8>
 8006460:	2b03      	cmp	r3, #3
 8006462:	d108      	bne.n	8006476 <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006464:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800646e:	d115      	bne.n	800649c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8006470:	4a0c      	ldr	r2, [pc, #48]	@ (80064a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006472:	e000      	b.n	8006476 <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 8006474:	4a0c      	ldr	r2, [pc, #48]	@ (80064a8 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006476:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800647a:	68cb      	ldr	r3, [r1, #12]
 800647c:	f3c3 2306 	ubfx	r3, r3, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006480:	fb03 f202 	mul.w	r2, r3, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006484:	68cb      	ldr	r3, [r1, #12]
 8006486:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800648a:	3301      	adds	r3, #1
 800648c:	fbb2 f2f3 	udiv	r2, r2, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006490:	68c8      	ldr	r0, [r1, #12]
 8006492:	0f40      	lsrs	r0, r0, #29
 8006494:	3001      	adds	r0, #1
 8006496:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 800649a:	e7bf      	b.n	800641c <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 800649c:	4a02      	ldr	r2, [pc, #8]	@ (80064a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800649e:	e7ea      	b.n	8006476 <HAL_RCC_GetSysClockFreq+0xda>
 80064a0:	080169e4 	.word	0x080169e4
 80064a4:	01e84800 	.word	0x01e84800
 80064a8:	00f42400 	.word	0x00f42400

080064ac <HAL_RCC_GetHCLKFreq>:
{
 80064ac:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80064ae:	f7ff ff75 	bl	800639c <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80064b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80064bc:	4a02      	ldr	r2, [pc, #8]	@ (80064c8 <HAL_RCC_GetHCLKFreq+0x1c>)
 80064be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80064c2:	fbb0 f0f3 	udiv	r0, r0, r3
 80064c6:	bd08      	pop	{r3, pc}
 80064c8:	08016a44 	.word	0x08016a44

080064cc <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80064cc:	2800      	cmp	r0, #0
 80064ce:	f000 8311 	beq.w	8006af4 <HAL_RCC_OscConfig+0x628>
{
 80064d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064d4:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80064d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064da:	689d      	ldr	r5, [r3, #8]
 80064dc:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80064e0:	68de      	ldr	r6, [r3, #12]
 80064e2:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80064e6:	6803      	ldr	r3, [r0, #0]
 80064e8:	f013 0f20 	tst.w	r3, #32
 80064ec:	d02a      	beq.n	8006544 <HAL_RCC_OscConfig+0x78>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80064ee:	2d00      	cmp	r5, #0
 80064f0:	d065      	beq.n	80065be <HAL_RCC_OscConfig+0xf2>
 80064f2:	2d0c      	cmp	r5, #12
 80064f4:	d061      	beq.n	80065ba <HAL_RCC_OscConfig+0xee>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80064f6:	6a23      	ldr	r3, [r4, #32]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f000 80bf 	beq.w	800667c <HAL_RCC_OscConfig+0x1b0>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80064fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006502:	6813      	ldr	r3, [r2, #0]
 8006504:	f043 0301 	orr.w	r3, r3, #1
 8006508:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800650a:	f7fb fb87 	bl	8001c1c <HAL_GetTick>
 800650e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006510:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f013 0f02 	tst.w	r3, #2
 800651a:	f000 80a7 	beq.w	800666c <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800651e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	f042 0208 	orr.w	r2, r2, #8
 8006528:	601a      	str	r2, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8006530:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8006532:	430a      	orrs	r2, r1
 8006534:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006536:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800653e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006542:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006544:	6823      	ldr	r3, [r4, #0]
 8006546:	f013 0f01 	tst.w	r3, #1
 800654a:	f000 80b5 	beq.w	80066b8 <HAL_RCC_OscConfig+0x1ec>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800654e:	2d08      	cmp	r5, #8
 8006550:	f000 80ae 	beq.w	80066b0 <HAL_RCC_OscConfig+0x1e4>
 8006554:	2d0c      	cmp	r5, #12
 8006556:	f000 80a8 	beq.w	80066aa <HAL_RCC_OscConfig+0x1de>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800655a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800655e:	6813      	ldr	r3, [r2, #0]
 8006560:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006564:	68a1      	ldr	r1, [r4, #8]
 8006566:	430b      	orrs	r3, r1
 8006568:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800656a:	6863      	ldr	r3, [r4, #4]
 800656c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006570:	f000 80c4 	beq.w	80066fc <HAL_RCC_OscConfig+0x230>
 8006574:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8006578:	f000 80c5 	beq.w	8006706 <HAL_RCC_OscConfig+0x23a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800657c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006586:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 800658e:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006590:	6863      	ldr	r3, [r4, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	f000 80c2 	beq.w	800671c <HAL_RCC_OscConfig+0x250>
        tickstart = HAL_GetTick();
 8006598:	f7fb fb40 	bl	8001c1c <HAL_GetTick>
 800659c:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800659e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80065a8:	f040 8086 	bne.w	80066b8 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065ac:	f7fb fb36 	bl	8001c1c <HAL_GetTick>
 80065b0:	1bc0      	subs	r0, r0, r7
 80065b2:	2864      	cmp	r0, #100	@ 0x64
 80065b4:	d9f3      	bls.n	800659e <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 80065b6:	2003      	movs	r0, #3
 80065b8:	e2a9      	b.n	8006b0e <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80065ba:	2e01      	cmp	r6, #1
 80065bc:	d19b      	bne.n	80064f6 <HAL_RCC_OscConfig+0x2a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80065be:	6a23      	ldr	r3, [r4, #32]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 8299 	beq.w	8006af8 <HAL_RCC_OscConfig+0x62c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80065c6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80065c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f013 0f08 	tst.w	r3, #8
 80065d2:	d029      	beq.n	8006628 <HAL_RCC_OscConfig+0x15c>
 80065d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80065de:	4298      	cmp	r0, r3
 80065e0:	d92a      	bls.n	8006638 <HAL_RCC_OscConfig+0x16c>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80065e2:	f7ff feb9 	bl	8006358 <RCC_SetFlashLatencyFromMSIRange>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	f040 8288 	bne.w	8006afc <HAL_RCC_OscConfig+0x630>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80065ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	f042 0208 	orr.w	r2, r2, #8
 80065f6:	601a      	str	r2, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80065fe:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8006600:	430a      	orrs	r2, r1
 8006602:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006604:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006606:	685a      	ldr	r2, [r3, #4]
 8006608:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800660c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006610:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006612:	f7ff ff4b 	bl	80064ac <HAL_RCC_GetHCLKFreq>
 8006616:	4bba      	ldr	r3, [pc, #744]	@ (8006900 <HAL_RCC_OscConfig+0x434>)
 8006618:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 800661a:	4bba      	ldr	r3, [pc, #744]	@ (8006904 <HAL_RCC_OscConfig+0x438>)
 800661c:	6818      	ldr	r0, [r3, #0]
 800661e:	f7fb fafb 	bl	8001c18 <HAL_InitTick>
        if (status != HAL_OK)
 8006622:	2800      	cmp	r0, #0
 8006624:	d08e      	beq.n	8006544 <HAL_RCC_OscConfig+0x78>
 8006626:	e272      	b.n	8006b0e <HAL_RCC_OscConfig+0x642>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006628:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800662c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006630:	091b      	lsrs	r3, r3, #4
 8006632:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006636:	e7d2      	b.n	80065de <HAL_RCC_OscConfig+0x112>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006638:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	f042 0208 	orr.w	r2, r2, #8
 8006642:	601a      	str	r2, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800664a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800664c:	430a      	orrs	r2, r1
 800664e:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006650:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006652:	685a      	ldr	r2, [r3, #4]
 8006654:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8006658:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800665c:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800665e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8006660:	f7ff fe7a 	bl	8006358 <RCC_SetFlashLatencyFromMSIRange>
 8006664:	2800      	cmp	r0, #0
 8006666:	d0d4      	beq.n	8006612 <HAL_RCC_OscConfig+0x146>
            return HAL_ERROR;
 8006668:	2001      	movs	r0, #1
 800666a:	e250      	b.n	8006b0e <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800666c:	f7fb fad6 	bl	8001c1c <HAL_GetTick>
 8006670:	1bc0      	subs	r0, r0, r7
 8006672:	2802      	cmp	r0, #2
 8006674:	f67f af4c 	bls.w	8006510 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 8006678:	2003      	movs	r0, #3
 800667a:	e248      	b.n	8006b0e <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800667c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006680:	6813      	ldr	r3, [r2, #0]
 8006682:	f023 0301 	bic.w	r3, r3, #1
 8006686:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006688:	f7fb fac8 	bl	8001c1c <HAL_GetTick>
 800668c:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800668e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f013 0f02 	tst.w	r3, #2
 8006698:	f43f af54 	beq.w	8006544 <HAL_RCC_OscConfig+0x78>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800669c:	f7fb fabe 	bl	8001c1c <HAL_GetTick>
 80066a0:	1bc0      	subs	r0, r0, r7
 80066a2:	2802      	cmp	r0, #2
 80066a4:	d9f3      	bls.n	800668e <HAL_RCC_OscConfig+0x1c2>
            return HAL_TIMEOUT;
 80066a6:	2003      	movs	r0, #3
 80066a8:	e231      	b.n	8006b0e <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80066aa:	2e03      	cmp	r6, #3
 80066ac:	f47f af55 	bne.w	800655a <HAL_RCC_OscConfig+0x8e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80066b0:	6863      	ldr	r3, [r4, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f000 8224 	beq.w	8006b00 <HAL_RCC_OscConfig+0x634>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066b8:	6823      	ldr	r3, [r4, #0]
 80066ba:	f013 0f02 	tst.w	r3, #2
 80066be:	d056      	beq.n	800676e <HAL_RCC_OscConfig+0x2a2>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80066c0:	2d04      	cmp	r5, #4
 80066c2:	d03d      	beq.n	8006740 <HAL_RCC_OscConfig+0x274>
 80066c4:	2d0c      	cmp	r5, #12
 80066c6:	d039      	beq.n	800673c <HAL_RCC_OscConfig+0x270>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80066c8:	6923      	ldr	r3, [r4, #16]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f000 808a 	beq.w	80067e4 <HAL_RCC_OscConfig+0x318>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80066d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066d4:	6813      	ldr	r3, [r2, #0]
 80066d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066da:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80066dc:	f7fb fa9e 	bl	8001c1c <HAL_GetTick>
 80066e0:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80066e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80066ec:	d136      	bne.n	800675c <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066ee:	f7fb fa95 	bl	8001c1c <HAL_GetTick>
 80066f2:	1b80      	subs	r0, r0, r6
 80066f4:	2802      	cmp	r0, #2
 80066f6:	d9f4      	bls.n	80066e2 <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 80066f8:	2003      	movs	r0, #3
 80066fa:	e208      	b.n	8006b0e <HAL_RCC_OscConfig+0x642>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80066fc:	6813      	ldr	r3, [r2, #0]
 80066fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006702:	6013      	str	r3, [r2, #0]
}
 8006704:	e744      	b.n	8006590 <HAL_RCC_OscConfig+0xc4>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006706:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8006710:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006718:	601a      	str	r2, [r3, #0]
}
 800671a:	e739      	b.n	8006590 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 800671c:	f7fb fa7e 	bl	8001c1c <HAL_GetTick>
 8006720:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006722:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800672c:	d0c4      	beq.n	80066b8 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800672e:	f7fb fa75 	bl	8001c1c <HAL_GetTick>
 8006732:	1bc0      	subs	r0, r0, r7
 8006734:	2864      	cmp	r0, #100	@ 0x64
 8006736:	d9f4      	bls.n	8006722 <HAL_RCC_OscConfig+0x256>
            return HAL_TIMEOUT;
 8006738:	2003      	movs	r0, #3
 800673a:	e1e8      	b.n	8006b0e <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800673c:	2e02      	cmp	r6, #2
 800673e:	d1c3      	bne.n	80066c8 <HAL_RCC_OscConfig+0x1fc>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006740:	6923      	ldr	r3, [r4, #16]
 8006742:	2b00      	cmp	r3, #0
 8006744:	f000 81de 	beq.w	8006b04 <HAL_RCC_OscConfig+0x638>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006748:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800674a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800674e:	6853      	ldr	r3, [r2, #4]
 8006750:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006754:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006758:	6053      	str	r3, [r2, #4]
}
 800675a:	e008      	b.n	800676e <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800675c:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800675e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006762:	6853      	ldr	r3, [r2, #4]
 8006764:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006768:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800676c:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800676e:	6823      	ldr	r3, [r4, #0]
 8006770:	f013 0f08 	tst.w	r3, #8
 8006774:	d07e      	beq.n	8006874 <HAL_RCC_OscConfig+0x3a8>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006776:	69a3      	ldr	r3, [r4, #24]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d062      	beq.n	8006842 <HAL_RCC_OscConfig+0x376>
      uint32_t csr_temp = RCC->CSR;
 800677c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006780:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8006784:	69e1      	ldr	r1, [r4, #28]
 8006786:	f003 0210 	and.w	r2, r3, #16
 800678a:	4291      	cmp	r1, r2
 800678c:	d011      	beq.n	80067b2 <HAL_RCC_OscConfig+0x2e6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800678e:	f003 0203 	and.w	r2, r3, #3
 8006792:	2a02      	cmp	r2, #2
 8006794:	f000 81b8 	beq.w	8006b08 <HAL_RCC_OscConfig+0x63c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8006798:	f013 0f01 	tst.w	r3, #1
 800679c:	d138      	bne.n	8006810 <HAL_RCC_OscConfig+0x344>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800679e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80067a2:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 80067a6:	f023 0310 	bic.w	r3, r3, #16
 80067aa:	69e1      	ldr	r1, [r4, #28]
 80067ac:	430b      	orrs	r3, r1
 80067ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80067b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80067b6:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 80067ba:	f043 0301 	orr.w	r3, r3, #1
 80067be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80067c2:	f7fb fa2b 	bl	8001c1c <HAL_GetTick>
 80067c6:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80067c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067d0:	f013 0f02 	tst.w	r3, #2
 80067d4:	d14e      	bne.n	8006874 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067d6:	f7fb fa21 	bl	8001c1c <HAL_GetTick>
 80067da:	1b80      	subs	r0, r0, r6
 80067dc:	2811      	cmp	r0, #17
 80067de:	d9f3      	bls.n	80067c8 <HAL_RCC_OscConfig+0x2fc>
          return HAL_TIMEOUT;
 80067e0:	2003      	movs	r0, #3
 80067e2:	e194      	b.n	8006b0e <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80067e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80067e8:	6813      	ldr	r3, [r2, #0]
 80067ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067ee:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80067f0:	f7fb fa14 	bl	8001c1c <HAL_GetTick>
 80067f4:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80067f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8006800:	d0b5      	beq.n	800676e <HAL_RCC_OscConfig+0x2a2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006802:	f7fb fa0b 	bl	8001c1c <HAL_GetTick>
 8006806:	1b80      	subs	r0, r0, r6
 8006808:	2802      	cmp	r0, #2
 800680a:	d9f4      	bls.n	80067f6 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 800680c:	2003      	movs	r0, #3
 800680e:	e17e      	b.n	8006b0e <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8006810:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006814:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8006818:	f023 0301 	bic.w	r3, r3, #1
 800681c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
          tickstart = HAL_GetTick();
 8006820:	f7fb f9fc 	bl	8001c1c <HAL_GetTick>
 8006824:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8006826:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800682a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800682e:	f013 0f02 	tst.w	r3, #2
 8006832:	d0b4      	beq.n	800679e <HAL_RCC_OscConfig+0x2d2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006834:	f7fb f9f2 	bl	8001c1c <HAL_GetTick>
 8006838:	1b80      	subs	r0, r0, r6
 800683a:	2811      	cmp	r0, #17
 800683c:	d9f3      	bls.n	8006826 <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 800683e:	2003      	movs	r0, #3
 8006840:	e165      	b.n	8006b0e <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8006842:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006846:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800684a:	f023 0301 	bic.w	r3, r3, #1
 800684e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8006852:	f7fb f9e3 	bl	8001c1c <HAL_GetTick>
 8006856:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8006858:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800685c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006860:	f013 0f02 	tst.w	r3, #2
 8006864:	d006      	beq.n	8006874 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006866:	f7fb f9d9 	bl	8001c1c <HAL_GetTick>
 800686a:	1b80      	subs	r0, r0, r6
 800686c:	2811      	cmp	r0, #17
 800686e:	d9f3      	bls.n	8006858 <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 8006870:	2003      	movs	r0, #3
 8006872:	e14c      	b.n	8006b0e <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006874:	6823      	ldr	r3, [r4, #0]
 8006876:	f013 0f04 	tst.w	r3, #4
 800687a:	f000 80b8 	beq.w	80069ee <HAL_RCC_OscConfig+0x522>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800687e:	4b22      	ldr	r3, [pc, #136]	@ (8006908 <HAL_RCC_OscConfig+0x43c>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8006886:	d110      	bne.n	80068aa <HAL_RCC_OscConfig+0x3de>
      HAL_PWR_EnableBkUpAccess();
 8006888:	f7ff fc86 	bl	8006198 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 800688c:	f7fb f9c6 	bl	8001c1c <HAL_GetTick>
 8006890:	4606      	mov	r6, r0
 8006892:	4b1d      	ldr	r3, [pc, #116]	@ (8006908 <HAL_RCC_OscConfig+0x43c>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800689a:	d106      	bne.n	80068aa <HAL_RCC_OscConfig+0x3de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800689c:	f7fb f9be 	bl	8001c1c <HAL_GetTick>
 80068a0:	1b80      	subs	r0, r0, r6
 80068a2:	2802      	cmp	r0, #2
 80068a4:	d9f5      	bls.n	8006892 <HAL_RCC_OscConfig+0x3c6>
          return HAL_TIMEOUT;
 80068a6:	2003      	movs	r0, #3
 80068a8:	e131      	b.n	8006b0e <HAL_RCC_OscConfig+0x642>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80068aa:	68e3      	ldr	r3, [r4, #12]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d068      	beq.n	8006982 <HAL_RCC_OscConfig+0x4b6>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80068b0:	2b85      	cmp	r3, #133	@ 0x85
 80068b2:	d001      	beq.n	80068b8 <HAL_RCC_OscConfig+0x3ec>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80068b4:	2b05      	cmp	r3, #5
 80068b6:	d107      	bne.n	80068c8 <HAL_RCC_OscConfig+0x3fc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80068b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80068bc:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80068c0:	f043 0304 	orr.w	r3, r3, #4
 80068c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 80068c8:	f7fb f9a8 	bl	8001c1c <HAL_GetTick>
 80068cc:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80068ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80068d2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80068d6:	f043 0301 	orr.w	r3, r3, #1
 80068da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80068de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068e6:	f013 0f02 	tst.w	r3, #2
 80068ea:	d10f      	bne.n	800690c <HAL_RCC_OscConfig+0x440>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068ec:	f7fb f996 	bl	8001c1c <HAL_GetTick>
 80068f0:	1b80      	subs	r0, r0, r6
 80068f2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80068f6:	4298      	cmp	r0, r3
 80068f8:	d9f1      	bls.n	80068de <HAL_RCC_OscConfig+0x412>
          return HAL_TIMEOUT;
 80068fa:	2003      	movs	r0, #3
 80068fc:	e107      	b.n	8006b0e <HAL_RCC_OscConfig+0x642>
 80068fe:	bf00      	nop
 8006900:	20000074 	.word	0x20000074
 8006904:	20000078 	.word	0x20000078
 8006908:	58000400 	.word	0x58000400
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800690c:	68e3      	ldr	r3, [r4, #12]
 800690e:	2b81      	cmp	r3, #129	@ 0x81
 8006910:	d001      	beq.n	8006916 <HAL_RCC_OscConfig+0x44a>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8006912:	2b85      	cmp	r3, #133	@ 0x85
 8006914:	d11a      	bne.n	800694c <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 8006916:	f7fb f981 	bl	8001c1c <HAL_GetTick>
 800691a:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800691c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006920:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006924:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006928:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800692c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006930:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006934:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8006938:	d159      	bne.n	80069ee <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800693a:	f7fb f96f 	bl	8001c1c <HAL_GetTick>
 800693e:	1b80      	subs	r0, r0, r6
 8006940:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006944:	4298      	cmp	r0, r3
 8006946:	d9f1      	bls.n	800692c <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 8006948:	2003      	movs	r0, #3
 800694a:	e0e0      	b.n	8006b0e <HAL_RCC_OscConfig+0x642>
        tickstart = HAL_GetTick();
 800694c:	f7fb f966 	bl	8001c1c <HAL_GetTick>
 8006950:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006952:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006956:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800695a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800695e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006962:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800696a:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800696e:	d03e      	beq.n	80069ee <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006970:	f7fb f954 	bl	8001c1c <HAL_GetTick>
 8006974:	1b80      	subs	r0, r0, r6
 8006976:	f241 3388 	movw	r3, #5000	@ 0x1388
 800697a:	4298      	cmp	r0, r3
 800697c:	d9f1      	bls.n	8006962 <HAL_RCC_OscConfig+0x496>
            return HAL_TIMEOUT;
 800697e:	2003      	movs	r0, #3
 8006980:	e0c5      	b.n	8006b0e <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 8006982:	f7fb f94b 	bl	8001c1c <HAL_GetTick>
 8006986:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006988:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800698c:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006990:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006994:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006998:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800699c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069a0:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80069a4:	d008      	beq.n	80069b8 <HAL_RCC_OscConfig+0x4ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069a6:	f7fb f939 	bl	8001c1c <HAL_GetTick>
 80069aa:	1b80      	subs	r0, r0, r6
 80069ac:	f241 3388 	movw	r3, #5000	@ 0x1388
 80069b0:	4298      	cmp	r0, r3
 80069b2:	d9f1      	bls.n	8006998 <HAL_RCC_OscConfig+0x4cc>
          return HAL_TIMEOUT;
 80069b4:	2003      	movs	r0, #3
 80069b6:	e0aa      	b.n	8006b0e <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 80069b8:	f7fb f930 	bl	8001c1c <HAL_GetTick>
 80069bc:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80069be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80069c2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80069c6:	f023 0301 	bic.w	r3, r3, #1
 80069ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80069ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069d6:	f013 0f02 	tst.w	r3, #2
 80069da:	d008      	beq.n	80069ee <HAL_RCC_OscConfig+0x522>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069dc:	f7fb f91e 	bl	8001c1c <HAL_GetTick>
 80069e0:	1b80      	subs	r0, r0, r6
 80069e2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80069e6:	4298      	cmp	r0, r3
 80069e8:	d9f1      	bls.n	80069ce <HAL_RCC_OscConfig+0x502>
          return HAL_TIMEOUT;
 80069ea:	2003      	movs	r0, #3
 80069ec:	e08f      	b.n	8006b0e <HAL_RCC_OscConfig+0x642>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80069ee:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f000 808b 	beq.w	8006b0c <HAL_RCC_OscConfig+0x640>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80069f6:	2d0c      	cmp	r5, #12
 80069f8:	d060      	beq.n	8006abc <HAL_RCC_OscConfig+0x5f0>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d016      	beq.n	8006a2c <HAL_RCC_OscConfig+0x560>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80069fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a02:	6813      	ldr	r3, [r2, #0]
 8006a04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a08:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006a0a:	f7fb f907 	bl	8001c1c <HAL_GetTick>
 8006a0e:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006a10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8006a1a:	d148      	bne.n	8006aae <HAL_RCC_OscConfig+0x5e2>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8006a1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a20:	68d1      	ldr	r1, [r2, #12]
 8006a22:	4b41      	ldr	r3, [pc, #260]	@ (8006b28 <HAL_RCC_OscConfig+0x65c>)
 8006a24:	400b      	ands	r3, r1
 8006a26:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8006a28:	2000      	movs	r0, #0
 8006a2a:	e070      	b.n	8006b0e <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006a2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a30:	6813      	ldr	r3, [r2, #0]
 8006a32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a36:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006a38:	f7fb f8f0 	bl	8001c1c <HAL_GetTick>
 8006a3c:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006a3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8006a48:	d12a      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a4e:	68d3      	ldr	r3, [r2, #12]
 8006a50:	4936      	ldr	r1, [pc, #216]	@ (8006b2c <HAL_RCC_OscConfig+0x660>)
 8006a52:	4019      	ands	r1, r3
 8006a54:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006a56:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8006a58:	4303      	orrs	r3, r0
 8006a5a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8006a5c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8006a60:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8006a62:	4303      	orrs	r3, r0
 8006a64:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8006a66:	4303      	orrs	r3, r0
 8006a68:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8006a6a:	4303      	orrs	r3, r0
 8006a6c:	4319      	orrs	r1, r3
 8006a6e:	60d1      	str	r1, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006a70:	6813      	ldr	r3, [r2, #0]
 8006a72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a76:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a78:	68d3      	ldr	r3, [r2, #12]
 8006a7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a7e:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8006a80:	f7fb f8cc 	bl	8001c1c <HAL_GetTick>
 8006a84:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006a86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8006a90:	d13e      	bne.n	8006b10 <HAL_RCC_OscConfig+0x644>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a92:	f7fb f8c3 	bl	8001c1c <HAL_GetTick>
 8006a96:	1b00      	subs	r0, r0, r4
 8006a98:	280a      	cmp	r0, #10
 8006a9a:	d9f4      	bls.n	8006a86 <HAL_RCC_OscConfig+0x5ba>
            return HAL_TIMEOUT;
 8006a9c:	2003      	movs	r0, #3
 8006a9e:	e036      	b.n	8006b0e <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006aa0:	f7fb f8bc 	bl	8001c1c <HAL_GetTick>
 8006aa4:	1b40      	subs	r0, r0, r5
 8006aa6:	280a      	cmp	r0, #10
 8006aa8:	d9c9      	bls.n	8006a3e <HAL_RCC_OscConfig+0x572>
            return HAL_TIMEOUT;
 8006aaa:	2003      	movs	r0, #3
 8006aac:	e02f      	b.n	8006b0e <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006aae:	f7fb f8b5 	bl	8001c1c <HAL_GetTick>
 8006ab2:	1b00      	subs	r0, r0, r4
 8006ab4:	280a      	cmp	r0, #10
 8006ab6:	d9ab      	bls.n	8006a10 <HAL_RCC_OscConfig+0x544>
            return HAL_TIMEOUT;
 8006ab8:	2003      	movs	r0, #3
 8006aba:	e028      	b.n	8006b0e <HAL_RCC_OscConfig+0x642>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d029      	beq.n	8006b14 <HAL_RCC_OscConfig+0x648>
        pll_config = RCC->PLLCFGR;
 8006ac0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ac4:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8006ac6:	f003 0103 	and.w	r1, r3, #3
 8006aca:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8006acc:	4291      	cmp	r1, r2
 8006ace:	d123      	bne.n	8006b18 <HAL_RCC_OscConfig+0x64c>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8006ad0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006ad4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ad6:	428a      	cmp	r2, r1
 8006ad8:	d120      	bne.n	8006b1c <HAL_RCC_OscConfig+0x650>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8006ada:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006ade:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006ae0:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8006ae4:	d11c      	bne.n	8006b20 <HAL_RCC_OscConfig+0x654>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8006ae6:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8006aea:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d119      	bne.n	8006b24 <HAL_RCC_OscConfig+0x658>
  return HAL_OK;
 8006af0:	2000      	movs	r0, #0
 8006af2:	e00c      	b.n	8006b0e <HAL_RCC_OscConfig+0x642>
    return HAL_ERROR;
 8006af4:	2001      	movs	r0, #1
}
 8006af6:	4770      	bx	lr
        return HAL_ERROR;
 8006af8:	2001      	movs	r0, #1
 8006afa:	e008      	b.n	8006b0e <HAL_RCC_OscConfig+0x642>
            return HAL_ERROR;
 8006afc:	2001      	movs	r0, #1
 8006afe:	e006      	b.n	8006b0e <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8006b00:	2001      	movs	r0, #1
 8006b02:	e004      	b.n	8006b0e <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8006b04:	2001      	movs	r0, #1
 8006b06:	e002      	b.n	8006b0e <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8006b08:	2001      	movs	r0, #1
 8006b0a:	e000      	b.n	8006b0e <HAL_RCC_OscConfig+0x642>
  return HAL_OK;
 8006b0c:	2000      	movs	r0, #0
}
 8006b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8006b10:	2000      	movs	r0, #0
 8006b12:	e7fc      	b.n	8006b0e <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8006b14:	2001      	movs	r0, #1
 8006b16:	e7fa      	b.n	8006b0e <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8006b18:	2001      	movs	r0, #1
 8006b1a:	e7f8      	b.n	8006b0e <HAL_RCC_OscConfig+0x642>
 8006b1c:	2001      	movs	r0, #1
 8006b1e:	e7f6      	b.n	8006b0e <HAL_RCC_OscConfig+0x642>
 8006b20:	2001      	movs	r0, #1
 8006b22:	e7f4      	b.n	8006b0e <HAL_RCC_OscConfig+0x642>
 8006b24:	2001      	movs	r0, #1
 8006b26:	e7f2      	b.n	8006b0e <HAL_RCC_OscConfig+0x642>
 8006b28:	eefefffc 	.word	0xeefefffc
 8006b2c:	11c1808c 	.word	0x11c1808c

08006b30 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006b30:	2800      	cmp	r0, #0
 8006b32:	f000 8127 	beq.w	8006d84 <HAL_RCC_ClockConfig+0x254>
{
 8006b36:	b570      	push	{r4, r5, r6, lr}
 8006b38:	460c      	mov	r4, r1
 8006b3a:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b3c:	4b93      	ldr	r3, [pc, #588]	@ (8006d8c <HAL_RCC_ClockConfig+0x25c>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0307 	and.w	r3, r3, #7
 8006b44:	428b      	cmp	r3, r1
 8006b46:	d32d      	bcc.n	8006ba4 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b48:	682b      	ldr	r3, [r5, #0]
 8006b4a:	f013 0f02 	tst.w	r3, #2
 8006b4e:	d13f      	bne.n	8006bd0 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006b50:	682b      	ldr	r3, [r5, #0]
 8006b52:	f013 0f20 	tst.w	r3, #32
 8006b56:	d153      	bne.n	8006c00 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8006b58:	682b      	ldr	r3, [r5, #0]
 8006b5a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006b5e:	d16a      	bne.n	8006c36 <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b60:	682b      	ldr	r3, [r5, #0]
 8006b62:	f013 0f04 	tst.w	r3, #4
 8006b66:	f040 8083 	bne.w	8006c70 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b6a:	682b      	ldr	r3, [r5, #0]
 8006b6c:	f013 0f08 	tst.w	r3, #8
 8006b70:	f040 8097 	bne.w	8006ca2 <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b74:	682b      	ldr	r3, [r5, #0]
 8006b76:	f013 0f01 	tst.w	r3, #1
 8006b7a:	f000 80de 	beq.w	8006d3a <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b7e:	686b      	ldr	r3, [r5, #4]
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	f000 80a8 	beq.w	8006cd6 <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b86:	2b03      	cmp	r3, #3
 8006b88:	f000 80ad 	beq.w	8006ce6 <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f040 80b2 	bne.w	8006cf6 <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006b92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b96:	6812      	ldr	r2, [r2, #0]
 8006b98:	f012 0f02 	tst.w	r2, #2
 8006b9c:	f040 80b1 	bne.w	8006d02 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8006ba0:	2001      	movs	r0, #1
 8006ba2:	e0ee      	b.n	8006d82 <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ba4:	4a79      	ldr	r2, [pc, #484]	@ (8006d8c <HAL_RCC_ClockConfig+0x25c>)
 8006ba6:	6813      	ldr	r3, [r2, #0]
 8006ba8:	f023 0307 	bic.w	r3, r3, #7
 8006bac:	430b      	orrs	r3, r1
 8006bae:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006bb0:	f7fb f834 	bl	8001c1c <HAL_GetTick>
 8006bb4:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bb6:	4b75      	ldr	r3, [pc, #468]	@ (8006d8c <HAL_RCC_ClockConfig+0x25c>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0307 	and.w	r3, r3, #7
 8006bbe:	42a3      	cmp	r3, r4
 8006bc0:	d0c2      	beq.n	8006b48 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006bc2:	f7fb f82b 	bl	8001c1c <HAL_GetTick>
 8006bc6:	1b80      	subs	r0, r0, r6
 8006bc8:	2802      	cmp	r0, #2
 8006bca:	d9f4      	bls.n	8006bb6 <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8006bcc:	2003      	movs	r0, #3
 8006bce:	e0d8      	b.n	8006d82 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006bd0:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006bd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006bd6:	688a      	ldr	r2, [r1, #8]
 8006bd8:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006be0:	f7fb f81c 	bl	8001c1c <HAL_GetTick>
 8006be4:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006be6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8006bf0:	d1ae      	bne.n	8006b50 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006bf2:	f7fb f813 	bl	8001c1c <HAL_GetTick>
 8006bf6:	1b80      	subs	r0, r0, r6
 8006bf8:	2802      	cmp	r0, #2
 8006bfa:	d9f4      	bls.n	8006be6 <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8006bfc:	2003      	movs	r0, #3
 8006bfe:	e0c0      	b.n	8006d82 <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006c00:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8006c02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c06:	f8d1 2108 	ldr.w	r2, [r1, #264]	@ 0x108
 8006c0a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
    tickstart = HAL_GetTick();
 8006c14:	f7fb f802 	bl	8001c1c <HAL_GetTick>
 8006c18:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006c1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c1e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006c22:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8006c26:	d197      	bne.n	8006b58 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006c28:	f7fa fff8 	bl	8001c1c <HAL_GetTick>
 8006c2c:	1b80      	subs	r0, r0, r6
 8006c2e:	2802      	cmp	r0, #2
 8006c30:	d9f3      	bls.n	8006c1a <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 8006c32:	2003      	movs	r0, #3
 8006c34:	e0a5      	b.n	8006d82 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8006c36:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006c38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c3c:	f8d2 3108 	ldr.w	r3, [r2, #264]	@ 0x108
 8006c40:	f023 030f 	bic.w	r3, r3, #15
 8006c44:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8006c48:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
    tickstart = HAL_GetTick();
 8006c4c:	f7fa ffe6 	bl	8001c1c <HAL_GetTick>
 8006c50:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006c52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c56:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006c5a:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8006c5e:	f47f af7f 	bne.w	8006b60 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006c62:	f7fa ffdb 	bl	8001c1c <HAL_GetTick>
 8006c66:	1b80      	subs	r0, r0, r6
 8006c68:	2802      	cmp	r0, #2
 8006c6a:	d9f2      	bls.n	8006c52 <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 8006c6c:	2003      	movs	r0, #3
 8006c6e:	e088      	b.n	8006d82 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006c70:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006c72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c76:	688a      	ldr	r2, [r1, #8]
 8006c78:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006c80:	f7fa ffcc 	bl	8001c1c <HAL_GetTick>
 8006c84:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006c86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8006c90:	f47f af6b 	bne.w	8006b6a <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006c94:	f7fa ffc2 	bl	8001c1c <HAL_GetTick>
 8006c98:	1b80      	subs	r0, r0, r6
 8006c9a:	2802      	cmp	r0, #2
 8006c9c:	d9f3      	bls.n	8006c86 <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 8006c9e:	2003      	movs	r0, #3
 8006ca0:	e06f      	b.n	8006d82 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006ca2:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006ca4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ca8:	6893      	ldr	r3, [r2, #8]
 8006caa:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8006cae:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006cb2:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8006cb4:	f7fa ffb2 	bl	8001c1c <HAL_GetTick>
 8006cb8:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006cba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8006cc4:	f47f af56 	bne.w	8006b74 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006cc8:	f7fa ffa8 	bl	8001c1c <HAL_GetTick>
 8006ccc:	1b80      	subs	r0, r0, r6
 8006cce:	2802      	cmp	r0, #2
 8006cd0:	d9f3      	bls.n	8006cba <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 8006cd2:	2003      	movs	r0, #3
 8006cd4:	e055      	b.n	8006d82 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006cd6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006cda:	6812      	ldr	r2, [r2, #0]
 8006cdc:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8006ce0:	d10f      	bne.n	8006d02 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8006ce2:	2001      	movs	r0, #1
 8006ce4:	e04d      	b.n	8006d82 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006ce6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006cea:	6812      	ldr	r2, [r2, #0]
 8006cec:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8006cf0:	d107      	bne.n	8006d02 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8006cf2:	2001      	movs	r0, #1
 8006cf4:	e045      	b.n	8006d82 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006cf6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006cfa:	6812      	ldr	r2, [r2, #0]
 8006cfc:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8006d00:	d042      	beq.n	8006d88 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006d02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d06:	688a      	ldr	r2, [r1, #8]
 8006d08:	f022 0203 	bic.w	r2, r2, #3
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006d10:	f7fa ff84 	bl	8001c1c <HAL_GetTick>
 8006d14:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006d16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d20:	686a      	ldr	r2, [r5, #4]
 8006d22:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006d26:	d008      	beq.n	8006d3a <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d28:	f7fa ff78 	bl	8001c1c <HAL_GetTick>
 8006d2c:	1b80      	subs	r0, r0, r6
 8006d2e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006d32:	4298      	cmp	r0, r3
 8006d34:	d9ef      	bls.n	8006d16 <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 8006d36:	2003      	movs	r0, #3
 8006d38:	e023      	b.n	8006d82 <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d3a:	4b14      	ldr	r3, [pc, #80]	@ (8006d8c <HAL_RCC_ClockConfig+0x25c>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0307 	and.w	r3, r3, #7
 8006d42:	42a3      	cmp	r3, r4
 8006d44:	d915      	bls.n	8006d72 <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d46:	4a11      	ldr	r2, [pc, #68]	@ (8006d8c <HAL_RCC_ClockConfig+0x25c>)
 8006d48:	6813      	ldr	r3, [r2, #0]
 8006d4a:	f023 0307 	bic.w	r3, r3, #7
 8006d4e:	4323      	orrs	r3, r4
 8006d50:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006d52:	f7fa ff63 	bl	8001c1c <HAL_GetTick>
 8006d56:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d58:	4b0c      	ldr	r3, [pc, #48]	@ (8006d8c <HAL_RCC_ClockConfig+0x25c>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0307 	and.w	r3, r3, #7
 8006d60:	42a3      	cmp	r3, r4
 8006d62:	d006      	beq.n	8006d72 <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006d64:	f7fa ff5a 	bl	8001c1c <HAL_GetTick>
 8006d68:	1b40      	subs	r0, r0, r5
 8006d6a:	2802      	cmp	r0, #2
 8006d6c:	d9f4      	bls.n	8006d58 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 8006d6e:	2003      	movs	r0, #3
 8006d70:	e007      	b.n	8006d82 <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006d72:	f7ff fb9b 	bl	80064ac <HAL_RCC_GetHCLKFreq>
 8006d76:	4b06      	ldr	r3, [pc, #24]	@ (8006d90 <HAL_RCC_ClockConfig+0x260>)
 8006d78:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8006d7a:	4b06      	ldr	r3, [pc, #24]	@ (8006d94 <HAL_RCC_ClockConfig+0x264>)
 8006d7c:	6818      	ldr	r0, [r3, #0]
 8006d7e:	f7fa ff4b 	bl	8001c18 <HAL_InitTick>
}
 8006d82:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8006d84:	2001      	movs	r0, #1
}
 8006d86:	4770      	bx	lr
        return HAL_ERROR;
 8006d88:	2001      	movs	r0, #1
 8006d8a:	e7fa      	b.n	8006d82 <HAL_RCC_ClockConfig+0x252>
 8006d8c:	58004000 	.word	0x58004000
 8006d90:	20000074 	.word	0x20000074
 8006d94:	20000078 	.word	0x20000078

08006d98 <HAL_RCC_GetPCLK1Freq>:
{
 8006d98:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006d9a:	f7ff fb87 	bl	80064ac <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006d9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006da8:	4a02      	ldr	r2, [pc, #8]	@ (8006db4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8006dae:	40d8      	lsrs	r0, r3
 8006db0:	bd08      	pop	{r3, pc}
 8006db2:	bf00      	nop
 8006db4:	08016a24 	.word	0x08016a24

08006db8 <HAL_RCC_GetPCLK2Freq>:
{
 8006db8:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006dba:	f7ff fb77 	bl	80064ac <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006dbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006dc8:	4a02      	ldr	r2, [pc, #8]	@ (8006dd4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8006dce:	40d8      	lsrs	r0, r3
 8006dd0:	bd08      	pop	{r3, pc}
 8006dd2:	bf00      	nop
 8006dd4:	08016a24 	.word	0x08016a24

08006dd8 <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006dd8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ddc:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8006de0:	0902      	lsrs	r2, r0, #4
 8006de2:	f402 227f 	and.w	r2, r2, #1044480	@ 0xff000
 8006de6:	ea23 0302 	bic.w	r3, r3, r2
 8006dea:	0100      	lsls	r0, r0, #4
 8006dec:	f400 207f 	and.w	r0, r0, #1044480	@ 0xff000
 8006df0:	4303      	orrs	r3, r0
 8006df2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006df6:	4770      	bx	lr

08006df8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006df8:	b570      	push	{r4, r5, r6, lr}
 8006dfa:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006dfc:	6803      	ldr	r3, [r0, #0]
 8006dfe:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8006e02:	f040 80aa 	bne.w	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x162>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006e06:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e08:	6823      	ldr	r3, [r4, #0]
 8006e0a:	f013 0f01 	tst.w	r3, #1
 8006e0e:	d00a      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e10:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8006e12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006e16:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8006e1a:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8006e1e:	b292      	uxth	r2, r2
 8006e20:	4313      	orrs	r3, r2
 8006e22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e26:	6823      	ldr	r3, [r4, #0]
 8006e28:	f013 0f02 	tst.w	r3, #2
 8006e2c:	d00a      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e2e:	68a2      	ldr	r2, [r4, #8]
 8006e30:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006e34:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8006e38:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8006e3c:	b292      	uxth	r2, r2
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e44:	6823      	ldr	r3, [r4, #0]
 8006e46:	f013 0f20 	tst.w	r3, #32
 8006e4a:	d009      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e4c:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006e4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006e52:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006e56:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006e60:	6823      	ldr	r3, [r4, #0]
 8006e62:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8006e66:	d00c      	beq.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e68:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006e6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006e6e:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8006e72:	0c02      	lsrs	r2, r0, #16
 8006e74:	0412      	lsls	r2, r2, #16
 8006e76:	ea23 0302 	bic.w	r3, r3, r2
 8006e7a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006e7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006e82:	6823      	ldr	r3, [r4, #0]
 8006e84:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8006e88:	d00c      	beq.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e8a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8006e8c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006e90:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8006e94:	0c02      	lsrs	r2, r0, #16
 8006e96:	0412      	lsls	r2, r2, #16
 8006e98:	ea23 0302 	bic.w	r3, r3, r2
 8006e9c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006ea0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006ea4:	6823      	ldr	r3, [r4, #0]
 8006ea6:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8006eaa:	d00c      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006eac:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8006eae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006eb2:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8006eb6:	0c02      	lsrs	r2, r0, #16
 8006eb8:	0412      	lsls	r2, r2, #16
 8006eba:	ea23 0302 	bic.w	r3, r3, r2
 8006ebe:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006ec2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ec6:	6823      	ldr	r3, [r4, #0]
 8006ec8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006ecc:	f040 809d 	bne.w	800700a <HAL_RCCEx_PeriphCLKConfig+0x212>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ed0:	6823      	ldr	r3, [r4, #0]
 8006ed2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006ed6:	f040 809c 	bne.w	8007012 <HAL_RCCEx_PeriphCLKConfig+0x21a>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006eda:	6823      	ldr	r3, [r4, #0]
 8006edc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8006ee0:	f040 809b 	bne.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x222>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006ee4:	6823      	ldr	r3, [r4, #0]
 8006ee6:	f013 0f10 	tst.w	r3, #16
 8006eea:	d00e      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006eec:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006eee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ef2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006ef6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006efa:	4313      	orrs	r3, r2
 8006efc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006f00:	68e3      	ldr	r3, [r4, #12]
 8006f02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f06:	f000 808c 	beq.w	8007022 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006f0a:	6823      	ldr	r3, [r4, #0]
 8006f0c:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8006f10:	d00f      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f12:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006f14:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f18:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006f1c:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8006f20:	4313      	orrs	r3, r2
 8006f22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006f26:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006f28:	b91b      	cbnz	r3, 8006f32 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006f2a:	68cb      	ldr	r3, [r1, #12]
 8006f2c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f30:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f32:	6823      	ldr	r3, [r4, #0]
 8006f34:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8006f38:	d00d      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f3a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006f3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f40:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006f44:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006f4e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006f50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f54:	d06a      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x234>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8006f56:	4628      	mov	r0, r5
 8006f58:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 8006f5a:	f7ff f91d 	bl	8006198 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 8006f5e:	f7fa fe5d 	bl	8001c1c <HAL_GetTick>
 8006f62:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006f64:	4b34      	ldr	r3, [pc, #208]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8006f6c:	d106      	bne.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x184>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f6e:	f7fa fe55 	bl	8001c1c <HAL_GetTick>
 8006f72:	1b40      	subs	r0, r0, r5
 8006f74:	2802      	cmp	r0, #2
 8006f76:	d9f5      	bls.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x16c>
        ret = HAL_TIMEOUT;
 8006f78:	2503      	movs	r5, #3
 8006f7a:	e000      	b.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x186>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006f7c:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 8006f7e:	2d00      	cmp	r5, #0
 8006f80:	f47f af42 	bne.w	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006f84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006f90:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d024      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006f96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f9a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8006f9e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006fa2:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 8006fa6:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8006faa:	f8c3 1090 	str.w	r1, [r3, #144]	@ 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006fae:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 8006fb2:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8006fb6:	f8c3 1090 	str.w	r1, [r3, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 8006fba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006fbe:	f012 0f02 	tst.w	r2, #2
 8006fc2:	d10f      	bne.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      if (ret == HAL_OK)
 8006fc4:	2d00      	cmp	r5, #0
 8006fc6:	f47f af1f 	bne.w	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006fca:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006fcc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006fd0:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8006fd4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006fde:	e713      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	e7ec      	b.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x1c6>
        tickstart = HAL_GetTick();
 8006fe4:	f7fa fe1a 	bl	8001c1c <HAL_GetTick>
 8006fe8:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006fea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ff2:	f013 0f02 	tst.w	r3, #2
 8006ff6:	d1e5      	bne.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ff8:	f7fa fe10 	bl	8001c1c <HAL_GetTick>
 8006ffc:	1b80      	subs	r0, r0, r6
 8006ffe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007002:	4298      	cmp	r0, r3
 8007004:	d9f1      	bls.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            ret = HAL_TIMEOUT;
 8007006:	2503      	movs	r5, #3
 8007008:	e7dc      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800700a:	6960      	ldr	r0, [r4, #20]
 800700c:	f7ff fee4 	bl	8006dd8 <LL_RCC_SetI2CClockSource>
 8007010:	e75e      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007012:	69a0      	ldr	r0, [r4, #24]
 8007014:	f7ff fee0 	bl	8006dd8 <LL_RCC_SetI2CClockSource>
 8007018:	e75f      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800701a:	69e0      	ldr	r0, [r4, #28]
 800701c:	f7ff fedc 	bl	8006dd8 <LL_RCC_SetI2CClockSource>
 8007020:	e760      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8007022:	68cb      	ldr	r3, [r1, #12]
 8007024:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007028:	60cb      	str	r3, [r1, #12]
 800702a:	e76e      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800702c:	68cb      	ldr	r3, [r1, #12]
 800702e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007032:	60cb      	str	r3, [r1, #12]
 8007034:	e78f      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8007036:	bf00      	nop
 8007038:	58000400 	.word	0x58000400

0800703c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800703c:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800703e:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 8007042:	2a01      	cmp	r2, #1
 8007044:	d035      	beq.n	80070b2 <HAL_RTC_DeactivateAlarm+0x76>
 8007046:	2201      	movs	r2, #1
 8007048:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800704c:	2202      	movs	r2, #2
 800704e:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007052:	4a19      	ldr	r2, [pc, #100]	@ (80070b8 <HAL_RTC_DeactivateAlarm+0x7c>)
 8007054:	20ca      	movs	r0, #202	@ 0xca
 8007056:	6250      	str	r0, [r2, #36]	@ 0x24
 8007058:	2053      	movs	r0, #83	@ 0x53
 800705a:	6250      	str	r0, [r2, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 800705c:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8007060:	d018      	beq.n	8007094 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007062:	4a15      	ldr	r2, [pc, #84]	@ (80070b8 <HAL_RTC_DeactivateAlarm+0x7c>)
 8007064:	6991      	ldr	r1, [r2, #24]
 8007066:	f421 5108 	bic.w	r1, r1, #8704	@ 0x2200
 800706a:	6191      	str	r1, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 800706c:	6cd1      	ldr	r1, [r2, #76]	@ 0x4c
 800706e:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8007072:	64d1      	str	r1, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8007074:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007076:	f021 0102 	bic.w	r1, r1, #2
 800707a:	6319      	str	r1, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800707c:	2102      	movs	r1, #2
 800707e:	65d1      	str	r1, [r2, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007080:	4a0d      	ldr	r2, [pc, #52]	@ (80070b8 <HAL_RTC_DeactivateAlarm+0x7c>)
 8007082:	21ff      	movs	r1, #255	@ 0xff
 8007084:	6251      	str	r1, [r2, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007086:	2201      	movs	r2, #1
 8007088:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800708c:	2000      	movs	r0, #0
 800708e:	f883 002c 	strb.w	r0, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007092:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007094:	6991      	ldr	r1, [r2, #24]
 8007096:	f421 5188 	bic.w	r1, r1, #4352	@ 0x1100
 800709a:	6191      	str	r1, [r2, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 800709c:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800709e:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80070a2:	6451      	str	r1, [r2, #68]	@ 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80070a4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80070a6:	f021 0101 	bic.w	r1, r1, #1
 80070aa:	6319      	str	r1, [r3, #48]	@ 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80070ac:	2101      	movs	r1, #1
 80070ae:	65d1      	str	r1, [r2, #92]	@ 0x5c
 80070b0:	e7e6      	b.n	8007080 <HAL_RTC_DeactivateAlarm+0x44>
  __HAL_LOCK(hrtc);
 80070b2:	2002      	movs	r0, #2
}
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	40002800 	.word	0x40002800

080070bc <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80070bc:	b538      	push	{r3, r4, r5, lr}
 80070be:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80070c0:	4b0d      	ldr	r3, [pc, #52]	@ (80070f8 <HAL_RTC_AlarmIRQHandler+0x3c>)
 80070c2:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 80070c4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80070c6:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80070c8:	f015 0f01 	tst.w	r5, #1
 80070cc:	d106      	bne.n	80070dc <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80070ce:	f015 0f02 	tst.w	r5, #2
 80070d2:	d109      	bne.n	80070e8 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80070d4:	2301      	movs	r3, #1
 80070d6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 80070da:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80070dc:	4b06      	ldr	r3, [pc, #24]	@ (80070f8 <HAL_RTC_AlarmIRQHandler+0x3c>)
 80070de:	2201      	movs	r2, #1
 80070e0:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 80070e2:	f7fa ff4b 	bl	8001f7c <HAL_RTC_AlarmAEventCallback>
 80070e6:	e7f2      	b.n	80070ce <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80070e8:	4b03      	ldr	r3, [pc, #12]	@ (80070f8 <HAL_RTC_AlarmIRQHandler+0x3c>)
 80070ea:	2202      	movs	r2, #2
 80070ec:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80070ee:	4620      	mov	r0, r4
 80070f0:	f000 f9ee 	bl	80074d0 <HAL_RTCEx_AlarmBEventCallback>
 80070f4:	e7ee      	b.n	80070d4 <HAL_RTC_AlarmIRQHandler+0x18>
 80070f6:	bf00      	nop
 80070f8:	40002800 	.word	0x40002800

080070fc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80070fc:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80070fe:	4a0b      	ldr	r2, [pc, #44]	@ (800712c <HAL_RTC_WaitForSynchro+0x30>)
 8007100:	68d3      	ldr	r3, [r2, #12]
 8007102:	f023 0320 	bic.w	r3, r3, #32
 8007106:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8007108:	f7fa fd88 	bl	8001c1c <HAL_GetTick>
 800710c:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800710e:	4b07      	ldr	r3, [pc, #28]	@ (800712c <HAL_RTC_WaitForSynchro+0x30>)
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	f013 0f20 	tst.w	r3, #32
 8007116:	d107      	bne.n	8007128 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007118:	f7fa fd80 	bl	8001c1c <HAL_GetTick>
 800711c:	1b00      	subs	r0, r0, r4
 800711e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007122:	d9f4      	bls.n	800710e <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 8007124:	2003      	movs	r0, #3
 8007126:	e000      	b.n	800712a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8007128:	2000      	movs	r0, #0
}
 800712a:	bd10      	pop	{r4, pc}
 800712c:	40002800 	.word	0x40002800

08007130 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007130:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007132:	4b11      	ldr	r3, [pc, #68]	@ (8007178 <RTC_EnterInitMode+0x48>)
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800713a:	d002      	beq.n	8007142 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 800713c:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 800713e:	4620      	mov	r0, r4
 8007140:	bd70      	pop	{r4, r5, r6, pc}
 8007142:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007144:	4a0c      	ldr	r2, [pc, #48]	@ (8007178 <RTC_EnterInitMode+0x48>)
 8007146:	68d3      	ldr	r3, [r2, #12]
 8007148:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800714c:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 800714e:	f7fa fd65 	bl	8001c1c <HAL_GetTick>
 8007152:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8007154:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007156:	4b08      	ldr	r3, [pc, #32]	@ (8007178 <RTC_EnterInitMode+0x48>)
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800715e:	d1ee      	bne.n	800713e <RTC_EnterInitMode+0xe>
 8007160:	2c03      	cmp	r4, #3
 8007162:	d0ec      	beq.n	800713e <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007164:	f7fa fd5a 	bl	8001c1c <HAL_GetTick>
 8007168:	1b43      	subs	r3, r0, r5
 800716a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800716e:	d9f2      	bls.n	8007156 <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007170:	2403      	movs	r4, #3
 8007172:	f886 402d 	strb.w	r4, [r6, #45]	@ 0x2d
 8007176:	e7ee      	b.n	8007156 <RTC_EnterInitMode+0x26>
 8007178:	40002800 	.word	0x40002800

0800717c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800717c:	b510      	push	{r4, lr}
 800717e:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007180:	4b10      	ldr	r3, [pc, #64]	@ (80071c4 <RTC_ExitInitMode+0x48>)
 8007182:	68da      	ldr	r2, [r3, #12]
 8007184:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007188:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800718a:	699b      	ldr	r3, [r3, #24]
 800718c:	f013 0f20 	tst.w	r3, #32
 8007190:	d106      	bne.n	80071a0 <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007192:	f7ff ffb3 	bl	80070fc <HAL_RTC_WaitForSynchro>
 8007196:	b198      	cbz	r0, 80071c0 <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007198:	2003      	movs	r0, #3
 800719a:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800719e:	e00f      	b.n	80071c0 <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80071a0:	4a08      	ldr	r2, [pc, #32]	@ (80071c4 <RTC_ExitInitMode+0x48>)
 80071a2:	6993      	ldr	r3, [r2, #24]
 80071a4:	f023 0320 	bic.w	r3, r3, #32
 80071a8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80071aa:	f7ff ffa7 	bl	80070fc <HAL_RTC_WaitForSynchro>
 80071ae:	b110      	cbz	r0, 80071b6 <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80071b0:	2003      	movs	r0, #3
 80071b2:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80071b6:	4a03      	ldr	r2, [pc, #12]	@ (80071c4 <RTC_ExitInitMode+0x48>)
 80071b8:	6993      	ldr	r3, [r2, #24]
 80071ba:	f043 0320 	orr.w	r3, r3, #32
 80071be:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 80071c0:	bd10      	pop	{r4, pc}
 80071c2:	bf00      	nop
 80071c4:	40002800 	.word	0x40002800

080071c8 <HAL_RTC_Init>:
  if (hrtc != NULL)
 80071c8:	2800      	cmp	r0, #0
 80071ca:	d055      	beq.n	8007278 <HAL_RTC_Init+0xb0>
{
 80071cc:	b538      	push	{r3, r4, r5, lr}
 80071ce:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80071d0:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 80071d4:	b163      	cbz	r3, 80071f0 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_BUSY;
 80071d6:	2302      	movs	r3, #2
 80071d8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80071dc:	4b27      	ldr	r3, [pc, #156]	@ (800727c <HAL_RTC_Init+0xb4>)
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	f013 0f10 	tst.w	r3, #16
 80071e4:	d009      	beq.n	80071fa <HAL_RTC_Init+0x32>
      status = HAL_OK;
 80071e6:	2000      	movs	r0, #0
      hrtc->State = HAL_RTC_STATE_READY;
 80071e8:	2301      	movs	r3, #1
 80071ea:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 80071ee:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 80071f0:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
      HAL_RTC_MspInit(hrtc);
 80071f4:	f7fa fb5e 	bl	80018b4 <HAL_RTC_MspInit>
 80071f8:	e7ed      	b.n	80071d6 <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80071fa:	4b20      	ldr	r3, [pc, #128]	@ (800727c <HAL_RTC_Init+0xb4>)
 80071fc:	22ca      	movs	r2, #202	@ 0xca
 80071fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8007200:	2253      	movs	r2, #83	@ 0x53
 8007202:	625a      	str	r2, [r3, #36]	@ 0x24
      status = RTC_EnterInitMode(hrtc);
 8007204:	4620      	mov	r0, r4
 8007206:	f7ff ff93 	bl	8007130 <RTC_EnterInitMode>
      if (status == HAL_OK)
 800720a:	b118      	cbz	r0, 8007214 <HAL_RTC_Init+0x4c>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800720c:	4b1b      	ldr	r3, [pc, #108]	@ (800727c <HAL_RTC_Init+0xb4>)
 800720e:	22ff      	movs	r2, #255	@ 0xff
 8007210:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8007212:	e7ec      	b.n	80071ee <HAL_RTC_Init+0x26>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8007214:	4b19      	ldr	r3, [pc, #100]	@ (800727c <HAL_RTC_Init+0xb4>)
 8007216:	699a      	ldr	r2, [r3, #24]
 8007218:	f022 628e 	bic.w	r2, r2, #74448896	@ 0x4700000
 800721c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007220:	619a      	str	r2, [r3, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8007222:	6999      	ldr	r1, [r3, #24]
 8007224:	6862      	ldr	r2, [r4, #4]
 8007226:	6920      	ldr	r0, [r4, #16]
 8007228:	4302      	orrs	r2, r0
 800722a:	69a0      	ldr	r0, [r4, #24]
 800722c:	4302      	orrs	r2, r0
 800722e:	430a      	orrs	r2, r1
 8007230:	619a      	str	r2, [r3, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8007232:	68e2      	ldr	r2, [r4, #12]
 8007234:	68a1      	ldr	r1, [r4, #8]
 8007236:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800723a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800723c:	68da      	ldr	r2, [r3, #12]
 800723e:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 8007242:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8007244:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8007246:	4301      	orrs	r1, r0
 8007248:	430a      	orrs	r2, r1
 800724a:	60da      	str	r2, [r3, #12]
        status = RTC_ExitInitMode(hrtc);
 800724c:	4620      	mov	r0, r4
 800724e:	f7ff ff95 	bl	800717c <RTC_ExitInitMode>
        if (status == HAL_OK)
 8007252:	b118      	cbz	r0, 800725c <HAL_RTC_Init+0x94>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007254:	4b09      	ldr	r3, [pc, #36]	@ (800727c <HAL_RTC_Init+0xb4>)
 8007256:	22ff      	movs	r2, #255	@ 0xff
 8007258:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 800725a:	e7c8      	b.n	80071ee <HAL_RTC_Init+0x26>
          MODIFY_REG(RTC->CR, \
 800725c:	4907      	ldr	r1, [pc, #28]	@ (800727c <HAL_RTC_Init+0xb4>)
 800725e:	698b      	ldr	r3, [r1, #24]
 8007260:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8007264:	6a22      	ldr	r2, [r4, #32]
 8007266:	69e5      	ldr	r5, [r4, #28]
 8007268:	432a      	orrs	r2, r5
 800726a:	6965      	ldr	r5, [r4, #20]
 800726c:	432a      	orrs	r2, r5
 800726e:	4313      	orrs	r3, r2
 8007270:	618b      	str	r3, [r1, #24]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007272:	23ff      	movs	r3, #255	@ 0xff
 8007274:	624b      	str	r3, [r1, #36]	@ 0x24
    if (status == HAL_OK)
 8007276:	e7b7      	b.n	80071e8 <HAL_RTC_Init+0x20>
  HAL_StatusTypeDef status = HAL_ERROR;
 8007278:	2001      	movs	r0, #1
}
 800727a:	4770      	bx	lr
 800727c:	40002800 	.word	0x40002800

08007280 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8007280:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8007282:	e002      	b.n	800728a <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8007284:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8007286:	380a      	subs	r0, #10
 8007288:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 800728a:	2809      	cmp	r0, #9
 800728c:	d8fa      	bhi.n	8007284 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800728e:	011b      	lsls	r3, r3, #4
 8007290:	b2db      	uxtb	r3, r3
}
 8007292:	4318      	orrs	r0, r3
 8007294:	4770      	bx	lr
	...

08007298 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8007298:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800729c:	2b01      	cmp	r3, #1
 800729e:	f000 80b0 	beq.w	8007402 <HAL_RTC_SetAlarm_IT+0x16a>
{
 80072a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072a6:	4605      	mov	r5, r0
 80072a8:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 80072aa:	2301      	movs	r3, #1
 80072ac:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80072b0:	2302      	movs	r3, #2
 80072b2:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80072b6:	4b54      	ldr	r3, [pc, #336]	@ (8007408 <HAL_RTC_SetAlarm_IT+0x170>)
 80072b8:	68de      	ldr	r6, [r3, #12]
 80072ba:	f406 7640 	and.w	r6, r6, #768	@ 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 80072be:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 80072c2:	d043      	beq.n	800734c <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 80072c4:	bb12      	cbnz	r2, 800730c <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80072c6:	699b      	ldr	r3, [r3, #24]
 80072c8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80072cc:	d101      	bne.n	80072d2 <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80072ce:	2300      	movs	r3, #0
 80072d0:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80072d2:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80072d6:	7820      	ldrb	r0, [r4, #0]
 80072d8:	f7ff ffd2 	bl	8007280 <RTC_ByteToBcd2>
 80072dc:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80072de:	7860      	ldrb	r0, [r4, #1]
 80072e0:	f7ff ffce 	bl	8007280 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80072e4:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80072e8:	78a0      	ldrb	r0, [r4, #2]
 80072ea:	f7ff ffc9 	bl	8007280 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80072ee:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80072f0:	78e3      	ldrb	r3, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80072f2:	ea47 5783 	orr.w	r7, r7, r3, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80072f6:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 80072fa:	f7ff ffc1 	bl	8007280 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80072fe:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007302:	6a23      	ldr	r3, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007304:	4318      	orrs	r0, r3
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007306:	ea48 0000 	orr.w	r0, r8, r0
 800730a:	e020      	b.n	800734e <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 800730c:	6948      	ldr	r0, [r1, #20]
 800730e:	f1b0 3f80 	cmp.w	r0, #2155905152	@ 0x80808080
 8007312:	d009      	beq.n	8007328 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8007314:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8007318:	d006      	beq.n	8007328 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800731a:	4b3b      	ldr	r3, [pc, #236]	@ (8007408 <HAL_RTC_SetAlarm_IT+0x170>)
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8007322:	d101      	bne.n	8007328 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007324:	2300      	movs	r3, #0
 8007326:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007328:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800732a:	7863      	ldrb	r3, [r4, #1]
 800732c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800732e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007332:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007334:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007336:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007338:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800733c:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007340:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007344:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007346:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007348:	4318      	orrs	r0, r3
 800734a:	e000      	b.n	800734e <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 800734c:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800734e:	4b2e      	ldr	r3, [pc, #184]	@ (8007408 <HAL_RTC_SetAlarm_IT+0x170>)
 8007350:	22ca      	movs	r2, #202	@ 0xca
 8007352:	625a      	str	r2, [r3, #36]	@ 0x24
 8007354:	2253      	movs	r2, #83	@ 0x53
 8007356:	625a      	str	r2, [r3, #36]	@ 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007358:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800735a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800735e:	d02a      	beq.n	80073b6 <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007360:	4b29      	ldr	r3, [pc, #164]	@ (8007408 <HAL_RTC_SetAlarm_IT+0x170>)
 8007362:	699a      	ldr	r2, [r3, #24]
 8007364:	f422 5208 	bic.w	r2, r2, #8704	@ 0x2200
 8007368:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800736a:	2202      	movs	r2, #2
 800736c:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 800736e:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 8007372:	d040      	beq.n	80073f6 <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8007374:	4b24      	ldr	r3, [pc, #144]	@ (8007408 <HAL_RTC_SetAlarm_IT+0x170>)
 8007376:	6498      	str	r0, [r3, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8007378:	69a2      	ldr	r2, [r4, #24]
 800737a:	64da      	str	r2, [r3, #76]	@ 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800737c:	6862      	ldr	r2, [r4, #4]
 800737e:	4b22      	ldr	r3, [pc, #136]	@ (8007408 <HAL_RTC_SetAlarm_IT+0x170>)
 8007380:	675a      	str	r2, [r3, #116]	@ 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8007382:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8007384:	f042 0202 	orr.w	r2, r2, #2
 8007388:	632a      	str	r2, [r5, #48]	@ 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800738a:	699a      	ldr	r2, [r3, #24]
 800738c:	f442 5208 	orr.w	r2, r2, #8704	@ 0x2200
 8007390:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007392:	4a1e      	ldr	r2, [pc, #120]	@ (800740c <HAL_RTC_SetAlarm_IT+0x174>)
 8007394:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8007398:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800739c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073a0:	4b19      	ldr	r3, [pc, #100]	@ (8007408 <HAL_RTC_SetAlarm_IT+0x170>)
 80073a2:	22ff      	movs	r2, #255	@ 0xff
 80073a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80073a6:	2301      	movs	r3, #1
 80073a8:	f885 302d 	strb.w	r3, [r5, #45]	@ 0x2d
  __HAL_UNLOCK(hrtc);
 80073ac:	2000      	movs	r0, #0
 80073ae:	f885 002c 	strb.w	r0, [r5, #44]	@ 0x2c
}
 80073b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80073b6:	4b14      	ldr	r3, [pc, #80]	@ (8007408 <HAL_RTC_SetAlarm_IT+0x170>)
 80073b8:	699a      	ldr	r2, [r3, #24]
 80073ba:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 80073be:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80073c0:	2201      	movs	r2, #1
 80073c2:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 80073c4:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 80073c8:	d00f      	beq.n	80073ea <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80073ca:	4b0f      	ldr	r3, [pc, #60]	@ (8007408 <HAL_RTC_SetAlarm_IT+0x170>)
 80073cc:	6418      	str	r0, [r3, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80073ce:	69a2      	ldr	r2, [r4, #24]
 80073d0:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80073d2:	6862      	ldr	r2, [r4, #4]
 80073d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007408 <HAL_RTC_SetAlarm_IT+0x170>)
 80073d6:	671a      	str	r2, [r3, #112]	@ 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80073d8:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80073da:	f042 0201 	orr.w	r2, r2, #1
 80073de:	632a      	str	r2, [r5, #48]	@ 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80073e0:	699a      	ldr	r2, [r3, #24]
 80073e2:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 80073e6:	619a      	str	r2, [r3, #24]
 80073e8:	e7d3      	b.n	8007392 <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80073ea:	69a3      	ldr	r3, [r4, #24]
 80073ec:	69e2      	ldr	r2, [r4, #28]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	4a05      	ldr	r2, [pc, #20]	@ (8007408 <HAL_RTC_SetAlarm_IT+0x170>)
 80073f2:	6453      	str	r3, [r2, #68]	@ 0x44
 80073f4:	e7ed      	b.n	80073d2 <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80073f6:	69a3      	ldr	r3, [r4, #24]
 80073f8:	69e2      	ldr	r2, [r4, #28]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	4a02      	ldr	r2, [pc, #8]	@ (8007408 <HAL_RTC_SetAlarm_IT+0x170>)
 80073fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007400:	e7bc      	b.n	800737c <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 8007402:	2002      	movs	r0, #2
}
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	40002800 	.word	0x40002800
 800740c:	58000800 	.word	0x58000800

08007410 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007410:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8007414:	2b01      	cmp	r3, #1
 8007416:	d017      	beq.n	8007448 <HAL_RTCEx_EnableBypassShadow+0x38>
 8007418:	2101      	movs	r1, #1
 800741a:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800741e:	2302      	movs	r3, #2
 8007420:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007424:	4b09      	ldr	r3, [pc, #36]	@ (800744c <HAL_RTCEx_EnableBypassShadow+0x3c>)
 8007426:	22ca      	movs	r2, #202	@ 0xca
 8007428:	625a      	str	r2, [r3, #36]	@ 0x24
 800742a:	2253      	movs	r2, #83	@ 0x53
 800742c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800742e:	699a      	ldr	r2, [r3, #24]
 8007430:	f042 0220 	orr.w	r2, r2, #32
 8007434:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007436:	22ff      	movs	r2, #255	@ 0xff
 8007438:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800743a:	f880 102d 	strb.w	r1, [r0, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800743e:	2300      	movs	r3, #0
 8007440:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c

  return HAL_OK;
 8007444:	4618      	mov	r0, r3
 8007446:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8007448:	2002      	movs	r0, #2
}
 800744a:	4770      	bx	lr
 800744c:	40002800 	.word	0x40002800

08007450 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007450:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8007454:	2b01      	cmp	r3, #1
 8007456:	d020      	beq.n	800749a <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 8007458:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 800745a:	2101      	movs	r1, #1
 800745c:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007460:	2302      	movs	r3, #2
 8007462:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007466:	4b0e      	ldr	r3, [pc, #56]	@ (80074a0 <HAL_RTCEx_SetSSRU_IT+0x50>)
 8007468:	22ca      	movs	r2, #202	@ 0xca
 800746a:	625a      	str	r2, [r3, #36]	@ 0x24
 800746c:	2253      	movs	r2, #83	@ 0x53
 800746e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8007470:	699a      	ldr	r2, [r3, #24]
 8007472:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007476:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8007478:	4c0a      	ldr	r4, [pc, #40]	@ (80074a4 <HAL_RTCEx_SetSSRU_IT+0x54>)
 800747a:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800747e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007482:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007486:	22ff      	movs	r2, #255	@ 0xff
 8007488:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800748a:	f880 102d 	strb.w	r1, [r0, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800748e:	2300      	movs	r3, #0
 8007490:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c

  return HAL_OK;
 8007494:	4618      	mov	r0, r3
}
 8007496:	bc10      	pop	{r4}
 8007498:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 800749a:	2002      	movs	r0, #2
}
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	40002800 	.word	0x40002800
 80074a4:	58000800 	.word	0x58000800

080074a8 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80074a8:	b510      	push	{r4, lr}
 80074aa:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80074ac:	4b07      	ldr	r3, [pc, #28]	@ (80074cc <HAL_RTCEx_SSRUIRQHandler+0x24>)
 80074ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074b0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80074b4:	d103      	bne.n	80074be <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80074b6:	2301      	movs	r3, #1
 80074b8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 80074bc:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 80074be:	4b03      	ldr	r3, [pc, #12]	@ (80074cc <HAL_RTCEx_SSRUIRQHandler+0x24>)
 80074c0:	2240      	movs	r2, #64	@ 0x40
 80074c2:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80074c4:	f7fa fd5e 	bl	8001f84 <HAL_RTCEx_SSRUEventCallback>
 80074c8:	e7f5      	b.n	80074b6 <HAL_RTCEx_SSRUIRQHandler+0xe>
 80074ca:	bf00      	nop
 80074cc:	40002800 	.word	0x40002800

080074d0 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80074d0:	4770      	bx	lr

080074d2 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 80074d2:	0089      	lsls	r1, r1, #2
 80074d4:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 80074d8:	f501 4131 	add.w	r1, r1, #45312	@ 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80074dc:	600a      	str	r2, [r1, #0]
}
 80074de:	4770      	bx	lr

080074e0 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 80074e0:	0089      	lsls	r1, r1, #2
 80074e2:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 80074e6:	f501 4131 	add.w	r1, r1, #45312	@ 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80074ea:	6808      	ldr	r0, [r1, #0]
}
 80074ec:	4770      	bx	lr
	...

080074f0 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80074f0:	4b07      	ldr	r3, [pc, #28]	@ (8007510 <SUBGHZSPI_Init+0x20>)
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80074f8:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80074fa:	f440 7041 	orr.w	r0, r0, #772	@ 0x304
 80074fe:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8007500:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8007504:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800750c:	601a      	str	r2, [r3, #0]
}
 800750e:	4770      	bx	lr
 8007510:	58010000 	.word	0x58010000

08007514 <HAL_SUBGHZ_Init>:
{
 8007514:	b530      	push	{r4, r5, lr}
 8007516:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8007518:	2800      	cmp	r0, #0
 800751a:	d05d      	beq.n	80075d8 <HAL_SUBGHZ_Init+0xc4>
 800751c:	4604      	mov	r4, r0
  subghz_state = hsubghz->State;
 800751e:	7983      	ldrb	r3, [r0, #6]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8007520:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8007524:	b10b      	cbz	r3, 800752a <HAL_SUBGHZ_Init+0x16>
 8007526:	2d03      	cmp	r5, #3
 8007528:	d10b      	bne.n	8007542 <HAL_SUBGHZ_Init+0x2e>
    hsubghz->Lock = HAL_UNLOCKED;
 800752a:	2300      	movs	r3, #0
 800752c:	7163      	strb	r3, [r4, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 800752e:	4620      	mov	r0, r4
 8007530:	f7fa fa84 	bl	8001a3c <HAL_SUBGHZ_MspInit>
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007534:	4a29      	ldr	r2, [pc, #164]	@ (80075dc <HAL_SUBGHZ_Init+0xc8>)
 8007536:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800753a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800753e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8007542:	b185      	cbz	r5, 8007566 <HAL_SUBGHZ_Init+0x52>
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8007544:	4b26      	ldr	r3, [pc, #152]	@ (80075e0 <HAL_SUBGHZ_Init+0xcc>)
 8007546:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800754a:	619a      	str	r2, [r3, #24]
    status = HAL_OK;
 800754c:	2500      	movs	r5, #0
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800754e:	6820      	ldr	r0, [r4, #0]
 8007550:	f7ff ffce 	bl	80074f0 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007554:	2301      	movs	r3, #1
 8007556:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8007558:	2300      	movs	r3, #0
 800755a:	60a3      	str	r3, [r4, #8]
  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800755c:	2301      	movs	r3, #1
 800755e:	71a3      	strb	r3, [r4, #6]
}
 8007560:	4628      	mov	r0, r5
 8007562:	b003      	add	sp, #12
 8007564:	bd30      	pop	{r4, r5, pc}
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007566:	2302      	movs	r3, #2
 8007568:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800756a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800756e:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8007572:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007576:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800757a:	4b1a      	ldr	r3, [pc, #104]	@ (80075e4 <HAL_SUBGHZ_Init+0xd0>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007582:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8007586:	2264      	movs	r2, #100	@ 0x64
 8007588:	fb02 f303 	mul.w	r3, r2, r3
 800758c:	9301      	str	r3, [sp, #4]
 800758e:	e014      	b.n	80075ba <HAL_SUBGHZ_Init+0xa6>
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007590:	2501      	movs	r5, #1
 8007592:	60a5      	str	r5, [r4, #8]
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007594:	4b12      	ldr	r3, [pc, #72]	@ (80075e0 <HAL_SUBGHZ_Init+0xcc>)
 8007596:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800759a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800759e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80075a2:	689a      	ldr	r2, [r3, #8]
 80075a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80075a8:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80075aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80075ae:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 80075b0:	2d00      	cmp	r5, #0
 80075b2:	d1d3      	bne.n	800755c <HAL_SUBGHZ_Init+0x48>
 80075b4:	e7cb      	b.n	800754e <HAL_SUBGHZ_Init+0x3a>
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d0ec      	beq.n	8007594 <HAL_SUBGHZ_Init+0x80>
      if (count == 0U)
 80075ba:	9b01      	ldr	r3, [sp, #4]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d0e7      	beq.n	8007590 <HAL_SUBGHZ_Init+0x7c>
      count--;
 80075c0:	9b01      	ldr	r3, [sp, #4]
 80075c2:	3b01      	subs	r3, #1
 80075c4:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80075c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075ce:	f413 4380 	ands.w	r3, r3, #16384	@ 0x4000
 80075d2:	d0f0      	beq.n	80075b6 <HAL_SUBGHZ_Init+0xa2>
 80075d4:	2301      	movs	r3, #1
 80075d6:	e7ee      	b.n	80075b6 <HAL_SUBGHZ_Init+0xa2>
    return status;
 80075d8:	2501      	movs	r5, #1
 80075da:	e7c1      	b.n	8007560 <HAL_SUBGHZ_Init+0x4c>
 80075dc:	58000800 	.word	0x58000800
 80075e0:	58000400 	.word	0x58000400
 80075e4:	20000074 	.word	0x20000074

080075e8 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80075e8:	b082      	sub	sp, #8
 80075ea:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80075ec:	4b1a      	ldr	r3, [pc, #104]	@ (8007658 <SUBGHZSPI_Transmit+0x70>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80075f4:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80075f8:	2064      	movs	r0, #100	@ 0x64
 80075fa:	fb00 f303 	mul.w	r3, r0, r3
 80075fe:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007600:	9b01      	ldr	r3, [sp, #4]
 8007602:	b14b      	cbz	r3, 8007618 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8007604:	9b01      	ldr	r3, [sp, #4]
 8007606:	3b01      	subs	r3, #1
 8007608:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800760a:	4b14      	ldr	r3, [pc, #80]	@ (800765c <SUBGHZSPI_Transmit+0x74>)
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f013 0f02 	tst.w	r3, #2
 8007612:	d0f5      	beq.n	8007600 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8007614:	2000      	movs	r0, #0
 8007616:	e001      	b.n	800761c <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007618:	2001      	movs	r0, #1
 800761a:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 800761c:	4b0f      	ldr	r3, [pc, #60]	@ (800765c <SUBGHZSPI_Transmit+0x74>)
 800761e:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007620:	4b0d      	ldr	r3, [pc, #52]	@ (8007658 <SUBGHZSPI_Transmit+0x70>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007628:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800762c:	2164      	movs	r1, #100	@ 0x64
 800762e:	fb01 f303 	mul.w	r3, r1, r3
 8007632:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007634:	9b01      	ldr	r3, [sp, #4]
 8007636:	b143      	cbz	r3, 800764a <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8007638:	9b01      	ldr	r3, [sp, #4]
 800763a:	3b01      	subs	r3, #1
 800763c:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800763e:	4b07      	ldr	r3, [pc, #28]	@ (800765c <SUBGHZSPI_Transmit+0x74>)
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	f013 0f01 	tst.w	r3, #1
 8007646:	d0f5      	beq.n	8007634 <SUBGHZSPI_Transmit+0x4c>
 8007648:	e001      	b.n	800764e <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800764a:	2001      	movs	r0, #1
 800764c:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800764e:	4b03      	ldr	r3, [pc, #12]	@ (800765c <SUBGHZSPI_Transmit+0x74>)
 8007650:	68db      	ldr	r3, [r3, #12]

  return status;
}
 8007652:	b002      	add	sp, #8
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop
 8007658:	20000074 	.word	0x20000074
 800765c:	58010000 	.word	0x58010000

08007660 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007660:	b082      	sub	sp, #8
 8007662:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007664:	4b1c      	ldr	r3, [pc, #112]	@ (80076d8 <SUBGHZSPI_Receive+0x78>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800766c:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8007670:	2064      	movs	r0, #100	@ 0x64
 8007672:	fb00 f303 	mul.w	r3, r0, r3
 8007676:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007678:	9b01      	ldr	r3, [sp, #4]
 800767a:	b14b      	cbz	r3, 8007690 <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 800767c:	9b01      	ldr	r3, [sp, #4]
 800767e:	3b01      	subs	r3, #1
 8007680:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007682:	4b16      	ldr	r3, [pc, #88]	@ (80076dc <SUBGHZSPI_Receive+0x7c>)
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f013 0f02 	tst.w	r3, #2
 800768a:	d0f5      	beq.n	8007678 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 800768c:	2000      	movs	r0, #0
 800768e:	e001      	b.n	8007694 <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007690:	2001      	movs	r0, #1
 8007692:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 8007694:	4b11      	ldr	r3, [pc, #68]	@ (80076dc <SUBGHZSPI_Receive+0x7c>)
 8007696:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800769a:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800769e:	4b0e      	ldr	r3, [pc, #56]	@ (80076d8 <SUBGHZSPI_Receive+0x78>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80076a6:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80076aa:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 80076ae:	fb0c f303 	mul.w	r3, ip, r3
 80076b2:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80076b4:	9b01      	ldr	r3, [sp, #4]
 80076b6:	b143      	cbz	r3, 80076ca <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80076b8:	9b01      	ldr	r3, [sp, #4]
 80076ba:	3b01      	subs	r3, #1
 80076bc:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80076be:	4b07      	ldr	r3, [pc, #28]	@ (80076dc <SUBGHZSPI_Receive+0x7c>)
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	f013 0f01 	tst.w	r3, #1
 80076c6:	d0f5      	beq.n	80076b4 <SUBGHZSPI_Receive+0x54>
 80076c8:	e001      	b.n	80076ce <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80076ca:	2001      	movs	r0, #1
 80076cc:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80076ce:	4b03      	ldr	r3, [pc, #12]	@ (80076dc <SUBGHZSPI_Receive+0x7c>)
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	700b      	strb	r3, [r1, #0]

  return status;
}
 80076d4:	b002      	add	sp, #8
 80076d6:	4770      	bx	lr
 80076d8:	20000074 	.word	0x20000074
 80076dc:	58010000 	.word	0x58010000

080076e0 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80076e0:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80076e2:	4b13      	ldr	r3, [pc, #76]	@ (8007730 <SUBGHZ_WaitOnBusy+0x50>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80076ea:	f3c3 434b 	ubfx	r3, r3, #17, #12
 80076ee:	2264      	movs	r2, #100	@ 0x64
 80076f0:	fb02 f303 	mul.w	r3, r2, r3
 80076f4:	9301      	str	r3, [sp, #4]
 80076f6:	e006      	b.n	8007706 <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80076f8:	2302      	movs	r3, #2
 80076fa:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 80076fc:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 80076fe:	b002      	add	sp, #8
 8007700:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007702:	4213      	tst	r3, r2
 8007704:	d012      	beq.n	800772c <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007706:	4b0b      	ldr	r3, [pc, #44]	@ (8007734 <SUBGHZ_WaitOnBusy+0x54>)
 8007708:	695b      	ldr	r3, [r3, #20]
 800770a:	f013 0304 	ands.w	r3, r3, #4
 800770e:	d000      	beq.n	8007712 <SUBGHZ_WaitOnBusy+0x32>
 8007710:	2301      	movs	r3, #1
    if (count == 0U)
 8007712:	9a01      	ldr	r2, [sp, #4]
 8007714:	2a00      	cmp	r2, #0
 8007716:	d0ef      	beq.n	80076f8 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8007718:	9a01      	ldr	r2, [sp, #4]
 800771a:	3a01      	subs	r2, #1
 800771c:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800771e:	4a05      	ldr	r2, [pc, #20]	@ (8007734 <SUBGHZ_WaitOnBusy+0x54>)
 8007720:	6952      	ldr	r2, [r2, #20]
 8007722:	f012 0202 	ands.w	r2, r2, #2
 8007726:	d0ec      	beq.n	8007702 <SUBGHZ_WaitOnBusy+0x22>
 8007728:	2201      	movs	r2, #1
 800772a:	e7ea      	b.n	8007702 <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 800772c:	2000      	movs	r0, #0
 800772e:	e7e6      	b.n	80076fe <SUBGHZ_WaitOnBusy+0x1e>
 8007730:	20000074 	.word	0x20000074
 8007734:	58000400 	.word	0x58000400

08007738 <SUBGHZ_CheckDeviceReady>:
{
 8007738:	b500      	push	{lr}
 800773a:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800773c:	7903      	ldrb	r3, [r0, #4]
 800773e:	2b01      	cmp	r3, #1
 8007740:	d004      	beq.n	800774c <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007742:	f7ff ffcd 	bl	80076e0 <SUBGHZ_WaitOnBusy>
}
 8007746:	b003      	add	sp, #12
 8007748:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 800774c:	4b0d      	ldr	r3, [pc, #52]	@ (8007784 <SUBGHZ_CheckDeviceReady+0x4c>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007754:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8007758:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800775a:	4a0b      	ldr	r2, [pc, #44]	@ (8007788 <SUBGHZ_CheckDeviceReady+0x50>)
 800775c:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8007760:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007764:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      count--;
 8007768:	9b01      	ldr	r3, [sp, #4]
 800776a:	3b01      	subs	r3, #1
 800776c:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 800776e:	9b01      	ldr	r3, [sp, #4]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d1f9      	bne.n	8007768 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007774:	4a04      	ldr	r2, [pc, #16]	@ (8007788 <SUBGHZ_CheckDeviceReady+0x50>)
 8007776:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800777a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800777e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007782:	e7de      	b.n	8007742 <SUBGHZ_CheckDeviceReady+0xa>
 8007784:	20000074 	.word	0x20000074
 8007788:	58000400 	.word	0x58000400

0800778c <HAL_SUBGHZ_WriteRegisters>:
{
 800778c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007790:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007792:	7980      	ldrb	r0, [r0, #6]
 8007794:	fa5f f880 	uxtb.w	r8, r0
 8007798:	f1b8 0f01 	cmp.w	r8, #1
 800779c:	d13e      	bne.n	800781c <HAL_SUBGHZ_WriteRegisters+0x90>
 800779e:	460c      	mov	r4, r1
 80077a0:	4617      	mov	r7, r2
 80077a2:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 80077a4:	796b      	ldrb	r3, [r5, #5]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d03b      	beq.n	8007822 <HAL_SUBGHZ_WriteRegisters+0x96>
 80077aa:	2301      	movs	r3, #1
 80077ac:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80077ae:	2302      	movs	r3, #2
 80077b0:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80077b2:	4628      	mov	r0, r5
 80077b4:	f7ff ffc0 	bl	8007738 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80077b8:	4a1b      	ldr	r2, [pc, #108]	@ (8007828 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 80077ba:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80077be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80077c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80077c6:	210d      	movs	r1, #13
 80077c8:	4628      	mov	r0, r5
 80077ca:	f7ff ff0d 	bl	80075e8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80077ce:	0a21      	lsrs	r1, r4, #8
 80077d0:	4628      	mov	r0, r5
 80077d2:	f7ff ff09 	bl	80075e8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80077d6:	b2e1      	uxtb	r1, r4
 80077d8:	4628      	mov	r0, r5
 80077da:	f7ff ff05 	bl	80075e8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80077de:	2400      	movs	r4, #0
 80077e0:	e005      	b.n	80077ee <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80077e2:	5d39      	ldrb	r1, [r7, r4]
 80077e4:	4628      	mov	r0, r5
 80077e6:	f7ff feff 	bl	80075e8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80077ea:	3401      	adds	r4, #1
 80077ec:	b2a4      	uxth	r4, r4
 80077ee:	42b4      	cmp	r4, r6
 80077f0:	d3f7      	bcc.n	80077e2 <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80077f2:	4a0d      	ldr	r2, [pc, #52]	@ (8007828 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 80077f4:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80077f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007800:	4628      	mov	r0, r5
 8007802:	f7ff ff6d 	bl	80076e0 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007806:	68ab      	ldr	r3, [r5, #8]
 8007808:	b90b      	cbnz	r3, 800780e <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 800780a:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800780e:	2301      	movs	r3, #1
 8007810:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8007812:	2300      	movs	r3, #0
 8007814:	716b      	strb	r3, [r5, #5]
}
 8007816:	4640      	mov	r0, r8
 8007818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800781c:	f04f 0802 	mov.w	r8, #2
 8007820:	e7f9      	b.n	8007816 <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 8007822:	f04f 0802 	mov.w	r8, #2
 8007826:	e7f6      	b.n	8007816 <HAL_SUBGHZ_WriteRegisters+0x8a>
 8007828:	58000400 	.word	0x58000400

0800782c <HAL_SUBGHZ_ReadRegisters>:
{
 800782c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007830:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007832:	7980      	ldrb	r0, [r0, #6]
 8007834:	fa5f f880 	uxtb.w	r8, r0
 8007838:	f1b8 0f01 	cmp.w	r8, #1
 800783c:	d141      	bne.n	80078c2 <HAL_SUBGHZ_ReadRegisters+0x96>
 800783e:	460c      	mov	r4, r1
 8007840:	4615      	mov	r5, r2
 8007842:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8007844:	7973      	ldrb	r3, [r6, #5]
 8007846:	2b01      	cmp	r3, #1
 8007848:	d03e      	beq.n	80078c8 <HAL_SUBGHZ_ReadRegisters+0x9c>
 800784a:	2301      	movs	r3, #1
 800784c:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800784e:	4630      	mov	r0, r6
 8007850:	f7ff ff72 	bl	8007738 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007854:	4a1e      	ldr	r2, [pc, #120]	@ (80078d0 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8007856:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800785a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800785e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8007862:	211d      	movs	r1, #29
 8007864:	4630      	mov	r0, r6
 8007866:	f7ff febf 	bl	80075e8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800786a:	0a21      	lsrs	r1, r4, #8
 800786c:	4630      	mov	r0, r6
 800786e:	f7ff febb 	bl	80075e8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007872:	b2e1      	uxtb	r1, r4
 8007874:	4630      	mov	r0, r6
 8007876:	f7ff feb7 	bl	80075e8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800787a:	2100      	movs	r1, #0
 800787c:	4630      	mov	r0, r6
 800787e:	f7ff feb3 	bl	80075e8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007882:	2400      	movs	r4, #0
 8007884:	e006      	b.n	8007894 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007886:	4629      	mov	r1, r5
 8007888:	4630      	mov	r0, r6
 800788a:	f7ff fee9 	bl	8007660 <SUBGHZSPI_Receive>
      pData++;
 800788e:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8007890:	3401      	adds	r4, #1
 8007892:	b2a4      	uxth	r4, r4
 8007894:	42bc      	cmp	r4, r7
 8007896:	d3f6      	bcc.n	8007886 <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007898:	4a0d      	ldr	r2, [pc, #52]	@ (80078d0 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 800789a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800789e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80078a6:	4630      	mov	r0, r6
 80078a8:	f7ff ff1a 	bl	80076e0 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80078ac:	68b3      	ldr	r3, [r6, #8]
 80078ae:	b90b      	cbnz	r3, 80078b4 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 80078b0:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80078b4:	2301      	movs	r3, #1
 80078b6:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80078b8:	2300      	movs	r3, #0
 80078ba:	7173      	strb	r3, [r6, #5]
}
 80078bc:	4640      	mov	r0, r8
 80078be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80078c2:	f04f 0802 	mov.w	r8, #2
 80078c6:	e7f9      	b.n	80078bc <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 80078c8:	f04f 0802 	mov.w	r8, #2
 80078cc:	e7f6      	b.n	80078bc <HAL_SUBGHZ_ReadRegisters+0x90>
 80078ce:	bf00      	nop
 80078d0:	58000400 	.word	0x58000400

080078d4 <HAL_SUBGHZ_ExecSetCmd>:
{
 80078d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078d8:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80078da:	7980      	ldrb	r0, [r0, #6]
 80078dc:	fa5f f980 	uxtb.w	r9, r0
 80078e0:	f1b9 0f01 	cmp.w	r9, #1
 80078e4:	d143      	bne.n	800796e <HAL_SUBGHZ_ExecSetCmd+0x9a>
 80078e6:	4688      	mov	r8, r1
 80078e8:	4617      	mov	r7, r2
 80078ea:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 80078ec:	796b      	ldrb	r3, [r5, #5]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d040      	beq.n	8007974 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 80078f2:	2301      	movs	r3, #1
 80078f4:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80078f6:	4628      	mov	r0, r5
 80078f8:	f7ff ff1e 	bl	8007738 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80078fc:	f1b8 0f84 	cmp.w	r8, #132	@ 0x84
 8007900:	d005      	beq.n	800790e <HAL_SUBGHZ_ExecSetCmd+0x3a>
 8007902:	f1b8 0f94 	cmp.w	r8, #148	@ 0x94
 8007906:	d002      	beq.n	800790e <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8007908:	2300      	movs	r3, #0
 800790a:	712b      	strb	r3, [r5, #4]
 800790c:	e001      	b.n	8007912 <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800790e:	2301      	movs	r3, #1
 8007910:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007912:	4a1a      	ldr	r2, [pc, #104]	@ (800797c <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8007914:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8007918:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800791c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007920:	4641      	mov	r1, r8
 8007922:	4628      	mov	r0, r5
 8007924:	f7ff fe60 	bl	80075e8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007928:	2400      	movs	r4, #0
 800792a:	e005      	b.n	8007938 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800792c:	5d39      	ldrb	r1, [r7, r4]
 800792e:	4628      	mov	r0, r5
 8007930:	f7ff fe5a 	bl	80075e8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007934:	3401      	adds	r4, #1
 8007936:	b2a4      	uxth	r4, r4
 8007938:	42b4      	cmp	r4, r6
 800793a:	d3f7      	bcc.n	800792c <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800793c:	4a0f      	ldr	r2, [pc, #60]	@ (800797c <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 800793e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8007942:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007946:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    if (Command != RADIO_SET_SLEEP)
 800794a:	f1b8 0f84 	cmp.w	r8, #132	@ 0x84
 800794e:	d10a      	bne.n	8007966 <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007950:	68ab      	ldr	r3, [r5, #8]
 8007952:	b90b      	cbnz	r3, 8007958 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 8007954:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007958:	2301      	movs	r3, #1
 800795a:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 800795c:	2300      	movs	r3, #0
 800795e:	716b      	strb	r3, [r5, #5]
}
 8007960:	4648      	mov	r0, r9
 8007962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007966:	4628      	mov	r0, r5
 8007968:	f7ff feba 	bl	80076e0 <SUBGHZ_WaitOnBusy>
 800796c:	e7f0      	b.n	8007950 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 800796e:	f04f 0902 	mov.w	r9, #2
 8007972:	e7f5      	b.n	8007960 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 8007974:	f04f 0902 	mov.w	r9, #2
 8007978:	e7f2      	b.n	8007960 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 800797a:	bf00      	nop
 800797c:	58000400 	.word	0x58000400

08007980 <HAL_SUBGHZ_ExecGetCmd>:
{
 8007980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007984:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007986:	7980      	ldrb	r0, [r0, #6]
 8007988:	fa5f f880 	uxtb.w	r8, r0
 800798c:	f1b8 0f01 	cmp.w	r8, #1
 8007990:	d139      	bne.n	8007a06 <HAL_SUBGHZ_ExecGetCmd+0x86>
 8007992:	460c      	mov	r4, r1
 8007994:	4615      	mov	r5, r2
 8007996:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8007998:	7973      	ldrb	r3, [r6, #5]
 800799a:	2b01      	cmp	r3, #1
 800799c:	d036      	beq.n	8007a0c <HAL_SUBGHZ_ExecGetCmd+0x8c>
 800799e:	2301      	movs	r3, #1
 80079a0:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80079a2:	4630      	mov	r0, r6
 80079a4:	f7ff fec8 	bl	8007738 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80079a8:	4a1a      	ldr	r2, [pc, #104]	@ (8007a14 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 80079aa:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80079ae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80079b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80079b6:	4621      	mov	r1, r4
 80079b8:	4630      	mov	r0, r6
 80079ba:	f7ff fe15 	bl	80075e8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80079be:	2100      	movs	r1, #0
 80079c0:	4630      	mov	r0, r6
 80079c2:	f7ff fe11 	bl	80075e8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80079c6:	2400      	movs	r4, #0
 80079c8:	e006      	b.n	80079d8 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80079ca:	4629      	mov	r1, r5
 80079cc:	4630      	mov	r0, r6
 80079ce:	f7ff fe47 	bl	8007660 <SUBGHZSPI_Receive>
      pData++;
 80079d2:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 80079d4:	3401      	adds	r4, #1
 80079d6:	b2a4      	uxth	r4, r4
 80079d8:	42bc      	cmp	r4, r7
 80079da:	d3f6      	bcc.n	80079ca <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80079dc:	4a0d      	ldr	r2, [pc, #52]	@ (8007a14 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 80079de:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80079e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80079ea:	4630      	mov	r0, r6
 80079ec:	f7ff fe78 	bl	80076e0 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80079f0:	68b3      	ldr	r3, [r6, #8]
 80079f2:	b90b      	cbnz	r3, 80079f8 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 80079f4:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80079f8:	2301      	movs	r3, #1
 80079fa:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80079fc:	2300      	movs	r3, #0
 80079fe:	7173      	strb	r3, [r6, #5]
}
 8007a00:	4640      	mov	r0, r8
 8007a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8007a06:	f04f 0802 	mov.w	r8, #2
 8007a0a:	e7f9      	b.n	8007a00 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8007a0c:	f04f 0802 	mov.w	r8, #2
 8007a10:	e7f6      	b.n	8007a00 <HAL_SUBGHZ_ExecGetCmd+0x80>
 8007a12:	bf00      	nop
 8007a14:	58000400 	.word	0x58000400

08007a18 <HAL_SUBGHZ_IRQHandler>:
{
 8007a18:	b530      	push	{r4, r5, lr}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 8007a1e:	2300      	movs	r3, #0
 8007a20:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8007a24:	2302      	movs	r3, #2
 8007a26:	aa01      	add	r2, sp, #4
 8007a28:	2112      	movs	r1, #18
 8007a2a:	f7ff ffa9 	bl	8007980 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8007a2e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 8007a32:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8007a36:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8007a3a:	b224      	sxth	r4, r4
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8007a3c:	2302      	movs	r3, #2
 8007a3e:	aa01      	add	r2, sp, #4
 8007a40:	4619      	mov	r1, r3
 8007a42:	4628      	mov	r0, r5
 8007a44:	f7ff ff46 	bl	80078d4 <HAL_SUBGHZ_ExecSetCmd>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007a48:	f014 0f01 	tst.w	r4, #1
 8007a4c:	d123      	bne.n	8007a96 <HAL_SUBGHZ_IRQHandler+0x7e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007a4e:	f014 0f02 	tst.w	r4, #2
 8007a52:	d124      	bne.n	8007a9e <HAL_SUBGHZ_IRQHandler+0x86>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007a54:	f014 0f04 	tst.w	r4, #4
 8007a58:	d125      	bne.n	8007aa6 <HAL_SUBGHZ_IRQHandler+0x8e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007a5a:	f014 0f08 	tst.w	r4, #8
 8007a5e:	d126      	bne.n	8007aae <HAL_SUBGHZ_IRQHandler+0x96>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007a60:	f014 0f10 	tst.w	r4, #16
 8007a64:	d127      	bne.n	8007ab6 <HAL_SUBGHZ_IRQHandler+0x9e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007a66:	f014 0f20 	tst.w	r4, #32
 8007a6a:	d128      	bne.n	8007abe <HAL_SUBGHZ_IRQHandler+0xa6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007a6c:	f014 0f40 	tst.w	r4, #64	@ 0x40
 8007a70:	d129      	bne.n	8007ac6 <HAL_SUBGHZ_IRQHandler+0xae>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007a72:	f014 0f80 	tst.w	r4, #128	@ 0x80
 8007a76:	d006      	beq.n	8007a86 <HAL_SUBGHZ_IRQHandler+0x6e>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007a78:	f414 7f80 	tst.w	r4, #256	@ 0x100
 8007a7c:	d027      	beq.n	8007ace <HAL_SUBGHZ_IRQHandler+0xb6>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007a7e:	2101      	movs	r1, #1
 8007a80:	4628      	mov	r0, r5
 8007a82:	f00d fccb 	bl	801541c <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007a86:	f414 7f00 	tst.w	r4, #512	@ 0x200
 8007a8a:	d125      	bne.n	8007ad8 <HAL_SUBGHZ_IRQHandler+0xc0>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8007a8c:	f414 4f80 	tst.w	r4, #16384	@ 0x4000
 8007a90:	d126      	bne.n	8007ae0 <HAL_SUBGHZ_IRQHandler+0xc8>
}
 8007a92:	b003      	add	sp, #12
 8007a94:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007a96:	4628      	mov	r0, r5
 8007a98:	f00d fca8 	bl	80153ec <HAL_SUBGHZ_TxCpltCallback>
 8007a9c:	e7d7      	b.n	8007a4e <HAL_SUBGHZ_IRQHandler+0x36>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	f00d fcac 	bl	80153fc <HAL_SUBGHZ_RxCpltCallback>
 8007aa4:	e7d6      	b.n	8007a54 <HAL_SUBGHZ_IRQHandler+0x3c>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	f00d fcdc 	bl	8015464 <HAL_SUBGHZ_PreambleDetectedCallback>
 8007aac:	e7d5      	b.n	8007a5a <HAL_SUBGHZ_IRQHandler+0x42>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007aae:	4628      	mov	r0, r5
 8007ab0:	f00d fce0 	bl	8015474 <HAL_SUBGHZ_SyncWordValidCallback>
 8007ab4:	e7d4      	b.n	8007a60 <HAL_SUBGHZ_IRQHandler+0x48>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	f00d fce4 	bl	8015484 <HAL_SUBGHZ_HeaderValidCallback>
 8007abc:	e7d3      	b.n	8007a66 <HAL_SUBGHZ_IRQHandler+0x4e>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007abe:	4628      	mov	r0, r5
 8007ac0:	f00d fcc8 	bl	8015454 <HAL_SUBGHZ_HeaderErrorCallback>
 8007ac4:	e7d2      	b.n	8007a6c <HAL_SUBGHZ_IRQHandler+0x54>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	f00d fca0 	bl	801540c <HAL_SUBGHZ_CRCErrorCallback>
 8007acc:	e7d1      	b.n	8007a72 <HAL_SUBGHZ_IRQHandler+0x5a>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007ace:	2100      	movs	r1, #0
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	f00d fca3 	bl	801541c <HAL_SUBGHZ_CADStatusCallback>
 8007ad6:	e7d6      	b.n	8007a86 <HAL_SUBGHZ_IRQHandler+0x6e>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007ad8:	4628      	mov	r0, r5
 8007ada:	f00d fcb1 	bl	8015440 <HAL_SUBGHZ_RxTxTimeoutCallback>
 8007ade:	e7d5      	b.n	8007a8c <HAL_SUBGHZ_IRQHandler+0x74>
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	f00d fcd7 	bl	8015494 <HAL_SUBGHZ_LrFhssHopCallback>
}
 8007ae6:	e7d4      	b.n	8007a92 <HAL_SUBGHZ_IRQHandler+0x7a>

08007ae8 <HAL_SUBGHZ_WriteBuffer>:
{
 8007ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aec:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007aee:	7980      	ldrb	r0, [r0, #6]
 8007af0:	fa5f f880 	uxtb.w	r8, r0
 8007af4:	f1b8 0f01 	cmp.w	r8, #1
 8007af8:	d138      	bne.n	8007b6c <HAL_SUBGHZ_WriteBuffer+0x84>
 8007afa:	460c      	mov	r4, r1
 8007afc:	4617      	mov	r7, r2
 8007afe:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8007b00:	796b      	ldrb	r3, [r5, #5]
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d035      	beq.n	8007b72 <HAL_SUBGHZ_WriteBuffer+0x8a>
 8007b06:	2301      	movs	r3, #1
 8007b08:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007b0a:	4628      	mov	r0, r5
 8007b0c:	f7ff fe14 	bl	8007738 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007b10:	4a19      	ldr	r2, [pc, #100]	@ (8007b78 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8007b12:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8007b16:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007b1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007b1e:	210e      	movs	r1, #14
 8007b20:	4628      	mov	r0, r5
 8007b22:	f7ff fd61 	bl	80075e8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007b26:	4621      	mov	r1, r4
 8007b28:	4628      	mov	r0, r5
 8007b2a:	f7ff fd5d 	bl	80075e8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007b2e:	2400      	movs	r4, #0
 8007b30:	e005      	b.n	8007b3e <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007b32:	5d39      	ldrb	r1, [r7, r4]
 8007b34:	4628      	mov	r0, r5
 8007b36:	f7ff fd57 	bl	80075e8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007b3a:	3401      	adds	r4, #1
 8007b3c:	b2a4      	uxth	r4, r4
 8007b3e:	42b4      	cmp	r4, r6
 8007b40:	d3f7      	bcc.n	8007b32 <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007b42:	4a0d      	ldr	r2, [pc, #52]	@ (8007b78 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8007b44:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8007b48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007b50:	4628      	mov	r0, r5
 8007b52:	f7ff fdc5 	bl	80076e0 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007b56:	68ab      	ldr	r3, [r5, #8]
 8007b58:	b90b      	cbnz	r3, 8007b5e <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 8007b5a:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8007b62:	2300      	movs	r3, #0
 8007b64:	716b      	strb	r3, [r5, #5]
}
 8007b66:	4640      	mov	r0, r8
 8007b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8007b6c:	f04f 0802 	mov.w	r8, #2
 8007b70:	e7f9      	b.n	8007b66 <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 8007b72:	f04f 0802 	mov.w	r8, #2
 8007b76:	e7f6      	b.n	8007b66 <HAL_SUBGHZ_WriteBuffer+0x7e>
 8007b78:	58000400 	.word	0x58000400

08007b7c <HAL_SUBGHZ_ReadBuffer>:
{
 8007b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b80:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007b82:	7980      	ldrb	r0, [r0, #6]
 8007b84:	fa5f f880 	uxtb.w	r8, r0
 8007b88:	f1b8 0f01 	cmp.w	r8, #1
 8007b8c:	d13d      	bne.n	8007c0a <HAL_SUBGHZ_ReadBuffer+0x8e>
 8007b8e:	460c      	mov	r4, r1
 8007b90:	4615      	mov	r5, r2
 8007b92:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8007b94:	7973      	ldrb	r3, [r6, #5]
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d03a      	beq.n	8007c10 <HAL_SUBGHZ_ReadBuffer+0x94>
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007b9e:	4630      	mov	r0, r6
 8007ba0:	f7ff fdca 	bl	8007738 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8007c18 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8007ba6:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8007baa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007bae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007bb2:	211e      	movs	r1, #30
 8007bb4:	4630      	mov	r0, r6
 8007bb6:	f7ff fd17 	bl	80075e8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007bba:	4621      	mov	r1, r4
 8007bbc:	4630      	mov	r0, r6
 8007bbe:	f7ff fd13 	bl	80075e8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	4630      	mov	r0, r6
 8007bc6:	f7ff fd0f 	bl	80075e8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007bca:	2400      	movs	r4, #0
 8007bcc:	e006      	b.n	8007bdc <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007bce:	4629      	mov	r1, r5
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	f7ff fd45 	bl	8007660 <SUBGHZSPI_Receive>
      pData++;
 8007bd6:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8007bd8:	3401      	adds	r4, #1
 8007bda:	b2a4      	uxth	r4, r4
 8007bdc:	42bc      	cmp	r4, r7
 8007bde:	d3f6      	bcc.n	8007bce <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007be0:	4a0d      	ldr	r2, [pc, #52]	@ (8007c18 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8007be2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8007be6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007bee:	4630      	mov	r0, r6
 8007bf0:	f7ff fd76 	bl	80076e0 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007bf4:	68b3      	ldr	r3, [r6, #8]
 8007bf6:	b90b      	cbnz	r3, 8007bfc <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 8007bf8:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8007c00:	2300      	movs	r3, #0
 8007c02:	7173      	strb	r3, [r6, #5]
}
 8007c04:	4640      	mov	r0, r8
 8007c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8007c0a:	f04f 0802 	mov.w	r8, #2
 8007c0e:	e7f9      	b.n	8007c04 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 8007c10:	f04f 0802 	mov.w	r8, #2
 8007c14:	e7f6      	b.n	8007c04 <HAL_SUBGHZ_ReadBuffer+0x88>
 8007c16:	bf00      	nop
 8007c18:	58000400 	.word	0x58000400

08007c1c <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007c1c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1e:	e852 3f00 	ldrex	r3, [r2]
 8007c22:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c26:	e842 3100 	strex	r1, r3, [r2]
 8007c2a:	2900      	cmp	r1, #0
 8007c2c:	d1f6      	bne.n	8007c1c <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007c2e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c30:	f102 0308 	add.w	r3, r2, #8
 8007c34:	e853 3f00 	ldrex	r3, [r3]
 8007c38:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3c:	3208      	adds	r2, #8
 8007c3e:	e842 3100 	strex	r1, r3, [r2]
 8007c42:	2900      	cmp	r1, #0
 8007c44:	d1f3      	bne.n	8007c2e <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c46:	2320      	movs	r3, #32
 8007c48:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
}
 8007c4c:	4770      	bx	lr

08007c4e <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c4e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c50:	e852 3f00 	ldrex	r3, [r2]
 8007c54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c58:	e842 3100 	strex	r1, r3, [r2]
 8007c5c:	2900      	cmp	r1, #0
 8007c5e:	d1f6      	bne.n	8007c4e <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c60:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c62:	f102 0308 	add.w	r3, r2, #8
 8007c66:	e853 3f00 	ldrex	r3, [r3]
 8007c6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c6e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c72:	3208      	adds	r2, #8
 8007c74:	e842 3100 	strex	r1, r3, [r2]
 8007c78:	2900      	cmp	r1, #0
 8007c7a:	d1f1      	bne.n	8007c60 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c7c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d006      	beq.n	8007c90 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c82:	2320      	movs	r3, #32
 8007c84:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c8c:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8007c8e:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c90:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c92:	e852 3f00 	ldrex	r3, [r2]
 8007c96:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9a:	e842 3100 	strex	r1, r3, [r2]
 8007c9e:	2900      	cmp	r1, #0
 8007ca0:	d1f6      	bne.n	8007c90 <UART_EndRxTransfer+0x42>
 8007ca2:	e7ee      	b.n	8007c82 <UART_EndRxTransfer+0x34>

08007ca4 <HAL_UART_Transmit_DMA>:
{
 8007ca4:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8007ca6:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8007caa:	2a20      	cmp	r2, #32
 8007cac:	d13d      	bne.n	8007d2a <HAL_UART_Transmit_DMA+0x86>
{
 8007cae:	b510      	push	{r4, lr}
 8007cb0:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8007cb2:	2900      	cmp	r1, #0
 8007cb4:	d03b      	beq.n	8007d2e <HAL_UART_Transmit_DMA+0x8a>
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d03b      	beq.n	8007d32 <HAL_UART_Transmit_DMA+0x8e>
    huart->pTxBuffPtr  = pData;
 8007cba:	6501      	str	r1, [r0, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007cbc:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007cc0:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cca:	2221      	movs	r2, #33	@ 0x21
 8007ccc:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
    if (huart->hdmatx != NULL)
 8007cd0:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8007cd2:	b1ca      	cbz	r2, 8007d08 <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007cd4:	4918      	ldr	r1, [pc, #96]	@ (8007d38 <HAL_UART_Transmit_DMA+0x94>)
 8007cd6:	62d1      	str	r1, [r2, #44]	@ 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007cd8:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8007cda:	4918      	ldr	r1, [pc, #96]	@ (8007d3c <HAL_UART_Transmit_DMA+0x98>)
 8007cdc:	6311      	str	r1, [r2, #48]	@ 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007cde:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8007ce0:	4917      	ldr	r1, [pc, #92]	@ (8007d40 <HAL_UART_Transmit_DMA+0x9c>)
 8007ce2:	6351      	str	r1, [r2, #52]	@ 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8007ce4:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	6391      	str	r1, [r2, #56]	@ 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007cea:	6802      	ldr	r2, [r0, #0]
 8007cec:	3228      	adds	r2, #40	@ 0x28
 8007cee:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8007cf0:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8007cf2:	f7fc fe8d 	bl	8004a10 <HAL_DMA_Start_IT>
 8007cf6:	b138      	cbz	r0, 8007d08 <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007cf8:	2310      	movs	r3, #16
 8007cfa:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        huart->gState = HAL_UART_STATE_READY;
 8007cfe:	2320      	movs	r3, #32
 8007d00:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        return HAL_ERROR;
 8007d04:	2001      	movs	r0, #1
 8007d06:	e00f      	b.n	8007d28 <HAL_UART_Transmit_DMA+0x84>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007d08:	6823      	ldr	r3, [r4, #0]
 8007d0a:	2240      	movs	r2, #64	@ 0x40
 8007d0c:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d0e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d10:	f102 0308 	add.w	r3, r2, #8
 8007d14:	e853 3f00 	ldrex	r3, [r3]
 8007d18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1c:	3208      	adds	r2, #8
 8007d1e:	e842 3100 	strex	r1, r3, [r2]
 8007d22:	2900      	cmp	r1, #0
 8007d24:	d1f3      	bne.n	8007d0e <HAL_UART_Transmit_DMA+0x6a>
    return HAL_OK;
 8007d26:	2000      	movs	r0, #0
}
 8007d28:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8007d2a:	2002      	movs	r0, #2
}
 8007d2c:	4770      	bx	lr
      return HAL_ERROR;
 8007d2e:	2001      	movs	r0, #1
 8007d30:	e7fa      	b.n	8007d28 <HAL_UART_Transmit_DMA+0x84>
 8007d32:	2001      	movs	r0, #1
 8007d34:	e7f8      	b.n	8007d28 <HAL_UART_Transmit_DMA+0x84>
 8007d36:	bf00      	nop
 8007d38:	08007d45 	.word	0x08007d45
 8007d3c:	08007db3 	.word	0x08007db3
 8007d40:	08007dbf 	.word	0x08007dbf

08007d44 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007d44:	b508      	push	{r3, lr}
 8007d46:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d48:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f013 0f20 	tst.w	r3, #32
 8007d52:	d118      	bne.n	8007d86 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8007d54:	2300      	movs	r3, #0
 8007d56:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d5a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5c:	f102 0308 	add.w	r3, r2, #8
 8007d60:	e853 3f00 	ldrex	r3, [r3]
 8007d64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d68:	3208      	adds	r2, #8
 8007d6a:	e842 3100 	strex	r1, r3, [r2]
 8007d6e:	2900      	cmp	r1, #0
 8007d70:	d1f3      	bne.n	8007d5a <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d72:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d74:	e852 3f00 	ldrex	r3, [r2]
 8007d78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7c:	e842 3100 	strex	r1, r3, [r2]
 8007d80:	2900      	cmp	r1, #0
 8007d82:	d1f6      	bne.n	8007d72 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d84:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8007d86:	f7fa fa3d 	bl	8002204 <HAL_UART_TxCpltCallback>
}
 8007d8a:	e7fb      	b.n	8007d84 <UART_DMATransmitCplt+0x40>

08007d8c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d8c:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d8e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d90:	e852 3f00 	ldrex	r3, [r2]
 8007d94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d98:	e842 3100 	strex	r1, r3, [r2]
 8007d9c:	2900      	cmp	r1, #0
 8007d9e:	d1f6      	bne.n	8007d8e <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007da0:	2320      	movs	r3, #32
 8007da2:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007da6:	2300      	movs	r3, #0
 8007da8:	6783      	str	r3, [r0, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007daa:	f7fa fa2b 	bl	8002204 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dae:	bd08      	pop	{r3, pc}

08007db0 <HAL_UART_TxHalfCpltCallback>:
}
 8007db0:	4770      	bx	lr

08007db2 <UART_DMATxHalfCplt>:
{
 8007db2:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8007db4:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8007db6:	f7ff fffb 	bl	8007db0 <HAL_UART_TxHalfCpltCallback>
}
 8007dba:	bd08      	pop	{r3, pc}

08007dbc <HAL_UART_ErrorCallback>:
}
 8007dbc:	4770      	bx	lr

08007dbe <UART_DMAError>:
{
 8007dbe:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007dc0:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007dc2:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007dc6:	f8d4 508c 	ldr.w	r5, [r4, #140]	@ 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007dca:	6823      	ldr	r3, [r4, #0]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007dd2:	d001      	beq.n	8007dd8 <UART_DMAError+0x1a>
 8007dd4:	2a21      	cmp	r2, #33	@ 0x21
 8007dd6:	d010      	beq.n	8007dfa <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007dd8:	6823      	ldr	r3, [r4, #0]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8007de0:	d001      	beq.n	8007de6 <UART_DMAError+0x28>
 8007de2:	2d22      	cmp	r5, #34	@ 0x22
 8007de4:	d010      	beq.n	8007e08 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007de6:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8007dea:	f043 0310 	orr.w	r3, r3, #16
 8007dee:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
  HAL_UART_ErrorCallback(huart);
 8007df2:	4620      	mov	r0, r4
 8007df4:	f7ff ffe2 	bl	8007dbc <HAL_UART_ErrorCallback>
}
 8007df8:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007e00:	4620      	mov	r0, r4
 8007e02:	f7ff ff0b 	bl	8007c1c <UART_EndTxTransfer>
 8007e06:	e7e7      	b.n	8007dd8 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8007e0e:	4620      	mov	r0, r4
 8007e10:	f7ff ff1d 	bl	8007c4e <UART_EndRxTransfer>
 8007e14:	e7e7      	b.n	8007de6 <UART_DMAError+0x28>

08007e16 <UART_DMAAbortOnError>:
{
 8007e16:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e18:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007e20:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
  HAL_UART_ErrorCallback(huart);
 8007e24:	f7ff ffca 	bl	8007dbc <HAL_UART_ErrorCallback>
}
 8007e28:	bd08      	pop	{r3, pc}

08007e2a <HAL_UARTEx_RxEventCallback>:
}
 8007e2a:	4770      	bx	lr

08007e2c <HAL_UART_IRQHandler>:
{
 8007e2c:	b570      	push	{r4, r5, r6, lr}
 8007e2e:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007e30:	6802      	ldr	r2, [r0, #0]
 8007e32:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e34:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e36:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 8007e38:	f640 0c0f 	movw	ip, #2063	@ 0x80f
 8007e3c:	ea13 0f0c 	tst.w	r3, ip
 8007e40:	d10d      	bne.n	8007e5e <HAL_UART_IRQHandler+0x32>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007e42:	f013 0f20 	tst.w	r3, #32
 8007e46:	d010      	beq.n	8007e6a <HAL_UART_IRQHandler+0x3e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007e48:	f010 0f20 	tst.w	r0, #32
 8007e4c:	d102      	bne.n	8007e54 <HAL_UART_IRQHandler+0x28>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007e4e:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 8007e52:	d00a      	beq.n	8007e6a <HAL_UART_IRQHandler+0x3e>
      if (huart->RxISR != NULL)
 8007e54:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8007e56:	b393      	cbz	r3, 8007ebe <HAL_UART_IRQHandler+0x92>
        huart->RxISR(huart);
 8007e58:	4620      	mov	r0, r4
 8007e5a:	4798      	blx	r3
      return;
 8007e5c:	e02f      	b.n	8007ebe <HAL_UART_IRQHandler+0x92>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007e5e:	4db4      	ldr	r5, [pc, #720]	@ (8008130 <HAL_UART_IRQHandler+0x304>)
 8007e60:	400d      	ands	r5, r1
 8007e62:	d12d      	bne.n	8007ec0 <HAL_UART_IRQHandler+0x94>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007e64:	4eb3      	ldr	r6, [pc, #716]	@ (8008134 <HAL_UART_IRQHandler+0x308>)
 8007e66:	4230      	tst	r0, r6
 8007e68:	d12a      	bne.n	8007ec0 <HAL_UART_IRQHandler+0x94>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e6a:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 8007e6c:	2d01      	cmp	r5, #1
 8007e6e:	f000 80c0 	beq.w	8007ff2 <HAL_UART_IRQHandler+0x1c6>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e72:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8007e76:	d003      	beq.n	8007e80 <HAL_UART_IRQHandler+0x54>
 8007e78:	f411 0f80 	tst.w	r1, #4194304	@ 0x400000
 8007e7c:	f040 815e 	bne.w	800813c <HAL_UART_IRQHandler+0x310>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007e80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007e84:	d007      	beq.n	8007e96 <HAL_UART_IRQHandler+0x6a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007e86:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8007e8a:	f040 815e 	bne.w	800814a <HAL_UART_IRQHandler+0x31e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007e8e:	f411 0f00 	tst.w	r1, #8388608	@ 0x800000
 8007e92:	f040 815a 	bne.w	800814a <HAL_UART_IRQHandler+0x31e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e96:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8007e9a:	d003      	beq.n	8007ea4 <HAL_UART_IRQHandler+0x78>
 8007e9c:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8007ea0:	f040 815a 	bne.w	8008158 <HAL_UART_IRQHandler+0x32c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007ea4:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8007ea8:	d003      	beq.n	8007eb2 <HAL_UART_IRQHandler+0x86>
 8007eaa:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 8007eae:	f040 8157 	bne.w	8008160 <HAL_UART_IRQHandler+0x334>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007eb2:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8007eb6:	d002      	beq.n	8007ebe <HAL_UART_IRQHandler+0x92>
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	f2c0 8155 	blt.w	8008168 <HAL_UART_IRQHandler+0x33c>
}
 8007ebe:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ec0:	f013 0f01 	tst.w	r3, #1
 8007ec4:	d009      	beq.n	8007eda <HAL_UART_IRQHandler+0xae>
 8007ec6:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8007eca:	d006      	beq.n	8007eda <HAL_UART_IRQHandler+0xae>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ecc:	2601      	movs	r6, #1
 8007ece:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ed0:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8007ed4:	4332      	orrs	r2, r6
 8007ed6:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007eda:	f013 0f02 	tst.w	r3, #2
 8007ede:	d00b      	beq.n	8007ef8 <HAL_UART_IRQHandler+0xcc>
 8007ee0:	f011 0f01 	tst.w	r1, #1
 8007ee4:	d008      	beq.n	8007ef8 <HAL_UART_IRQHandler+0xcc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ee6:	6822      	ldr	r2, [r4, #0]
 8007ee8:	2602      	movs	r6, #2
 8007eea:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007eec:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8007ef0:	f042 0204 	orr.w	r2, r2, #4
 8007ef4:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ef8:	f013 0f04 	tst.w	r3, #4
 8007efc:	d00b      	beq.n	8007f16 <HAL_UART_IRQHandler+0xea>
 8007efe:	f011 0f01 	tst.w	r1, #1
 8007f02:	d008      	beq.n	8007f16 <HAL_UART_IRQHandler+0xea>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f04:	6822      	ldr	r2, [r4, #0]
 8007f06:	2604      	movs	r6, #4
 8007f08:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f0a:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8007f0e:	f042 0202 	orr.w	r2, r2, #2
 8007f12:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007f16:	f013 0f08 	tst.w	r3, #8
 8007f1a:	d00b      	beq.n	8007f34 <HAL_UART_IRQHandler+0x108>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007f1c:	f010 0f20 	tst.w	r0, #32
 8007f20:	d100      	bne.n	8007f24 <HAL_UART_IRQHandler+0xf8>
 8007f22:	b13d      	cbz	r5, 8007f34 <HAL_UART_IRQHandler+0x108>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f24:	6822      	ldr	r2, [r4, #0]
 8007f26:	2508      	movs	r5, #8
 8007f28:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f2a:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8007f2e:	432a      	orrs	r2, r5
 8007f30:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007f34:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8007f38:	d00c      	beq.n	8007f54 <HAL_UART_IRQHandler+0x128>
 8007f3a:	f010 6f80 	tst.w	r0, #67108864	@ 0x4000000
 8007f3e:	d009      	beq.n	8007f54 <HAL_UART_IRQHandler+0x128>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f40:	6822      	ldr	r2, [r4, #0]
 8007f42:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 8007f46:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007f48:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8007f4c:	f042 0220 	orr.w	r2, r2, #32
 8007f50:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f54:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8007f58:	2a00      	cmp	r2, #0
 8007f5a:	d0b0      	beq.n	8007ebe <HAL_UART_IRQHandler+0x92>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007f5c:	f013 0f20 	tst.w	r3, #32
 8007f60:	d009      	beq.n	8007f76 <HAL_UART_IRQHandler+0x14a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007f62:	f010 0f20 	tst.w	r0, #32
 8007f66:	d102      	bne.n	8007f6e <HAL_UART_IRQHandler+0x142>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007f68:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 8007f6c:	d003      	beq.n	8007f76 <HAL_UART_IRQHandler+0x14a>
        if (huart->RxISR != NULL)
 8007f6e:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8007f70:	b10b      	cbz	r3, 8007f76 <HAL_UART_IRQHandler+0x14a>
          huart->RxISR(huart);
 8007f72:	4620      	mov	r0, r4
 8007f74:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8007f76:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f7a:	6823      	ldr	r3, [r4, #0]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8007f82:	d102      	bne.n	8007f8a <HAL_UART_IRQHandler+0x15e>
 8007f84:	f012 0f28 	tst.w	r2, #40	@ 0x28
 8007f88:	d02c      	beq.n	8007fe4 <HAL_UART_IRQHandler+0x1b8>
        UART_EndRxTransfer(huart);
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	f7ff fe5f 	bl	8007c4e <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f90:	6823      	ldr	r3, [r4, #0]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8007f98:	d020      	beq.n	8007fdc <HAL_UART_IRQHandler+0x1b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f9a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9c:	f102 0308 	add.w	r3, r2, #8
 8007fa0:	e853 3f00 	ldrex	r3, [r3]
 8007fa4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa8:	3208      	adds	r2, #8
 8007faa:	e842 3100 	strex	r1, r3, [r2]
 8007fae:	2900      	cmp	r1, #0
 8007fb0:	d1f3      	bne.n	8007f9a <HAL_UART_IRQHandler+0x16e>
          if (huart->hdmarx != NULL)
 8007fb2:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8007fb6:	b16b      	cbz	r3, 8007fd4 <HAL_UART_IRQHandler+0x1a8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fb8:	4a5f      	ldr	r2, [pc, #380]	@ (8008138 <HAL_UART_IRQHandler+0x30c>)
 8007fba:	639a      	str	r2, [r3, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fbc:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8007fc0:	f7fc fdac 	bl	8004b1c <HAL_DMA_Abort_IT>
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	f43f af7a 	beq.w	8007ebe <HAL_UART_IRQHandler+0x92>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007fca:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8007fce:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8007fd0:	4798      	blx	r3
 8007fd2:	e774      	b.n	8007ebe <HAL_UART_IRQHandler+0x92>
            HAL_UART_ErrorCallback(huart);
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	f7ff fef1 	bl	8007dbc <HAL_UART_ErrorCallback>
 8007fda:	e770      	b.n	8007ebe <HAL_UART_IRQHandler+0x92>
          HAL_UART_ErrorCallback(huart);
 8007fdc:	4620      	mov	r0, r4
 8007fde:	f7ff feed 	bl	8007dbc <HAL_UART_ErrorCallback>
 8007fe2:	e76c      	b.n	8007ebe <HAL_UART_IRQHandler+0x92>
        HAL_UART_ErrorCallback(huart);
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	f7ff fee9 	bl	8007dbc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fea:	2300      	movs	r3, #0
 8007fec:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    return;
 8007ff0:	e765      	b.n	8007ebe <HAL_UART_IRQHandler+0x92>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007ff2:	f013 0f10 	tst.w	r3, #16
 8007ff6:	f43f af3c 	beq.w	8007e72 <HAL_UART_IRQHandler+0x46>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007ffa:	f010 0f10 	tst.w	r0, #16
 8007ffe:	f43f af38 	beq.w	8007e72 <HAL_UART_IRQHandler+0x46>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008002:	2310      	movs	r3, #16
 8008004:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008006:	6823      	ldr	r3, [r4, #0]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800800e:	d053      	beq.n	80080b8 <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008010:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8008014:	6813      	ldr	r3, [r2, #0]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800801a:	2b00      	cmp	r3, #0
 800801c:	f43f af4f 	beq.w	8007ebe <HAL_UART_IRQHandler+0x92>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008020:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8008024:	4299      	cmp	r1, r3
 8008026:	f67f af4a 	bls.w	8007ebe <HAL_UART_IRQHandler+0x92>
        huart->RxXferCount = nb_remaining_rx_data;
 800802a:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800802e:	6813      	ldr	r3, [r2, #0]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f013 0f20 	tst.w	r3, #32
 8008036:	d132      	bne.n	800809e <HAL_UART_IRQHandler+0x272>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008038:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803a:	e852 3f00 	ldrex	r3, [r2]
 800803e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008042:	e842 3100 	strex	r1, r3, [r2]
 8008046:	2900      	cmp	r1, #0
 8008048:	d1f6      	bne.n	8008038 <HAL_UART_IRQHandler+0x20c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800804a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804c:	f102 0308 	add.w	r3, r2, #8
 8008050:	e853 3f00 	ldrex	r3, [r3]
 8008054:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008058:	3208      	adds	r2, #8
 800805a:	e842 3100 	strex	r1, r3, [r2]
 800805e:	2900      	cmp	r1, #0
 8008060:	d1f3      	bne.n	800804a <HAL_UART_IRQHandler+0x21e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008062:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008064:	f102 0308 	add.w	r3, r2, #8
 8008068:	e853 3f00 	ldrex	r3, [r3]
 800806c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008070:	3208      	adds	r2, #8
 8008072:	e842 3100 	strex	r1, r3, [r2]
 8008076:	2900      	cmp	r1, #0
 8008078:	d1f3      	bne.n	8008062 <HAL_UART_IRQHandler+0x236>
          huart->RxState = HAL_UART_STATE_READY;
 800807a:	2320      	movs	r3, #32
 800807c:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008080:	2300      	movs	r3, #0
 8008082:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008084:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008086:	e852 3f00 	ldrex	r3, [r2]
 800808a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808e:	e842 3100 	strex	r1, r3, [r2]
 8008092:	2900      	cmp	r1, #0
 8008094:	d1f6      	bne.n	8008084 <HAL_UART_IRQHandler+0x258>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008096:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800809a:	f7fc fd05 	bl	8004aa8 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800809e:	2302      	movs	r3, #2
 80080a0:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80080a2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 80080a6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	1ac9      	subs	r1, r1, r3
 80080ae:	b289      	uxth	r1, r1
 80080b0:	4620      	mov	r0, r4
 80080b2:	f7ff feba 	bl	8007e2a <HAL_UARTEx_RxEventCallback>
      return;
 80080b6:	e702      	b.n	8007ebe <HAL_UART_IRQHandler+0x92>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80080b8:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 80080bc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	1ac9      	subs	r1, r1, r3
 80080c4:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80080c6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f43f aef6 	beq.w	8007ebe <HAL_UART_IRQHandler+0x92>
          && (nb_rx_data > 0U))
 80080d2:	2900      	cmp	r1, #0
 80080d4:	f43f aef3 	beq.w	8007ebe <HAL_UART_IRQHandler+0x92>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080d8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080da:	e852 3f00 	ldrex	r3, [r2]
 80080de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e2:	e842 3000 	strex	r0, r3, [r2]
 80080e6:	2800      	cmp	r0, #0
 80080e8:	d1f6      	bne.n	80080d8 <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80080ea:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ec:	f102 0308 	add.w	r3, r2, #8
 80080f0:	e853 3f00 	ldrex	r3, [r3]
 80080f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80080f8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fc:	3208      	adds	r2, #8
 80080fe:	e842 3000 	strex	r0, r3, [r2]
 8008102:	2800      	cmp	r0, #0
 8008104:	d1f1      	bne.n	80080ea <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 8008106:	2320      	movs	r3, #32
 8008108:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800810c:	2300      	movs	r3, #0
 800810e:	66e3      	str	r3, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 8008110:	6763      	str	r3, [r4, #116]	@ 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008112:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008114:	e852 3f00 	ldrex	r3, [r2]
 8008118:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811c:	e842 3000 	strex	r0, r3, [r2]
 8008120:	2800      	cmp	r0, #0
 8008122:	d1f6      	bne.n	8008112 <HAL_UART_IRQHandler+0x2e6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008124:	2302      	movs	r3, #2
 8008126:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008128:	4620      	mov	r0, r4
 800812a:	f7ff fe7e 	bl	8007e2a <HAL_UARTEx_RxEventCallback>
      return;
 800812e:	e6c6      	b.n	8007ebe <HAL_UART_IRQHandler+0x92>
 8008130:	10000001 	.word	0x10000001
 8008134:	04000120 	.word	0x04000120
 8008138:	08007e17 	.word	0x08007e17
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800813c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008140:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8008142:	4620      	mov	r0, r4
 8008144:	f000 fe60 	bl	8008e08 <HAL_UARTEx_WakeupCallback>
    return;
 8008148:	e6b9      	b.n	8007ebe <HAL_UART_IRQHandler+0x92>
    if (huart->TxISR != NULL)
 800814a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800814c:	2b00      	cmp	r3, #0
 800814e:	f43f aeb6 	beq.w	8007ebe <HAL_UART_IRQHandler+0x92>
      huart->TxISR(huart);
 8008152:	4620      	mov	r0, r4
 8008154:	4798      	blx	r3
    return;
 8008156:	e6b2      	b.n	8007ebe <HAL_UART_IRQHandler+0x92>
    UART_EndTransmit_IT(huart);
 8008158:	4620      	mov	r0, r4
 800815a:	f7ff fe17 	bl	8007d8c <UART_EndTransmit_IT>
    return;
 800815e:	e6ae      	b.n	8007ebe <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008160:	4620      	mov	r0, r4
 8008162:	f000 fe53 	bl	8008e0c <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8008166:	e6aa      	b.n	8007ebe <HAL_UART_IRQHandler+0x92>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008168:	4620      	mov	r0, r4
 800816a:	f000 fe4e 	bl	8008e0a <HAL_UARTEx_RxFifoFullCallback>
    return;
 800816e:	e6a6      	b.n	8007ebe <HAL_UART_IRQHandler+0x92>

08008170 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008170:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8008172:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008176:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 800817a:	2a22      	cmp	r2, #34	@ 0x22
 800817c:	d005      	beq.n	800818a <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800817e:	6802      	ldr	r2, [r0, #0]
 8008180:	6993      	ldr	r3, [r2, #24]
 8008182:	f043 0308 	orr.w	r3, r3, #8
 8008186:	6193      	str	r3, [r2, #24]
  }
}
 8008188:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800818a:	6802      	ldr	r2, [r0, #0]
 800818c:	6a51      	ldr	r1, [r2, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800818e:	b2db      	uxtb	r3, r3
 8008190:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8008192:	400b      	ands	r3, r1
 8008194:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8008196:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8008198:	3301      	adds	r3, #1
 800819a:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 800819c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	3b01      	subs	r3, #1
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 80081aa:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1e9      	bne.n	8008188 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081b4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b6:	e852 3f00 	ldrex	r3, [r2]
 80081ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081be:	e842 3100 	strex	r1, r3, [r2]
 80081c2:	2900      	cmp	r1, #0
 80081c4:	d1f6      	bne.n	80081b4 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081c6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c8:	f102 0308 	add.w	r3, r2, #8
 80081cc:	e853 3f00 	ldrex	r3, [r3]
 80081d0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d4:	3208      	adds	r2, #8
 80081d6:	e842 3100 	strex	r1, r3, [r2]
 80081da:	2900      	cmp	r1, #0
 80081dc:	d1f3      	bne.n	80081c6 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 80081de:	2320      	movs	r3, #32
 80081e0:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
      huart->RxISR = NULL;
 80081e4:	2300      	movs	r3, #0
 80081e6:	6743      	str	r3, [r0, #116]	@ 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081e8:	6703      	str	r3, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80081ea:	6803      	ldr	r3, [r0, #0]
 80081ec:	4a16      	ldr	r2, [pc, #88]	@ (8008248 <UART_RxISR_8BIT+0xd8>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d00c      	beq.n	800820c <UART_RxISR_8BIT+0x9c>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 80081f8:	d008      	beq.n	800820c <UART_RxISR_8BIT+0x9c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80081fa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fc:	e852 3f00 	ldrex	r3, [r2]
 8008200:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008204:	e842 3100 	strex	r1, r3, [r2]
 8008208:	2900      	cmp	r1, #0
 800820a:	d1f6      	bne.n	80081fa <UART_RxISR_8BIT+0x8a>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800820c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800820e:	2b01      	cmp	r3, #1
 8008210:	d116      	bne.n	8008240 <UART_RxISR_8BIT+0xd0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008212:	2300      	movs	r3, #0
 8008214:	66c3      	str	r3, [r0, #108]	@ 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008216:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008218:	e852 3f00 	ldrex	r3, [r2]
 800821c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008220:	e842 3100 	strex	r1, r3, [r2]
 8008224:	2900      	cmp	r1, #0
 8008226:	d1f6      	bne.n	8008216 <UART_RxISR_8BIT+0xa6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008228:	6803      	ldr	r3, [r0, #0]
 800822a:	69da      	ldr	r2, [r3, #28]
 800822c:	f012 0f10 	tst.w	r2, #16
 8008230:	d001      	beq.n	8008236 <UART_RxISR_8BIT+0xc6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008232:	2210      	movs	r2, #16
 8008234:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008236:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 800823a:	f7ff fdf6 	bl	8007e2a <HAL_UARTEx_RxEventCallback>
 800823e:	e7a3      	b.n	8008188 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8008240:	f7f9 fff0 	bl	8002224 <HAL_UART_RxCpltCallback>
 8008244:	e7a0      	b.n	8008188 <UART_RxISR_8BIT+0x18>
 8008246:	bf00      	nop
 8008248:	40008000 	.word	0x40008000

0800824c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800824c:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800824e:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008252:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 8008256:	2b22      	cmp	r3, #34	@ 0x22
 8008258:	d005      	beq.n	8008266 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800825a:	6802      	ldr	r2, [r0, #0]
 800825c:	6993      	ldr	r3, [r2, #24]
 800825e:	f043 0308 	orr.w	r3, r3, #8
 8008262:	6193      	str	r3, [r2, #24]
  }
}
 8008264:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008266:	6803      	ldr	r3, [r0, #0]
 8008268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800826a:	6d81      	ldr	r1, [r0, #88]	@ 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 800826c:	4013      	ands	r3, r2
 800826e:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 8008270:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8008272:	3302      	adds	r3, #2
 8008274:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8008276:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 800827a:	b29b      	uxth	r3, r3
 800827c:	3b01      	subs	r3, #1
 800827e:	b29b      	uxth	r3, r3
 8008280:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 8008284:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8008288:	b29b      	uxth	r3, r3
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1ea      	bne.n	8008264 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800828e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008290:	e852 3f00 	ldrex	r3, [r2]
 8008294:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008298:	e842 3100 	strex	r1, r3, [r2]
 800829c:	2900      	cmp	r1, #0
 800829e:	d1f6      	bne.n	800828e <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082a0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a2:	f102 0308 	add.w	r3, r2, #8
 80082a6:	e853 3f00 	ldrex	r3, [r3]
 80082aa:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ae:	3208      	adds	r2, #8
 80082b0:	e842 3100 	strex	r1, r3, [r2]
 80082b4:	2900      	cmp	r1, #0
 80082b6:	d1f3      	bne.n	80082a0 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 80082b8:	2320      	movs	r3, #32
 80082ba:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
      huart->RxISR = NULL;
 80082be:	2300      	movs	r3, #0
 80082c0:	6743      	str	r3, [r0, #116]	@ 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082c2:	6703      	str	r3, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80082c4:	6803      	ldr	r3, [r0, #0]
 80082c6:	4a16      	ldr	r2, [pc, #88]	@ (8008320 <UART_RxISR_16BIT+0xd4>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d00c      	beq.n	80082e6 <UART_RxISR_16BIT+0x9a>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 80082d2:	d008      	beq.n	80082e6 <UART_RxISR_16BIT+0x9a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80082d4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d6:	e852 3f00 	ldrex	r3, [r2]
 80082da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082de:	e842 3100 	strex	r1, r3, [r2]
 80082e2:	2900      	cmp	r1, #0
 80082e4:	d1f6      	bne.n	80082d4 <UART_RxISR_16BIT+0x88>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082e6:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d116      	bne.n	800831a <UART_RxISR_16BIT+0xce>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ec:	2300      	movs	r3, #0
 80082ee:	66c3      	str	r3, [r0, #108]	@ 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082f0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f2:	e852 3f00 	ldrex	r3, [r2]
 80082f6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082fa:	e842 3100 	strex	r1, r3, [r2]
 80082fe:	2900      	cmp	r1, #0
 8008300:	d1f6      	bne.n	80082f0 <UART_RxISR_16BIT+0xa4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008302:	6803      	ldr	r3, [r0, #0]
 8008304:	69da      	ldr	r2, [r3, #28]
 8008306:	f012 0f10 	tst.w	r2, #16
 800830a:	d001      	beq.n	8008310 <UART_RxISR_16BIT+0xc4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800830c:	2210      	movs	r2, #16
 800830e:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008310:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8008314:	f7ff fd89 	bl	8007e2a <HAL_UARTEx_RxEventCallback>
 8008318:	e7a4      	b.n	8008264 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 800831a:	f7f9 ff83 	bl	8002224 <HAL_UART_RxCpltCallback>
 800831e:	e7a1      	b.n	8008264 <UART_RxISR_16BIT+0x18>
 8008320:	40008000 	.word	0x40008000

08008324 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 8008328:	f8b0 6060 	ldrh.w	r6, [r0, #96]	@ 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800832c:	6803      	ldr	r3, [r0, #0]
 800832e:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008330:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008334:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008338:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 800833c:	2a22      	cmp	r2, #34	@ 0x22
 800833e:	d005      	beq.n	800834c <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008340:	699a      	ldr	r2, [r3, #24]
 8008342:	f042 0208 	orr.w	r2, r2, #8
 8008346:	619a      	str	r2, [r3, #24]
  }
}
 8008348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800834c:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 800834e:	f8b0 7068 	ldrh.w	r7, [r0, #104]	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008352:	e008      	b.n	8008366 <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008354:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8008358:	2b00      	cmp	r3, #0
 800835a:	d14c      	bne.n	80083f6 <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 800835c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8008360:	b29b      	uxth	r3, r3
 8008362:	2b00      	cmp	r3, #0
 8008364:	d04e      	beq.n	8008404 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008366:	2f00      	cmp	r7, #0
 8008368:	f000 809a 	beq.w	80084a0 <UART_RxISR_8BIT_FIFOEN+0x17c>
 800836c:	f015 0f20 	tst.w	r5, #32
 8008370:	f000 8096 	beq.w	80084a0 <UART_RxISR_8BIT_FIFOEN+0x17c>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008374:	6823      	ldr	r3, [r4, #0]
 8008376:	6a59      	ldr	r1, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008378:	b2f3      	uxtb	r3, r6
 800837a:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800837c:	400b      	ands	r3, r1
 800837e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8008380:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008382:	3301      	adds	r3, #1
 8008384:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8008386:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800838a:	b29b      	uxth	r3, r3
 800838c:	3b01      	subs	r3, #1
 800838e:	b29b      	uxth	r3, r3
 8008390:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008394:	6823      	ldr	r3, [r4, #0]
 8008396:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008398:	f015 0f07 	tst.w	r5, #7
 800839c:	d0de      	beq.n	800835c <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800839e:	f015 0f01 	tst.w	r5, #1
 80083a2:	d009      	beq.n	80083b8 <UART_RxISR_8BIT_FIFOEN+0x94>
 80083a4:	f419 7f80 	tst.w	r9, #256	@ 0x100
 80083a8:	d006      	beq.n	80083b8 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80083aa:	2201      	movs	r2, #1
 80083ac:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083ae:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80083b2:	4313      	orrs	r3, r2
 80083b4:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083b8:	f015 0f02 	tst.w	r5, #2
 80083bc:	d00b      	beq.n	80083d6 <UART_RxISR_8BIT_FIFOEN+0xb2>
 80083be:	f018 0f01 	tst.w	r8, #1
 80083c2:	d008      	beq.n	80083d6 <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80083c4:	6823      	ldr	r3, [r4, #0]
 80083c6:	2202      	movs	r2, #2
 80083c8:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083ca:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80083ce:	f043 0304 	orr.w	r3, r3, #4
 80083d2:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083d6:	f015 0f04 	tst.w	r5, #4
 80083da:	d0bb      	beq.n	8008354 <UART_RxISR_8BIT_FIFOEN+0x30>
 80083dc:	f018 0f01 	tst.w	r8, #1
 80083e0:	d0b8      	beq.n	8008354 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80083e2:	6823      	ldr	r3, [r4, #0]
 80083e4:	2204      	movs	r2, #4
 80083e6:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083e8:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80083ec:	f043 0302 	orr.w	r3, r3, #2
 80083f0:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 80083f4:	e7ae      	b.n	8008354 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 80083f6:	4620      	mov	r0, r4
 80083f8:	f7ff fce0 	bl	8007dbc <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083fc:	2300      	movs	r3, #0
 80083fe:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8008402:	e7ab      	b.n	800835c <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008404:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008406:	e852 3f00 	ldrex	r3, [r2]
 800840a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840e:	e842 3100 	strex	r1, r3, [r2]
 8008412:	2900      	cmp	r1, #0
 8008414:	d1f6      	bne.n	8008404 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008416:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008418:	f102 0308 	add.w	r3, r2, #8
 800841c:	e853 3f00 	ldrex	r3, [r3]
 8008420:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008424:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008428:	3208      	adds	r2, #8
 800842a:	e842 3100 	strex	r1, r3, [r2]
 800842e:	2900      	cmp	r1, #0
 8008430:	d1f1      	bne.n	8008416 <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 8008432:	2320      	movs	r3, #32
 8008434:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;
 8008438:	2300      	movs	r3, #0
 800843a:	6763      	str	r3, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800843c:	6723      	str	r3, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800843e:	6823      	ldr	r3, [r4, #0]
 8008440:	4a29      	ldr	r2, [pc, #164]	@ (80084e8 <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d003      	beq.n	800844e <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800844c:	d106      	bne.n	800845c <UART_RxISR_8BIT_FIFOEN+0x138>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800844e:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8008450:	2b01      	cmp	r3, #1
 8008452:	d00d      	beq.n	8008470 <UART_RxISR_8BIT_FIFOEN+0x14c>
          HAL_UART_RxCpltCallback(huart);
 8008454:	4620      	mov	r0, r4
 8008456:	f7f9 fee5 	bl	8002224 <HAL_UART_RxCpltCallback>
 800845a:	e784      	b.n	8008366 <UART_RxISR_8BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800845c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845e:	e852 3f00 	ldrex	r3, [r2]
 8008462:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008466:	e842 3100 	strex	r1, r3, [r2]
 800846a:	2900      	cmp	r1, #0
 800846c:	d1f6      	bne.n	800845c <UART_RxISR_8BIT_FIFOEN+0x138>
 800846e:	e7ee      	b.n	800844e <UART_RxISR_8BIT_FIFOEN+0x12a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008470:	2300      	movs	r3, #0
 8008472:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008474:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008476:	e852 3f00 	ldrex	r3, [r2]
 800847a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847e:	e842 3100 	strex	r1, r3, [r2]
 8008482:	2900      	cmp	r1, #0
 8008484:	d1f6      	bne.n	8008474 <UART_RxISR_8BIT_FIFOEN+0x150>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008486:	6823      	ldr	r3, [r4, #0]
 8008488:	69da      	ldr	r2, [r3, #28]
 800848a:	f012 0f10 	tst.w	r2, #16
 800848e:	d001      	beq.n	8008494 <UART_RxISR_8BIT_FIFOEN+0x170>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008490:	2210      	movs	r2, #16
 8008492:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008494:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8008498:	4620      	mov	r0, r4
 800849a:	f7ff fcc6 	bl	8007e2a <HAL_UARTEx_RxEventCallback>
 800849e:	e762      	b.n	8008366 <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 80084a0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80084a4:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	f43f af4e 	beq.w	8008348 <UART_RxISR_8BIT_FIFOEN+0x24>
 80084ac:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 80084b0:	429a      	cmp	r2, r3
 80084b2:	f67f af49 	bls.w	8008348 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80084b6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b8:	f102 0308 	add.w	r3, r2, #8
 80084bc:	e853 3f00 	ldrex	r3, [r3]
 80084c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c4:	3208      	adds	r2, #8
 80084c6:	e842 3100 	strex	r1, r3, [r2]
 80084ca:	2900      	cmp	r1, #0
 80084cc:	d1f3      	bne.n	80084b6 <UART_RxISR_8BIT_FIFOEN+0x192>
      huart->RxISR = UART_RxISR_8BIT;
 80084ce:	4b07      	ldr	r3, [pc, #28]	@ (80084ec <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 80084d0:	6763      	str	r3, [r4, #116]	@ 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80084d2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d4:	e852 3f00 	ldrex	r3, [r2]
 80084d8:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084dc:	e842 3100 	strex	r1, r3, [r2]
 80084e0:	2900      	cmp	r1, #0
 80084e2:	d1f6      	bne.n	80084d2 <UART_RxISR_8BIT_FIFOEN+0x1ae>
 80084e4:	e730      	b.n	8008348 <UART_RxISR_8BIT_FIFOEN+0x24>
 80084e6:	bf00      	nop
 80084e8:	40008000 	.word	0x40008000
 80084ec:	08008171 	.word	0x08008171

080084f0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80084f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80084f4:	f8b0 6060 	ldrh.w	r6, [r0, #96]	@ 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80084f8:	6803      	ldr	r3, [r0, #0]
 80084fa:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80084fc:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008500:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008504:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 8008508:	2a22      	cmp	r2, #34	@ 0x22
 800850a:	d005      	beq.n	8008518 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800850c:	699a      	ldr	r2, [r3, #24]
 800850e:	f042 0208 	orr.w	r2, r2, #8
 8008512:	619a      	str	r2, [r3, #24]
  }
}
 8008514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008518:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 800851a:	f8b0 7068 	ldrh.w	r7, [r0, #104]	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800851e:	e008      	b.n	8008532 <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008520:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8008524:	2b00      	cmp	r3, #0
 8008526:	d14b      	bne.n	80085c0 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 8008528:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800852c:	b29b      	uxth	r3, r3
 800852e:	2b00      	cmp	r3, #0
 8008530:	d04d      	beq.n	80085ce <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008532:	2f00      	cmp	r7, #0
 8008534:	f000 8099 	beq.w	800866a <UART_RxISR_16BIT_FIFOEN+0x17a>
 8008538:	f015 0f20 	tst.w	r5, #32
 800853c:	f000 8095 	beq.w	800866a <UART_RxISR_16BIT_FIFOEN+0x17a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008540:	6823      	ldr	r3, [r4, #0]
 8008542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008544:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8008546:	4033      	ands	r3, r6
 8008548:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800854a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800854c:	3302      	adds	r3, #2
 800854e:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8008550:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8008554:	b29b      	uxth	r3, r3
 8008556:	3b01      	subs	r3, #1
 8008558:	b29b      	uxth	r3, r3
 800855a:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800855e:	6823      	ldr	r3, [r4, #0]
 8008560:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008562:	f015 0f07 	tst.w	r5, #7
 8008566:	d0df      	beq.n	8008528 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008568:	f015 0f01 	tst.w	r5, #1
 800856c:	d009      	beq.n	8008582 <UART_RxISR_16BIT_FIFOEN+0x92>
 800856e:	f419 7f80 	tst.w	r9, #256	@ 0x100
 8008572:	d006      	beq.n	8008582 <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008574:	2201      	movs	r2, #1
 8008576:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008578:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800857c:	4313      	orrs	r3, r2
 800857e:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008582:	f015 0f02 	tst.w	r5, #2
 8008586:	d00b      	beq.n	80085a0 <UART_RxISR_16BIT_FIFOEN+0xb0>
 8008588:	f018 0f01 	tst.w	r8, #1
 800858c:	d008      	beq.n	80085a0 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800858e:	6823      	ldr	r3, [r4, #0]
 8008590:	2202      	movs	r2, #2
 8008592:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008594:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8008598:	f043 0304 	orr.w	r3, r3, #4
 800859c:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085a0:	f015 0f04 	tst.w	r5, #4
 80085a4:	d0bc      	beq.n	8008520 <UART_RxISR_16BIT_FIFOEN+0x30>
 80085a6:	f018 0f01 	tst.w	r8, #1
 80085aa:	d0b9      	beq.n	8008520 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80085ac:	6823      	ldr	r3, [r4, #0]
 80085ae:	2204      	movs	r2, #4
 80085b0:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80085b2:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80085b6:	f043 0302 	orr.w	r3, r3, #2
 80085ba:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 80085be:	e7af      	b.n	8008520 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 80085c0:	4620      	mov	r0, r4
 80085c2:	f7ff fbfb 	bl	8007dbc <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085c6:	2300      	movs	r3, #0
 80085c8:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 80085cc:	e7ac      	b.n	8008528 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085ce:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d0:	e852 3f00 	ldrex	r3, [r2]
 80085d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d8:	e842 3100 	strex	r1, r3, [r2]
 80085dc:	2900      	cmp	r1, #0
 80085de:	d1f6      	bne.n	80085ce <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085e0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e2:	f102 0308 	add.w	r3, r2, #8
 80085e6:	e853 3f00 	ldrex	r3, [r3]
 80085ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80085ee:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f2:	3208      	adds	r2, #8
 80085f4:	e842 3100 	strex	r1, r3, [r2]
 80085f8:	2900      	cmp	r1, #0
 80085fa:	d1f1      	bne.n	80085e0 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 80085fc:	2320      	movs	r3, #32
 80085fe:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;
 8008602:	2300      	movs	r3, #0
 8008604:	6763      	str	r3, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008606:	6723      	str	r3, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008608:	6823      	ldr	r3, [r4, #0]
 800860a:	4a29      	ldr	r2, [pc, #164]	@ (80086b0 <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d003      	beq.n	8008618 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8008616:	d106      	bne.n	8008626 <UART_RxISR_16BIT_FIFOEN+0x136>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008618:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800861a:	2b01      	cmp	r3, #1
 800861c:	d00d      	beq.n	800863a <UART_RxISR_16BIT_FIFOEN+0x14a>
          HAL_UART_RxCpltCallback(huart);
 800861e:	4620      	mov	r0, r4
 8008620:	f7f9 fe00 	bl	8002224 <HAL_UART_RxCpltCallback>
 8008624:	e785      	b.n	8008532 <UART_RxISR_16BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008626:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008628:	e852 3f00 	ldrex	r3, [r2]
 800862c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008630:	e842 3100 	strex	r1, r3, [r2]
 8008634:	2900      	cmp	r1, #0
 8008636:	d1f6      	bne.n	8008626 <UART_RxISR_16BIT_FIFOEN+0x136>
 8008638:	e7ee      	b.n	8008618 <UART_RxISR_16BIT_FIFOEN+0x128>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800863a:	2300      	movs	r3, #0
 800863c:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800863e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008640:	e852 3f00 	ldrex	r3, [r2]
 8008644:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008648:	e842 3100 	strex	r1, r3, [r2]
 800864c:	2900      	cmp	r1, #0
 800864e:	d1f6      	bne.n	800863e <UART_RxISR_16BIT_FIFOEN+0x14e>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008650:	6823      	ldr	r3, [r4, #0]
 8008652:	69da      	ldr	r2, [r3, #28]
 8008654:	f012 0f10 	tst.w	r2, #16
 8008658:	d001      	beq.n	800865e <UART_RxISR_16BIT_FIFOEN+0x16e>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800865a:	2210      	movs	r2, #16
 800865c:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800865e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8008662:	4620      	mov	r0, r4
 8008664:	f7ff fbe1 	bl	8007e2a <HAL_UARTEx_RxEventCallback>
 8008668:	e763      	b.n	8008532 <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 800866a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800866e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008670:	2b00      	cmp	r3, #0
 8008672:	f43f af4f 	beq.w	8008514 <UART_RxISR_16BIT_FIFOEN+0x24>
 8008676:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 800867a:	429a      	cmp	r2, r3
 800867c:	f67f af4a 	bls.w	8008514 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008680:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008682:	f102 0308 	add.w	r3, r2, #8
 8008686:	e853 3f00 	ldrex	r3, [r3]
 800868a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868e:	3208      	adds	r2, #8
 8008690:	e842 3100 	strex	r1, r3, [r2]
 8008694:	2900      	cmp	r1, #0
 8008696:	d1f3      	bne.n	8008680 <UART_RxISR_16BIT_FIFOEN+0x190>
      huart->RxISR = UART_RxISR_16BIT;
 8008698:	4b06      	ldr	r3, [pc, #24]	@ (80086b4 <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 800869a:	6763      	str	r3, [r4, #116]	@ 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800869c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800869e:	e852 3f00 	ldrex	r3, [r2]
 80086a2:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a6:	e842 3100 	strex	r1, r3, [r2]
 80086aa:	2900      	cmp	r1, #0
 80086ac:	d1f6      	bne.n	800869c <UART_RxISR_16BIT_FIFOEN+0x1ac>
 80086ae:	e731      	b.n	8008514 <UART_RxISR_16BIT_FIFOEN+0x24>
 80086b0:	40008000 	.word	0x40008000
 80086b4:	0800824d 	.word	0x0800824d

080086b8 <UART_SetConfig>:
{
 80086b8:	b570      	push	{r4, r5, r6, lr}
 80086ba:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 80086bc:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086be:	6883      	ldr	r3, [r0, #8]
 80086c0:	6902      	ldr	r2, [r0, #16]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	6942      	ldr	r2, [r0, #20]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	69c2      	ldr	r2, [r0, #28]
 80086ca:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086cc:	6808      	ldr	r0, [r1, #0]
 80086ce:	4a9d      	ldr	r2, [pc, #628]	@ (8008944 <UART_SetConfig+0x28c>)
 80086d0:	4002      	ands	r2, r0
 80086d2:	431a      	orrs	r2, r3
 80086d4:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086d6:	6822      	ldr	r2, [r4, #0]
 80086d8:	6853      	ldr	r3, [r2, #4]
 80086da:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80086de:	68e1      	ldr	r1, [r4, #12]
 80086e0:	430b      	orrs	r3, r1
 80086e2:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086e4:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80086e6:	6822      	ldr	r2, [r4, #0]
 80086e8:	4b97      	ldr	r3, [pc, #604]	@ (8008948 <UART_SetConfig+0x290>)
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d001      	beq.n	80086f2 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 80086ee:	6a23      	ldr	r3, [r4, #32]
 80086f0:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086f2:	6893      	ldr	r3, [r2, #8]
 80086f4:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80086f8:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80086fc:	430b      	orrs	r3, r1
 80086fe:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008700:	6822      	ldr	r2, [r4, #0]
 8008702:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8008704:	f023 030f 	bic.w	r3, r3, #15
 8008708:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800870a:	430b      	orrs	r3, r1
 800870c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800870e:	6823      	ldr	r3, [r4, #0]
 8008710:	4a8e      	ldr	r2, [pc, #568]	@ (800894c <UART_SetConfig+0x294>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d01c      	beq.n	8008750 <UART_SetConfig+0x98>
 8008716:	4a8e      	ldr	r2, [pc, #568]	@ (8008950 <UART_SetConfig+0x298>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d031      	beq.n	8008780 <UART_SetConfig+0xc8>
 800871c:	4a8a      	ldr	r2, [pc, #552]	@ (8008948 <UART_SetConfig+0x290>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d04b      	beq.n	80087ba <UART_SetConfig+0x102>
 8008722:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8008724:	4988      	ldr	r1, [pc, #544]	@ (8008948 <UART_SetConfig+0x290>)
 8008726:	428b      	cmp	r3, r1
 8008728:	d068      	beq.n	80087fc <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800872a:	69e0      	ldr	r0, [r4, #28]
 800872c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8008730:	f000 80a5 	beq.w	800887e <UART_SetConfig+0x1c6>
    switch (clocksource)
 8008734:	2a08      	cmp	r2, #8
 8008736:	f200 811f 	bhi.w	8008978 <UART_SetConfig+0x2c0>
 800873a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800873e:	00d3      	.short	0x00d3
 8008740:	00d100f5 	.word	0x00d100f5
 8008744:	00f8011d 	.word	0x00f8011d
 8008748:	011d011d 	.word	0x011d011d
 800874c:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8008750:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008754:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8008758:	f002 0203 	and.w	r2, r2, #3
 800875c:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008760:	f5a2 3240 	sub.w	r2, r2, #196608	@ 0x30000
 8008764:	2a03      	cmp	r2, #3
 8008766:	d809      	bhi.n	800877c <UART_SetConfig+0xc4>
 8008768:	e8df f002 	tbb	[pc, r2]
 800876c:	063c0402 	.word	0x063c0402
 8008770:	2201      	movs	r2, #1
 8008772:	e7d7      	b.n	8008724 <UART_SetConfig+0x6c>
 8008774:	2204      	movs	r2, #4
 8008776:	e7d5      	b.n	8008724 <UART_SetConfig+0x6c>
 8008778:	2208      	movs	r2, #8
 800877a:	e7d3      	b.n	8008724 <UART_SetConfig+0x6c>
 800877c:	2210      	movs	r2, #16
 800877e:	e7d1      	b.n	8008724 <UART_SetConfig+0x6c>
 8008780:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008784:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8008788:	f002 020c 	and.w	r2, r2, #12
 800878c:	f442 2240 	orr.w	r2, r2, #786432	@ 0xc0000
 8008790:	f5a2 2240 	sub.w	r2, r2, #786432	@ 0xc0000
 8008794:	2a0c      	cmp	r2, #12
 8008796:	d80e      	bhi.n	80087b6 <UART_SetConfig+0xfe>
 8008798:	e8df f002 	tbb	[pc, r2]
 800879c:	0d0d0d07 	.word	0x0d0d0d07
 80087a0:	0d0d0d09 	.word	0x0d0d0d09
 80087a4:	0d0d0d26 	.word	0x0d0d0d26
 80087a8:	0b          	.byte	0x0b
 80087a9:	00          	.byte	0x00
 80087aa:	2200      	movs	r2, #0
 80087ac:	e7ba      	b.n	8008724 <UART_SetConfig+0x6c>
 80087ae:	2204      	movs	r2, #4
 80087b0:	e7b8      	b.n	8008724 <UART_SetConfig+0x6c>
 80087b2:	2208      	movs	r2, #8
 80087b4:	e7b6      	b.n	8008724 <UART_SetConfig+0x6c>
 80087b6:	2210      	movs	r2, #16
 80087b8:	e7b4      	b.n	8008724 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80087ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80087be:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80087c2:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 80087c6:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 80087ca:	d00f      	beq.n	80087ec <UART_SetConfig+0x134>
 80087cc:	d805      	bhi.n	80087da <UART_SetConfig+0x122>
 80087ce:	b17a      	cbz	r2, 80087f0 <UART_SetConfig+0x138>
 80087d0:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80087d4:	d10e      	bne.n	80087f4 <UART_SetConfig+0x13c>
 80087d6:	2204      	movs	r2, #4
 80087d8:	e7a4      	b.n	8008724 <UART_SetConfig+0x6c>
 80087da:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 80087de:	d10b      	bne.n	80087f8 <UART_SetConfig+0x140>
 80087e0:	2208      	movs	r2, #8
 80087e2:	e79f      	b.n	8008724 <UART_SetConfig+0x6c>
 80087e4:	2202      	movs	r2, #2
 80087e6:	e79d      	b.n	8008724 <UART_SetConfig+0x6c>
 80087e8:	2202      	movs	r2, #2
 80087ea:	e79b      	b.n	8008724 <UART_SetConfig+0x6c>
 80087ec:	2202      	movs	r2, #2
 80087ee:	e799      	b.n	8008724 <UART_SetConfig+0x6c>
 80087f0:	2200      	movs	r2, #0
 80087f2:	e797      	b.n	8008724 <UART_SetConfig+0x6c>
 80087f4:	2210      	movs	r2, #16
 80087f6:	e795      	b.n	8008724 <UART_SetConfig+0x6c>
 80087f8:	2210      	movs	r2, #16
 80087fa:	e793      	b.n	8008724 <UART_SetConfig+0x6c>
    switch (clocksource)
 80087fc:	2a08      	cmp	r2, #8
 80087fe:	f200 809c 	bhi.w	800893a <UART_SetConfig+0x282>
 8008802:	e8df f002 	tbb	[pc, r2]
 8008806:	9a08      	.short	0x9a08
 8008808:	9a379a3a 	.word	0x9a379a3a
 800880c:	9a9a      	.short	0x9a9a
 800880e:	05          	.byte	0x05
 800880f:	00          	.byte	0x00
 8008810:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008814:	e004      	b.n	8008820 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008816:	f7fe fabf 	bl	8006d98 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800881a:	2800      	cmp	r0, #0
 800881c:	f000 808f 	beq.w	800893e <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008820:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008822:	4b4c      	ldr	r3, [pc, #304]	@ (8008954 <UART_SetConfig+0x29c>)
 8008824:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8008828:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800882c:	6865      	ldr	r5, [r4, #4]
 800882e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8008832:	4299      	cmp	r1, r3
 8008834:	f200 8094 	bhi.w	8008960 <UART_SetConfig+0x2a8>
 8008838:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800883c:	f200 8092 	bhi.w	8008964 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008840:	2600      	movs	r6, #0
 8008842:	4633      	mov	r3, r6
 8008844:	4631      	mov	r1, r6
 8008846:	f7f8 f967 	bl	8000b18 <__aeabi_uldivmod>
 800884a:	0209      	lsls	r1, r1, #8
 800884c:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8008850:	0200      	lsls	r0, r0, #8
 8008852:	086b      	lsrs	r3, r5, #1
 8008854:	18c0      	adds	r0, r0, r3
 8008856:	462a      	mov	r2, r5
 8008858:	4633      	mov	r3, r6
 800885a:	f141 0100 	adc.w	r1, r1, #0
 800885e:	f7f8 f95b 	bl	8000b18 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008862:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8008866:	4b3c      	ldr	r3, [pc, #240]	@ (8008958 <UART_SetConfig+0x2a0>)
 8008868:	429a      	cmp	r2, r3
 800886a:	d87d      	bhi.n	8008968 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 800886c:	6823      	ldr	r3, [r4, #0]
 800886e:	60d8      	str	r0, [r3, #12]
 8008870:	4630      	mov	r0, r6
 8008872:	e050      	b.n	8008916 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 8008874:	f7fd fd92 	bl	800639c <HAL_RCC_GetSysClockFreq>
        break;
 8008878:	e7cf      	b.n	800881a <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 800887a:	4838      	ldr	r0, [pc, #224]	@ (800895c <UART_SetConfig+0x2a4>)
 800887c:	e7d0      	b.n	8008820 <UART_SetConfig+0x168>
    switch (clocksource)
 800887e:	2a08      	cmp	r2, #8
 8008880:	d874      	bhi.n	800896c <UART_SetConfig+0x2b4>
 8008882:	e8df f002 	tbb	[pc, r2]
 8008886:	2707      	.short	0x2707
 8008888:	732a7305 	.word	0x732a7305
 800888c:	7373      	.short	0x7373
 800888e:	0b          	.byte	0x0b
 800888f:	00          	.byte	0x00
 8008890:	4832      	ldr	r0, [pc, #200]	@ (800895c <UART_SetConfig+0x2a4>)
 8008892:	e003      	b.n	800889c <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008894:	f7fe fa80 	bl	8006d98 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8008898:	2800      	cmp	r0, #0
 800889a:	d069      	beq.n	8008970 <UART_SetConfig+0x2b8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800889c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800889e:	4b2d      	ldr	r3, [pc, #180]	@ (8008954 <UART_SetConfig+0x29c>)
 80088a0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80088a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80088a8:	6862      	ldr	r2, [r4, #4]
 80088aa:	0853      	lsrs	r3, r2, #1
 80088ac:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80088b0:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088b4:	f1a3 0110 	sub.w	r1, r3, #16
 80088b8:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80088bc:	4291      	cmp	r1, r2
 80088be:	d859      	bhi.n	8008974 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80088c0:	b29a      	uxth	r2, r3
 80088c2:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80088c6:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80088ca:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 80088cc:	6822      	ldr	r2, [r4, #0]
 80088ce:	60d3      	str	r3, [r2, #12]
 80088d0:	2000      	movs	r0, #0
 80088d2:	e020      	b.n	8008916 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80088d4:	f7fe fa70 	bl	8006db8 <HAL_RCC_GetPCLK2Freq>
        break;
 80088d8:	e7de      	b.n	8008898 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 80088da:	f7fd fd5f 	bl	800639c <HAL_RCC_GetSysClockFreq>
        break;
 80088de:	e7db      	b.n	8008898 <UART_SetConfig+0x1e0>
    switch (clocksource)
 80088e0:	481e      	ldr	r0, [pc, #120]	@ (800895c <UART_SetConfig+0x2a4>)
 80088e2:	e003      	b.n	80088ec <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 80088e4:	f7fe fa58 	bl	8006d98 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80088e8:	2800      	cmp	r0, #0
 80088ea:	d047      	beq.n	800897c <UART_SetConfig+0x2c4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088ec:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80088ee:	4b19      	ldr	r3, [pc, #100]	@ (8008954 <UART_SetConfig+0x29c>)
 80088f0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80088f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80088f8:	6863      	ldr	r3, [r4, #4]
 80088fa:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80088fe:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008902:	f1a0 0210 	sub.w	r2, r0, #16
 8008906:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 800890a:	429a      	cmp	r2, r3
 800890c:	d838      	bhi.n	8008980 <UART_SetConfig+0x2c8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800890e:	6823      	ldr	r3, [r4, #0]
 8008910:	b280      	uxth	r0, r0
 8008912:	60d8      	str	r0, [r3, #12]
 8008914:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8008916:	2301      	movs	r3, #1
 8008918:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800891c:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8008920:	2300      	movs	r3, #0
 8008922:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8008924:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8008926:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8008928:	f7fe fa46 	bl	8006db8 <HAL_RCC_GetPCLK2Freq>
        break;
 800892c:	e7dc      	b.n	80088e8 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 800892e:	f7fd fd35 	bl	800639c <HAL_RCC_GetSysClockFreq>
        break;
 8008932:	e7d9      	b.n	80088e8 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 8008934:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008938:	e7d8      	b.n	80088ec <UART_SetConfig+0x234>
    switch (clocksource)
 800893a:	2001      	movs	r0, #1
 800893c:	e7eb      	b.n	8008916 <UART_SetConfig+0x25e>
 800893e:	2000      	movs	r0, #0
 8008940:	e7e9      	b.n	8008916 <UART_SetConfig+0x25e>
 8008942:	bf00      	nop
 8008944:	cfff69f3 	.word	0xcfff69f3
 8008948:	40008000 	.word	0x40008000
 800894c:	40013800 	.word	0x40013800
 8008950:	40004400 	.word	0x40004400
 8008954:	08016a84 	.word	0x08016a84
 8008958:	000ffcff 	.word	0x000ffcff
 800895c:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 8008960:	2001      	movs	r0, #1
 8008962:	e7d8      	b.n	8008916 <UART_SetConfig+0x25e>
 8008964:	2001      	movs	r0, #1
 8008966:	e7d6      	b.n	8008916 <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 8008968:	2001      	movs	r0, #1
 800896a:	e7d4      	b.n	8008916 <UART_SetConfig+0x25e>
    switch (clocksource)
 800896c:	2001      	movs	r0, #1
 800896e:	e7d2      	b.n	8008916 <UART_SetConfig+0x25e>
 8008970:	2000      	movs	r0, #0
 8008972:	e7d0      	b.n	8008916 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8008974:	2001      	movs	r0, #1
 8008976:	e7ce      	b.n	8008916 <UART_SetConfig+0x25e>
    switch (clocksource)
 8008978:	2001      	movs	r0, #1
 800897a:	e7cc      	b.n	8008916 <UART_SetConfig+0x25e>
 800897c:	2000      	movs	r0, #0
 800897e:	e7ca      	b.n	8008916 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8008980:	2001      	movs	r0, #1
 8008982:	e7c8      	b.n	8008916 <UART_SetConfig+0x25e>

08008984 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008984:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008986:	f013 0f01 	tst.w	r3, #1
 800898a:	d006      	beq.n	800899a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800898c:	6802      	ldr	r2, [r0, #0]
 800898e:	6853      	ldr	r3, [r2, #4]
 8008990:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008994:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8008996:	430b      	orrs	r3, r1
 8008998:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800899a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800899c:	f013 0f02 	tst.w	r3, #2
 80089a0:	d006      	beq.n	80089b0 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80089a2:	6802      	ldr	r2, [r0, #0]
 80089a4:	6853      	ldr	r3, [r2, #4]
 80089a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089aa:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80089ac:	430b      	orrs	r3, r1
 80089ae:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80089b0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80089b2:	f013 0f04 	tst.w	r3, #4
 80089b6:	d006      	beq.n	80089c6 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80089b8:	6802      	ldr	r2, [r0, #0]
 80089ba:	6853      	ldr	r3, [r2, #4]
 80089bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80089c0:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 80089c2:	430b      	orrs	r3, r1
 80089c4:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089c6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80089c8:	f013 0f08 	tst.w	r3, #8
 80089cc:	d006      	beq.n	80089dc <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089ce:	6802      	ldr	r2, [r0, #0]
 80089d0:	6853      	ldr	r3, [r2, #4]
 80089d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80089d6:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 80089d8:	430b      	orrs	r3, r1
 80089da:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80089dc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80089de:	f013 0f10 	tst.w	r3, #16
 80089e2:	d006      	beq.n	80089f2 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089e4:	6802      	ldr	r2, [r0, #0]
 80089e6:	6893      	ldr	r3, [r2, #8]
 80089e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80089ec:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 80089ee:	430b      	orrs	r3, r1
 80089f0:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089f2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80089f4:	f013 0f20 	tst.w	r3, #32
 80089f8:	d006      	beq.n	8008a08 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089fa:	6802      	ldr	r2, [r0, #0]
 80089fc:	6893      	ldr	r3, [r2, #8]
 80089fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008a02:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8008a04:	430b      	orrs	r3, r1
 8008a06:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a08:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008a0a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8008a0e:	d00a      	beq.n	8008a26 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a10:	6802      	ldr	r2, [r0, #0]
 8008a12:	6853      	ldr	r3, [r2, #4]
 8008a14:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008a18:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8008a1a:	430b      	orrs	r3, r1
 8008a1c:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a1e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8008a20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a24:	d00b      	beq.n	8008a3e <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a26:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008a28:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008a2c:	d006      	beq.n	8008a3c <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a2e:	6802      	ldr	r2, [r0, #0]
 8008a30:	6853      	ldr	r3, [r2, #4]
 8008a32:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8008a36:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8008a38:	430b      	orrs	r3, r1
 8008a3a:	6053      	str	r3, [r2, #4]
}
 8008a3c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a3e:	6802      	ldr	r2, [r0, #0]
 8008a40:	6853      	ldr	r3, [r2, #4]
 8008a42:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8008a46:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8008a48:	430b      	orrs	r3, r1
 8008a4a:	6053      	str	r3, [r2, #4]
 8008a4c:	e7eb      	b.n	8008a26 <UART_AdvFeatureConfig+0xa2>

08008a4e <UART_WaitOnFlagUntilTimeout>:
{
 8008a4e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a52:	4605      	mov	r5, r0
 8008a54:	460f      	mov	r7, r1
 8008a56:	4616      	mov	r6, r2
 8008a58:	4699      	mov	r9, r3
 8008a5a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a5e:	682b      	ldr	r3, [r5, #0]
 8008a60:	69dc      	ldr	r4, [r3, #28]
 8008a62:	ea37 0404 	bics.w	r4, r7, r4
 8008a66:	bf0c      	ite	eq
 8008a68:	2401      	moveq	r4, #1
 8008a6a:	2400      	movne	r4, #0
 8008a6c:	42b4      	cmp	r4, r6
 8008a6e:	d157      	bne.n	8008b20 <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 8008a70:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008a74:	d0f3      	beq.n	8008a5e <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a76:	f7f9 f8d1 	bl	8001c1c <HAL_GetTick>
 8008a7a:	eba0 0009 	sub.w	r0, r0, r9
 8008a7e:	4540      	cmp	r0, r8
 8008a80:	d82f      	bhi.n	8008ae2 <UART_WaitOnFlagUntilTimeout+0x94>
 8008a82:	f1b8 0f00 	cmp.w	r8, #0
 8008a86:	d02c      	beq.n	8008ae2 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a88:	682b      	ldr	r3, [r5, #0]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	f012 0f04 	tst.w	r2, #4
 8008a90:	d0e5      	beq.n	8008a5e <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a92:	69da      	ldr	r2, [r3, #28]
 8008a94:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8008a98:	d0e1      	beq.n	8008a5e <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008a9e:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008aa0:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa2:	e852 3f00 	ldrex	r3, [r2]
 8008aa6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aaa:	e842 3100 	strex	r1, r3, [r2]
 8008aae:	2900      	cmp	r1, #0
 8008ab0:	d1f6      	bne.n	8008aa0 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ab2:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab4:	f102 0308 	add.w	r3, r2, #8
 8008ab8:	e853 3f00 	ldrex	r3, [r3]
 8008abc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac0:	3208      	adds	r2, #8
 8008ac2:	e842 3100 	strex	r1, r3, [r2]
 8008ac6:	2900      	cmp	r1, #0
 8008ac8:	d1f3      	bne.n	8008ab2 <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 8008aca:	2320      	movs	r3, #32
 8008acc:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8008ad0:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ad4:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 8008ad8:	2300      	movs	r3, #0
 8008ada:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
          return HAL_TIMEOUT;
 8008ade:	2003      	movs	r0, #3
 8008ae0:	e01f      	b.n	8008b22 <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008ae2:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae4:	e852 3f00 	ldrex	r3, [r2]
 8008ae8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aec:	e842 3100 	strex	r1, r3, [r2]
 8008af0:	2900      	cmp	r1, #0
 8008af2:	d1f6      	bne.n	8008ae2 <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008af4:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af6:	f102 0308 	add.w	r3, r2, #8
 8008afa:	e853 3f00 	ldrex	r3, [r3]
 8008afe:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b02:	3208      	adds	r2, #8
 8008b04:	e842 3100 	strex	r1, r3, [r2]
 8008b08:	2900      	cmp	r1, #0
 8008b0a:	d1f3      	bne.n	8008af4 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8008b0c:	2320      	movs	r3, #32
 8008b0e:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8008b12:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
        __HAL_UNLOCK(huart);
 8008b16:	2300      	movs	r3, #0
 8008b18:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
        return HAL_TIMEOUT;
 8008b1c:	2003      	movs	r0, #3
 8008b1e:	e000      	b.n	8008b22 <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 8008b20:	2000      	movs	r0, #0
}
 8008b22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008b26 <UART_CheckIdleState>:
{
 8008b26:	b530      	push	{r4, r5, lr}
 8008b28:	b083      	sub	sp, #12
 8008b2a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 8008b32:	f7f9 f873 	bl	8001c1c <HAL_GetTick>
 8008b36:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b38:	6822      	ldr	r2, [r4, #0]
 8008b3a:	6812      	ldr	r2, [r2, #0]
 8008b3c:	f012 0f08 	tst.w	r2, #8
 8008b40:	d110      	bne.n	8008b64 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b42:	6823      	ldr	r3, [r4, #0]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f013 0f04 	tst.w	r3, #4
 8008b4a:	d119      	bne.n	8008b80 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8008b4c:	2320      	movs	r3, #32
 8008b4e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008b52:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b56:	2000      	movs	r0, #0
 8008b58:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b5a:	6720      	str	r0, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 8008b5c:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8008b60:	b003      	add	sp, #12
 8008b62:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008b68:	9300      	str	r3, [sp, #0]
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008b72:	4620      	mov	r0, r4
 8008b74:	f7ff ff6b 	bl	8008a4e <UART_WaitOnFlagUntilTimeout>
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	d0e2      	beq.n	8008b42 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8008b7c:	2003      	movs	r0, #3
 8008b7e:	e7ef      	b.n	8008b60 <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008b84:	9300      	str	r3, [sp, #0]
 8008b86:	462b      	mov	r3, r5
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008b8e:	4620      	mov	r0, r4
 8008b90:	f7ff ff5d 	bl	8008a4e <UART_WaitOnFlagUntilTimeout>
 8008b94:	2800      	cmp	r0, #0
 8008b96:	d0d9      	beq.n	8008b4c <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8008b98:	2003      	movs	r0, #3
 8008b9a:	e7e1      	b.n	8008b60 <UART_CheckIdleState+0x3a>

08008b9c <HAL_UART_Init>:
  if (huart == NULL)
 8008b9c:	b378      	cbz	r0, 8008bfe <HAL_UART_Init+0x62>
{
 8008b9e:	b510      	push	{r4, lr}
 8008ba0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8008ba2:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8008ba6:	b30b      	cbz	r3, 8008bec <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8008ba8:	2324      	movs	r3, #36	@ 0x24
 8008baa:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8008bae:	6822      	ldr	r2, [r4, #0]
 8008bb0:	6813      	ldr	r3, [r2, #0]
 8008bb2:	f023 0301 	bic.w	r3, r3, #1
 8008bb6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008bb8:	4620      	mov	r0, r4
 8008bba:	f7ff fd7d 	bl	80086b8 <UART_SetConfig>
 8008bbe:	2801      	cmp	r0, #1
 8008bc0:	d013      	beq.n	8008bea <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008bc2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008bc4:	b9bb      	cbnz	r3, 8008bf6 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bc6:	6822      	ldr	r2, [r4, #0]
 8008bc8:	6853      	ldr	r3, [r2, #4]
 8008bca:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8008bce:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bd0:	6822      	ldr	r2, [r4, #0]
 8008bd2:	6893      	ldr	r3, [r2, #8]
 8008bd4:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8008bd8:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8008bda:	6822      	ldr	r2, [r4, #0]
 8008bdc:	6813      	ldr	r3, [r2, #0]
 8008bde:	f043 0301 	orr.w	r3, r3, #1
 8008be2:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8008be4:	4620      	mov	r0, r4
 8008be6:	f7ff ff9e 	bl	8008b26 <UART_CheckIdleState>
}
 8008bea:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8008bec:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 8008bf0:	f7f9 fa04 	bl	8001ffc <HAL_UART_MspInit>
 8008bf4:	e7d8      	b.n	8008ba8 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	f7ff fec4 	bl	8008984 <UART_AdvFeatureConfig>
 8008bfc:	e7e3      	b.n	8008bc6 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8008bfe:	2001      	movs	r0, #1
}
 8008c00:	4770      	bx	lr
	...

08008c04 <UART_Start_Receive_IT>:
{
 8008c04:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8008c06:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008c08:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008c0c:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008c10:	2300      	movs	r3, #0
 8008c12:	6743      	str	r3, [r0, #116]	@ 0x74
  UART_MASK_COMPUTATION(huart);
 8008c14:	6883      	ldr	r3, [r0, #8]
 8008c16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c1a:	d006      	beq.n	8008c2a <UART_Start_Receive_IT+0x26>
 8008c1c:	b9a3      	cbnz	r3, 8008c48 <UART_Start_Receive_IT+0x44>
 8008c1e:	6903      	ldr	r3, [r0, #16]
 8008c20:	b973      	cbnz	r3, 8008c40 <UART_Start_Receive_IT+0x3c>
 8008c22:	23ff      	movs	r3, #255	@ 0xff
 8008c24:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8008c28:	e014      	b.n	8008c54 <UART_Start_Receive_IT+0x50>
 8008c2a:	6903      	ldr	r3, [r0, #16]
 8008c2c:	b923      	cbnz	r3, 8008c38 <UART_Start_Receive_IT+0x34>
 8008c2e:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8008c32:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8008c36:	e00d      	b.n	8008c54 <UART_Start_Receive_IT+0x50>
 8008c38:	23ff      	movs	r3, #255	@ 0xff
 8008c3a:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8008c3e:	e009      	b.n	8008c54 <UART_Start_Receive_IT+0x50>
 8008c40:	237f      	movs	r3, #127	@ 0x7f
 8008c42:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8008c46:	e005      	b.n	8008c54 <UART_Start_Receive_IT+0x50>
 8008c48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c4c:	d02d      	beq.n	8008caa <UART_Start_Receive_IT+0xa6>
 8008c4e:	2300      	movs	r3, #0
 8008c50:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c54:	2300      	movs	r3, #0
 8008c56:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c5a:	2322      	movs	r3, #34	@ 0x22
 8008c5c:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c60:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c62:	f101 0308 	add.w	r3, r1, #8
 8008c66:	e853 3f00 	ldrex	r3, [r3]
 8008c6a:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6e:	3108      	adds	r1, #8
 8008c70:	e841 3400 	strex	r4, r3, [r1]
 8008c74:	2c00      	cmp	r4, #0
 8008c76:	d1f3      	bne.n	8008c60 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008c78:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8008c7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c7e:	d01e      	beq.n	8008cbe <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c80:	6883      	ldr	r3, [r0, #8]
 8008c82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c86:	d042      	beq.n	8008d0e <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT;
 8008c88:	4b29      	ldr	r3, [pc, #164]	@ (8008d30 <UART_Start_Receive_IT+0x12c>)
 8008c8a:	6743      	str	r3, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008c8c:	6903      	ldr	r3, [r0, #16]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d043      	beq.n	8008d1a <UART_Start_Receive_IT+0x116>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008c92:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c94:	e852 3f00 	ldrex	r3, [r2]
 8008c98:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9c:	e842 3100 	strex	r1, r3, [r2]
 8008ca0:	2900      	cmp	r1, #0
 8008ca2:	d1f6      	bne.n	8008c92 <UART_Start_Receive_IT+0x8e>
}
 8008ca4:	2000      	movs	r0, #0
 8008ca6:	bc10      	pop	{r4}
 8008ca8:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8008caa:	6903      	ldr	r3, [r0, #16]
 8008cac:	b91b      	cbnz	r3, 8008cb6 <UART_Start_Receive_IT+0xb2>
 8008cae:	237f      	movs	r3, #127	@ 0x7f
 8008cb0:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8008cb4:	e7ce      	b.n	8008c54 <UART_Start_Receive_IT+0x50>
 8008cb6:	233f      	movs	r3, #63	@ 0x3f
 8008cb8:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8008cbc:	e7ca      	b.n	8008c54 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008cbe:	f8b0 3068 	ldrh.w	r3, [r0, #104]	@ 0x68
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d8dc      	bhi.n	8008c80 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cc6:	6883      	ldr	r3, [r0, #8]
 8008cc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ccc:	d019      	beq.n	8008d02 <UART_Start_Receive_IT+0xfe>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008cce:	4b19      	ldr	r3, [pc, #100]	@ (8008d34 <UART_Start_Receive_IT+0x130>)
 8008cd0:	6743      	str	r3, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008cd2:	6903      	ldr	r3, [r0, #16]
 8008cd4:	b143      	cbz	r3, 8008ce8 <UART_Start_Receive_IT+0xe4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cd6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd8:	e852 3f00 	ldrex	r3, [r2]
 8008cdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce0:	e842 3100 	strex	r1, r3, [r2]
 8008ce4:	2900      	cmp	r1, #0
 8008ce6:	d1f6      	bne.n	8008cd6 <UART_Start_Receive_IT+0xd2>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008ce8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cea:	f102 0308 	add.w	r3, r2, #8
 8008cee:	e853 3f00 	ldrex	r3, [r3]
 8008cf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf6:	3208      	adds	r2, #8
 8008cf8:	e842 3100 	strex	r1, r3, [r2]
 8008cfc:	2900      	cmp	r1, #0
 8008cfe:	d1f3      	bne.n	8008ce8 <UART_Start_Receive_IT+0xe4>
 8008d00:	e7d0      	b.n	8008ca4 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d02:	6903      	ldr	r3, [r0, #16]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d1e2      	bne.n	8008cce <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008d08:	4b0b      	ldr	r3, [pc, #44]	@ (8008d38 <UART_Start_Receive_IT+0x134>)
 8008d0a:	6743      	str	r3, [r0, #116]	@ 0x74
 8008d0c:	e7e1      	b.n	8008cd2 <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d0e:	6903      	ldr	r3, [r0, #16]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d1b9      	bne.n	8008c88 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8008d14:	4b09      	ldr	r3, [pc, #36]	@ (8008d3c <UART_Start_Receive_IT+0x138>)
 8008d16:	6743      	str	r3, [r0, #116]	@ 0x74
 8008d18:	e7b8      	b.n	8008c8c <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008d1a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d1c:	e852 3f00 	ldrex	r3, [r2]
 8008d20:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d24:	e842 3100 	strex	r1, r3, [r2]
 8008d28:	2900      	cmp	r1, #0
 8008d2a:	d1f6      	bne.n	8008d1a <UART_Start_Receive_IT+0x116>
 8008d2c:	e7ba      	b.n	8008ca4 <UART_Start_Receive_IT+0xa0>
 8008d2e:	bf00      	nop
 8008d30:	08008171 	.word	0x08008171
 8008d34:	08008325 	.word	0x08008325
 8008d38:	080084f1 	.word	0x080084f1
 8008d3c:	0800824d 	.word	0x0800824d

08008d40 <HAL_UART_Receive_IT>:
{
 8008d40:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d42:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 8008d46:	2b20      	cmp	r3, #32
 8008d48:	d117      	bne.n	8008d7a <HAL_UART_Receive_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 8008d4a:	b1c1      	cbz	r1, 8008d7e <HAL_UART_Receive_IT+0x3e>
 8008d4c:	b1ca      	cbz	r2, 8008d82 <HAL_UART_Receive_IT+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	66c3      	str	r3, [r0, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d52:	6803      	ldr	r3, [r0, #0]
 8008d54:	4c0c      	ldr	r4, [pc, #48]	@ (8008d88 <HAL_UART_Receive_IT+0x48>)
 8008d56:	42a3      	cmp	r3, r4
 8008d58:	d00c      	beq.n	8008d74 <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8008d60:	d008      	beq.n	8008d74 <HAL_UART_Receive_IT+0x34>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d62:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d64:	e854 3f00 	ldrex	r3, [r4]
 8008d68:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6c:	e844 3500 	strex	r5, r3, [r4]
 8008d70:	2d00      	cmp	r5, #0
 8008d72:	d1f6      	bne.n	8008d62 <HAL_UART_Receive_IT+0x22>
    return (UART_Start_Receive_IT(huart, pData, Size));
 8008d74:	f7ff ff46 	bl	8008c04 <UART_Start_Receive_IT>
 8008d78:	e000      	b.n	8008d7c <HAL_UART_Receive_IT+0x3c>
    return HAL_BUSY;
 8008d7a:	2002      	movs	r0, #2
}
 8008d7c:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8008d7e:	2001      	movs	r0, #1
 8008d80:	e7fc      	b.n	8008d7c <HAL_UART_Receive_IT+0x3c>
 8008d82:	2001      	movs	r0, #1
 8008d84:	e7fa      	b.n	8008d7c <HAL_UART_Receive_IT+0x3c>
 8008d86:	bf00      	nop
 8008d88:	40008000 	.word	0x40008000

08008d8c <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8008d8c:	b082      	sub	sp, #8
 8008d8e:	ab02      	add	r3, sp, #8
 8008d90:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8008d94:	6802      	ldr	r2, [r0, #0]
 8008d96:	6853      	ldr	r3, [r2, #4]
 8008d98:	f023 0310 	bic.w	r3, r3, #16
 8008d9c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8008da0:	430b      	orrs	r3, r1
 8008da2:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8008da4:	6802      	ldr	r2, [r0, #0]
 8008da6:	6853      	ldr	r3, [r2, #4]
 8008da8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008dac:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8008db0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008db4:	6053      	str	r3, [r2, #4]
}
 8008db6:	b002      	add	sp, #8
 8008db8:	4770      	bx	lr
	...

08008dbc <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008dbc:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8008dbe:	b92b      	cbnz	r3, 8008dcc <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008dc6:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
 8008dca:	4770      	bx	lr
{
 8008dcc:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008dce:	6803      	ldr	r3, [r0, #0]
 8008dd0:	689a      	ldr	r2, [r3, #8]
 8008dd2:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008dd6:	6899      	ldr	r1, [r3, #8]
 8008dd8:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008dda:	4d09      	ldr	r5, [pc, #36]	@ (8008e00 <UARTEx_SetNbDataToProcess+0x44>)
 8008ddc:	5c6b      	ldrb	r3, [r5, r1]
 8008dde:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008de0:	4c08      	ldr	r4, [pc, #32]	@ (8008e04 <UARTEx_SetNbDataToProcess+0x48>)
 8008de2:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008de4:	fb93 f3f1 	sdiv	r3, r3, r1
 8008de8:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008dec:	5cab      	ldrb	r3, [r5, r2]
 8008dee:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008df0:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008df2:	fb93 f3f2 	sdiv	r3, r3, r2
 8008df6:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
  }
}
 8008dfa:	bc30      	pop	{r4, r5}
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop
 8008e00:	08016aa4 	.word	0x08016aa4
 8008e04:	08016a9c 	.word	0x08016a9c

08008e08 <HAL_UARTEx_WakeupCallback>:
}
 8008e08:	4770      	bx	lr

08008e0a <HAL_UARTEx_RxFifoFullCallback>:
}
 8008e0a:	4770      	bx	lr

08008e0c <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8008e0c:	4770      	bx	lr

08008e0e <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 8008e0e:	b510      	push	{r4, lr}
 8008e10:	b084      	sub	sp, #16
 8008e12:	ab04      	add	r3, sp, #16
 8008e14:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8008e18:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d035      	beq.n	8008e8c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 8008e20:	4604      	mov	r4, r0
 8008e22:	2301      	movs	r3, #1
 8008e24:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8008e28:	2324      	movs	r3, #36	@ 0x24
 8008e2a:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8008e2e:	6802      	ldr	r2, [r0, #0]
 8008e30:	6813      	ldr	r3, [r2, #0]
 8008e32:	f023 0301 	bic.w	r3, r3, #1
 8008e36:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8008e38:	6801      	ldr	r1, [r0, #0]
 8008e3a:	688b      	ldr	r3, [r1, #8]
 8008e3c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008e40:	9a02      	ldr	r2, [sp, #8]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8008e46:	b1aa      	cbz	r2, 8008e74 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8008e48:	6822      	ldr	r2, [r4, #0]
 8008e4a:	6813      	ldr	r3, [r2, #0]
 8008e4c:	f043 0301 	orr.w	r3, r3, #1
 8008e50:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8008e52:	f7f8 fee3 	bl	8001c1c <HAL_GetTick>
 8008e56:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e58:	f06f 427e 	mvn.w	r2, #4261412864	@ 0xfe000000
 8008e5c:	9200      	str	r2, [sp, #0]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008e64:	4620      	mov	r0, r4
 8008e66:	f7ff fdf2 	bl	8008a4e <UART_WaitOnFlagUntilTimeout>
 8008e6a:	b948      	cbnz	r0, 8008e80 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 8008e6c:	2320      	movs	r3, #32
 8008e6e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
 8008e72:	e006      	b.n	8008e82 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8008e74:	ab04      	add	r3, sp, #16
 8008e76:	e913 0006 	ldmdb	r3, {r1, r2}
 8008e7a:	f7ff ff87 	bl	8008d8c <UARTEx_Wakeup_AddressConfig>
 8008e7e:	e7e3      	b.n	8008e48 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8008e80:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 8008e82:	2300      	movs	r3, #0
 8008e84:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8008e88:	b004      	add	sp, #16
 8008e8a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8008e8c:	2002      	movs	r0, #2
 8008e8e:	e7fb      	b.n	8008e88 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

08008e90 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8008e90:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d010      	beq.n	8008eba <HAL_UARTEx_EnableStopMode+0x2a>
 8008e98:	2301      	movs	r3, #1
 8008e9a:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8008e9e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea0:	e852 3f00 	ldrex	r3, [r2]
 8008ea4:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea8:	e842 3100 	strex	r1, r3, [r2]
 8008eac:	2900      	cmp	r1, #0
 8008eae:	d1f6      	bne.n	8008e9e <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  return HAL_OK;
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	4770      	bx	lr
  __HAL_LOCK(huart);
 8008eba:	2002      	movs	r0, #2
}
 8008ebc:	4770      	bx	lr

08008ebe <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 8008ebe:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d01d      	beq.n	8008f02 <HAL_UARTEx_EnableFifoMode+0x44>
{
 8008ec6:	b510      	push	{r4, lr}
 8008ec8:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8008eca:	2301      	movs	r3, #1
 8008ecc:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8008ed0:	2324      	movs	r3, #36	@ 0x24
 8008ed2:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ed6:	6802      	ldr	r2, [r0, #0]
 8008ed8:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8008eda:	6811      	ldr	r1, [r2, #0]
 8008edc:	f021 0101 	bic.w	r1, r1, #1
 8008ee0:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008ee2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8008ee6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8008eea:	6642      	str	r2, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008eec:	6802      	ldr	r2, [r0, #0]
 8008eee:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 8008ef0:	f7ff ff64 	bl	8008dbc <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8008ef4:	2320      	movs	r3, #32
 8008ef6:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8008efa:	2000      	movs	r0, #0
 8008efc:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8008f00:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8008f02:	2002      	movs	r0, #2
}
 8008f04:	4770      	bx	lr

08008f06 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8008f06:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8008f08:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d01d      	beq.n	8008f4c <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8008f10:	4604      	mov	r4, r0
 8008f12:	2301      	movs	r3, #1
 8008f14:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8008f18:	2324      	movs	r3, #36	@ 0x24
 8008f1a:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f1e:	6803      	ldr	r3, [r0, #0]
 8008f20:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	f022 0201 	bic.w	r2, r2, #1
 8008f28:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008f2a:	6802      	ldr	r2, [r0, #0]
 8008f2c:	6893      	ldr	r3, [r2, #8]
 8008f2e:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8008f32:	4319      	orrs	r1, r3
 8008f34:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8008f36:	f7ff ff41 	bl	8008dbc <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f3a:	6823      	ldr	r3, [r4, #0]
 8008f3c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008f3e:	2320      	movs	r3, #32
 8008f40:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8008f44:	2000      	movs	r0, #0
 8008f46:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8008f4a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8008f4c:	2002      	movs	r0, #2
 8008f4e:	e7fc      	b.n	8008f4a <HAL_UARTEx_SetTxFifoThreshold+0x44>

08008f50 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8008f50:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8008f52:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d01d      	beq.n	8008f96 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8008f5a:	4604      	mov	r4, r0
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8008f62:	2324      	movs	r3, #36	@ 0x24
 8008f64:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f68:	6803      	ldr	r3, [r0, #0]
 8008f6a:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	f022 0201 	bic.w	r2, r2, #1
 8008f72:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008f74:	6802      	ldr	r2, [r0, #0]
 8008f76:	6893      	ldr	r3, [r2, #8]
 8008f78:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 8008f7c:	4319      	orrs	r1, r3
 8008f7e:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8008f80:	f7ff ff1c 	bl	8008dbc <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f84:	6823      	ldr	r3, [r4, #0]
 8008f86:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008f88:	2320      	movs	r3, #32
 8008f8a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8008f8e:	2000      	movs	r0, #0
 8008f90:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8008f94:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8008f96:	2002      	movs	r0, #2
 8008f98:	e7fc      	b.n	8008f94 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08008f9c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f9c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8008fa0:	b97b      	cbnz	r3, 8008fc2 <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fa2:	f3ef 8310 	mrs	r3, PRIMASK
 8008fa6:	b913      	cbnz	r3, 8008fae <osKernelInitialize+0x12>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008fa8:	f3ef 8311 	mrs	r3, BASEPRI
 8008fac:	b11b      	cbz	r3, 8008fb6 <osKernelInitialize+0x1a>
 8008fae:	4b09      	ldr	r3, [pc, #36]	@ (8008fd4 <osKernelInitialize+0x38>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	d008      	beq.n	8008fc8 <osKernelInitialize+0x2c>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8008fb6:	4b07      	ldr	r3, [pc, #28]	@ (8008fd4 <osKernelInitialize+0x38>)
 8008fb8:	6818      	ldr	r0, [r3, #0]
 8008fba:	b940      	cbnz	r0, 8008fce <osKernelInitialize+0x32>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008fc0:	4770      	bx	lr
    stat = osErrorISR;
 8008fc2:	f06f 0005 	mvn.w	r0, #5
 8008fc6:	4770      	bx	lr
 8008fc8:	f06f 0005 	mvn.w	r0, #5
 8008fcc:	4770      	bx	lr
    } else {
      stat = osError;
 8008fce:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8008fd2:	4770      	bx	lr
 8008fd4:	20000d10 	.word	0x20000d10

08008fd8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008fd8:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fda:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8008fde:	b9a3      	cbnz	r3, 800900a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fe0:	f3ef 8310 	mrs	r3, PRIMASK
 8008fe4:	b913      	cbnz	r3, 8008fec <osKernelStart+0x14>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008fe6:	f3ef 8311 	mrs	r3, BASEPRI
 8008fea:	b11b      	cbz	r3, 8008ff4 <osKernelStart+0x1c>
 8008fec:	4b0b      	ldr	r3, [pc, #44]	@ (800901c <osKernelStart+0x44>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2b02      	cmp	r3, #2
 8008ff2:	d00d      	beq.n	8009010 <osKernelStart+0x38>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8008ff4:	4b09      	ldr	r3, [pc, #36]	@ (800901c <osKernelStart+0x44>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d10c      	bne.n	8009016 <osKernelStart+0x3e>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008ffc:	4b07      	ldr	r3, [pc, #28]	@ (800901c <osKernelStart+0x44>)
 8008ffe:	2202      	movs	r2, #2
 8009000:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009002:	f001 fa07 	bl	800a414 <vTaskStartScheduler>
      stat = osOK;
 8009006:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 8009008:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 800900a:	f06f 0005 	mvn.w	r0, #5
 800900e:	e7fb      	b.n	8009008 <osKernelStart+0x30>
 8009010:	f06f 0005 	mvn.w	r0, #5
 8009014:	e7f8      	b.n	8009008 <osKernelStart+0x30>
      stat = osError;
 8009016:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800901a:	e7f5      	b.n	8009008 <osKernelStart+0x30>
 800901c:	20000d10 	.word	0x20000d10

08009020 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009022:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009024:	2400      	movs	r4, #0
 8009026:	9405      	str	r4, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009028:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800902c:	2c00      	cmp	r4, #0
 800902e:	d138      	bne.n	80090a2 <osThreadNew+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009030:	f3ef 8310 	mrs	r3, PRIMASK
 8009034:	b913      	cbnz	r3, 800903c <osThreadNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009036:	f3ef 8311 	mrs	r3, BASEPRI
 800903a:	b11b      	cbz	r3, 8009044 <osThreadNew+0x24>
 800903c:	4b2d      	ldr	r3, [pc, #180]	@ (80090f4 <osThreadNew+0xd4>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2b02      	cmp	r3, #2
 8009042:	d02e      	beq.n	80090a2 <osThreadNew+0x82>
 8009044:	b368      	cbz	r0, 80090a2 <osThreadNew+0x82>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8009046:	b322      	cbz	r2, 8009092 <osThreadNew+0x72>
      if (attr->name != NULL) {
 8009048:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800904a:	6993      	ldr	r3, [r2, #24]
 800904c:	b903      	cbnz	r3, 8009050 <osThreadNew+0x30>
    prio  = (UBaseType_t)osPriorityNormal;
 800904e:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009050:	1e5c      	subs	r4, r3, #1
 8009052:	2c37      	cmp	r4, #55	@ 0x37
 8009054:	d849      	bhi.n	80090ea <osThreadNew+0xca>
 8009056:	6854      	ldr	r4, [r2, #4]
 8009058:	f014 0f01 	tst.w	r4, #1
 800905c:	d147      	bne.n	80090ee <osThreadNew+0xce>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800905e:	6956      	ldr	r6, [r2, #20]
 8009060:	b16e      	cbz	r6, 800907e <osThreadNew+0x5e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009062:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009066:	6894      	ldr	r4, [r2, #8]
 8009068:	b12c      	cbz	r4, 8009076 <osThreadNew+0x56>
 800906a:	68d7      	ldr	r7, [r2, #12]
 800906c:	2f5b      	cmp	r7, #91	@ 0x5b
 800906e:	d902      	bls.n	8009076 <osThreadNew+0x56>
 8009070:	6917      	ldr	r7, [r2, #16]
 8009072:	b107      	cbz	r7, 8009076 <osThreadNew+0x56>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009074:	b9c6      	cbnz	r6, 80090a8 <osThreadNew+0x88>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009076:	b12c      	cbz	r4, 8009084 <osThreadNew+0x64>
    mem  = -1;
 8009078:	f04f 34ff 	mov.w	r4, #4294967295
 800907c:	e00e      	b.n	800909c <osThreadNew+0x7c>
    stack = configMINIMAL_STACK_SIZE;
 800907e:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8009082:	e7f0      	b.n	8009066 <osThreadNew+0x46>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009084:	68d4      	ldr	r4, [r2, #12]
 8009086:	b98c      	cbnz	r4, 80090ac <osThreadNew+0x8c>
 8009088:	6914      	ldr	r4, [r2, #16]
 800908a:	b194      	cbz	r4, 80090b2 <osThreadNew+0x92>
    mem  = -1;
 800908c:	f04f 34ff 	mov.w	r4, #4294967295
 8009090:	e004      	b.n	800909c <osThreadNew+0x7c>
    name = NULL;
 8009092:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8009094:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8009096:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 8009098:	f04f 0c80 	mov.w	ip, #128	@ 0x80
    }

    if (mem == 1) {
 800909c:	2c01      	cmp	r4, #1
 800909e:	d00a      	beq.n	80090b6 <osThreadNew+0x96>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 80090a0:	b1ac      	cbz	r4, 80090ce <osThreadNew+0xae>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80090a2:	9805      	ldr	r0, [sp, #20]
}
 80090a4:	b007      	add	sp, #28
 80090a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 80090a8:	2401      	movs	r4, #1
 80090aa:	e7f7      	b.n	800909c <osThreadNew+0x7c>
    mem  = -1;
 80090ac:	f04f 34ff 	mov.w	r4, #4294967295
 80090b0:	e7f4      	b.n	800909c <osThreadNew+0x7c>
          mem = 0;
 80090b2:	2400      	movs	r4, #0
 80090b4:	e7f2      	b.n	800909c <osThreadNew+0x7c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80090b6:	6914      	ldr	r4, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80090b8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80090ba:	9202      	str	r2, [sp, #8]
 80090bc:	9401      	str	r4, [sp, #4]
 80090be:	9300      	str	r3, [sp, #0]
 80090c0:	460b      	mov	r3, r1
 80090c2:	4662      	mov	r2, ip
 80090c4:	4629      	mov	r1, r5
 80090c6:	f001 f937 	bl	800a338 <xTaskCreateStatic>
 80090ca:	9005      	str	r0, [sp, #20]
 80090cc:	e7e9      	b.n	80090a2 <osThreadNew+0x82>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80090ce:	aa05      	add	r2, sp, #20
 80090d0:	9201      	str	r2, [sp, #4]
 80090d2:	9300      	str	r3, [sp, #0]
 80090d4:	460b      	mov	r3, r1
 80090d6:	fa1f f28c 	uxth.w	r2, ip
 80090da:	4629      	mov	r1, r5
 80090dc:	f001 f967 	bl	800a3ae <xTaskCreate>
 80090e0:	2801      	cmp	r0, #1
 80090e2:	d0de      	beq.n	80090a2 <osThreadNew+0x82>
          hTask = NULL;
 80090e4:	2300      	movs	r3, #0
 80090e6:	9305      	str	r3, [sp, #20]
 80090e8:	e7db      	b.n	80090a2 <osThreadNew+0x82>
        return (NULL);
 80090ea:	2000      	movs	r0, #0
 80090ec:	e7da      	b.n	80090a4 <osThreadNew+0x84>
 80090ee:	2000      	movs	r0, #0
 80090f0:	e7d8      	b.n	80090a4 <osThreadNew+0x84>
 80090f2:	bf00      	nop
 80090f4:	20000d10 	.word	0x20000d10

080090f8 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80090f8:	b530      	push	{r4, r5, lr}
 80090fa:	b085      	sub	sp, #20
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80090fc:	b1f0      	cbz	r0, 800913c <osThreadFlagsSet+0x44>
 80090fe:	4604      	mov	r4, r0
 8009100:	2900      	cmp	r1, #0
 8009102:	db1b      	blt.n	800913c <osThreadFlagsSet+0x44>
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    rflags = (uint32_t)osError;
 8009104:	f04f 33ff 	mov.w	r3, #4294967295
 8009108:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800910a:	f3ef 8305 	mrs	r3, IPSR

    if (IS_IRQ()) {
 800910e:	b9db      	cbnz	r3, 8009148 <osThreadFlagsSet+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009110:	f3ef 8310 	mrs	r3, PRIMASK
 8009114:	b913      	cbnz	r3, 800911c <osThreadFlagsSet+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009116:	f3ef 8311 	mrs	r3, BASEPRI
 800911a:	b11b      	cbz	r3, 8009124 <osThreadFlagsSet+0x2c>
 800911c:	4b19      	ldr	r3, [pc, #100]	@ (8009184 <osThreadFlagsSet+0x8c>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2b02      	cmp	r3, #2
 8009122:	d011      	beq.n	8009148 <osThreadFlagsSet+0x50>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);

      portYIELD_FROM_ISR (yield);
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8009124:	2300      	movs	r3, #0
 8009126:	2201      	movs	r2, #1
 8009128:	4620      	mov	r0, r4
 800912a:	f001 fd05 	bl	800ab38 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800912e:	ab03      	add	r3, sp, #12
 8009130:	2200      	movs	r2, #0
 8009132:	4611      	mov	r1, r2
 8009134:	4620      	mov	r0, r4
 8009136:	f001 fcff 	bl	800ab38 <xTaskGenericNotify>
 800913a:	e002      	b.n	8009142 <osThreadFlagsSet+0x4a>
    rflags = (uint32_t)osErrorParameter;
 800913c:	f06f 0303 	mvn.w	r3, #3
 8009140:	9303      	str	r3, [sp, #12]
    }
  }
  /* Return flags after setting */
  return (rflags);
}
 8009142:	9803      	ldr	r0, [sp, #12]
 8009144:	b005      	add	sp, #20
 8009146:	bd30      	pop	{r4, r5, pc}
      yield = pdFALSE;
 8009148:	2500      	movs	r5, #0
 800914a:	9502      	str	r5, [sp, #8]
      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800914c:	ab02      	add	r3, sp, #8
 800914e:	9300      	str	r3, [sp, #0]
 8009150:	462b      	mov	r3, r5
 8009152:	2201      	movs	r2, #1
 8009154:	4620      	mov	r0, r4
 8009156:	f001 fd6d 	bl	800ac34 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800915a:	9500      	str	r5, [sp, #0]
 800915c:	ab03      	add	r3, sp, #12
 800915e:	462a      	mov	r2, r5
 8009160:	4629      	mov	r1, r5
 8009162:	4620      	mov	r0, r4
 8009164:	f001 fd66 	bl	800ac34 <xTaskGenericNotifyFromISR>
      portYIELD_FROM_ISR (yield);
 8009168:	9b02      	ldr	r3, [sp, #8]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d0e9      	beq.n	8009142 <osThreadFlagsSet+0x4a>
 800916e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009172:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009176:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800917a:	f3bf 8f4f 	dsb	sy
 800917e:	f3bf 8f6f 	isb	sy
 8009182:	e7de      	b.n	8009142 <osThreadFlagsSet+0x4a>
 8009184:	20000d10 	.word	0x20000d10

08009188 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8009188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800918c:	b085      	sub	sp, #20
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800918e:	f3ef 8305 	mrs	r3, IPSR
 8009192:	9301      	str	r3, [sp, #4]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8009194:	2b00      	cmp	r3, #0
 8009196:	d14c      	bne.n	8009232 <osThreadFlagsWait+0xaa>
 8009198:	4681      	mov	r9, r0
 800919a:	468a      	mov	sl, r1
 800919c:	4617      	mov	r7, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800919e:	f3ef 8310 	mrs	r3, PRIMASK
 80091a2:	b913      	cbnz	r3, 80091aa <osThreadFlagsWait+0x22>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80091a4:	f3ef 8311 	mrs	r3, BASEPRI
 80091a8:	b11b      	cbz	r3, 80091b2 <osThreadFlagsWait+0x2a>
 80091aa:	4b29      	ldr	r3, [pc, #164]	@ (8009250 <osThreadFlagsWait+0xc8>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2b02      	cmp	r3, #2
 80091b0:	d045      	beq.n	800923e <osThreadFlagsWait+0xb6>
    rflags = (uint32_t)osErrorISR;
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80091b2:	f1b9 0f00 	cmp.w	r9, #0
 80091b6:	db45      	blt.n	8009244 <osThreadFlagsWait+0xbc>
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80091b8:	f01a 0f02 	tst.w	sl, #2
 80091bc:	d007      	beq.n	80091ce <osThreadFlagsWait+0x46>
      clear = 0U;
 80091be:	f8dd 8004 	ldr.w	r8, [sp, #4]
    }

    rflags = 0U;
    tout   = timeout;

    t0 = xTaskGetTickCount();
 80091c2:	f001 f97b 	bl	800a4bc <xTaskGetTickCount>
 80091c6:	4683      	mov	fp, r0
    tout   = timeout;
 80091c8:	463e      	mov	r6, r7
    rflags = 0U;
 80091ca:	9d01      	ldr	r5, [sp, #4]
 80091cc:	e023      	b.n	8009216 <osThreadFlagsWait+0x8e>
      clear = flags;
 80091ce:	46c8      	mov	r8, r9
 80091d0:	e7f7      	b.n	80091c2 <osThreadFlagsWait+0x3a>
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);

      if (rval == pdPASS) {
        rflags &= flags;
 80091d2:	ea05 0509 	and.w	r5, r5, r9
        rflags |= nval;
 80091d6:	9b03      	ldr	r3, [sp, #12]
 80091d8:	431d      	orrs	r5, r3

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80091da:	f01a 0f01 	tst.w	sl, #1
 80091de:	d00d      	beq.n	80091fc <osThreadFlagsWait+0x74>
          if ((flags & rflags) == flags) {
 80091e0:	ea39 0305 	bics.w	r3, r9, r5
 80091e4:	d027      	beq.n	8009236 <osThreadFlagsWait+0xae>
            break;
          } else {
            if (timeout == 0U) {
 80091e6:	b387      	cbz	r7, 800924a <osThreadFlagsWait+0xc2>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 80091e8:	f001 f968 	bl	800a4bc <xTaskGetTickCount>
 80091ec:	eba0 030b 	sub.w	r3, r0, fp

        if (td > tout) {
 80091f0:	429e      	cmp	r6, r3
 80091f2:	d30b      	bcc.n	800920c <osThreadFlagsWait+0x84>
          tout  = 0;
        } else {
          tout -= td;
 80091f4:	ebab 0000 	sub.w	r0, fp, r0
 80091f8:	4406      	add	r6, r0
 80091fa:	e00b      	b.n	8009214 <osThreadFlagsWait+0x8c>
          if ((flags & rflags) != 0) {
 80091fc:	ea19 0f05 	tst.w	r9, r5
 8009200:	d119      	bne.n	8009236 <osThreadFlagsWait+0xae>
            if (timeout == 0U) {
 8009202:	2f00      	cmp	r7, #0
 8009204:	d1f0      	bne.n	80091e8 <osThreadFlagsWait+0x60>
              rflags = (uint32_t)osErrorResource;
 8009206:	f06f 0502 	mvn.w	r5, #2
    }
    while (rval != pdFAIL);
  }

  /* Return flags before clearing */
  return (rflags);
 800920a:	e014      	b.n	8009236 <osThreadFlagsWait+0xae>
          tout  = 0;
 800920c:	9e01      	ldr	r6, [sp, #4]
 800920e:	e001      	b.n	8009214 <osThreadFlagsWait+0x8c>
          rflags = (uint32_t)osErrorTimeout;
 8009210:	f06f 0501 	mvn.w	r5, #1
    while (rval != pdFAIL);
 8009214:	b17c      	cbz	r4, 8009236 <osThreadFlagsWait+0xae>
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8009216:	4633      	mov	r3, r6
 8009218:	aa03      	add	r2, sp, #12
 800921a:	4641      	mov	r1, r8
 800921c:	2000      	movs	r0, #0
 800921e:	f001 fc3f 	bl	800aaa0 <xTaskNotifyWait>
 8009222:	4604      	mov	r4, r0
      if (rval == pdPASS) {
 8009224:	2801      	cmp	r0, #1
 8009226:	d0d4      	beq.n	80091d2 <osThreadFlagsWait+0x4a>
        if (timeout == 0) {
 8009228:	2f00      	cmp	r7, #0
 800922a:	d1f1      	bne.n	8009210 <osThreadFlagsWait+0x88>
          rflags = (uint32_t)osErrorResource;
 800922c:	f06f 0502 	mvn.w	r5, #2
 8009230:	e7f0      	b.n	8009214 <osThreadFlagsWait+0x8c>
    rflags = (uint32_t)osErrorISR;
 8009232:	f06f 0505 	mvn.w	r5, #5
}
 8009236:	4628      	mov	r0, r5
 8009238:	b005      	add	sp, #20
 800923a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rflags = (uint32_t)osErrorISR;
 800923e:	f06f 0505 	mvn.w	r5, #5
 8009242:	e7f8      	b.n	8009236 <osThreadFlagsWait+0xae>
    rflags = (uint32_t)osErrorParameter;
 8009244:	f06f 0503 	mvn.w	r5, #3
 8009248:	e7f5      	b.n	8009236 <osThreadFlagsWait+0xae>
              rflags = (uint32_t)osErrorResource;
 800924a:	f06f 0502 	mvn.w	r5, #2
 800924e:	e7f2      	b.n	8009236 <osThreadFlagsWait+0xae>
 8009250:	20000d10 	.word	0x20000d10

08009254 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009254:	4b03      	ldr	r3, [pc, #12]	@ (8009264 <vApplicationGetIdleTaskMemory+0x10>)
 8009256:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009258:	4b03      	ldr	r3, [pc, #12]	@ (8009268 <vApplicationGetIdleTaskMemory+0x14>)
 800925a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800925c:	2380      	movs	r3, #128	@ 0x80
 800925e:	6013      	str	r3, [r2, #0]
}
 8009260:	4770      	bx	lr
 8009262:	bf00      	nop
 8009264:	20000cb4 	.word	0x20000cb4
 8009268:	20000ab4 	.word	0x20000ab4

0800926c <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800926c:	4b03      	ldr	r3, [pc, #12]	@ (800927c <vApplicationGetTimerTaskMemory+0x10>)
 800926e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009270:	4b03      	ldr	r3, [pc, #12]	@ (8009280 <vApplicationGetTimerTaskMemory+0x14>)
 8009272:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009274:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009278:	6013      	str	r3, [r2, #0]
}
 800927a:	4770      	bx	lr
 800927c:	20000a58 	.word	0x20000a58
 8009280:	20000658 	.word	0x20000658

08009284 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009284:	4a12      	ldr	r2, [pc, #72]	@ (80092d0 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009286:	f012 0f07 	tst.w	r2, #7
 800928a:	d01e      	beq.n	80092ca <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800928c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800928e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009292:	f5c1 5300 	rsb	r3, r1, #8192	@ 0x2000
 8009296:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009298:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800929a:	480e      	ldr	r0, [pc, #56]	@ (80092d4 <prvHeapInit+0x50>)
 800929c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800929e:	2100      	movs	r1, #0
 80092a0:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80092a2:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80092a4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092a6:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80092aa:	480b      	ldr	r0, [pc, #44]	@ (80092d8 <prvHeapInit+0x54>)
 80092ac:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80092ae:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80092b0:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80092b2:	1a99      	subs	r1, r3, r2
 80092b4:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80092b6:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092b8:	4b08      	ldr	r3, [pc, #32]	@ (80092dc <prvHeapInit+0x58>)
 80092ba:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092bc:	4b08      	ldr	r3, [pc, #32]	@ (80092e0 <prvHeapInit+0x5c>)
 80092be:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80092c0:	4b08      	ldr	r3, [pc, #32]	@ (80092e4 <prvHeapInit+0x60>)
 80092c2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80092c6:	601a      	str	r2, [r3, #0]
}
 80092c8:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80092ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80092ce:	e7e4      	b.n	800929a <prvHeapInit+0x16>
 80092d0:	20000d2c 	.word	0x20000d2c
 80092d4:	20000d24 	.word	0x20000d24
 80092d8:	20000d20 	.word	0x20000d20
 80092dc:	20000d18 	.word	0x20000d18
 80092e0:	20000d1c 	.word	0x20000d1c
 80092e4:	20000d14 	.word	0x20000d14

080092e8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80092e8:	4b15      	ldr	r3, [pc, #84]	@ (8009340 <prvInsertBlockIntoFreeList+0x58>)
 80092ea:	461a      	mov	r2, r3
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4283      	cmp	r3, r0
 80092f0:	d3fb      	bcc.n	80092ea <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80092f2:	6851      	ldr	r1, [r2, #4]
 80092f4:	eb02 0c01 	add.w	ip, r2, r1
 80092f8:	4584      	cmp	ip, r0
 80092fa:	d009      	beq.n	8009310 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80092fc:	6841      	ldr	r1, [r0, #4]
 80092fe:	eb00 0c01 	add.w	ip, r0, r1
 8009302:	4563      	cmp	r3, ip
 8009304:	d009      	beq.n	800931a <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009306:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009308:	4290      	cmp	r0, r2
 800930a:	d018      	beq.n	800933e <prvInsertBlockIntoFreeList+0x56>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800930c:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800930e:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009310:	6840      	ldr	r0, [r0, #4]
 8009312:	4401      	add	r1, r0
 8009314:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8009316:	4610      	mov	r0, r2
 8009318:	e7f0      	b.n	80092fc <prvInsertBlockIntoFreeList+0x14>
{
 800931a:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800931c:	4c09      	ldr	r4, [pc, #36]	@ (8009344 <prvInsertBlockIntoFreeList+0x5c>)
 800931e:	6824      	ldr	r4, [r4, #0]
 8009320:	42a3      	cmp	r3, r4
 8009322:	d00a      	beq.n	800933a <prvInsertBlockIntoFreeList+0x52>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	4419      	add	r1, r3
 8009328:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800932a:	6813      	ldr	r3, [r2, #0]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8009330:	4290      	cmp	r0, r2
 8009332:	d000      	beq.n	8009336 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009334:	6010      	str	r0, [r2, #0]
	}
}
 8009336:	bc10      	pop	{r4}
 8009338:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800933a:	6004      	str	r4, [r0, #0]
 800933c:	e7f8      	b.n	8009330 <prvInsertBlockIntoFreeList+0x48>
 800933e:	4770      	bx	lr
 8009340:	20000d24 	.word	0x20000d24
 8009344:	20000d20 	.word	0x20000d20

08009348 <pvPortMalloc>:
{
 8009348:	b538      	push	{r3, r4, r5, lr}
 800934a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800934c:	f001 f8ae 	bl	800a4ac <vTaskSuspendAll>
		if( pxEnd == NULL )
 8009350:	4b36      	ldr	r3, [pc, #216]	@ (800942c <pvPortMalloc+0xe4>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	b1b3      	cbz	r3, 8009384 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009356:	4b36      	ldr	r3, [pc, #216]	@ (8009430 <pvPortMalloc+0xe8>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	421c      	tst	r4, r3
 800935c:	d14c      	bne.n	80093f8 <pvPortMalloc+0xb0>
			if( xWantedSize > 0 )
 800935e:	2c00      	cmp	r4, #0
 8009360:	d04c      	beq.n	80093fc <pvPortMalloc+0xb4>
				xWantedSize += xHeapStructSize;
 8009362:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009366:	f014 0f07 	tst.w	r4, #7
 800936a:	d002      	beq.n	8009372 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800936c:	f022 0207 	bic.w	r2, r2, #7
 8009370:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009372:	2a00      	cmp	r2, #0
 8009374:	d051      	beq.n	800941a <pvPortMalloc+0xd2>
 8009376:	4b2f      	ldr	r3, [pc, #188]	@ (8009434 <pvPortMalloc+0xec>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4293      	cmp	r3, r2
 800937c:	d34f      	bcc.n	800941e <pvPortMalloc+0xd6>
				pxBlock = xStart.pxNextFreeBlock;
 800937e:	492e      	ldr	r1, [pc, #184]	@ (8009438 <pvPortMalloc+0xf0>)
 8009380:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009382:	e004      	b.n	800938e <pvPortMalloc+0x46>
			prvHeapInit();
 8009384:	f7ff ff7e 	bl	8009284 <prvHeapInit>
 8009388:	e7e5      	b.n	8009356 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800938a:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800938c:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800938e:	6863      	ldr	r3, [r4, #4]
 8009390:	4293      	cmp	r3, r2
 8009392:	d202      	bcs.n	800939a <pvPortMalloc+0x52>
 8009394:	6823      	ldr	r3, [r4, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d1f7      	bne.n	800938a <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 800939a:	4b24      	ldr	r3, [pc, #144]	@ (800942c <pvPortMalloc+0xe4>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	42a3      	cmp	r3, r4
 80093a0:	d03f      	beq.n	8009422 <pvPortMalloc+0xda>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80093a2:	680d      	ldr	r5, [r1, #0]
 80093a4:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80093a6:	6823      	ldr	r3, [r4, #0]
 80093a8:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80093aa:	6863      	ldr	r3, [r4, #4]
 80093ac:	1a9b      	subs	r3, r3, r2
 80093ae:	2b10      	cmp	r3, #16
 80093b0:	d910      	bls.n	80093d4 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80093b2:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80093b4:	f010 0f07 	tst.w	r0, #7
 80093b8:	d008      	beq.n	80093cc <pvPortMalloc+0x84>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80093ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093be:	f383 8811 	msr	BASEPRI, r3
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	e7fe      	b.n	80093ca <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80093cc:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80093ce:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80093d0:	f7ff ff8a 	bl	80092e8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80093d4:	6862      	ldr	r2, [r4, #4]
 80093d6:	4917      	ldr	r1, [pc, #92]	@ (8009434 <pvPortMalloc+0xec>)
 80093d8:	680b      	ldr	r3, [r1, #0]
 80093da:	1a9b      	subs	r3, r3, r2
 80093dc:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80093de:	4917      	ldr	r1, [pc, #92]	@ (800943c <pvPortMalloc+0xf4>)
 80093e0:	6809      	ldr	r1, [r1, #0]
 80093e2:	428b      	cmp	r3, r1
 80093e4:	d201      	bcs.n	80093ea <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80093e6:	4915      	ldr	r1, [pc, #84]	@ (800943c <pvPortMalloc+0xf4>)
 80093e8:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80093ea:	4b11      	ldr	r3, [pc, #68]	@ (8009430 <pvPortMalloc+0xe8>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4313      	orrs	r3, r2
 80093f0:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80093f2:	2300      	movs	r3, #0
 80093f4:	6023      	str	r3, [r4, #0]
 80093f6:	e002      	b.n	80093fe <pvPortMalloc+0xb6>
void *pvReturn = NULL;
 80093f8:	2500      	movs	r5, #0
 80093fa:	e000      	b.n	80093fe <pvPortMalloc+0xb6>
 80093fc:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 80093fe:	f001 f909 	bl	800a614 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009402:	f015 0f07 	tst.w	r5, #7
 8009406:	d00e      	beq.n	8009426 <pvPortMalloc+0xde>
 8009408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800940c:	f383 8811 	msr	BASEPRI, r3
 8009410:	f3bf 8f6f 	isb	sy
 8009414:	f3bf 8f4f 	dsb	sy
 8009418:	e7fe      	b.n	8009418 <pvPortMalloc+0xd0>
void *pvReturn = NULL;
 800941a:	2500      	movs	r5, #0
 800941c:	e7ef      	b.n	80093fe <pvPortMalloc+0xb6>
 800941e:	2500      	movs	r5, #0
 8009420:	e7ed      	b.n	80093fe <pvPortMalloc+0xb6>
 8009422:	2500      	movs	r5, #0
 8009424:	e7eb      	b.n	80093fe <pvPortMalloc+0xb6>
}
 8009426:	4628      	mov	r0, r5
 8009428:	bd38      	pop	{r3, r4, r5, pc}
 800942a:	bf00      	nop
 800942c:	20000d20 	.word	0x20000d20
 8009430:	20000d14 	.word	0x20000d14
 8009434:	20000d1c 	.word	0x20000d1c
 8009438:	20000d24 	.word	0x20000d24
 800943c:	20000d18 	.word	0x20000d18

08009440 <vPortFree>:
	if( pv != NULL )
 8009440:	b380      	cbz	r0, 80094a4 <vPortFree+0x64>
{
 8009442:	b538      	push	{r3, r4, r5, lr}
 8009444:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8009446:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800944a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800944e:	4a16      	ldr	r2, [pc, #88]	@ (80094a8 <vPortFree+0x68>)
 8009450:	6812      	ldr	r2, [r2, #0]
 8009452:	4213      	tst	r3, r2
 8009454:	d108      	bne.n	8009468 <vPortFree+0x28>
 8009456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800945a:	f383 8811 	msr	BASEPRI, r3
 800945e:	f3bf 8f6f 	isb	sy
 8009462:	f3bf 8f4f 	dsb	sy
 8009466:	e7fe      	b.n	8009466 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009468:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800946c:	b141      	cbz	r1, 8009480 <vPortFree+0x40>
 800946e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009472:	f383 8811 	msr	BASEPRI, r3
 8009476:	f3bf 8f6f 	isb	sy
 800947a:	f3bf 8f4f 	dsb	sy
 800947e:	e7fe      	b.n	800947e <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009480:	ea23 0302 	bic.w	r3, r3, r2
 8009484:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8009488:	f001 f810 	bl	800a4ac <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800948c:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8009490:	4a06      	ldr	r2, [pc, #24]	@ (80094ac <vPortFree+0x6c>)
 8009492:	6813      	ldr	r3, [r2, #0]
 8009494:	440b      	add	r3, r1
 8009496:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009498:	4628      	mov	r0, r5
 800949a:	f7ff ff25 	bl	80092e8 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800949e:	f001 f8b9 	bl	800a614 <xTaskResumeAll>
}
 80094a2:	bd38      	pop	{r3, r4, r5, pc}
 80094a4:	4770      	bx	lr
 80094a6:	bf00      	nop
 80094a8:	20000d14 	.word	0x20000d14
 80094ac:	20000d1c 	.word	0x20000d1c

080094b0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094b0:	f100 0308 	add.w	r3, r0, #8
 80094b4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80094b6:	f04f 32ff 	mov.w	r2, #4294967295
 80094ba:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094bc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094be:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80094c0:	2300      	movs	r3, #0
 80094c2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80094c4:	4770      	bx	lr

080094c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80094c6:	2300      	movs	r3, #0
 80094c8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80094ca:	4770      	bx	lr

080094cc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80094cc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80094ce:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80094d0:	689a      	ldr	r2, [r3, #8]
 80094d2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80094d4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80094d6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80094d8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80094da:	6803      	ldr	r3, [r0, #0]
 80094dc:	3301      	adds	r3, #1
 80094de:	6003      	str	r3, [r0, #0]
}
 80094e0:	4770      	bx	lr

080094e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80094e2:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80094e4:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80094e6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80094ea:	d011      	beq.n	8009510 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80094ec:	f100 0308 	add.w	r3, r0, #8
 80094f0:	461c      	mov	r4, r3
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	42aa      	cmp	r2, r5
 80094f8:	d9fa      	bls.n	80094f0 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80094fa:	6863      	ldr	r3, [r4, #4]
 80094fc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80094fe:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009500:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8009502:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009504:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8009506:	6803      	ldr	r3, [r0, #0]
 8009508:	3301      	adds	r3, #1
 800950a:	6003      	str	r3, [r0, #0]
}
 800950c:	bc30      	pop	{r4, r5}
 800950e:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8009510:	6904      	ldr	r4, [r0, #16]
 8009512:	e7f2      	b.n	80094fa <vListInsert+0x18>

08009514 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009514:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009516:	6841      	ldr	r1, [r0, #4]
 8009518:	6882      	ldr	r2, [r0, #8]
 800951a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800951c:	6841      	ldr	r1, [r0, #4]
 800951e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009520:	685a      	ldr	r2, [r3, #4]
 8009522:	4282      	cmp	r2, r0
 8009524:	d006      	beq.n	8009534 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009526:	2200      	movs	r2, #0
 8009528:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	3a01      	subs	r2, #1
 800952e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009530:	6818      	ldr	r0, [r3, #0]
}
 8009532:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009534:	6882      	ldr	r2, [r0, #8]
 8009536:	605a      	str	r2, [r3, #4]
 8009538:	e7f5      	b.n	8009526 <uxListRemove+0x12>
	...

0800953c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800953c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 800953e:	2300      	movs	r3, #0
 8009540:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009542:	4b0d      	ldr	r3, [pc, #52]	@ (8009578 <prvTaskExitError+0x3c>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800954a:	d008      	beq.n	800955e <prvTaskExitError+0x22>
 800954c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009550:	f383 8811 	msr	BASEPRI, r3
 8009554:	f3bf 8f6f 	isb	sy
 8009558:	f3bf 8f4f 	dsb	sy
 800955c:	e7fe      	b.n	800955c <prvTaskExitError+0x20>
 800955e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009562:	f383 8811 	msr	BASEPRI, r3
 8009566:	f3bf 8f6f 	isb	sy
 800956a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800956e:	9b01      	ldr	r3, [sp, #4]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d0fc      	beq.n	800956e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009574:	b002      	add	sp, #8
 8009576:	4770      	bx	lr
 8009578:	2000007c 	.word	0x2000007c

0800957c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800957c:	4806      	ldr	r0, [pc, #24]	@ (8009598 <prvPortStartFirstTask+0x1c>)
 800957e:	6800      	ldr	r0, [r0, #0]
 8009580:	6800      	ldr	r0, [r0, #0]
 8009582:	f380 8808 	msr	MSP, r0
 8009586:	b662      	cpsie	i
 8009588:	b661      	cpsie	f
 800958a:	f3bf 8f4f 	dsb	sy
 800958e:	f3bf 8f6f 	isb	sy
 8009592:	df00      	svc	0
 8009594:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009596:	0000      	.short	0x0000
 8009598:	e000ed08 	.word	0xe000ed08

0800959c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800959c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80095a0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80095a4:	f021 0101 	bic.w	r1, r1, #1
 80095a8:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80095ac:	4b03      	ldr	r3, [pc, #12]	@ (80095bc <pxPortInitialiseStack+0x20>)
 80095ae:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80095b2:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80095b6:	3840      	subs	r0, #64	@ 0x40
 80095b8:	4770      	bx	lr
 80095ba:	bf00      	nop
 80095bc:	0800953d 	.word	0x0800953d

080095c0 <SVC_Handler>:
	__asm volatile (
 80095c0:	4b07      	ldr	r3, [pc, #28]	@ (80095e0 <pxCurrentTCBConst2>)
 80095c2:	6819      	ldr	r1, [r3, #0]
 80095c4:	6808      	ldr	r0, [r1, #0]
 80095c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80095ca:	f380 8809 	msr	PSP, r0
 80095ce:	f3bf 8f6f 	isb	sy
 80095d2:	f04f 0000 	mov.w	r0, #0
 80095d6:	f380 8811 	msr	BASEPRI, r0
 80095da:	f04e 0e0d 	orr.w	lr, lr, #13
 80095de:	4770      	bx	lr

080095e0 <pxCurrentTCBConst2>:
 80095e0:	2000327c 	.word	0x2000327c

080095e4 <vPortEnterCritical>:
 80095e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095e8:	f383 8811 	msr	BASEPRI, r3
 80095ec:	f3bf 8f6f 	isb	sy
 80095f0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80095f4:	4a0b      	ldr	r2, [pc, #44]	@ (8009624 <vPortEnterCritical+0x40>)
 80095f6:	6813      	ldr	r3, [r2, #0]
 80095f8:	3301      	adds	r3, #1
 80095fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d000      	beq.n	8009602 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8009600:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009602:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009606:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800960a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 800960e:	d0f7      	beq.n	8009600 <vPortEnterCritical+0x1c>
 8009610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009614:	f383 8811 	msr	BASEPRI, r3
 8009618:	f3bf 8f6f 	isb	sy
 800961c:	f3bf 8f4f 	dsb	sy
 8009620:	e7fe      	b.n	8009620 <vPortEnterCritical+0x3c>
 8009622:	bf00      	nop
 8009624:	2000007c 	.word	0x2000007c

08009628 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8009628:	4b09      	ldr	r3, [pc, #36]	@ (8009650 <vPortExitCritical+0x28>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	b943      	cbnz	r3, 8009640 <vPortExitCritical+0x18>
 800962e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009632:	f383 8811 	msr	BASEPRI, r3
 8009636:	f3bf 8f6f 	isb	sy
 800963a:	f3bf 8f4f 	dsb	sy
 800963e:	e7fe      	b.n	800963e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8009640:	3b01      	subs	r3, #1
 8009642:	4a03      	ldr	r2, [pc, #12]	@ (8009650 <vPortExitCritical+0x28>)
 8009644:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009646:	b90b      	cbnz	r3, 800964c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009648:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800964c:	4770      	bx	lr
 800964e:	bf00      	nop
 8009650:	2000007c 	.word	0x2000007c
	...

08009660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009660:	f3ef 8009 	mrs	r0, PSP
 8009664:	f3bf 8f6f 	isb	sy
 8009668:	4b0d      	ldr	r3, [pc, #52]	@ (80096a0 <pxCurrentTCBConst>)
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009670:	6010      	str	r0, [r2, #0]
 8009672:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009676:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800967a:	f380 8811 	msr	BASEPRI, r0
 800967e:	f001 f87d 	bl	800a77c <vTaskSwitchContext>
 8009682:	f04f 0000 	mov.w	r0, #0
 8009686:	f380 8811 	msr	BASEPRI, r0
 800968a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800968e:	6819      	ldr	r1, [r3, #0]
 8009690:	6808      	ldr	r0, [r1, #0]
 8009692:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009696:	f380 8809 	msr	PSP, r0
 800969a:	f3bf 8f6f 	isb	sy
 800969e:	4770      	bx	lr

080096a0 <pxCurrentTCBConst>:
 80096a0:	2000327c 	.word	0x2000327c

080096a4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80096a4:	b508      	push	{r3, lr}
	__asm volatile
 80096a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096aa:	f383 8811 	msr	BASEPRI, r3
 80096ae:	f3bf 8f6f 	isb	sy
 80096b2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80096b6:	f000 ff21 	bl	800a4fc <xTaskIncrementTick>
 80096ba:	b128      	cbz	r0, 80096c8 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80096bc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80096c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 80096c8:	2300      	movs	r3, #0
 80096ca:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80096ce:	bd08      	pop	{r3, pc}

080096d0 <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 80096d0:	b510      	push	{r4, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	9001      	str	r0, [sp, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 80096d6:	4b46      	ldr	r3, [pc, #280]	@ (80097f0 <vPortSuppressTicksAndSleep+0x120>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4298      	cmp	r0, r3
 80096dc:	d900      	bls.n	80096e0 <vPortSuppressTicksAndSleep+0x10>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 80096de:	9301      	str	r3, [sp, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 80096e0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80096e4:	691a      	ldr	r2, [r3, #16]
 80096e6:	f022 0201 	bic.w	r2, r2, #1
 80096ea:	611a      	str	r2, [r3, #16]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 80096ec:	699c      	ldr	r4, [r3, #24]
 80096ee:	9b01      	ldr	r3, [sp, #4]
 80096f0:	3b01      	subs	r3, #1
 80096f2:	4a40      	ldr	r2, [pc, #256]	@ (80097f4 <vPortSuppressTicksAndSleep+0x124>)
 80096f4:	6812      	ldr	r2, [r2, #0]
 80096f6:	fb02 4403 	mla	r4, r2, r3, r4
		if( ulReloadValue > ulStoppedTimerCompensation )
 80096fa:	4b3f      	ldr	r3, [pc, #252]	@ (80097f8 <vPortSuppressTicksAndSleep+0x128>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	42a3      	cmp	r3, r4
 8009700:	d200      	bcs.n	8009704 <vPortSuppressTicksAndSleep+0x34>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 8009702:	1ae4      	subs	r4, r4, r3
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 8009704:	b672      	cpsid	i
		__asm volatile( "dsb" );
 8009706:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800970a:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800970e:	f001 f951 	bl	800a9b4 <eTaskConfirmSleepModeStatus>
 8009712:	b970      	cbnz	r0, 8009732 <vPortSuppressTicksAndSleep+0x62>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8009714:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009718:	699a      	ldr	r2, [r3, #24]
 800971a:	615a      	str	r2, [r3, #20]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800971c:	691a      	ldr	r2, [r3, #16]
 800971e:	f042 0201 	orr.w	r2, r2, #1
 8009722:	611a      	str	r2, [r3, #16]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8009724:	4a33      	ldr	r2, [pc, #204]	@ (80097f4 <vPortSuppressTicksAndSleep+0x124>)
 8009726:	6812      	ldr	r2, [r2, #0]
 8009728:	3a01      	subs	r2, #1
 800972a:	615a      	str	r2, [r3, #20]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800972c:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrpts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800972e:	b004      	add	sp, #16
 8009730:	bd10      	pop	{r4, pc}
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 8009732:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009736:	615c      	str	r4, [r3, #20]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009738:	2200      	movs	r2, #0
 800973a:	619a      	str	r2, [r3, #24]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800973c:	691a      	ldr	r2, [r3, #16]
 800973e:	f042 0201 	orr.w	r2, r2, #1
 8009742:	611a      	str	r2, [r3, #16]
			xModifiableIdleTime = xExpectedIdleTime;
 8009744:	9b01      	ldr	r3, [sp, #4]
 8009746:	9303      	str	r3, [sp, #12]
			configPRE_SLEEP_PROCESSING( &xModifiableIdleTime );
 8009748:	a803      	add	r0, sp, #12
 800974a:	f7f7 fc73 	bl	8001034 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800974e:	9b03      	ldr	r3, [sp, #12]
 8009750:	b123      	cbz	r3, 800975c <vPortSuppressTicksAndSleep+0x8c>
				__asm volatile( "dsb" ::: "memory" );
 8009752:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 8009756:	bf30      	wfi
				__asm volatile( "isb" );
 8009758:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( &xExpectedIdleTime );
 800975c:	a801      	add	r0, sp, #4
 800975e:	f7f7 fc89 	bl	8001074 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 8009762:	b662      	cpsie	i
			__asm volatile( "dsb" );
 8009764:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8009768:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800976c:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800976e:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8009772:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 8009776:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800977a:	2206      	movs	r2, #6
 800977c:	611a      	str	r2, [r3, #16]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800977e:	691b      	ldr	r3, [r3, #16]
 8009780:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8009784:	d023      	beq.n	80097ce <vPortSuppressTicksAndSleep+0xfe>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 8009786:	4b1b      	ldr	r3, [pc, #108]	@ (80097f4 <vPortSuppressTicksAndSleep+0x124>)
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800978e:	699b      	ldr	r3, [r3, #24]
 8009790:	1b1b      	subs	r3, r3, r4
 8009792:	4413      	add	r3, r2
 8009794:	3b01      	subs	r3, #1
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 8009796:	4918      	ldr	r1, [pc, #96]	@ (80097f8 <vPortSuppressTicksAndSleep+0x128>)
 8009798:	6809      	ldr	r1, [r1, #0]
 800979a:	4299      	cmp	r1, r3
 800979c:	d801      	bhi.n	80097a2 <vPortSuppressTicksAndSleep+0xd2>
 800979e:	429a      	cmp	r2, r3
 80097a0:	d200      	bcs.n	80097a4 <vPortSuppressTicksAndSleep+0xd4>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 80097a2:	1e53      	subs	r3, r2, #1
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 80097a4:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80097a8:	6153      	str	r3, [r2, #20]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 80097aa:	9801      	ldr	r0, [sp, #4]
 80097ac:	3801      	subs	r0, #1
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80097ae:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 80097b2:	2300      	movs	r3, #0
 80097b4:	61a3      	str	r3, [r4, #24]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 80097b6:	6923      	ldr	r3, [r4, #16]
 80097b8:	f043 0301 	orr.w	r3, r3, #1
 80097bc:	6123      	str	r3, [r4, #16]
			vTaskStepTick( ulCompleteTickPeriods );
 80097be:	f000 fe83 	bl	800a4c8 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 80097c2:	4b0c      	ldr	r3, [pc, #48]	@ (80097f4 <vPortSuppressTicksAndSleep+0x124>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	3b01      	subs	r3, #1
 80097c8:	6163      	str	r3, [r4, #20]
			__asm volatile( "cpsie i" ::: "memory" );
 80097ca:	b662      	cpsie	i
	}
 80097cc:	e7af      	b.n	800972e <vPortSuppressTicksAndSleep+0x5e>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 80097ce:	4b09      	ldr	r3, [pc, #36]	@ (80097f4 <vPortSuppressTicksAndSleep+0x124>)
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	9901      	ldr	r1, [sp, #4]
 80097d4:	fb02 f101 	mul.w	r1, r2, r1
 80097d8:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 80097dc:	69a3      	ldr	r3, [r4, #24]
 80097de:	1ac8      	subs	r0, r1, r3
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 80097e0:	fbb0 f0f2 	udiv	r0, r0, r2
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 80097e4:	fb00 2202 	mla	r2, r0, r2, r2
 80097e8:	1a5b      	subs	r3, r3, r1
 80097ea:	4413      	add	r3, r2
 80097ec:	6163      	str	r3, [r4, #20]
 80097ee:	e7de      	b.n	80097ae <vPortSuppressTicksAndSleep+0xde>
 80097f0:	20002d38 	.word	0x20002d38
 80097f4:	20002d3c 	.word	0x20002d3c
 80097f8:	20002d34 	.word	0x20002d34

080097fc <vPortSetupTimerInterrupt>:
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 80097fc:	480f      	ldr	r0, [pc, #60]	@ (800983c <vPortSetupTimerInterrupt+0x40>)
 80097fe:	6803      	ldr	r3, [r0, #0]
 8009800:	490f      	ldr	r1, [pc, #60]	@ (8009840 <vPortSetupTimerInterrupt+0x44>)
 8009802:	fba1 2303 	umull	r2, r3, r1, r3
 8009806:	099b      	lsrs	r3, r3, #6
 8009808:	4a0e      	ldr	r2, [pc, #56]	@ (8009844 <vPortSetupTimerInterrupt+0x48>)
 800980a:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800980c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8009810:	fbb2 f3f3 	udiv	r3, r2, r3
 8009814:	4a0c      	ldr	r2, [pc, #48]	@ (8009848 <vPortSetupTimerInterrupt+0x4c>)
 8009816:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8009818:	4b0c      	ldr	r3, [pc, #48]	@ (800984c <vPortSetupTimerInterrupt+0x50>)
 800981a:	222d      	movs	r2, #45	@ 0x2d
 800981c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800981e:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8009822:	2300      	movs	r3, #0
 8009824:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009826:	6193      	str	r3, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009828:	6803      	ldr	r3, [r0, #0]
 800982a:	fba1 1303 	umull	r1, r3, r1, r3
 800982e:	099b      	lsrs	r3, r3, #6
 8009830:	3b01      	subs	r3, #1
 8009832:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009834:	2307      	movs	r3, #7
 8009836:	6113      	str	r3, [r2, #16]
}
 8009838:	4770      	bx	lr
 800983a:	bf00      	nop
 800983c:	20000074 	.word	0x20000074
 8009840:	10624dd3 	.word	0x10624dd3
 8009844:	20002d3c 	.word	0x20002d3c
 8009848:	20002d38 	.word	0x20002d38
 800984c:	20002d34 	.word	0x20002d34

08009850 <xPortStartScheduler>:
{
 8009850:	b510      	push	{r4, lr}
 8009852:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009854:	4b2a      	ldr	r3, [pc, #168]	@ (8009900 <xPortStartScheduler+0xb0>)
 8009856:	781a      	ldrb	r2, [r3, #0]
 8009858:	b2d2      	uxtb	r2, r2
 800985a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800985c:	22ff      	movs	r2, #255	@ 0xff
 800985e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	b2db      	uxtb	r3, r3
 8009864:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009868:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800986c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009870:	4a24      	ldr	r2, [pc, #144]	@ (8009904 <xPortStartScheduler+0xb4>)
 8009872:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009874:	4b24      	ldr	r3, [pc, #144]	@ (8009908 <xPortStartScheduler+0xb8>)
 8009876:	2207      	movs	r2, #7
 8009878:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800987a:	e009      	b.n	8009890 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 800987c:	4a22      	ldr	r2, [pc, #136]	@ (8009908 <xPortStartScheduler+0xb8>)
 800987e:	6813      	ldr	r3, [r2, #0]
 8009880:	3b01      	subs	r3, #1
 8009882:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009884:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009888:	005b      	lsls	r3, r3, #1
 800988a:	b2db      	uxtb	r3, r3
 800988c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009890:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009894:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009898:	d1f0      	bne.n	800987c <xPortStartScheduler+0x2c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800989a:	4b1b      	ldr	r3, [pc, #108]	@ (8009908 <xPortStartScheduler+0xb8>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	2b03      	cmp	r3, #3
 80098a0:	d008      	beq.n	80098b4 <xPortStartScheduler+0x64>
	__asm volatile
 80098a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098a6:	f383 8811 	msr	BASEPRI, r3
 80098aa:	f3bf 8f6f 	isb	sy
 80098ae:	f3bf 8f4f 	dsb	sy
 80098b2:	e7fe      	b.n	80098b2 <xPortStartScheduler+0x62>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80098b4:	021b      	lsls	r3, r3, #8
 80098b6:	4a14      	ldr	r2, [pc, #80]	@ (8009908 <xPortStartScheduler+0xb8>)
 80098b8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80098ba:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80098be:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80098c0:	9b01      	ldr	r3, [sp, #4]
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	4a0e      	ldr	r2, [pc, #56]	@ (8009900 <xPortStartScheduler+0xb0>)
 80098c6:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80098c8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80098cc:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 80098d0:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 80098d4:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80098d8:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 80098dc:	f042 4270 	orr.w	r2, r2, #4026531840	@ 0xf0000000
 80098e0:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 80098e4:	f7ff ff8a 	bl	80097fc <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80098e8:	2400      	movs	r4, #0
 80098ea:	4b08      	ldr	r3, [pc, #32]	@ (800990c <xPortStartScheduler+0xbc>)
 80098ec:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 80098ee:	f7ff fe45 	bl	800957c <prvPortStartFirstTask>
	vTaskSwitchContext();
 80098f2:	f000 ff43 	bl	800a77c <vTaskSwitchContext>
	prvTaskExitError();
 80098f6:	f7ff fe21 	bl	800953c <prvTaskExitError>
}
 80098fa:	4620      	mov	r0, r4
 80098fc:	b002      	add	sp, #8
 80098fe:	bd10      	pop	{r4, pc}
 8009900:	e000e400 	.word	0xe000e400
 8009904:	20002d30 	.word	0x20002d30
 8009908:	20002d2c 	.word	0x20002d2c
 800990c:	2000007c 	.word	0x2000007c

08009910 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009910:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009914:	2b0f      	cmp	r3, #15
 8009916:	d90f      	bls.n	8009938 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009918:	4a11      	ldr	r2, [pc, #68]	@ (8009960 <vPortValidateInterruptPriority+0x50>)
 800991a:	5c9b      	ldrb	r3, [r3, r2]
 800991c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800991e:	4a11      	ldr	r2, [pc, #68]	@ (8009964 <vPortValidateInterruptPriority+0x54>)
 8009920:	7812      	ldrb	r2, [r2, #0]
 8009922:	429a      	cmp	r2, r3
 8009924:	d908      	bls.n	8009938 <vPortValidateInterruptPriority+0x28>
 8009926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800992a:	f383 8811 	msr	BASEPRI, r3
 800992e:	f3bf 8f6f 	isb	sy
 8009932:	f3bf 8f4f 	dsb	sy
 8009936:	e7fe      	b.n	8009936 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009938:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800993c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8009940:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009944:	4a08      	ldr	r2, [pc, #32]	@ (8009968 <vPortValidateInterruptPriority+0x58>)
 8009946:	6812      	ldr	r2, [r2, #0]
 8009948:	4293      	cmp	r3, r2
 800994a:	d908      	bls.n	800995e <vPortValidateInterruptPriority+0x4e>
 800994c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009950:	f383 8811 	msr	BASEPRI, r3
 8009954:	f3bf 8f6f 	isb	sy
 8009958:	f3bf 8f4f 	dsb	sy
 800995c:	e7fe      	b.n	800995c <vPortValidateInterruptPriority+0x4c>
	}
 800995e:	4770      	bx	lr
 8009960:	e000e3f0 	.word	0xe000e3f0
 8009964:	20002d30 	.word	0x20002d30
 8009968:	20002d2c 	.word	0x20002d2c

0800996c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800996c:	b510      	push	{r4, lr}
 800996e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009970:	f7ff fe38 	bl	80095e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009974:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009976:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009978:	429a      	cmp	r2, r3
 800997a:	d004      	beq.n	8009986 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800997c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800997e:	f7ff fe53 	bl	8009628 <vPortExitCritical>

	return xReturn;
}
 8009982:	4620      	mov	r0, r4
 8009984:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8009986:	2401      	movs	r4, #1
 8009988:	e7f9      	b.n	800997e <prvIsQueueFull+0x12>

0800998a <prvIsQueueEmpty>:
{
 800998a:	b510      	push	{r4, lr}
 800998c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800998e:	f7ff fe29 	bl	80095e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009992:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009994:	b923      	cbnz	r3, 80099a0 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8009996:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8009998:	f7ff fe46 	bl	8009628 <vPortExitCritical>
}
 800999c:	4620      	mov	r0, r4
 800999e:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 80099a0:	2400      	movs	r4, #0
 80099a2:	e7f9      	b.n	8009998 <prvIsQueueEmpty+0xe>

080099a4 <prvCopyDataToQueue>:
{
 80099a4:	b570      	push	{r4, r5, r6, lr}
 80099a6:	4604      	mov	r4, r0
 80099a8:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099aa:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80099ac:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80099ae:	b95a      	cbnz	r2, 80099c8 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80099b0:	6803      	ldr	r3, [r0, #0]
 80099b2:	b11b      	cbz	r3, 80099bc <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 80099b4:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80099b6:	3601      	adds	r6, #1
 80099b8:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 80099ba:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80099bc:	6880      	ldr	r0, [r0, #8]
 80099be:	f001 f827 	bl	800aa10 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80099c2:	2300      	movs	r3, #0
 80099c4:	60a3      	str	r3, [r4, #8]
 80099c6:	e7f6      	b.n	80099b6 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 80099c8:	b96d      	cbnz	r5, 80099e6 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80099ca:	6840      	ldr	r0, [r0, #4]
 80099cc:	f00c fbc2 	bl	8016154 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80099d0:	6863      	ldr	r3, [r4, #4]
 80099d2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80099d4:	4413      	add	r3, r2
 80099d6:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80099d8:	68a2      	ldr	r2, [r4, #8]
 80099da:	4293      	cmp	r3, r2
 80099dc:	d319      	bcc.n	8009a12 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80099de:	6823      	ldr	r3, [r4, #0]
 80099e0:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80099e2:	4628      	mov	r0, r5
 80099e4:	e7e7      	b.n	80099b6 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80099e6:	68c0      	ldr	r0, [r0, #12]
 80099e8:	f00c fbb4 	bl	8016154 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80099ec:	68e3      	ldr	r3, [r4, #12]
 80099ee:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80099f0:	4251      	negs	r1, r2
 80099f2:	1a9b      	subs	r3, r3, r2
 80099f4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80099f6:	6822      	ldr	r2, [r4, #0]
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d202      	bcs.n	8009a02 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80099fc:	68a3      	ldr	r3, [r4, #8]
 80099fe:	440b      	add	r3, r1
 8009a00:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8009a02:	2d02      	cmp	r5, #2
 8009a04:	d001      	beq.n	8009a0a <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8009a06:	2000      	movs	r0, #0
 8009a08:	e7d5      	b.n	80099b6 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a0a:	b126      	cbz	r6, 8009a16 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8009a0c:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8009a0e:	2000      	movs	r0, #0
 8009a10:	e7d1      	b.n	80099b6 <prvCopyDataToQueue+0x12>
 8009a12:	4628      	mov	r0, r5
 8009a14:	e7cf      	b.n	80099b6 <prvCopyDataToQueue+0x12>
 8009a16:	2000      	movs	r0, #0
 8009a18:	e7cd      	b.n	80099b6 <prvCopyDataToQueue+0x12>

08009a1a <prvCopyDataFromQueue>:
{
 8009a1a:	b508      	push	{r3, lr}
 8009a1c:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009a1e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8009a20:	b162      	cbz	r2, 8009a3c <prvCopyDataFromQueue+0x22>
 8009a22:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a24:	68d9      	ldr	r1, [r3, #12]
 8009a26:	4411      	add	r1, r2
 8009a28:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009a2a:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8009a2e:	4561      	cmp	r1, ip
 8009a30:	d301      	bcc.n	8009a36 <prvCopyDataFromQueue+0x1c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009a32:	6819      	ldr	r1, [r3, #0]
 8009a34:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a36:	68d9      	ldr	r1, [r3, #12]
 8009a38:	f00c fb8c 	bl	8016154 <memcpy>
}
 8009a3c:	bd08      	pop	{r3, pc}

08009a3e <prvUnlockQueue>:
{
 8009a3e:	b538      	push	{r3, r4, r5, lr}
 8009a40:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8009a42:	f7ff fdcf 	bl	80095e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8009a46:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 8009a4a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a4c:	e001      	b.n	8009a52 <prvUnlockQueue+0x14>
			--cTxLock;
 8009a4e:	3c01      	subs	r4, #1
 8009a50:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a52:	2c00      	cmp	r4, #0
 8009a54:	dd0a      	ble.n	8009a6c <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a56:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8009a58:	b143      	cbz	r3, 8009a6c <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a5a:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8009a5e:	f000 ff0d 	bl	800a87c <xTaskRemoveFromEventList>
 8009a62:	2800      	cmp	r0, #0
 8009a64:	d0f3      	beq.n	8009a4e <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8009a66:	f000 ff9f 	bl	800a9a8 <vTaskMissedYield>
 8009a6a:	e7f0      	b.n	8009a4e <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8009a6c:	23ff      	movs	r3, #255	@ 0xff
 8009a6e:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8009a72:	f7ff fdd9 	bl	8009628 <vPortExitCritical>
	taskENTER_CRITICAL();
 8009a76:	f7ff fdb5 	bl	80095e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8009a7a:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 8009a7e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a80:	e001      	b.n	8009a86 <prvUnlockQueue+0x48>
				--cRxLock;
 8009a82:	3c01      	subs	r4, #1
 8009a84:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a86:	2c00      	cmp	r4, #0
 8009a88:	dd0a      	ble.n	8009aa0 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a8a:	692b      	ldr	r3, [r5, #16]
 8009a8c:	b143      	cbz	r3, 8009aa0 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a8e:	f105 0010 	add.w	r0, r5, #16
 8009a92:	f000 fef3 	bl	800a87c <xTaskRemoveFromEventList>
 8009a96:	2800      	cmp	r0, #0
 8009a98:	d0f3      	beq.n	8009a82 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8009a9a:	f000 ff85 	bl	800a9a8 <vTaskMissedYield>
 8009a9e:	e7f0      	b.n	8009a82 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8009aa0:	23ff      	movs	r3, #255	@ 0xff
 8009aa2:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8009aa6:	f7ff fdbf 	bl	8009628 <vPortExitCritical>
}
 8009aaa:	bd38      	pop	{r3, r4, r5, pc}

08009aac <xQueueGenericReset>:
{
 8009aac:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8009aae:	b1e0      	cbz	r0, 8009aea <xQueueGenericReset+0x3e>
 8009ab0:	460d      	mov	r5, r1
 8009ab2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8009ab4:	f7ff fd96 	bl	80095e4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ab8:	6823      	ldr	r3, [r4, #0]
 8009aba:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8009abc:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8009abe:	fb01 3002 	mla	r0, r1, r2, r3
 8009ac2:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009ac4:	2000      	movs	r0, #0
 8009ac6:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ac8:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009aca:	3a01      	subs	r2, #1
 8009acc:	fb02 3301 	mla	r3, r2, r1, r3
 8009ad0:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009ad2:	23ff      	movs	r3, #255	@ 0xff
 8009ad4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009ad8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8009adc:	b9fd      	cbnz	r5, 8009b1e <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ade:	6923      	ldr	r3, [r4, #16]
 8009ae0:	b963      	cbnz	r3, 8009afc <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8009ae2:	f7ff fda1 	bl	8009628 <vPortExitCritical>
}
 8009ae6:	2001      	movs	r0, #1
 8009ae8:	bd38      	pop	{r3, r4, r5, pc}
 8009aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aee:	f383 8811 	msr	BASEPRI, r3
 8009af2:	f3bf 8f6f 	isb	sy
 8009af6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8009afa:	e7fe      	b.n	8009afa <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009afc:	f104 0010 	add.w	r0, r4, #16
 8009b00:	f000 febc 	bl	800a87c <xTaskRemoveFromEventList>
 8009b04:	2800      	cmp	r0, #0
 8009b06:	d0ec      	beq.n	8009ae2 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8009b08:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009b0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b10:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009b14:	f3bf 8f4f 	dsb	sy
 8009b18:	f3bf 8f6f 	isb	sy
 8009b1c:	e7e1      	b.n	8009ae2 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009b1e:	f104 0010 	add.w	r0, r4, #16
 8009b22:	f7ff fcc5 	bl	80094b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009b26:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009b2a:	f7ff fcc1 	bl	80094b0 <vListInitialise>
 8009b2e:	e7d8      	b.n	8009ae2 <xQueueGenericReset+0x36>

08009b30 <prvInitialiseNewQueue>:
{
 8009b30:	b538      	push	{r3, r4, r5, lr}
 8009b32:	461d      	mov	r5, r3
 8009b34:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8009b36:	460b      	mov	r3, r1
 8009b38:	b949      	cbnz	r1, 8009b4e <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009b3a:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8009b3c:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009b3e:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009b40:	2101      	movs	r1, #1
 8009b42:	4620      	mov	r0, r4
 8009b44:	f7ff ffb2 	bl	8009aac <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8009b48:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 8009b4c:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009b4e:	6022      	str	r2, [r4, #0]
 8009b50:	e7f4      	b.n	8009b3c <prvInitialiseNewQueue+0xc>

08009b52 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009b52:	b940      	cbnz	r0, 8009b66 <xQueueGenericCreateStatic+0x14>
 8009b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b58:	f383 8811 	msr	BASEPRI, r3
 8009b5c:	f3bf 8f6f 	isb	sy
 8009b60:	f3bf 8f4f 	dsb	sy
 8009b64:	e7fe      	b.n	8009b64 <xQueueGenericCreateStatic+0x12>
	{
 8009b66:	b510      	push	{r4, lr}
 8009b68:	b084      	sub	sp, #16
 8009b6a:	461c      	mov	r4, r3
 8009b6c:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 8009b6e:	b153      	cbz	r3, 8009b86 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009b70:	b192      	cbz	r2, 8009b98 <xQueueGenericCreateStatic+0x46>
 8009b72:	b989      	cbnz	r1, 8009b98 <xQueueGenericCreateStatic+0x46>
 8009b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b78:	f383 8811 	msr	BASEPRI, r3
 8009b7c:	f3bf 8f6f 	isb	sy
 8009b80:	f3bf 8f4f 	dsb	sy
 8009b84:	e7fe      	b.n	8009b84 <xQueueGenericCreateStatic+0x32>
 8009b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b8a:	f383 8811 	msr	BASEPRI, r3
 8009b8e:	f3bf 8f6f 	isb	sy
 8009b92:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8009b96:	e7fe      	b.n	8009b96 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009b98:	b16a      	cbz	r2, 8009bb6 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009b9a:	2350      	movs	r3, #80	@ 0x50
 8009b9c:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009b9e:	9b03      	ldr	r3, [sp, #12]
 8009ba0:	2b50      	cmp	r3, #80	@ 0x50
 8009ba2:	d013      	beq.n	8009bcc <xQueueGenericCreateStatic+0x7a>
 8009ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba8:	f383 8811 	msr	BASEPRI, r3
 8009bac:	f3bf 8f6f 	isb	sy
 8009bb0:	f3bf 8f4f 	dsb	sy
 8009bb4:	e7fe      	b.n	8009bb4 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009bb6:	2900      	cmp	r1, #0
 8009bb8:	d0ef      	beq.n	8009b9a <xQueueGenericCreateStatic+0x48>
 8009bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bbe:	f383 8811 	msr	BASEPRI, r3
 8009bc2:	f3bf 8f6f 	isb	sy
 8009bc6:	f3bf 8f4f 	dsb	sy
 8009bca:	e7fe      	b.n	8009bca <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009bcc:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009bd4:	9400      	str	r4, [sp, #0]
 8009bd6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8009bda:	4660      	mov	r0, ip
 8009bdc:	f7ff ffa8 	bl	8009b30 <prvInitialiseNewQueue>
	}
 8009be0:	4620      	mov	r0, r4
 8009be2:	b004      	add	sp, #16
 8009be4:	bd10      	pop	{r4, pc}

08009be6 <xQueueGenericSend>:
{
 8009be6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009be8:	b085      	sub	sp, #20
 8009bea:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8009bec:	b188      	cbz	r0, 8009c12 <xQueueGenericSend+0x2c>
 8009bee:	460f      	mov	r7, r1
 8009bf0:	461d      	mov	r5, r3
 8009bf2:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bf4:	b1b1      	cbz	r1, 8009c24 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009bf6:	2d02      	cmp	r5, #2
 8009bf8:	d120      	bne.n	8009c3c <xQueueGenericSend+0x56>
 8009bfa:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d01d      	beq.n	8009c3c <xQueueGenericSend+0x56>
 8009c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c04:	f383 8811 	msr	BASEPRI, r3
 8009c08:	f3bf 8f6f 	isb	sy
 8009c0c:	f3bf 8f4f 	dsb	sy
 8009c10:	e7fe      	b.n	8009c10 <xQueueGenericSend+0x2a>
 8009c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c16:	f383 8811 	msr	BASEPRI, r3
 8009c1a:	f3bf 8f6f 	isb	sy
 8009c1e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8009c22:	e7fe      	b.n	8009c22 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c24:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d0e5      	beq.n	8009bf6 <xQueueGenericSend+0x10>
 8009c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c2e:	f383 8811 	msr	BASEPRI, r3
 8009c32:	f3bf 8f6f 	isb	sy
 8009c36:	f3bf 8f4f 	dsb	sy
 8009c3a:	e7fe      	b.n	8009c3a <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c3c:	f000 fed8 	bl	800a9f0 <xTaskGetSchedulerState>
 8009c40:	4606      	mov	r6, r0
 8009c42:	b958      	cbnz	r0, 8009c5c <xQueueGenericSend+0x76>
 8009c44:	9b01      	ldr	r3, [sp, #4]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d048      	beq.n	8009cdc <xQueueGenericSend+0xf6>
 8009c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c4e:	f383 8811 	msr	BASEPRI, r3
 8009c52:	f3bf 8f6f 	isb	sy
 8009c56:	f3bf 8f4f 	dsb	sy
 8009c5a:	e7fe      	b.n	8009c5a <xQueueGenericSend+0x74>
 8009c5c:	2600      	movs	r6, #0
 8009c5e:	e03d      	b.n	8009cdc <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009c60:	462a      	mov	r2, r5
 8009c62:	4639      	mov	r1, r7
 8009c64:	4620      	mov	r0, r4
 8009c66:	f7ff fe9d 	bl	80099a4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c6a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009c6c:	b97b      	cbnz	r3, 8009c8e <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 8009c6e:	b148      	cbz	r0, 8009c84 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8009c70:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009c74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c78:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009c7c:	f3bf 8f4f 	dsb	sy
 8009c80:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8009c84:	f7ff fcd0 	bl	8009628 <vPortExitCritical>
				return pdPASS;
 8009c88:	2001      	movs	r0, #1
}
 8009c8a:	b005      	add	sp, #20
 8009c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c8e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009c92:	f000 fdf3 	bl	800a87c <xTaskRemoveFromEventList>
 8009c96:	2800      	cmp	r0, #0
 8009c98:	d0f4      	beq.n	8009c84 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8009c9a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009c9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ca2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009ca6:	f3bf 8f4f 	dsb	sy
 8009caa:	f3bf 8f6f 	isb	sy
 8009cae:	e7e9      	b.n	8009c84 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 8009cb0:	f7ff fcba 	bl	8009628 <vPortExitCritical>
					return errQUEUE_FULL;
 8009cb4:	2000      	movs	r0, #0
 8009cb6:	e7e8      	b.n	8009c8a <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009cb8:	a802      	add	r0, sp, #8
 8009cba:	f000 fe27 	bl	800a90c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009cbe:	2601      	movs	r6, #1
 8009cc0:	e019      	b.n	8009cf6 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8009cc8:	e021      	b.n	8009d0e <xQueueGenericSend+0x128>
 8009cca:	2300      	movs	r3, #0
 8009ccc:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8009cd0:	e023      	b.n	8009d1a <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	f7ff feb3 	bl	8009a3e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009cd8:	f000 fc9c 	bl	800a614 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8009cdc:	f7ff fc82 	bl	80095e4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009ce0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009ce2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d3bb      	bcc.n	8009c60 <xQueueGenericSend+0x7a>
 8009ce8:	2d02      	cmp	r5, #2
 8009cea:	d0b9      	beq.n	8009c60 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009cec:	9b01      	ldr	r3, [sp, #4]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d0de      	beq.n	8009cb0 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 8009cf2:	2e00      	cmp	r6, #0
 8009cf4:	d0e0      	beq.n	8009cb8 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8009cf6:	f7ff fc97 	bl	8009628 <vPortExitCritical>
		vTaskSuspendAll();
 8009cfa:	f000 fbd7 	bl	800a4ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009cfe:	f7ff fc71 	bl	80095e4 <vPortEnterCritical>
 8009d02:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8009d06:	b252      	sxtb	r2, r2
 8009d08:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009d0c:	d0d9      	beq.n	8009cc2 <xQueueGenericSend+0xdc>
 8009d0e:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 8009d12:	b252      	sxtb	r2, r2
 8009d14:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009d18:	d0d7      	beq.n	8009cca <xQueueGenericSend+0xe4>
 8009d1a:	f7ff fc85 	bl	8009628 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d1e:	a901      	add	r1, sp, #4
 8009d20:	a802      	add	r0, sp, #8
 8009d22:	f000 fdff 	bl	800a924 <xTaskCheckForTimeOut>
 8009d26:	b9d8      	cbnz	r0, 8009d60 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009d28:	4620      	mov	r0, r4
 8009d2a:	f7ff fe1f 	bl	800996c <prvIsQueueFull>
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	d0cf      	beq.n	8009cd2 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009d32:	9901      	ldr	r1, [sp, #4]
 8009d34:	f104 0010 	add.w	r0, r4, #16
 8009d38:	f000 fd6c 	bl	800a814 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	f7ff fe7e 	bl	8009a3e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009d42:	f000 fc67 	bl	800a614 <xTaskResumeAll>
 8009d46:	2800      	cmp	r0, #0
 8009d48:	d1c8      	bne.n	8009cdc <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 8009d4a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009d4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d52:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009d56:	f3bf 8f4f 	dsb	sy
 8009d5a:	f3bf 8f6f 	isb	sy
 8009d5e:	e7bd      	b.n	8009cdc <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 8009d60:	4620      	mov	r0, r4
 8009d62:	f7ff fe6c 	bl	8009a3e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d66:	f000 fc55 	bl	800a614 <xTaskResumeAll>
			return errQUEUE_FULL;
 8009d6a:	2000      	movs	r0, #0
 8009d6c:	e78d      	b.n	8009c8a <xQueueGenericSend+0xa4>

08009d6e <xQueueGenericSendFromISR>:
{
 8009d6e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8009d72:	b190      	cbz	r0, 8009d9a <xQueueGenericSendFromISR+0x2c>
 8009d74:	460f      	mov	r7, r1
 8009d76:	4616      	mov	r6, r2
 8009d78:	461c      	mov	r4, r3
 8009d7a:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d7c:	b1b1      	cbz	r1, 8009dac <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d7e:	2c02      	cmp	r4, #2
 8009d80:	d120      	bne.n	8009dc4 <xQueueGenericSendFromISR+0x56>
 8009d82:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d01d      	beq.n	8009dc4 <xQueueGenericSendFromISR+0x56>
 8009d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d8c:	f383 8811 	msr	BASEPRI, r3
 8009d90:	f3bf 8f6f 	isb	sy
 8009d94:	f3bf 8f4f 	dsb	sy
 8009d98:	e7fe      	b.n	8009d98 <xQueueGenericSendFromISR+0x2a>
 8009d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d9e:	f383 8811 	msr	BASEPRI, r3
 8009da2:	f3bf 8f6f 	isb	sy
 8009da6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8009daa:	e7fe      	b.n	8009daa <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009dac:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d0e5      	beq.n	8009d7e <xQueueGenericSendFromISR+0x10>
 8009db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009db6:	f383 8811 	msr	BASEPRI, r3
 8009dba:	f3bf 8f6f 	isb	sy
 8009dbe:	f3bf 8f4f 	dsb	sy
 8009dc2:	e7fe      	b.n	8009dc2 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009dc4:	f7ff fda4 	bl	8009910 <vPortValidateInterruptPriority>
	__asm volatile
 8009dc8:	f3ef 8811 	mrs	r8, BASEPRI
 8009dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dd0:	f383 8811 	msr	BASEPRI, r3
 8009dd4:	f3bf 8f6f 	isb	sy
 8009dd8:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009ddc:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8009dde:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d306      	bcc.n	8009df2 <xQueueGenericSendFromISR+0x84>
 8009de4:	2c02      	cmp	r4, #2
 8009de6:	d004      	beq.n	8009df2 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8009de8:	2000      	movs	r0, #0
	__asm volatile
 8009dea:	f388 8811 	msr	BASEPRI, r8
}
 8009dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8009df2:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 8009df6:	fa4f f989 	sxtb.w	r9, r9
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009dfa:	4622      	mov	r2, r4
 8009dfc:	4639      	mov	r1, r7
 8009dfe:	4628      	mov	r0, r5
 8009e00:	f7ff fdd0 	bl	80099a4 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8009e04:	f1b9 3fff 	cmp.w	r9, #4294967295
 8009e08:	d006      	beq.n	8009e18 <xQueueGenericSendFromISR+0xaa>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009e0a:	f109 0301 	add.w	r3, r9, #1
 8009e0e:	b25b      	sxtb	r3, r3
 8009e10:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 8009e14:	2001      	movs	r0, #1
 8009e16:	e7e8      	b.n	8009dea <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e18:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8009e1a:	b90b      	cbnz	r3, 8009e20 <xQueueGenericSendFromISR+0xb2>
			xReturn = pdPASS;
 8009e1c:	2001      	movs	r0, #1
 8009e1e:	e7e4      	b.n	8009dea <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e20:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8009e24:	f000 fd2a 	bl	800a87c <xTaskRemoveFromEventList>
 8009e28:	b118      	cbz	r0, 8009e32 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 8009e2a:	b126      	cbz	r6, 8009e36 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009e2c:	2001      	movs	r0, #1
 8009e2e:	6030      	str	r0, [r6, #0]
 8009e30:	e7db      	b.n	8009dea <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8009e32:	2001      	movs	r0, #1
 8009e34:	e7d9      	b.n	8009dea <xQueueGenericSendFromISR+0x7c>
 8009e36:	2001      	movs	r0, #1
 8009e38:	e7d7      	b.n	8009dea <xQueueGenericSendFromISR+0x7c>

08009e3a <xQueueReceive>:
{
 8009e3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e3c:	b085      	sub	sp, #20
 8009e3e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8009e40:	b190      	cbz	r0, 8009e68 <xQueueReceive+0x2e>
 8009e42:	460f      	mov	r7, r1
 8009e44:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e46:	b1c1      	cbz	r1, 8009e7a <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e48:	f000 fdd2 	bl	800a9f0 <xTaskGetSchedulerState>
 8009e4c:	4606      	mov	r6, r0
 8009e4e:	bb00      	cbnz	r0, 8009e92 <xQueueReceive+0x58>
 8009e50:	9b01      	ldr	r3, [sp, #4]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d05e      	beq.n	8009f14 <xQueueReceive+0xda>
	__asm volatile
 8009e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e5a:	f383 8811 	msr	BASEPRI, r3
 8009e5e:	f3bf 8f6f 	isb	sy
 8009e62:	f3bf 8f4f 	dsb	sy
 8009e66:	e7fe      	b.n	8009e66 <xQueueReceive+0x2c>
 8009e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e6c:	f383 8811 	msr	BASEPRI, r3
 8009e70:	f3bf 8f6f 	isb	sy
 8009e74:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8009e78:	e7fe      	b.n	8009e78 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e7a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d0e3      	beq.n	8009e48 <xQueueReceive+0xe>
 8009e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e84:	f383 8811 	msr	BASEPRI, r3
 8009e88:	f3bf 8f6f 	isb	sy
 8009e8c:	f3bf 8f4f 	dsb	sy
 8009e90:	e7fe      	b.n	8009e90 <xQueueReceive+0x56>
 8009e92:	2600      	movs	r6, #0
 8009e94:	e03e      	b.n	8009f14 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009e96:	4639      	mov	r1, r7
 8009e98:	4620      	mov	r0, r4
 8009e9a:	f7ff fdbe 	bl	8009a1a <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009e9e:	3d01      	subs	r5, #1
 8009ea0:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ea2:	6923      	ldr	r3, [r4, #16]
 8009ea4:	b923      	cbnz	r3, 8009eb0 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8009ea6:	f7ff fbbf 	bl	8009628 <vPortExitCritical>
				return pdPASS;
 8009eaa:	2001      	movs	r0, #1
}
 8009eac:	b005      	add	sp, #20
 8009eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009eb0:	f104 0010 	add.w	r0, r4, #16
 8009eb4:	f000 fce2 	bl	800a87c <xTaskRemoveFromEventList>
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	d0f4      	beq.n	8009ea6 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8009ebc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009ec0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ec4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009ec8:	f3bf 8f4f 	dsb	sy
 8009ecc:	f3bf 8f6f 	isb	sy
 8009ed0:	e7e9      	b.n	8009ea6 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8009ed2:	f7ff fba9 	bl	8009628 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8009ed6:	2000      	movs	r0, #0
 8009ed8:	e7e8      	b.n	8009eac <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009eda:	a802      	add	r0, sp, #8
 8009edc:	f000 fd16 	bl	800a90c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ee0:	2601      	movs	r6, #1
 8009ee2:	e021      	b.n	8009f28 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8009eea:	e029      	b.n	8009f40 <xQueueReceive+0x106>
 8009eec:	2300      	movs	r3, #0
 8009eee:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8009ef2:	e02b      	b.n	8009f4c <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	f7ff fda2 	bl	8009a3e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009efa:	f000 fb8b 	bl	800a614 <xTaskResumeAll>
 8009efe:	e009      	b.n	8009f14 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8009f00:	4620      	mov	r0, r4
 8009f02:	f7ff fd9c 	bl	8009a3e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f06:	f000 fb85 	bl	800a614 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	f7ff fd3d 	bl	800998a <prvIsQueueEmpty>
 8009f10:	2800      	cmp	r0, #0
 8009f12:	d13f      	bne.n	8009f94 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8009f14:	f7ff fb66 	bl	80095e4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f18:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f1a:	2d00      	cmp	r5, #0
 8009f1c:	d1bb      	bne.n	8009e96 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f1e:	9b01      	ldr	r3, [sp, #4]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d0d6      	beq.n	8009ed2 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8009f24:	2e00      	cmp	r6, #0
 8009f26:	d0d8      	beq.n	8009eda <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8009f28:	f7ff fb7e 	bl	8009628 <vPortExitCritical>
		vTaskSuspendAll();
 8009f2c:	f000 fabe 	bl	800a4ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f30:	f7ff fb58 	bl	80095e4 <vPortEnterCritical>
 8009f34:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8009f38:	b25b      	sxtb	r3, r3
 8009f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f3e:	d0d1      	beq.n	8009ee4 <xQueueReceive+0xaa>
 8009f40:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8009f44:	b25b      	sxtb	r3, r3
 8009f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f4a:	d0cf      	beq.n	8009eec <xQueueReceive+0xb2>
 8009f4c:	f7ff fb6c 	bl	8009628 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f50:	a901      	add	r1, sp, #4
 8009f52:	a802      	add	r0, sp, #8
 8009f54:	f000 fce6 	bl	800a924 <xTaskCheckForTimeOut>
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	d1d1      	bne.n	8009f00 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f5c:	4620      	mov	r0, r4
 8009f5e:	f7ff fd14 	bl	800998a <prvIsQueueEmpty>
 8009f62:	2800      	cmp	r0, #0
 8009f64:	d0c6      	beq.n	8009ef4 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009f66:	9901      	ldr	r1, [sp, #4]
 8009f68:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009f6c:	f000 fc52 	bl	800a814 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009f70:	4620      	mov	r0, r4
 8009f72:	f7ff fd64 	bl	8009a3e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009f76:	f000 fb4d 	bl	800a614 <xTaskResumeAll>
 8009f7a:	2800      	cmp	r0, #0
 8009f7c:	d1ca      	bne.n	8009f14 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8009f7e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009f82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f86:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009f8a:	f3bf 8f4f 	dsb	sy
 8009f8e:	f3bf 8f6f 	isb	sy
 8009f92:	e7bf      	b.n	8009f14 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 8009f94:	2000      	movs	r0, #0
 8009f96:	e789      	b.n	8009eac <xQueueReceive+0x72>

08009f98 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f98:	2300      	movs	r3, #0
 8009f9a:	2b07      	cmp	r3, #7
 8009f9c:	d80c      	bhi.n	8009fb8 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009f9e:	4a07      	ldr	r2, [pc, #28]	@ (8009fbc <vQueueAddToRegistry+0x24>)
 8009fa0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009fa4:	b10a      	cbz	r2, 8009faa <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	e7f7      	b.n	8009f9a <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009faa:	4a04      	ldr	r2, [pc, #16]	@ (8009fbc <vQueueAddToRegistry+0x24>)
 8009fac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009fb0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009fb4:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009fb6:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009fb8:	4770      	bx	lr
 8009fba:	bf00      	nop
 8009fbc:	20002d40 	.word	0x20002d40

08009fc0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009fc0:	b570      	push	{r4, r5, r6, lr}
 8009fc2:	4604      	mov	r4, r0
 8009fc4:	460d      	mov	r5, r1
 8009fc6:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009fc8:	f7ff fb0c 	bl	80095e4 <vPortEnterCritical>
 8009fcc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8009fd0:	b25b      	sxtb	r3, r3
 8009fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fd6:	d00d      	beq.n	8009ff4 <vQueueWaitForMessageRestricted+0x34>
 8009fd8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8009fdc:	b25b      	sxtb	r3, r3
 8009fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fe2:	d00b      	beq.n	8009ffc <vQueueWaitForMessageRestricted+0x3c>
 8009fe4:	f7ff fb20 	bl	8009628 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009fe8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009fea:	b15b      	cbz	r3, 800a004 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009fec:	4620      	mov	r0, r4
 8009fee:	f7ff fd26 	bl	8009a3e <prvUnlockQueue>
	}
 8009ff2:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8009ffa:	e7ed      	b.n	8009fd8 <vQueueWaitForMessageRestricted+0x18>
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800a002:	e7ef      	b.n	8009fe4 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a004:	4632      	mov	r2, r6
 800a006:	4629      	mov	r1, r5
 800a008:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800a00c:	f000 fc1a 	bl	800a844 <vTaskPlaceOnEventListRestricted>
 800a010:	e7ec      	b.n	8009fec <vQueueWaitForMessageRestricted+0x2c>
	...

0800a014 <prvGetExpectedIdleTime>:
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 800a014:	4b0a      	ldr	r3, [pc, #40]	@ (800a040 <prvGetExpectedIdleTime+0x2c>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	b103      	cbz	r3, 800a01c <prvGetExpectedIdleTime+0x8>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800a01a:	2301      	movs	r3, #1
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800a01c:	4a09      	ldr	r2, [pc, #36]	@ (800a044 <prvGetExpectedIdleTime+0x30>)
 800a01e:	6812      	ldr	r2, [r2, #0]
 800a020:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 800a022:	b950      	cbnz	r0, 800a03a <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800a024:	4a08      	ldr	r2, [pc, #32]	@ (800a048 <prvGetExpectedIdleTime+0x34>)
 800a026:	6812      	ldr	r2, [r2, #0]
 800a028:	2a01      	cmp	r2, #1
 800a02a:	d807      	bhi.n	800a03c <prvGetExpectedIdleTime+0x28>
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800a02c:	b933      	cbnz	r3, 800a03c <prvGetExpectedIdleTime+0x28>
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800a02e:	4b07      	ldr	r3, [pc, #28]	@ (800a04c <prvGetExpectedIdleTime+0x38>)
 800a030:	6818      	ldr	r0, [r3, #0]
 800a032:	4b07      	ldr	r3, [pc, #28]	@ (800a050 <prvGetExpectedIdleTime+0x3c>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	1ac0      	subs	r0, r0, r3
 800a038:	4770      	bx	lr
			xReturn = 0;
 800a03a:	2000      	movs	r0, #0
		}

		return xReturn;
	}
 800a03c:	4770      	bx	lr
 800a03e:	bf00      	nop
 800a040:	20002da0 	.word	0x20002da0
 800a044:	2000327c 	.word	0x2000327c
 800a048:	20002e1c 	.word	0x20002e1c
 800a04c:	20002d88 	.word	0x20002d88
 800a050:	20002da4 	.word	0x20002da4

0800a054 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a054:	4b08      	ldr	r3, [pc, #32]	@ (800a078 <prvResetNextTaskUnblockTime+0x24>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	b923      	cbnz	r3, 800a066 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a05c:	4b07      	ldr	r3, [pc, #28]	@ (800a07c <prvResetNextTaskUnblockTime+0x28>)
 800a05e:	f04f 32ff 	mov.w	r2, #4294967295
 800a062:	601a      	str	r2, [r3, #0]
 800a064:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a066:	4b04      	ldr	r3, [pc, #16]	@ (800a078 <prvResetNextTaskUnblockTime+0x24>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a06e:	685a      	ldr	r2, [r3, #4]
 800a070:	4b02      	ldr	r3, [pc, #8]	@ (800a07c <prvResetNextTaskUnblockTime+0x28>)
 800a072:	601a      	str	r2, [r3, #0]
	}
}
 800a074:	4770      	bx	lr
 800a076:	bf00      	nop
 800a078:	20002df0 	.word	0x20002df0
 800a07c:	20002d88 	.word	0x20002d88

0800a080 <prvInitialiseNewTask>:
{
 800a080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a084:	4680      	mov	r8, r0
 800a086:	460d      	mov	r5, r1
 800a088:	4617      	mov	r7, r2
 800a08a:	4699      	mov	r9, r3
 800a08c:	9e08      	ldr	r6, [sp, #32]
 800a08e:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 800a092:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a094:	0092      	lsls	r2, r2, #2
 800a096:	21a5      	movs	r1, #165	@ 0xa5
 800a098:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800a09a:	f00c f82f 	bl	80160fc <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a09e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a0a0:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 800a0a4:	3a01      	subs	r2, #1
 800a0a6:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a0aa:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 800a0ae:	b3a5      	cbz	r5, 800a11a <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a0b0:	f04f 0c00 	mov.w	ip, #0
 800a0b4:	f1bc 0f0f 	cmp.w	ip, #15
 800a0b8:	d809      	bhi.n	800a0ce <prvInitialiseNewTask+0x4e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a0ba:	f815 300c 	ldrb.w	r3, [r5, ip]
 800a0be:	eb04 020c 	add.w	r2, r4, ip
 800a0c2:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800a0c6:	b113      	cbz	r3, 800a0ce <prvInitialiseNewTask+0x4e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a0c8:	f10c 0c01 	add.w	ip, ip, #1
 800a0cc:	e7f2      	b.n	800a0b4 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a0d4:	2e37      	cmp	r6, #55	@ 0x37
 800a0d6:	d900      	bls.n	800a0da <prvInitialiseNewTask+0x5a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a0d8:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800a0da:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800a0dc:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a0de:	2500      	movs	r5, #0
 800a0e0:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a0e2:	1d20      	adds	r0, r4, #4
 800a0e4:	f7ff f9ef 	bl	80094c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a0e8:	f104 0018 	add.w	r0, r4, #24
 800a0ec:	f7ff f9eb 	bl	80094c6 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a0f0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0f2:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 800a0f6:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a0f8:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800a0fa:	6565      	str	r5, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a0fc:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a100:	464a      	mov	r2, r9
 800a102:	4641      	mov	r1, r8
 800a104:	4638      	mov	r0, r7
 800a106:	f7ff fa49 	bl	800959c <pxPortInitialiseStack>
 800a10a:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800a10c:	f1ba 0f00 	cmp.w	sl, #0
 800a110:	d001      	beq.n	800a116 <prvInitialiseNewTask+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a112:	f8ca 4000 	str.w	r4, [sl]
}
 800a116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a11a:	2300      	movs	r3, #0
 800a11c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 800a120:	e7d8      	b.n	800a0d4 <prvInitialiseNewTask+0x54>
	...

0800a124 <prvInitialiseTaskLists>:
{
 800a124:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a126:	2400      	movs	r4, #0
 800a128:	e007      	b.n	800a13a <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a12a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800a12e:	0093      	lsls	r3, r2, #2
 800a130:	480e      	ldr	r0, [pc, #56]	@ (800a16c <prvInitialiseTaskLists+0x48>)
 800a132:	4418      	add	r0, r3
 800a134:	f7ff f9bc 	bl	80094b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a138:	3401      	adds	r4, #1
 800a13a:	2c37      	cmp	r4, #55	@ 0x37
 800a13c:	d9f5      	bls.n	800a12a <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800a13e:	4d0c      	ldr	r5, [pc, #48]	@ (800a170 <prvInitialiseTaskLists+0x4c>)
 800a140:	4628      	mov	r0, r5
 800a142:	f7ff f9b5 	bl	80094b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a146:	4c0b      	ldr	r4, [pc, #44]	@ (800a174 <prvInitialiseTaskLists+0x50>)
 800a148:	4620      	mov	r0, r4
 800a14a:	f7ff f9b1 	bl	80094b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a14e:	480a      	ldr	r0, [pc, #40]	@ (800a178 <prvInitialiseTaskLists+0x54>)
 800a150:	f7ff f9ae 	bl	80094b0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800a154:	4809      	ldr	r0, [pc, #36]	@ (800a17c <prvInitialiseTaskLists+0x58>)
 800a156:	f7ff f9ab 	bl	80094b0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800a15a:	4809      	ldr	r0, [pc, #36]	@ (800a180 <prvInitialiseTaskLists+0x5c>)
 800a15c:	f7ff f9a8 	bl	80094b0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800a160:	4b08      	ldr	r3, [pc, #32]	@ (800a184 <prvInitialiseTaskLists+0x60>)
 800a162:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a164:	4b08      	ldr	r3, [pc, #32]	@ (800a188 <prvInitialiseTaskLists+0x64>)
 800a166:	601c      	str	r4, [r3, #0]
}
 800a168:	bd38      	pop	{r3, r4, r5, pc}
 800a16a:	bf00      	nop
 800a16c:	20002e1c 	.word	0x20002e1c
 800a170:	20002e08 	.word	0x20002e08
 800a174:	20002df4 	.word	0x20002df4
 800a178:	20002dd8 	.word	0x20002dd8
 800a17c:	20002dc4 	.word	0x20002dc4
 800a180:	20002dac 	.word	0x20002dac
 800a184:	20002df0 	.word	0x20002df0
 800a188:	20002dec 	.word	0x20002dec

0800a18c <prvAddNewTaskToReadyList>:
{
 800a18c:	b510      	push	{r4, lr}
 800a18e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800a190:	f7ff fa28 	bl	80095e4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800a194:	4a22      	ldr	r2, [pc, #136]	@ (800a220 <prvAddNewTaskToReadyList+0x94>)
 800a196:	6813      	ldr	r3, [r2, #0]
 800a198:	3301      	adds	r3, #1
 800a19a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a19c:	4b21      	ldr	r3, [pc, #132]	@ (800a224 <prvAddNewTaskToReadyList+0x98>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	b15b      	cbz	r3, 800a1ba <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800a1a2:	4b21      	ldr	r3, [pc, #132]	@ (800a228 <prvAddNewTaskToReadyList+0x9c>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	b96b      	cbnz	r3, 800a1c4 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a1a8:	4b1e      	ldr	r3, [pc, #120]	@ (800a224 <prvAddNewTaskToReadyList+0x98>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1ae:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d807      	bhi.n	800a1c4 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 800a1b4:	4b1b      	ldr	r3, [pc, #108]	@ (800a224 <prvAddNewTaskToReadyList+0x98>)
 800a1b6:	601c      	str	r4, [r3, #0]
 800a1b8:	e004      	b.n	800a1c4 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800a1ba:	4b1a      	ldr	r3, [pc, #104]	@ (800a224 <prvAddNewTaskToReadyList+0x98>)
 800a1bc:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a1be:	6813      	ldr	r3, [r2, #0]
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d029      	beq.n	800a218 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 800a1c4:	4a19      	ldr	r2, [pc, #100]	@ (800a22c <prvAddNewTaskToReadyList+0xa0>)
 800a1c6:	6813      	ldr	r3, [r2, #0]
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a1cc:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800a1ce:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800a1d0:	4b17      	ldr	r3, [pc, #92]	@ (800a230 <prvAddNewTaskToReadyList+0xa4>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4298      	cmp	r0, r3
 800a1d6:	d901      	bls.n	800a1dc <prvAddNewTaskToReadyList+0x50>
 800a1d8:	4b15      	ldr	r3, [pc, #84]	@ (800a230 <prvAddNewTaskToReadyList+0xa4>)
 800a1da:	6018      	str	r0, [r3, #0]
 800a1dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a1e0:	1d21      	adds	r1, r4, #4
 800a1e2:	4b14      	ldr	r3, [pc, #80]	@ (800a234 <prvAddNewTaskToReadyList+0xa8>)
 800a1e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a1e8:	f7ff f970 	bl	80094cc <vListInsertEnd>
	taskEXIT_CRITICAL();
 800a1ec:	f7ff fa1c 	bl	8009628 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800a1f0:	4b0d      	ldr	r3, [pc, #52]	@ (800a228 <prvAddNewTaskToReadyList+0x9c>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	b17b      	cbz	r3, 800a216 <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a1f6:	4b0b      	ldr	r3, [pc, #44]	@ (800a224 <prvAddNewTaskToReadyList+0x98>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1fc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d209      	bcs.n	800a216 <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 800a202:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a206:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a20a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800a20e:	f3bf 8f4f 	dsb	sy
 800a212:	f3bf 8f6f 	isb	sy
}
 800a216:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800a218:	f7ff ff84 	bl	800a124 <prvInitialiseTaskLists>
 800a21c:	e7d2      	b.n	800a1c4 <prvAddNewTaskToReadyList+0x38>
 800a21e:	bf00      	nop
 800a220:	20002da8 	.word	0x20002da8
 800a224:	2000327c 	.word	0x2000327c
 800a228:	20002d9c 	.word	0x20002d9c
 800a22c:	20002d8c 	.word	0x20002d8c
 800a230:	20002da0 	.word	0x20002da0
 800a234:	20002e1c 	.word	0x20002e1c

0800a238 <prvDeleteTCB>:
	{
 800a238:	b510      	push	{r4, lr}
 800a23a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a23c:	f890 3059 	ldrb.w	r3, [r0, #89]	@ 0x59
 800a240:	b163      	cbz	r3, 800a25c <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a242:	2b01      	cmp	r3, #1
 800a244:	d011      	beq.n	800a26a <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a246:	2b02      	cmp	r3, #2
 800a248:	d00e      	beq.n	800a268 <prvDeleteTCB+0x30>
 800a24a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a24e:	f383 8811 	msr	BASEPRI, r3
 800a252:	f3bf 8f6f 	isb	sy
 800a256:	f3bf 8f4f 	dsb	sy
 800a25a:	e7fe      	b.n	800a25a <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 800a25c:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800a25e:	f7ff f8ef 	bl	8009440 <vPortFree>
				vPortFree( pxTCB );
 800a262:	4620      	mov	r0, r4
 800a264:	f7ff f8ec 	bl	8009440 <vPortFree>
	}
 800a268:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800a26a:	f7ff f8e9 	bl	8009440 <vPortFree>
 800a26e:	e7fb      	b.n	800a268 <prvDeleteTCB+0x30>

0800a270 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a270:	4b0f      	ldr	r3, [pc, #60]	@ (800a2b0 <prvCheckTasksWaitingTermination+0x40>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	b1d3      	cbz	r3, 800a2ac <prvCheckTasksWaitingTermination+0x3c>
{
 800a276:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800a278:	f7ff f9b4 	bl	80095e4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a27c:	4b0d      	ldr	r3, [pc, #52]	@ (800a2b4 <prvCheckTasksWaitingTermination+0x44>)
 800a27e:	68db      	ldr	r3, [r3, #12]
 800a280:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a282:	1d20      	adds	r0, r4, #4
 800a284:	f7ff f946 	bl	8009514 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a288:	4a0b      	ldr	r2, [pc, #44]	@ (800a2b8 <prvCheckTasksWaitingTermination+0x48>)
 800a28a:	6813      	ldr	r3, [r2, #0]
 800a28c:	3b01      	subs	r3, #1
 800a28e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a290:	4a07      	ldr	r2, [pc, #28]	@ (800a2b0 <prvCheckTasksWaitingTermination+0x40>)
 800a292:	6813      	ldr	r3, [r2, #0]
 800a294:	3b01      	subs	r3, #1
 800a296:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800a298:	f7ff f9c6 	bl	8009628 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800a29c:	4620      	mov	r0, r4
 800a29e:	f7ff ffcb 	bl	800a238 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2a2:	4b03      	ldr	r3, [pc, #12]	@ (800a2b0 <prvCheckTasksWaitingTermination+0x40>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d1e6      	bne.n	800a278 <prvCheckTasksWaitingTermination+0x8>
}
 800a2aa:	bd10      	pop	{r4, pc}
 800a2ac:	4770      	bx	lr
 800a2ae:	bf00      	nop
 800a2b0:	20002dc0 	.word	0x20002dc0
 800a2b4:	20002dc4 	.word	0x20002dc4
 800a2b8:	20002da8 	.word	0x20002da8

0800a2bc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a2bc:	b570      	push	{r4, r5, r6, lr}
 800a2be:	4604      	mov	r4, r0
 800a2c0:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a2c2:	4b17      	ldr	r3, [pc, #92]	@ (800a320 <prvAddCurrentTaskToDelayedList+0x64>)
 800a2c4:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2c6:	4b17      	ldr	r3, [pc, #92]	@ (800a324 <prvAddCurrentTaskToDelayedList+0x68>)
 800a2c8:	6818      	ldr	r0, [r3, #0]
 800a2ca:	3004      	adds	r0, #4
 800a2cc:	f7ff f922 	bl	8009514 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a2d0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a2d4:	d00d      	beq.n	800a2f2 <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a2d6:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a2d8:	4b12      	ldr	r3, [pc, #72]	@ (800a324 <prvAddCurrentTaskToDelayedList+0x68>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800a2de:	42a6      	cmp	r6, r4
 800a2e0:	d910      	bls.n	800a304 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2e2:	4b11      	ldr	r3, [pc, #68]	@ (800a328 <prvAddCurrentTaskToDelayedList+0x6c>)
 800a2e4:	6818      	ldr	r0, [r3, #0]
 800a2e6:	4b0f      	ldr	r3, [pc, #60]	@ (800a324 <prvAddCurrentTaskToDelayedList+0x68>)
 800a2e8:	6819      	ldr	r1, [r3, #0]
 800a2ea:	3104      	adds	r1, #4
 800a2ec:	f7ff f8f9 	bl	80094e2 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a2f0:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a2f2:	2d00      	cmp	r5, #0
 800a2f4:	d0ef      	beq.n	800a2d6 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2f6:	4b0b      	ldr	r3, [pc, #44]	@ (800a324 <prvAddCurrentTaskToDelayedList+0x68>)
 800a2f8:	6819      	ldr	r1, [r3, #0]
 800a2fa:	3104      	adds	r1, #4
 800a2fc:	480b      	ldr	r0, [pc, #44]	@ (800a32c <prvAddCurrentTaskToDelayedList+0x70>)
 800a2fe:	f7ff f8e5 	bl	80094cc <vListInsertEnd>
 800a302:	e7f5      	b.n	800a2f0 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a304:	4b0a      	ldr	r3, [pc, #40]	@ (800a330 <prvAddCurrentTaskToDelayedList+0x74>)
 800a306:	6818      	ldr	r0, [r3, #0]
 800a308:	4b06      	ldr	r3, [pc, #24]	@ (800a324 <prvAddCurrentTaskToDelayedList+0x68>)
 800a30a:	6819      	ldr	r1, [r3, #0]
 800a30c:	3104      	adds	r1, #4
 800a30e:	f7ff f8e8 	bl	80094e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a312:	4b08      	ldr	r3, [pc, #32]	@ (800a334 <prvAddCurrentTaskToDelayedList+0x78>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	42a3      	cmp	r3, r4
 800a318:	d9ea      	bls.n	800a2f0 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 800a31a:	4b06      	ldr	r3, [pc, #24]	@ (800a334 <prvAddCurrentTaskToDelayedList+0x78>)
 800a31c:	601c      	str	r4, [r3, #0]
}
 800a31e:	e7e7      	b.n	800a2f0 <prvAddCurrentTaskToDelayedList+0x34>
 800a320:	20002da4 	.word	0x20002da4
 800a324:	2000327c 	.word	0x2000327c
 800a328:	20002dec 	.word	0x20002dec
 800a32c:	20002dac 	.word	0x20002dac
 800a330:	20002df0 	.word	0x20002df0
 800a334:	20002d88 	.word	0x20002d88

0800a338 <xTaskCreateStatic>:
	{
 800a338:	b530      	push	{r4, r5, lr}
 800a33a:	b087      	sub	sp, #28
 800a33c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800a33e:	b17c      	cbz	r4, 800a360 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a340:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800a342:	b1b5      	cbz	r5, 800a372 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800a344:	255c      	movs	r5, #92	@ 0x5c
 800a346:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a348:	9d04      	ldr	r5, [sp, #16]
 800a34a:	2d5c      	cmp	r5, #92	@ 0x5c
 800a34c:	d01a      	beq.n	800a384 <xTaskCreateStatic+0x4c>
 800a34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a352:	f383 8811 	msr	BASEPRI, r3
 800a356:	f3bf 8f6f 	isb	sy
 800a35a:	f3bf 8f4f 	dsb	sy
 800a35e:	e7fe      	b.n	800a35e <xTaskCreateStatic+0x26>
 800a360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a364:	f383 8811 	msr	BASEPRI, r3
 800a368:	f3bf 8f6f 	isb	sy
 800a36c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800a370:	e7fe      	b.n	800a370 <xTaskCreateStatic+0x38>
 800a372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a376:	f383 8811 	msr	BASEPRI, r3
 800a37a:	f3bf 8f6f 	isb	sy
 800a37e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800a382:	e7fe      	b.n	800a382 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a384:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a386:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800a388:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a38a:	2402      	movs	r4, #2
 800a38c:	f885 4059 	strb.w	r4, [r5, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a390:	2400      	movs	r4, #0
 800a392:	9403      	str	r4, [sp, #12]
 800a394:	9502      	str	r5, [sp, #8]
 800a396:	ac05      	add	r4, sp, #20
 800a398:	9401      	str	r4, [sp, #4]
 800a39a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a39c:	9400      	str	r4, [sp, #0]
 800a39e:	f7ff fe6f 	bl	800a080 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a3a2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800a3a4:	f7ff fef2 	bl	800a18c <prvAddNewTaskToReadyList>
	}
 800a3a8:	9805      	ldr	r0, [sp, #20]
 800a3aa:	b007      	add	sp, #28
 800a3ac:	bd30      	pop	{r4, r5, pc}

0800a3ae <xTaskCreate>:
	{
 800a3ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3b2:	b085      	sub	sp, #20
 800a3b4:	4607      	mov	r7, r0
 800a3b6:	4688      	mov	r8, r1
 800a3b8:	4614      	mov	r4, r2
 800a3ba:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a3bc:	0090      	lsls	r0, r2, #2
 800a3be:	f7fe ffc3 	bl	8009348 <pvPortMalloc>
			if( pxStack != NULL )
 800a3c2:	b308      	cbz	r0, 800a408 <xTaskCreate+0x5a>
 800a3c4:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a3c6:	205c      	movs	r0, #92	@ 0x5c
 800a3c8:	f7fe ffbe 	bl	8009348 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800a3cc:	4605      	mov	r5, r0
 800a3ce:	b1a8      	cbz	r0, 800a3fc <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 800a3d0:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	f880 3059 	strb.w	r3, [r0, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a3da:	9303      	str	r3, [sp, #12]
 800a3dc:	9002      	str	r0, [sp, #8]
 800a3de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a3e0:	9301      	str	r3, [sp, #4]
 800a3e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a3e4:	9300      	str	r3, [sp, #0]
 800a3e6:	4633      	mov	r3, r6
 800a3e8:	4622      	mov	r2, r4
 800a3ea:	4641      	mov	r1, r8
 800a3ec:	4638      	mov	r0, r7
 800a3ee:	f7ff fe47 	bl	800a080 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a3f2:	4628      	mov	r0, r5
 800a3f4:	f7ff feca 	bl	800a18c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a3f8:	2001      	movs	r0, #1
 800a3fa:	e007      	b.n	800a40c <xTaskCreate+0x5e>
					vPortFree( pxStack );
 800a3fc:	4648      	mov	r0, r9
 800a3fe:	f7ff f81f 	bl	8009440 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a402:	f04f 30ff 	mov.w	r0, #4294967295
 800a406:	e001      	b.n	800a40c <xTaskCreate+0x5e>
 800a408:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800a40c:	b005      	add	sp, #20
 800a40e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800a414 <vTaskStartScheduler>:
{
 800a414:	b510      	push	{r4, lr}
 800a416:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a418:	2400      	movs	r4, #0
 800a41a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a41c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a41e:	aa07      	add	r2, sp, #28
 800a420:	a906      	add	r1, sp, #24
 800a422:	a805      	add	r0, sp, #20
 800a424:	f7fe ff16 	bl	8009254 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a428:	9b05      	ldr	r3, [sp, #20]
 800a42a:	9302      	str	r3, [sp, #8]
 800a42c:	9b06      	ldr	r3, [sp, #24]
 800a42e:	9301      	str	r3, [sp, #4]
 800a430:	9400      	str	r4, [sp, #0]
 800a432:	4623      	mov	r3, r4
 800a434:	9a07      	ldr	r2, [sp, #28]
 800a436:	4917      	ldr	r1, [pc, #92]	@ (800a494 <vTaskStartScheduler+0x80>)
 800a438:	4817      	ldr	r0, [pc, #92]	@ (800a498 <vTaskStartScheduler+0x84>)
 800a43a:	f7ff ff7d 	bl	800a338 <xTaskCreateStatic>
 800a43e:	4b17      	ldr	r3, [pc, #92]	@ (800a49c <vTaskStartScheduler+0x88>)
 800a440:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 800a442:	b1c0      	cbz	r0, 800a476 <vTaskStartScheduler+0x62>
			xReturn = xTimerCreateTimerTask();
 800a444:	f000 fcf6 	bl	800ae34 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800a448:	2801      	cmp	r0, #1
 800a44a:	d115      	bne.n	800a478 <vTaskStartScheduler+0x64>
 800a44c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a450:	f383 8811 	msr	BASEPRI, r3
 800a454:	f3bf 8f6f 	isb	sy
 800a458:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800a45c:	4b10      	ldr	r3, [pc, #64]	@ (800a4a0 <vTaskStartScheduler+0x8c>)
 800a45e:	f04f 32ff 	mov.w	r2, #4294967295
 800a462:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a464:	4b0f      	ldr	r3, [pc, #60]	@ (800a4a4 <vTaskStartScheduler+0x90>)
 800a466:	2201      	movs	r2, #1
 800a468:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a46a:	4b0f      	ldr	r3, [pc, #60]	@ (800a4a8 <vTaskStartScheduler+0x94>)
 800a46c:	2200      	movs	r2, #0
 800a46e:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800a470:	f7ff f9ee 	bl	8009850 <xPortStartScheduler>
 800a474:	e003      	b.n	800a47e <vTaskStartScheduler+0x6a>
			xReturn = pdFAIL;
 800a476:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a478:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a47c:	d001      	beq.n	800a482 <vTaskStartScheduler+0x6e>
}
 800a47e:	b008      	add	sp, #32
 800a480:	bd10      	pop	{r4, pc}
 800a482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a486:	f383 8811 	msr	BASEPRI, r3
 800a48a:	f3bf 8f6f 	isb	sy
 800a48e:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a492:	e7fe      	b.n	800a492 <vTaskStartScheduler+0x7e>
 800a494:	08016aac 	.word	0x08016aac
 800a498:	0800a70d 	.word	0x0800a70d
 800a49c:	20002d84 	.word	0x20002d84
 800a4a0:	20002d88 	.word	0x20002d88
 800a4a4:	20002d9c 	.word	0x20002d9c
 800a4a8:	20002da4 	.word	0x20002da4

0800a4ac <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800a4ac:	4a02      	ldr	r2, [pc, #8]	@ (800a4b8 <vTaskSuspendAll+0xc>)
 800a4ae:	6813      	ldr	r3, [r2, #0]
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	6013      	str	r3, [r2, #0]
}
 800a4b4:	4770      	bx	lr
 800a4b6:	bf00      	nop
 800a4b8:	20002d80 	.word	0x20002d80

0800a4bc <xTaskGetTickCount>:
		xTicks = xTickCount;
 800a4bc:	4b01      	ldr	r3, [pc, #4]	@ (800a4c4 <xTaskGetTickCount+0x8>)
 800a4be:	6818      	ldr	r0, [r3, #0]
}
 800a4c0:	4770      	bx	lr
 800a4c2:	bf00      	nop
 800a4c4:	20002da4 	.word	0x20002da4

0800a4c8 <vTaskStepTick>:
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800a4c8:	4b0a      	ldr	r3, [pc, #40]	@ (800a4f4 <vTaskStepTick+0x2c>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4403      	add	r3, r0
 800a4ce:	4a0a      	ldr	r2, [pc, #40]	@ (800a4f8 <vTaskStepTick+0x30>)
 800a4d0:	6812      	ldr	r2, [r2, #0]
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d908      	bls.n	800a4e8 <vTaskStepTick+0x20>
 800a4d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4da:	f383 8811 	msr	BASEPRI, r3
 800a4de:	f3bf 8f6f 	isb	sy
 800a4e2:	f3bf 8f4f 	dsb	sy
 800a4e6:	e7fe      	b.n	800a4e6 <vTaskStepTick+0x1e>
		xTickCount += xTicksToJump;
 800a4e8:	4a02      	ldr	r2, [pc, #8]	@ (800a4f4 <vTaskStepTick+0x2c>)
 800a4ea:	6813      	ldr	r3, [r2, #0]
 800a4ec:	4403      	add	r3, r0
 800a4ee:	6013      	str	r3, [r2, #0]
	}
 800a4f0:	4770      	bx	lr
 800a4f2:	bf00      	nop
 800a4f4:	20002da4 	.word	0x20002da4
 800a4f8:	20002d88 	.word	0x20002d88

0800a4fc <xTaskIncrementTick>:
{
 800a4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4fe:	4b3a      	ldr	r3, [pc, #232]	@ (800a5e8 <xTaskIncrementTick+0xec>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d164      	bne.n	800a5d0 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a506:	4b39      	ldr	r3, [pc, #228]	@ (800a5ec <xTaskIncrementTick+0xf0>)
 800a508:	681d      	ldr	r5, [r3, #0]
 800a50a:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800a50c:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a50e:	b9c5      	cbnz	r5, 800a542 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800a510:	4b37      	ldr	r3, [pc, #220]	@ (800a5f0 <xTaskIncrementTick+0xf4>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	b143      	cbz	r3, 800a52a <xTaskIncrementTick+0x2e>
 800a518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a51c:	f383 8811 	msr	BASEPRI, r3
 800a520:	f3bf 8f6f 	isb	sy
 800a524:	f3bf 8f4f 	dsb	sy
 800a528:	e7fe      	b.n	800a528 <xTaskIncrementTick+0x2c>
 800a52a:	4a31      	ldr	r2, [pc, #196]	@ (800a5f0 <xTaskIncrementTick+0xf4>)
 800a52c:	6811      	ldr	r1, [r2, #0]
 800a52e:	4b31      	ldr	r3, [pc, #196]	@ (800a5f4 <xTaskIncrementTick+0xf8>)
 800a530:	6818      	ldr	r0, [r3, #0]
 800a532:	6010      	str	r0, [r2, #0]
 800a534:	6019      	str	r1, [r3, #0]
 800a536:	4a30      	ldr	r2, [pc, #192]	@ (800a5f8 <xTaskIncrementTick+0xfc>)
 800a538:	6813      	ldr	r3, [r2, #0]
 800a53a:	3301      	adds	r3, #1
 800a53c:	6013      	str	r3, [r2, #0]
 800a53e:	f7ff fd89 	bl	800a054 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a542:	4b2e      	ldr	r3, [pc, #184]	@ (800a5fc <xTaskIncrementTick+0x100>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	42ab      	cmp	r3, r5
 800a548:	d938      	bls.n	800a5bc <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 800a54a:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a54c:	4b2c      	ldr	r3, [pc, #176]	@ (800a600 <xTaskIncrementTick+0x104>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a552:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a556:	009a      	lsls	r2, r3, #2
 800a558:	4b2a      	ldr	r3, [pc, #168]	@ (800a604 <xTaskIncrementTick+0x108>)
 800a55a:	589b      	ldr	r3, [r3, r2]
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d93c      	bls.n	800a5da <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 800a560:	2701      	movs	r7, #1
 800a562:	e03a      	b.n	800a5da <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 800a564:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a566:	4b22      	ldr	r3, [pc, #136]	@ (800a5f0 <xTaskIncrementTick+0xf4>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	b343      	cbz	r3, 800a5c0 <xTaskIncrementTick+0xc4>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a56e:	4b20      	ldr	r3, [pc, #128]	@ (800a5f0 <xTaskIncrementTick+0xf4>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	68db      	ldr	r3, [r3, #12]
 800a574:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a576:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800a578:	429d      	cmp	r5, r3
 800a57a:	d326      	bcc.n	800a5ca <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a57c:	1d26      	adds	r6, r4, #4
 800a57e:	4630      	mov	r0, r6
 800a580:	f7fe ffc8 	bl	8009514 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a584:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a586:	b11b      	cbz	r3, 800a590 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a588:	f104 0018 	add.w	r0, r4, #24
 800a58c:	f7fe ffc2 	bl	8009514 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a590:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a592:	4a1d      	ldr	r2, [pc, #116]	@ (800a608 <xTaskIncrementTick+0x10c>)
 800a594:	6812      	ldr	r2, [r2, #0]
 800a596:	4293      	cmp	r3, r2
 800a598:	d901      	bls.n	800a59e <xTaskIncrementTick+0xa2>
 800a59a:	4a1b      	ldr	r2, [pc, #108]	@ (800a608 <xTaskIncrementTick+0x10c>)
 800a59c:	6013      	str	r3, [r2, #0]
 800a59e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a5a2:	009a      	lsls	r2, r3, #2
 800a5a4:	4631      	mov	r1, r6
 800a5a6:	4817      	ldr	r0, [pc, #92]	@ (800a604 <xTaskIncrementTick+0x108>)
 800a5a8:	4410      	add	r0, r2
 800a5aa:	f7fe ff8f 	bl	80094cc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a5ae:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a5b0:	4b13      	ldr	r3, [pc, #76]	@ (800a600 <xTaskIncrementTick+0x104>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d2d4      	bcs.n	800a564 <xTaskIncrementTick+0x68>
 800a5ba:	e7d4      	b.n	800a566 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 800a5bc:	2700      	movs	r7, #0
 800a5be:	e7d2      	b.n	800a566 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5c0:	4b0e      	ldr	r3, [pc, #56]	@ (800a5fc <xTaskIncrementTick+0x100>)
 800a5c2:	f04f 32ff 	mov.w	r2, #4294967295
 800a5c6:	601a      	str	r2, [r3, #0]
					break;
 800a5c8:	e7c0      	b.n	800a54c <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800a5ca:	4a0c      	ldr	r2, [pc, #48]	@ (800a5fc <xTaskIncrementTick+0x100>)
 800a5cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a5ce:	e7bd      	b.n	800a54c <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 800a5d0:	4a0e      	ldr	r2, [pc, #56]	@ (800a60c <xTaskIncrementTick+0x110>)
 800a5d2:	6813      	ldr	r3, [r2, #0]
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800a5d8:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 800a5da:	4b0d      	ldr	r3, [pc, #52]	@ (800a610 <xTaskIncrementTick+0x114>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	b103      	cbz	r3, 800a5e2 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 800a5e0:	2701      	movs	r7, #1
}
 800a5e2:	4638      	mov	r0, r7
 800a5e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	20002d80 	.word	0x20002d80
 800a5ec:	20002da4 	.word	0x20002da4
 800a5f0:	20002df0 	.word	0x20002df0
 800a5f4:	20002dec 	.word	0x20002dec
 800a5f8:	20002d90 	.word	0x20002d90
 800a5fc:	20002d88 	.word	0x20002d88
 800a600:	2000327c 	.word	0x2000327c
 800a604:	20002e1c 	.word	0x20002e1c
 800a608:	20002da0 	.word	0x20002da0
 800a60c:	20002d98 	.word	0x20002d98
 800a610:	20002d94 	.word	0x20002d94

0800a614 <xTaskResumeAll>:
{
 800a614:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800a616:	4b35      	ldr	r3, [pc, #212]	@ (800a6ec <xTaskResumeAll+0xd8>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	b943      	cbnz	r3, 800a62e <xTaskResumeAll+0x1a>
 800a61c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a620:	f383 8811 	msr	BASEPRI, r3
 800a624:	f3bf 8f6f 	isb	sy
 800a628:	f3bf 8f4f 	dsb	sy
 800a62c:	e7fe      	b.n	800a62c <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800a62e:	f7fe ffd9 	bl	80095e4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800a632:	4b2e      	ldr	r3, [pc, #184]	@ (800a6ec <xTaskResumeAll+0xd8>)
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	3a01      	subs	r2, #1
 800a638:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d14f      	bne.n	800a6e0 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a640:	4b2b      	ldr	r3, [pc, #172]	@ (800a6f0 <xTaskResumeAll+0xdc>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	b90b      	cbnz	r3, 800a64a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800a646:	2400      	movs	r4, #0
 800a648:	e04b      	b.n	800a6e2 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 800a64a:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a64c:	4b29      	ldr	r3, [pc, #164]	@ (800a6f4 <xTaskResumeAll+0xe0>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	b31b      	cbz	r3, 800a69a <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a652:	4b28      	ldr	r3, [pc, #160]	@ (800a6f4 <xTaskResumeAll+0xe0>)
 800a654:	68db      	ldr	r3, [r3, #12]
 800a656:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a658:	f104 0018 	add.w	r0, r4, #24
 800a65c:	f7fe ff5a 	bl	8009514 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a660:	1d25      	adds	r5, r4, #4
 800a662:	4628      	mov	r0, r5
 800a664:	f7fe ff56 	bl	8009514 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a668:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800a66a:	4b23      	ldr	r3, [pc, #140]	@ (800a6f8 <xTaskResumeAll+0xe4>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4298      	cmp	r0, r3
 800a670:	d901      	bls.n	800a676 <xTaskResumeAll+0x62>
 800a672:	4b21      	ldr	r3, [pc, #132]	@ (800a6f8 <xTaskResumeAll+0xe4>)
 800a674:	6018      	str	r0, [r3, #0]
 800a676:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a67a:	4629      	mov	r1, r5
 800a67c:	4b1f      	ldr	r3, [pc, #124]	@ (800a6fc <xTaskResumeAll+0xe8>)
 800a67e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a682:	f7fe ff23 	bl	80094cc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a686:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a688:	4b1d      	ldr	r3, [pc, #116]	@ (800a700 <xTaskResumeAll+0xec>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a68e:	429a      	cmp	r2, r3
 800a690:	d3dc      	bcc.n	800a64c <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800a692:	4b1c      	ldr	r3, [pc, #112]	@ (800a704 <xTaskResumeAll+0xf0>)
 800a694:	2201      	movs	r2, #1
 800a696:	601a      	str	r2, [r3, #0]
 800a698:	e7d8      	b.n	800a64c <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 800a69a:	b10c      	cbz	r4, 800a6a0 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 800a69c:	f7ff fcda 	bl	800a054 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a6a0:	4b19      	ldr	r3, [pc, #100]	@ (800a708 <xTaskResumeAll+0xf4>)
 800a6a2:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a6a4:	b984      	cbnz	r4, 800a6c8 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 800a6a6:	4b17      	ldr	r3, [pc, #92]	@ (800a704 <xTaskResumeAll+0xf0>)
 800a6a8:	681c      	ldr	r4, [r3, #0]
 800a6aa:	b1d4      	cbz	r4, 800a6e2 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 800a6ac:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a6b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6b4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800a6b8:	f3bf 8f4f 	dsb	sy
 800a6bc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800a6c0:	2401      	movs	r4, #1
 800a6c2:	e00e      	b.n	800a6e2 <xTaskResumeAll+0xce>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a6c4:	3c01      	subs	r4, #1
 800a6c6:	d007      	beq.n	800a6d8 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 800a6c8:	f7ff ff18 	bl	800a4fc <xTaskIncrementTick>
 800a6cc:	2800      	cmp	r0, #0
 800a6ce:	d0f9      	beq.n	800a6c4 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 800a6d0:	4b0c      	ldr	r3, [pc, #48]	@ (800a704 <xTaskResumeAll+0xf0>)
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	601a      	str	r2, [r3, #0]
 800a6d6:	e7f5      	b.n	800a6c4 <xTaskResumeAll+0xb0>
						uxPendedTicks = 0;
 800a6d8:	4b0b      	ldr	r3, [pc, #44]	@ (800a708 <xTaskResumeAll+0xf4>)
 800a6da:	2200      	movs	r2, #0
 800a6dc:	601a      	str	r2, [r3, #0]
 800a6de:	e7e2      	b.n	800a6a6 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800a6e0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a6e2:	f7fe ffa1 	bl	8009628 <vPortExitCritical>
}
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	bd38      	pop	{r3, r4, r5, pc}
 800a6ea:	bf00      	nop
 800a6ec:	20002d80 	.word	0x20002d80
 800a6f0:	20002da8 	.word	0x20002da8
 800a6f4:	20002dd8 	.word	0x20002dd8
 800a6f8:	20002da0 	.word	0x20002da0
 800a6fc:	20002e1c 	.word	0x20002e1c
 800a700:	2000327c 	.word	0x2000327c
 800a704:	20002d94 	.word	0x20002d94
 800a708:	20002d98 	.word	0x20002d98

0800a70c <prvIdleTask>:
{
 800a70c:	b508      	push	{r3, lr}
 800a70e:	e003      	b.n	800a718 <prvIdleTask+0xc>
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800a710:	f7ff fc80 	bl	800a014 <prvGetExpectedIdleTime>
			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800a714:	2801      	cmp	r0, #1
 800a716:	d810      	bhi.n	800a73a <prvIdleTask+0x2e>
		prvCheckTasksWaitingTermination();
 800a718:	f7ff fdaa 	bl	800a270 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a71c:	4b14      	ldr	r3, [pc, #80]	@ (800a770 <prvIdleTask+0x64>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	2b01      	cmp	r3, #1
 800a722:	d9f5      	bls.n	800a710 <prvIdleTask+0x4>
				taskYIELD();
 800a724:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a728:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a72c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800a730:	f3bf 8f4f 	dsb	sy
 800a734:	f3bf 8f6f 	isb	sy
 800a738:	e7ea      	b.n	800a710 <prvIdleTask+0x4>
				vTaskSuspendAll();
 800a73a:	f7ff feb7 	bl	800a4ac <vTaskSuspendAll>
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800a73e:	4b0d      	ldr	r3, [pc, #52]	@ (800a774 <prvIdleTask+0x68>)
 800a740:	681a      	ldr	r2, [r3, #0]
 800a742:	4b0d      	ldr	r3, [pc, #52]	@ (800a778 <prvIdleTask+0x6c>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	429a      	cmp	r2, r3
 800a748:	d306      	bcc.n	800a758 <prvIdleTask+0x4c>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800a74a:	f7ff fc63 	bl	800a014 <prvGetExpectedIdleTime>
					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800a74e:	2801      	cmp	r0, #1
 800a750:	d80b      	bhi.n	800a76a <prvIdleTask+0x5e>
				( void ) xTaskResumeAll();
 800a752:	f7ff ff5f 	bl	800a614 <xTaskResumeAll>
 800a756:	e7df      	b.n	800a718 <prvIdleTask+0xc>
 800a758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a75c:	f383 8811 	msr	BASEPRI, r3
 800a760:	f3bf 8f6f 	isb	sy
 800a764:	f3bf 8f4f 	dsb	sy
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800a768:	e7fe      	b.n	800a768 <prvIdleTask+0x5c>
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800a76a:	f7fe ffb1 	bl	80096d0 <vPortSuppressTicksAndSleep>
						traceLOW_POWER_IDLE_END();
 800a76e:	e7f0      	b.n	800a752 <prvIdleTask+0x46>
 800a770:	20002e1c 	.word	0x20002e1c
 800a774:	20002d88 	.word	0x20002d88
 800a778:	20002da4 	.word	0x20002da4

0800a77c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a77c:	4b20      	ldr	r3, [pc, #128]	@ (800a800 <vTaskSwitchContext+0x84>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	b11b      	cbz	r3, 800a78a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800a782:	4b20      	ldr	r3, [pc, #128]	@ (800a804 <vTaskSwitchContext+0x88>)
 800a784:	2201      	movs	r2, #1
 800a786:	601a      	str	r2, [r3, #0]
 800a788:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800a78a:	4b1e      	ldr	r3, [pc, #120]	@ (800a804 <vTaskSwitchContext+0x88>)
 800a78c:	2200      	movs	r2, #0
 800a78e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a790:	4b1d      	ldr	r3, [pc, #116]	@ (800a808 <vTaskSwitchContext+0x8c>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800a798:	008a      	lsls	r2, r1, #2
 800a79a:	491c      	ldr	r1, [pc, #112]	@ (800a80c <vTaskSwitchContext+0x90>)
 800a79c:	588a      	ldr	r2, [r1, r2]
 800a79e:	b95a      	cbnz	r2, 800a7b8 <vTaskSwitchContext+0x3c>
 800a7a0:	b10b      	cbz	r3, 800a7a6 <vTaskSwitchContext+0x2a>
 800a7a2:	3b01      	subs	r3, #1
 800a7a4:	e7f6      	b.n	800a794 <vTaskSwitchContext+0x18>
 800a7a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7aa:	f383 8811 	msr	BASEPRI, r3
 800a7ae:	f3bf 8f6f 	isb	sy
 800a7b2:	f3bf 8f4f 	dsb	sy
 800a7b6:	e7fe      	b.n	800a7b6 <vTaskSwitchContext+0x3a>
 800a7b8:	4608      	mov	r0, r1
 800a7ba:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800a7be:	008a      	lsls	r2, r1, #2
 800a7c0:	4402      	add	r2, r0
 800a7c2:	6851      	ldr	r1, [r2, #4]
 800a7c4:	6849      	ldr	r1, [r1, #4]
 800a7c6:	6051      	str	r1, [r2, #4]
 800a7c8:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800a7cc:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800a7d0:	3208      	adds	r2, #8
 800a7d2:	4402      	add	r2, r0
 800a7d4:	4291      	cmp	r1, r2
 800a7d6:	d00b      	beq.n	800a7f0 <vTaskSwitchContext+0x74>
 800a7d8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800a7dc:	0091      	lsls	r1, r2, #2
 800a7de:	4a0b      	ldr	r2, [pc, #44]	@ (800a80c <vTaskSwitchContext+0x90>)
 800a7e0:	440a      	add	r2, r1
 800a7e2:	6852      	ldr	r2, [r2, #4]
 800a7e4:	68d1      	ldr	r1, [r2, #12]
 800a7e6:	4a0a      	ldr	r2, [pc, #40]	@ (800a810 <vTaskSwitchContext+0x94>)
 800a7e8:	6011      	str	r1, [r2, #0]
 800a7ea:	4a07      	ldr	r2, [pc, #28]	@ (800a808 <vTaskSwitchContext+0x8c>)
 800a7ec:	6013      	str	r3, [r2, #0]
}
 800a7ee:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7f0:	6848      	ldr	r0, [r1, #4]
 800a7f2:	4662      	mov	r2, ip
 800a7f4:	0091      	lsls	r1, r2, #2
 800a7f6:	4a05      	ldr	r2, [pc, #20]	@ (800a80c <vTaskSwitchContext+0x90>)
 800a7f8:	440a      	add	r2, r1
 800a7fa:	6050      	str	r0, [r2, #4]
 800a7fc:	e7ec      	b.n	800a7d8 <vTaskSwitchContext+0x5c>
 800a7fe:	bf00      	nop
 800a800:	20002d80 	.word	0x20002d80
 800a804:	20002d94 	.word	0x20002d94
 800a808:	20002da0 	.word	0x20002da0
 800a80c:	20002e1c 	.word	0x20002e1c
 800a810:	2000327c 	.word	0x2000327c

0800a814 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800a814:	b158      	cbz	r0, 800a82e <vTaskPlaceOnEventList+0x1a>
{
 800a816:	b510      	push	{r4, lr}
 800a818:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a81a:	4a09      	ldr	r2, [pc, #36]	@ (800a840 <vTaskPlaceOnEventList+0x2c>)
 800a81c:	6811      	ldr	r1, [r2, #0]
 800a81e:	3118      	adds	r1, #24
 800a820:	f7fe fe5f 	bl	80094e2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a824:	2101      	movs	r1, #1
 800a826:	4620      	mov	r0, r4
 800a828:	f7ff fd48 	bl	800a2bc <prvAddCurrentTaskToDelayedList>
}
 800a82c:	bd10      	pop	{r4, pc}
 800a82e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a832:	f383 8811 	msr	BASEPRI, r3
 800a836:	f3bf 8f6f 	isb	sy
 800a83a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800a83e:	e7fe      	b.n	800a83e <vTaskPlaceOnEventList+0x2a>
 800a840:	2000327c 	.word	0x2000327c

0800a844 <vTaskPlaceOnEventListRestricted>:
	{
 800a844:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800a846:	b170      	cbz	r0, 800a866 <vTaskPlaceOnEventListRestricted+0x22>
 800a848:	460d      	mov	r5, r1
 800a84a:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a84c:	4a0a      	ldr	r2, [pc, #40]	@ (800a878 <vTaskPlaceOnEventListRestricted+0x34>)
 800a84e:	6811      	ldr	r1, [r2, #0]
 800a850:	3118      	adds	r1, #24
 800a852:	f7fe fe3b 	bl	80094cc <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800a856:	b10c      	cbz	r4, 800a85c <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 800a858:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a85c:	4621      	mov	r1, r4
 800a85e:	4628      	mov	r0, r5
 800a860:	f7ff fd2c 	bl	800a2bc <prvAddCurrentTaskToDelayedList>
	}
 800a864:	bd38      	pop	{r3, r4, r5, pc}
 800a866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a86a:	f383 8811 	msr	BASEPRI, r3
 800a86e:	f3bf 8f6f 	isb	sy
 800a872:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800a876:	e7fe      	b.n	800a876 <vTaskPlaceOnEventListRestricted+0x32>
 800a878:	2000327c 	.word	0x2000327c

0800a87c <xTaskRemoveFromEventList>:
{
 800a87c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a87e:	68c3      	ldr	r3, [r0, #12]
 800a880:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800a882:	b334      	cbz	r4, 800a8d2 <xTaskRemoveFromEventList+0x56>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a884:	f104 0518 	add.w	r5, r4, #24
 800a888:	4628      	mov	r0, r5
 800a88a:	f7fe fe43 	bl	8009514 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a88e:	4b19      	ldr	r3, [pc, #100]	@ (800a8f4 <xTaskRemoveFromEventList+0x78>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	bb3b      	cbnz	r3, 800a8e4 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a894:	1d25      	adds	r5, r4, #4
 800a896:	4628      	mov	r0, r5
 800a898:	f7fe fe3c 	bl	8009514 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a89c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800a89e:	4b16      	ldr	r3, [pc, #88]	@ (800a8f8 <xTaskRemoveFromEventList+0x7c>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4298      	cmp	r0, r3
 800a8a4:	d901      	bls.n	800a8aa <xTaskRemoveFromEventList+0x2e>
 800a8a6:	4b14      	ldr	r3, [pc, #80]	@ (800a8f8 <xTaskRemoveFromEventList+0x7c>)
 800a8a8:	6018      	str	r0, [r3, #0]
 800a8aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a8ae:	4629      	mov	r1, r5
 800a8b0:	4b12      	ldr	r3, [pc, #72]	@ (800a8fc <xTaskRemoveFromEventList+0x80>)
 800a8b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a8b6:	f7fe fe09 	bl	80094cc <vListInsertEnd>
			prvResetNextTaskUnblockTime();
 800a8ba:	f7ff fbcb 	bl	800a054 <prvResetNextTaskUnblockTime>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a8be:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a8c0:	4b0f      	ldr	r3, [pc, #60]	@ (800a900 <xTaskRemoveFromEventList+0x84>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d911      	bls.n	800a8ee <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
 800a8ca:	2001      	movs	r0, #1
 800a8cc:	4b0d      	ldr	r3, [pc, #52]	@ (800a904 <xTaskRemoveFromEventList+0x88>)
 800a8ce:	6018      	str	r0, [r3, #0]
}
 800a8d0:	bd38      	pop	{r3, r4, r5, pc}
 800a8d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8d6:	f383 8811 	msr	BASEPRI, r3
 800a8da:	f3bf 8f6f 	isb	sy
 800a8de:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800a8e2:	e7fe      	b.n	800a8e2 <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a8e4:	4629      	mov	r1, r5
 800a8e6:	4808      	ldr	r0, [pc, #32]	@ (800a908 <xTaskRemoveFromEventList+0x8c>)
 800a8e8:	f7fe fdf0 	bl	80094cc <vListInsertEnd>
 800a8ec:	e7e7      	b.n	800a8be <xTaskRemoveFromEventList+0x42>
		xReturn = pdFALSE;
 800a8ee:	2000      	movs	r0, #0
	return xReturn;
 800a8f0:	e7ee      	b.n	800a8d0 <xTaskRemoveFromEventList+0x54>
 800a8f2:	bf00      	nop
 800a8f4:	20002d80 	.word	0x20002d80
 800a8f8:	20002da0 	.word	0x20002da0
 800a8fc:	20002e1c 	.word	0x20002e1c
 800a900:	2000327c 	.word	0x2000327c
 800a904:	20002d94 	.word	0x20002d94
 800a908:	20002dd8 	.word	0x20002dd8

0800a90c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a90c:	4b03      	ldr	r3, [pc, #12]	@ (800a91c <vTaskInternalSetTimeOutState+0x10>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a912:	4b03      	ldr	r3, [pc, #12]	@ (800a920 <vTaskInternalSetTimeOutState+0x14>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	6043      	str	r3, [r0, #4]
}
 800a918:	4770      	bx	lr
 800a91a:	bf00      	nop
 800a91c:	20002d90 	.word	0x20002d90
 800a920:	20002da4 	.word	0x20002da4

0800a924 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 800a924:	b1d8      	cbz	r0, 800a95e <xTaskCheckForTimeOut+0x3a>
{
 800a926:	b570      	push	{r4, r5, r6, lr}
 800a928:	460c      	mov	r4, r1
 800a92a:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800a92c:	b301      	cbz	r1, 800a970 <xTaskCheckForTimeOut+0x4c>
	taskENTER_CRITICAL();
 800a92e:	f7fe fe59 	bl	80095e4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800a932:	4b1b      	ldr	r3, [pc, #108]	@ (800a9a0 <xTaskCheckForTimeOut+0x7c>)
 800a934:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a936:	686b      	ldr	r3, [r5, #4]
 800a938:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800a93a:	6822      	ldr	r2, [r4, #0]
 800a93c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a940:	d027      	beq.n	800a992 <xTaskCheckForTimeOut+0x6e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a942:	4e18      	ldr	r6, [pc, #96]	@ (800a9a4 <xTaskCheckForTimeOut+0x80>)
 800a944:	6836      	ldr	r6, [r6, #0]
 800a946:	f8d5 c000 	ldr.w	ip, [r5]
 800a94a:	45b4      	cmp	ip, r6
 800a94c:	d001      	beq.n	800a952 <xTaskCheckForTimeOut+0x2e>
 800a94e:	428b      	cmp	r3, r1
 800a950:	d924      	bls.n	800a99c <xTaskCheckForTimeOut+0x78>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a952:	4282      	cmp	r2, r0
 800a954:	d815      	bhi.n	800a982 <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait = 0;
 800a956:	2300      	movs	r3, #0
 800a958:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800a95a:	2401      	movs	r4, #1
 800a95c:	e01a      	b.n	800a994 <xTaskCheckForTimeOut+0x70>
 800a95e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a962:	f383 8811 	msr	BASEPRI, r3
 800a966:	f3bf 8f6f 	isb	sy
 800a96a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800a96e:	e7fe      	b.n	800a96e <xTaskCheckForTimeOut+0x4a>
 800a970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a974:	f383 8811 	msr	BASEPRI, r3
 800a978:	f3bf 8f6f 	isb	sy
 800a97c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800a980:	e7fe      	b.n	800a980 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait -= xElapsedTime;
 800a982:	1a5b      	subs	r3, r3, r1
 800a984:	4413      	add	r3, r2
 800a986:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a988:	4628      	mov	r0, r5
 800a98a:	f7ff ffbf 	bl	800a90c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a98e:	2400      	movs	r4, #0
 800a990:	e000      	b.n	800a994 <xTaskCheckForTimeOut+0x70>
				xReturn = pdFALSE;
 800a992:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a994:	f7fe fe48 	bl	8009628 <vPortExitCritical>
}
 800a998:	4620      	mov	r0, r4
 800a99a:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 800a99c:	2401      	movs	r4, #1
 800a99e:	e7f9      	b.n	800a994 <xTaskCheckForTimeOut+0x70>
 800a9a0:	20002da4 	.word	0x20002da4
 800a9a4:	20002d90 	.word	0x20002d90

0800a9a8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800a9a8:	4b01      	ldr	r3, [pc, #4]	@ (800a9b0 <vTaskMissedYield+0x8>)
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	601a      	str	r2, [r3, #0]
}
 800a9ae:	4770      	bx	lr
 800a9b0:	20002d94 	.word	0x20002d94

0800a9b4 <eTaskConfirmSleepModeStatus>:
		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800a9b4:	4b0a      	ldr	r3, [pc, #40]	@ (800a9e0 <eTaskConfirmSleepModeStatus+0x2c>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	b95b      	cbnz	r3, 800a9d2 <eTaskConfirmSleepModeStatus+0x1e>
		else if( xYieldPending != pdFALSE )
 800a9ba:	4b0a      	ldr	r3, [pc, #40]	@ (800a9e4 <eTaskConfirmSleepModeStatus+0x30>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	b953      	cbnz	r3, 800a9d6 <eTaskConfirmSleepModeStatus+0x22>
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800a9c0:	4b09      	ldr	r3, [pc, #36]	@ (800a9e8 <eTaskConfirmSleepModeStatus+0x34>)
 800a9c2:	681a      	ldr	r2, [r3, #0]
 800a9c4:	4b09      	ldr	r3, [pc, #36]	@ (800a9ec <eTaskConfirmSleepModeStatus+0x38>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	3b01      	subs	r3, #1
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d005      	beq.n	800a9da <eTaskConfirmSleepModeStatus+0x26>
	eSleepModeStatus eReturn = eStandardSleep;
 800a9ce:	2001      	movs	r0, #1
 800a9d0:	4770      	bx	lr
			eReturn = eAbortSleep;
 800a9d2:	2000      	movs	r0, #0
 800a9d4:	4770      	bx	lr
			eReturn = eAbortSleep;
 800a9d6:	2000      	movs	r0, #0
 800a9d8:	4770      	bx	lr
				eReturn = eNoTasksWaitingTimeout;
 800a9da:	2002      	movs	r0, #2
	}
 800a9dc:	4770      	bx	lr
 800a9de:	bf00      	nop
 800a9e0:	20002dd8 	.word	0x20002dd8
 800a9e4:	20002d94 	.word	0x20002d94
 800a9e8:	20002dac 	.word	0x20002dac
 800a9ec:	20002da8 	.word	0x20002da8

0800a9f0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800a9f0:	4b05      	ldr	r3, [pc, #20]	@ (800aa08 <xTaskGetSchedulerState+0x18>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	b133      	cbz	r3, 800aa04 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9f6:	4b05      	ldr	r3, [pc, #20]	@ (800aa0c <xTaskGetSchedulerState+0x1c>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	b10b      	cbz	r3, 800aa00 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800a9fc:	2000      	movs	r0, #0
	}
 800a9fe:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800aa00:	2002      	movs	r0, #2
 800aa02:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aa04:	2001      	movs	r0, #1
 800aa06:	4770      	bx	lr
 800aa08:	20002d9c 	.word	0x20002d9c
 800aa0c:	20002d80 	.word	0x20002d80

0800aa10 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800aa10:	2800      	cmp	r0, #0
 800aa12:	d03b      	beq.n	800aa8c <xTaskPriorityDisinherit+0x7c>
	{
 800aa14:	b538      	push	{r3, r4, r5, lr}
 800aa16:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800aa18:	4b1e      	ldr	r3, [pc, #120]	@ (800aa94 <xTaskPriorityDisinherit+0x84>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4283      	cmp	r3, r0
 800aa1e:	d008      	beq.n	800aa32 <xTaskPriorityDisinherit+0x22>
 800aa20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa24:	f383 8811 	msr	BASEPRI, r3
 800aa28:	f3bf 8f6f 	isb	sy
 800aa2c:	f3bf 8f4f 	dsb	sy
 800aa30:	e7fe      	b.n	800aa30 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800aa32:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800aa34:	b943      	cbnz	r3, 800aa48 <xTaskPriorityDisinherit+0x38>
 800aa36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa3a:	f383 8811 	msr	BASEPRI, r3
 800aa3e:	f3bf 8f6f 	isb	sy
 800aa42:	f3bf 8f4f 	dsb	sy
 800aa46:	e7fe      	b.n	800aa46 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800aa48:	3b01      	subs	r3, #1
 800aa4a:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aa4c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800aa4e:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800aa50:	4291      	cmp	r1, r2
 800aa52:	d01d      	beq.n	800aa90 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aa54:	b10b      	cbz	r3, 800aa5a <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800aa56:	2000      	movs	r0, #0
	}
 800aa58:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa5a:	1d05      	adds	r5, r0, #4
 800aa5c:	4628      	mov	r0, r5
 800aa5e:	f7fe fd59 	bl	8009514 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aa62:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800aa64:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa66:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 800aa6a:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800aa6c:	4b0a      	ldr	r3, [pc, #40]	@ (800aa98 <xTaskPriorityDisinherit+0x88>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4298      	cmp	r0, r3
 800aa72:	d901      	bls.n	800aa78 <xTaskPriorityDisinherit+0x68>
 800aa74:	4b08      	ldr	r3, [pc, #32]	@ (800aa98 <xTaskPriorityDisinherit+0x88>)
 800aa76:	6018      	str	r0, [r3, #0]
 800aa78:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800aa7c:	4629      	mov	r1, r5
 800aa7e:	4b07      	ldr	r3, [pc, #28]	@ (800aa9c <xTaskPriorityDisinherit+0x8c>)
 800aa80:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800aa84:	f7fe fd22 	bl	80094cc <vListInsertEnd>
					xReturn = pdTRUE;
 800aa88:	2001      	movs	r0, #1
 800aa8a:	e7e5      	b.n	800aa58 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800aa8c:	2000      	movs	r0, #0
	}
 800aa8e:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800aa90:	2000      	movs	r0, #0
 800aa92:	e7e1      	b.n	800aa58 <xTaskPriorityDisinherit+0x48>
 800aa94:	2000327c 	.word	0x2000327c
 800aa98:	20002da0 	.word	0x20002da0
 800aa9c:	20002e1c 	.word	0x20002e1c

0800aaa0 <xTaskNotifyWait>:
	{
 800aaa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaa2:	4606      	mov	r6, r0
 800aaa4:	460f      	mov	r7, r1
 800aaa6:	4614      	mov	r4, r2
 800aaa8:	461d      	mov	r5, r3
		taskENTER_CRITICAL();
 800aaaa:	f7fe fd9b 	bl	80095e4 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800aaae:	4b21      	ldr	r3, [pc, #132]	@ (800ab34 <xTaskNotifyWait+0x94>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800aab6:	b2d2      	uxtb	r2, r2
 800aab8:	2a02      	cmp	r2, #2
 800aaba:	d00a      	beq.n	800aad2 <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800aabc:	4a1d      	ldr	r2, [pc, #116]	@ (800ab34 <xTaskNotifyWait+0x94>)
 800aabe:	6811      	ldr	r1, [r2, #0]
 800aac0:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 800aac2:	ea23 0306 	bic.w	r3, r3, r6
 800aac6:	654b      	str	r3, [r1, #84]	@ 0x54
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800aac8:	6813      	ldr	r3, [r2, #0]
 800aaca:	2201      	movs	r2, #1
 800aacc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
				if( xTicksToWait > ( TickType_t ) 0 )
 800aad0:	b9cd      	cbnz	r5, 800ab06 <xTaskNotifyWait+0x66>
		taskEXIT_CRITICAL();
 800aad2:	f7fe fda9 	bl	8009628 <vPortExitCritical>
		taskENTER_CRITICAL();
 800aad6:	f7fe fd85 	bl	80095e4 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 800aada:	b11c      	cbz	r4, 800aae4 <xTaskNotifyWait+0x44>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800aadc:	4b15      	ldr	r3, [pc, #84]	@ (800ab34 <xTaskNotifyWait+0x94>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aae2:	6023      	str	r3, [r4, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800aae4:	4b13      	ldr	r3, [pc, #76]	@ (800ab34 <xTaskNotifyWait+0x94>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800aaec:	b2db      	uxtb	r3, r3
 800aaee:	2b02      	cmp	r3, #2
 800aaf0:	d018      	beq.n	800ab24 <xTaskNotifyWait+0x84>
				xReturn = pdFALSE;
 800aaf2:	2400      	movs	r4, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aaf4:	4b0f      	ldr	r3, [pc, #60]	@ (800ab34 <xTaskNotifyWait+0x94>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		taskEXIT_CRITICAL();
 800aafe:	f7fe fd93 	bl	8009628 <vPortExitCritical>
	}
 800ab02:	4620      	mov	r0, r4
 800ab04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ab06:	4611      	mov	r1, r2
 800ab08:	4628      	mov	r0, r5
 800ab0a:	f7ff fbd7 	bl	800a2bc <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800ab0e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ab12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab16:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ab1a:	f3bf 8f4f 	dsb	sy
 800ab1e:	f3bf 8f6f 	isb	sy
 800ab22:	e7d6      	b.n	800aad2 <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800ab24:	4b03      	ldr	r3, [pc, #12]	@ (800ab34 <xTaskNotifyWait+0x94>)
 800ab26:	681a      	ldr	r2, [r3, #0]
 800ab28:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800ab2a:	ea23 0307 	bic.w	r3, r3, r7
 800ab2e:	6553      	str	r3, [r2, #84]	@ 0x54
				xReturn = pdTRUE;
 800ab30:	2401      	movs	r4, #1
 800ab32:	e7df      	b.n	800aaf4 <xTaskNotifyWait+0x54>
 800ab34:	2000327c 	.word	0x2000327c

0800ab38 <xTaskGenericNotify>:
	{
 800ab38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToNotify );
 800ab3a:	b1a8      	cbz	r0, 800ab68 <xTaskGenericNotify+0x30>
 800ab3c:	460e      	mov	r6, r1
 800ab3e:	4614      	mov	r4, r2
 800ab40:	461d      	mov	r5, r3
 800ab42:	4607      	mov	r7, r0
		taskENTER_CRITICAL();
 800ab44:	f7fe fd4e 	bl	80095e4 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 800ab48:	b10d      	cbz	r5, 800ab4e <xTaskGenericNotify+0x16>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ab4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab4c:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ab4e:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 800ab52:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ab54:	2202      	movs	r2, #2
 800ab56:	f887 2058 	strb.w	r2, [r7, #88]	@ 0x58
			switch( eAction )
 800ab5a:	2c04      	cmp	r4, #4
 800ab5c:	d821      	bhi.n	800aba2 <xTaskGenericNotify+0x6a>
 800ab5e:	e8df f004 	tbb	[pc, r4]
 800ab62:	0c0f      	.short	0x0c0f
 800ab64:	1a16      	.short	0x1a16
 800ab66:	1c          	.byte	0x1c
 800ab67:	00          	.byte	0x00
 800ab68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab6c:	f383 8811 	msr	BASEPRI, r3
 800ab70:	f3bf 8f6f 	isb	sy
 800ab74:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToNotify );
 800ab78:	e7fe      	b.n	800ab78 <xTaskGenericNotify+0x40>
					pxTCB->ulNotifiedValue |= ulValue;
 800ab7a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ab7c:	4332      	orrs	r2, r6
 800ab7e:	657a      	str	r2, [r7, #84]	@ 0x54
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	d01b      	beq.n	800abbc <xTaskGenericNotify+0x84>
 800ab84:	2401      	movs	r4, #1
		taskEXIT_CRITICAL();
 800ab86:	f7fe fd4f 	bl	8009628 <vPortExitCritical>
	}
 800ab8a:	4620      	mov	r0, r4
 800ab8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					( pxTCB->ulNotifiedValue )++;
 800ab8e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ab90:	3201      	adds	r2, #1
 800ab92:	657a      	str	r2, [r7, #84]	@ 0x54
					break;
 800ab94:	e7f4      	b.n	800ab80 <xTaskGenericNotify+0x48>
					pxTCB->ulNotifiedValue = ulValue;
 800ab96:	657e      	str	r6, [r7, #84]	@ 0x54
					break;
 800ab98:	e7f2      	b.n	800ab80 <xTaskGenericNotify+0x48>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ab9a:	2b02      	cmp	r3, #2
 800ab9c:	d040      	beq.n	800ac20 <xTaskGenericNotify+0xe8>
						pxTCB->ulNotifiedValue = ulValue;
 800ab9e:	657e      	str	r6, [r7, #84]	@ 0x54
 800aba0:	e7ee      	b.n	800ab80 <xTaskGenericNotify+0x48>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800aba2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800aba4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800aba8:	d0ea      	beq.n	800ab80 <xTaskGenericNotify+0x48>
 800abaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abae:	f383 8811 	msr	BASEPRI, r3
 800abb2:	f3bf 8f6f 	isb	sy
 800abb6:	f3bf 8f4f 	dsb	sy
 800abba:	e7fe      	b.n	800abba <xTaskGenericNotify+0x82>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800abbc:	1d3c      	adds	r4, r7, #4
 800abbe:	4620      	mov	r0, r4
 800abc0:	f7fe fca8 	bl	8009514 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800abc4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800abc6:	4b18      	ldr	r3, [pc, #96]	@ (800ac28 <xTaskGenericNotify+0xf0>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4298      	cmp	r0, r3
 800abcc:	d901      	bls.n	800abd2 <xTaskGenericNotify+0x9a>
 800abce:	4b16      	ldr	r3, [pc, #88]	@ (800ac28 <xTaskGenericNotify+0xf0>)
 800abd0:	6018      	str	r0, [r3, #0]
 800abd2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800abd6:	4621      	mov	r1, r4
 800abd8:	4b14      	ldr	r3, [pc, #80]	@ (800ac2c <xTaskGenericNotify+0xf4>)
 800abda:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800abde:	f7fe fc75 	bl	80094cc <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800abe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abe4:	b143      	cbz	r3, 800abf8 <xTaskGenericNotify+0xc0>
 800abe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abea:	f383 8811 	msr	BASEPRI, r3
 800abee:	f3bf 8f6f 	isb	sy
 800abf2:	f3bf 8f4f 	dsb	sy
 800abf6:	e7fe      	b.n	800abf6 <xTaskGenericNotify+0xbe>
					prvResetNextTaskUnblockTime();
 800abf8:	f7ff fa2c 	bl	800a054 <prvResetNextTaskUnblockTime>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800abfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800abfe:	4b0c      	ldr	r3, [pc, #48]	@ (800ac30 <xTaskGenericNotify+0xf8>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d90d      	bls.n	800ac24 <xTaskGenericNotify+0xec>
					taskYIELD_IF_USING_PREEMPTION();
 800ac08:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ac0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac10:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ac14:	f3bf 8f4f 	dsb	sy
 800ac18:	f3bf 8f6f 	isb	sy
 800ac1c:	2401      	movs	r4, #1
 800ac1e:	e7b2      	b.n	800ab86 <xTaskGenericNotify+0x4e>
						xReturn = pdFAIL;
 800ac20:	2400      	movs	r4, #0
 800ac22:	e7b0      	b.n	800ab86 <xTaskGenericNotify+0x4e>
 800ac24:	2401      	movs	r4, #1
 800ac26:	e7ae      	b.n	800ab86 <xTaskGenericNotify+0x4e>
 800ac28:	20002da0 	.word	0x20002da0
 800ac2c:	20002e1c 	.word	0x20002e1c
 800ac30:	2000327c 	.word	0x2000327c

0800ac34 <xTaskGenericNotifyFromISR>:
		configASSERT( xTaskToNotify );
 800ac34:	b310      	cbz	r0, 800ac7c <xTaskGenericNotifyFromISR+0x48>
	{
 800ac36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac3a:	460e      	mov	r6, r1
 800ac3c:	4614      	mov	r4, r2
 800ac3e:	461d      	mov	r5, r3
 800ac40:	4607      	mov	r7, r0
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ac42:	f7fe fe65 	bl	8009910 <vPortValidateInterruptPriority>
	__asm volatile
 800ac46:	f3ef 8311 	mrs	r3, BASEPRI
 800ac4a:	f04f 0250 	mov.w	r2, #80	@ 0x50
 800ac4e:	f382 8811 	msr	BASEPRI, r2
 800ac52:	f3bf 8f6f 	isb	sy
 800ac56:	f3bf 8f4f 	dsb	sy
 800ac5a:	4698      	mov	r8, r3
			if( pulPreviousNotificationValue != NULL )
 800ac5c:	b10d      	cbz	r5, 800ac62 <xTaskGenericNotifyFromISR+0x2e>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ac5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac60:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ac62:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 800ac66:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ac68:	2202      	movs	r2, #2
 800ac6a:	f887 2058 	strb.w	r2, [r7, #88]	@ 0x58
			switch( eAction )
 800ac6e:	2c04      	cmp	r4, #4
 800ac70:	d821      	bhi.n	800acb6 <xTaskGenericNotifyFromISR+0x82>
 800ac72:	e8df f004 	tbb	[pc, r4]
 800ac76:	0c0f      	.short	0x0c0f
 800ac78:	1a16      	.short	0x1a16
 800ac7a:	1c          	.byte	0x1c
 800ac7b:	00          	.byte	0x00
	__asm volatile
 800ac7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac80:	f383 8811 	msr	BASEPRI, r3
 800ac84:	f3bf 8f6f 	isb	sy
 800ac88:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToNotify );
 800ac8c:	e7fe      	b.n	800ac8c <xTaskGenericNotifyFromISR+0x58>
					pxTCB->ulNotifiedValue |= ulValue;
 800ac8e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ac90:	4332      	orrs	r2, r6
 800ac92:	657a      	str	r2, [r7, #84]	@ 0x54
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	d01b      	beq.n	800acd0 <xTaskGenericNotifyFromISR+0x9c>
 800ac98:	2001      	movs	r0, #1
	__asm volatile
 800ac9a:	f388 8811 	msr	BASEPRI, r8
	}
 800ac9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					( pxTCB->ulNotifiedValue )++;
 800aca2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800aca4:	3201      	adds	r2, #1
 800aca6:	657a      	str	r2, [r7, #84]	@ 0x54
					break;
 800aca8:	e7f4      	b.n	800ac94 <xTaskGenericNotifyFromISR+0x60>
					pxTCB->ulNotifiedValue = ulValue;
 800acaa:	657e      	str	r6, [r7, #84]	@ 0x54
					break;
 800acac:	e7f2      	b.n	800ac94 <xTaskGenericNotifyFromISR+0x60>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800acae:	2b02      	cmp	r3, #2
 800acb0:	d044      	beq.n	800ad3c <xTaskGenericNotifyFromISR+0x108>
						pxTCB->ulNotifiedValue = ulValue;
 800acb2:	657e      	str	r6, [r7, #84]	@ 0x54
 800acb4:	e7ee      	b.n	800ac94 <xTaskGenericNotifyFromISR+0x60>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800acb6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800acb8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800acbc:	d0ea      	beq.n	800ac94 <xTaskGenericNotifyFromISR+0x60>
	__asm volatile
 800acbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acc2:	f383 8811 	msr	BASEPRI, r3
 800acc6:	f3bf 8f6f 	isb	sy
 800acca:	f3bf 8f4f 	dsb	sy
 800acce:	e7fe      	b.n	800acce <xTaskGenericNotifyFromISR+0x9a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800acd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acd2:	b143      	cbz	r3, 800ace6 <xTaskGenericNotifyFromISR+0xb2>
 800acd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acd8:	f383 8811 	msr	BASEPRI, r3
 800acdc:	f3bf 8f6f 	isb	sy
 800ace0:	f3bf 8f4f 	dsb	sy
 800ace4:	e7fe      	b.n	800ace4 <xTaskGenericNotifyFromISR+0xb0>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ace6:	4b17      	ldr	r3, [pc, #92]	@ (800ad44 <xTaskGenericNotifyFromISR+0x110>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	bb0b      	cbnz	r3, 800ad30 <xTaskGenericNotifyFromISR+0xfc>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800acec:	1d3c      	adds	r4, r7, #4
 800acee:	4620      	mov	r0, r4
 800acf0:	f7fe fc10 	bl	8009514 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800acf4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800acf6:	4b14      	ldr	r3, [pc, #80]	@ (800ad48 <xTaskGenericNotifyFromISR+0x114>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	4298      	cmp	r0, r3
 800acfc:	d901      	bls.n	800ad02 <xTaskGenericNotifyFromISR+0xce>
 800acfe:	4b12      	ldr	r3, [pc, #72]	@ (800ad48 <xTaskGenericNotifyFromISR+0x114>)
 800ad00:	6018      	str	r0, [r3, #0]
 800ad02:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ad06:	4621      	mov	r1, r4
 800ad08:	4b10      	ldr	r3, [pc, #64]	@ (800ad4c <xTaskGenericNotifyFromISR+0x118>)
 800ad0a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ad0e:	f7fe fbdd 	bl	80094cc <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ad12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad14:	4b0e      	ldr	r3, [pc, #56]	@ (800ad50 <xTaskGenericNotifyFromISR+0x11c>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d910      	bls.n	800ad40 <xTaskGenericNotifyFromISR+0x10c>
					if( pxHigherPriorityTaskWoken != NULL )
 800ad1e:	9b06      	ldr	r3, [sp, #24]
 800ad20:	b113      	cbz	r3, 800ad28 <xTaskGenericNotifyFromISR+0xf4>
						*pxHigherPriorityTaskWoken = pdTRUE;
 800ad22:	2301      	movs	r3, #1
 800ad24:	9a06      	ldr	r2, [sp, #24]
 800ad26:	6013      	str	r3, [r2, #0]
					xYieldPending = pdTRUE;
 800ad28:	2001      	movs	r0, #1
 800ad2a:	4b0a      	ldr	r3, [pc, #40]	@ (800ad54 <xTaskGenericNotifyFromISR+0x120>)
 800ad2c:	6018      	str	r0, [r3, #0]
 800ad2e:	e7b4      	b.n	800ac9a <xTaskGenericNotifyFromISR+0x66>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800ad30:	f107 0118 	add.w	r1, r7, #24
 800ad34:	4808      	ldr	r0, [pc, #32]	@ (800ad58 <xTaskGenericNotifyFromISR+0x124>)
 800ad36:	f7fe fbc9 	bl	80094cc <vListInsertEnd>
 800ad3a:	e7ea      	b.n	800ad12 <xTaskGenericNotifyFromISR+0xde>
						xReturn = pdFAIL;
 800ad3c:	2000      	movs	r0, #0
 800ad3e:	e7ac      	b.n	800ac9a <xTaskGenericNotifyFromISR+0x66>
 800ad40:	2001      	movs	r0, #1
 800ad42:	e7aa      	b.n	800ac9a <xTaskGenericNotifyFromISR+0x66>
 800ad44:	20002d80 	.word	0x20002d80
 800ad48:	20002da0 	.word	0x20002da0
 800ad4c:	20002e1c 	.word	0x20002e1c
 800ad50:	2000327c 	.word	0x2000327c
 800ad54:	20002d94 	.word	0x20002d94
 800ad58:	20002dd8 	.word	0x20002dd8

0800ad5c <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ad5c:	4b06      	ldr	r3, [pc, #24]	@ (800ad78 <prvGetNextExpireTime+0x1c>)
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	6813      	ldr	r3, [r2, #0]
 800ad62:	b92b      	cbnz	r3, 800ad70 <prvGetNextExpireTime+0x14>
 800ad64:	2301      	movs	r3, #1
 800ad66:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ad68:	b923      	cbnz	r3, 800ad74 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ad6a:	68d3      	ldr	r3, [r2, #12]
 800ad6c:	6818      	ldr	r0, [r3, #0]
 800ad6e:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ad70:	2300      	movs	r3, #0
 800ad72:	e7f8      	b.n	800ad66 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ad74:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800ad76:	4770      	bx	lr
 800ad78:	20003380 	.word	0x20003380

0800ad7c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ad7c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ad7e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ad80:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ad82:	4291      	cmp	r1, r2
 800ad84:	d80c      	bhi.n	800ada0 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad86:	1ad2      	subs	r2, r2, r3
 800ad88:	6983      	ldr	r3, [r0, #24]
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d301      	bcc.n	800ad92 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ad8e:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800ad90:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ad92:	1d01      	adds	r1, r0, #4
 800ad94:	4b09      	ldr	r3, [pc, #36]	@ (800adbc <prvInsertTimerInActiveList+0x40>)
 800ad96:	6818      	ldr	r0, [r3, #0]
 800ad98:	f7fe fba3 	bl	80094e2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800ad9c:	2000      	movs	r0, #0
 800ad9e:	e7f7      	b.n	800ad90 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d201      	bcs.n	800ada8 <prvInsertTimerInActiveList+0x2c>
 800ada4:	4299      	cmp	r1, r3
 800ada6:	d206      	bcs.n	800adb6 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ada8:	1d01      	adds	r1, r0, #4
 800adaa:	4b05      	ldr	r3, [pc, #20]	@ (800adc0 <prvInsertTimerInActiveList+0x44>)
 800adac:	6818      	ldr	r0, [r3, #0]
 800adae:	f7fe fb98 	bl	80094e2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800adb2:	2000      	movs	r0, #0
 800adb4:	e7ec      	b.n	800ad90 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 800adb6:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800adb8:	e7ea      	b.n	800ad90 <prvInsertTimerInActiveList+0x14>
 800adba:	bf00      	nop
 800adbc:	2000337c 	.word	0x2000337c
 800adc0:	20003380 	.word	0x20003380

0800adc4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800adc4:	b530      	push	{r4, r5, lr}
 800adc6:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800adc8:	f7fe fc0c 	bl	80095e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800adcc:	4b11      	ldr	r3, [pc, #68]	@ (800ae14 <prvCheckForValidListAndQueue+0x50>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	b11b      	cbz	r3, 800adda <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800add2:	f7fe fc29 	bl	8009628 <vPortExitCritical>
}
 800add6:	b003      	add	sp, #12
 800add8:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800adda:	4d0f      	ldr	r5, [pc, #60]	@ (800ae18 <prvCheckForValidListAndQueue+0x54>)
 800addc:	4628      	mov	r0, r5
 800adde:	f7fe fb67 	bl	80094b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ade2:	4c0e      	ldr	r4, [pc, #56]	@ (800ae1c <prvCheckForValidListAndQueue+0x58>)
 800ade4:	4620      	mov	r0, r4
 800ade6:	f7fe fb63 	bl	80094b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800adea:	4b0d      	ldr	r3, [pc, #52]	@ (800ae20 <prvCheckForValidListAndQueue+0x5c>)
 800adec:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800adee:	4b0d      	ldr	r3, [pc, #52]	@ (800ae24 <prvCheckForValidListAndQueue+0x60>)
 800adf0:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800adf2:	2300      	movs	r3, #0
 800adf4:	9300      	str	r3, [sp, #0]
 800adf6:	4b0c      	ldr	r3, [pc, #48]	@ (800ae28 <prvCheckForValidListAndQueue+0x64>)
 800adf8:	4a0c      	ldr	r2, [pc, #48]	@ (800ae2c <prvCheckForValidListAndQueue+0x68>)
 800adfa:	2110      	movs	r1, #16
 800adfc:	200a      	movs	r0, #10
 800adfe:	f7fe fea8 	bl	8009b52 <xQueueGenericCreateStatic>
 800ae02:	4b04      	ldr	r3, [pc, #16]	@ (800ae14 <prvCheckForValidListAndQueue+0x50>)
 800ae04:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800ae06:	2800      	cmp	r0, #0
 800ae08:	d0e3      	beq.n	800add2 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ae0a:	4909      	ldr	r1, [pc, #36]	@ (800ae30 <prvCheckForValidListAndQueue+0x6c>)
 800ae0c:	f7ff f8c4 	bl	8009f98 <vQueueAddToRegistry>
 800ae10:	e7df      	b.n	800add2 <prvCheckForValidListAndQueue+0xe>
 800ae12:	bf00      	nop
 800ae14:	20003378 	.word	0x20003378
 800ae18:	20003398 	.word	0x20003398
 800ae1c:	20003384 	.word	0x20003384
 800ae20:	20003380 	.word	0x20003380
 800ae24:	2000337c 	.word	0x2000337c
 800ae28:	20003280 	.word	0x20003280
 800ae2c:	200032d0 	.word	0x200032d0
 800ae30:	08016ab4 	.word	0x08016ab4

0800ae34 <xTimerCreateTimerTask>:
{
 800ae34:	b510      	push	{r4, lr}
 800ae36:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800ae38:	f7ff ffc4 	bl	800adc4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800ae3c:	4b12      	ldr	r3, [pc, #72]	@ (800ae88 <xTimerCreateTimerTask+0x54>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	b1cb      	cbz	r3, 800ae76 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ae42:	2400      	movs	r4, #0
 800ae44:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ae46:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ae48:	aa07      	add	r2, sp, #28
 800ae4a:	a906      	add	r1, sp, #24
 800ae4c:	a805      	add	r0, sp, #20
 800ae4e:	f7fe fa0d 	bl	800926c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ae52:	9b05      	ldr	r3, [sp, #20]
 800ae54:	9302      	str	r3, [sp, #8]
 800ae56:	9b06      	ldr	r3, [sp, #24]
 800ae58:	9301      	str	r3, [sp, #4]
 800ae5a:	2302      	movs	r3, #2
 800ae5c:	9300      	str	r3, [sp, #0]
 800ae5e:	4623      	mov	r3, r4
 800ae60:	9a07      	ldr	r2, [sp, #28]
 800ae62:	490a      	ldr	r1, [pc, #40]	@ (800ae8c <xTimerCreateTimerTask+0x58>)
 800ae64:	480a      	ldr	r0, [pc, #40]	@ (800ae90 <xTimerCreateTimerTask+0x5c>)
 800ae66:	f7ff fa67 	bl	800a338 <xTaskCreateStatic>
 800ae6a:	4b0a      	ldr	r3, [pc, #40]	@ (800ae94 <xTimerCreateTimerTask+0x60>)
 800ae6c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800ae6e:	b110      	cbz	r0, 800ae76 <xTimerCreateTimerTask+0x42>
}
 800ae70:	2001      	movs	r0, #1
 800ae72:	b008      	add	sp, #32
 800ae74:	bd10      	pop	{r4, pc}
 800ae76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae7a:	f383 8811 	msr	BASEPRI, r3
 800ae7e:	f3bf 8f6f 	isb	sy
 800ae82:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800ae86:	e7fe      	b.n	800ae86 <xTimerCreateTimerTask+0x52>
 800ae88:	20003378 	.word	0x20003378
 800ae8c:	08016abc 	.word	0x08016abc
 800ae90:	0800b199 	.word	0x0800b199
 800ae94:	20003374 	.word	0x20003374

0800ae98 <xTimerGenericCommand>:
	configASSERT( xTimer );
 800ae98:	b1b8      	cbz	r0, 800aeca <xTimerGenericCommand+0x32>
 800ae9a:	469c      	mov	ip, r3
 800ae9c:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800ae9e:	4818      	ldr	r0, [pc, #96]	@ (800af00 <xTimerGenericCommand+0x68>)
 800aea0:	6800      	ldr	r0, [r0, #0]
 800aea2:	b358      	cbz	r0, 800aefc <xTimerGenericCommand+0x64>
{
 800aea4:	b500      	push	{lr}
 800aea6:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 800aea8:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aeaa:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aeac:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aeae:	2905      	cmp	r1, #5
 800aeb0:	dc1c      	bgt.n	800aeec <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aeb2:	f7ff fd9d 	bl	800a9f0 <xTaskGetSchedulerState>
 800aeb6:	2802      	cmp	r0, #2
 800aeb8:	d010      	beq.n	800aedc <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aeba:	2300      	movs	r3, #0
 800aebc:	461a      	mov	r2, r3
 800aebe:	4669      	mov	r1, sp
 800aec0:	480f      	ldr	r0, [pc, #60]	@ (800af00 <xTimerGenericCommand+0x68>)
 800aec2:	6800      	ldr	r0, [r0, #0]
 800aec4:	f7fe fe8f 	bl	8009be6 <xQueueGenericSend>
 800aec8:	e015      	b.n	800aef6 <xTimerGenericCommand+0x5e>
 800aeca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aece:	f383 8811 	msr	BASEPRI, r3
 800aed2:	f3bf 8f6f 	isb	sy
 800aed6:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800aeda:	e7fe      	b.n	800aeda <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aedc:	2300      	movs	r3, #0
 800aede:	9a06      	ldr	r2, [sp, #24]
 800aee0:	4669      	mov	r1, sp
 800aee2:	4807      	ldr	r0, [pc, #28]	@ (800af00 <xTimerGenericCommand+0x68>)
 800aee4:	6800      	ldr	r0, [r0, #0]
 800aee6:	f7fe fe7e 	bl	8009be6 <xQueueGenericSend>
 800aeea:	e004      	b.n	800aef6 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aeec:	2300      	movs	r3, #0
 800aeee:	4662      	mov	r2, ip
 800aef0:	4669      	mov	r1, sp
 800aef2:	f7fe ff3c 	bl	8009d6e <xQueueGenericSendFromISR>
}
 800aef6:	b005      	add	sp, #20
 800aef8:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 800aefc:	2000      	movs	r0, #0
}
 800aefe:	4770      	bx	lr
 800af00:	20003378 	.word	0x20003378

0800af04 <prvSwitchTimerLists>:
{
 800af04:	b570      	push	{r4, r5, r6, lr}
 800af06:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af08:	4b1b      	ldr	r3, [pc, #108]	@ (800af78 <prvSwitchTimerLists+0x74>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	681a      	ldr	r2, [r3, #0]
 800af0e:	b362      	cbz	r2, 800af6a <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af10:	68db      	ldr	r3, [r3, #12]
 800af12:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af14:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af16:	1d25      	adds	r5, r4, #4
 800af18:	4628      	mov	r0, r5
 800af1a:	f7fe fafb 	bl	8009514 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af1e:	6a23      	ldr	r3, [r4, #32]
 800af20:	4620      	mov	r0, r4
 800af22:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af24:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800af28:	f013 0f04 	tst.w	r3, #4
 800af2c:	d0ec      	beq.n	800af08 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800af2e:	69a3      	ldr	r3, [r4, #24]
 800af30:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800af32:	429e      	cmp	r6, r3
 800af34:	d207      	bcs.n	800af46 <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800af36:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af38:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800af3a:	4629      	mov	r1, r5
 800af3c:	4b0e      	ldr	r3, [pc, #56]	@ (800af78 <prvSwitchTimerLists+0x74>)
 800af3e:	6818      	ldr	r0, [r3, #0]
 800af40:	f7fe facf 	bl	80094e2 <vListInsert>
 800af44:	e7e0      	b.n	800af08 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af46:	2100      	movs	r1, #0
 800af48:	9100      	str	r1, [sp, #0]
 800af4a:	460b      	mov	r3, r1
 800af4c:	4632      	mov	r2, r6
 800af4e:	4620      	mov	r0, r4
 800af50:	f7ff ffa2 	bl	800ae98 <xTimerGenericCommand>
				configASSERT( xResult );
 800af54:	2800      	cmp	r0, #0
 800af56:	d1d7      	bne.n	800af08 <prvSwitchTimerLists+0x4>
 800af58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af5c:	f383 8811 	msr	BASEPRI, r3
 800af60:	f3bf 8f6f 	isb	sy
 800af64:	f3bf 8f4f 	dsb	sy
 800af68:	e7fe      	b.n	800af68 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 800af6a:	4a04      	ldr	r2, [pc, #16]	@ (800af7c <prvSwitchTimerLists+0x78>)
 800af6c:	6810      	ldr	r0, [r2, #0]
 800af6e:	4902      	ldr	r1, [pc, #8]	@ (800af78 <prvSwitchTimerLists+0x74>)
 800af70:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800af72:	6013      	str	r3, [r2, #0]
}
 800af74:	b002      	add	sp, #8
 800af76:	bd70      	pop	{r4, r5, r6, pc}
 800af78:	20003380 	.word	0x20003380
 800af7c:	2000337c 	.word	0x2000337c

0800af80 <prvSampleTimeNow>:
{
 800af80:	b538      	push	{r3, r4, r5, lr}
 800af82:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800af84:	f7ff fa9a 	bl	800a4bc <xTaskGetTickCount>
 800af88:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800af8a:	4b07      	ldr	r3, [pc, #28]	@ (800afa8 <prvSampleTimeNow+0x28>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4283      	cmp	r3, r0
 800af90:	d805      	bhi.n	800af9e <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800af92:	2300      	movs	r3, #0
 800af94:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800af96:	4b04      	ldr	r3, [pc, #16]	@ (800afa8 <prvSampleTimeNow+0x28>)
 800af98:	601c      	str	r4, [r3, #0]
}
 800af9a:	4620      	mov	r0, r4
 800af9c:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800af9e:	f7ff ffb1 	bl	800af04 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800afa2:	2301      	movs	r3, #1
 800afa4:	602b      	str	r3, [r5, #0]
 800afa6:	e7f6      	b.n	800af96 <prvSampleTimeNow+0x16>
 800afa8:	20003370 	.word	0x20003370

0800afac <prvProcessExpiredTimer>:
{
 800afac:	b570      	push	{r4, r5, r6, lr}
 800afae:	b082      	sub	sp, #8
 800afb0:	4606      	mov	r6, r0
 800afb2:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afb4:	4917      	ldr	r1, [pc, #92]	@ (800b014 <prvProcessExpiredTimer+0x68>)
 800afb6:	6809      	ldr	r1, [r1, #0]
 800afb8:	68c9      	ldr	r1, [r1, #12]
 800afba:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800afbc:	1d20      	adds	r0, r4, #4
 800afbe:	f7fe faa9 	bl	8009514 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800afc2:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 800afc6:	f01c 0f04 	tst.w	ip, #4
 800afca:	d108      	bne.n	800afde <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800afcc:	f02c 0c01 	bic.w	ip, ip, #1
 800afd0:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800afd4:	6a23      	ldr	r3, [r4, #32]
 800afd6:	4620      	mov	r0, r4
 800afd8:	4798      	blx	r3
}
 800afda:	b002      	add	sp, #8
 800afdc:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800afde:	69a1      	ldr	r1, [r4, #24]
 800afe0:	4633      	mov	r3, r6
 800afe2:	462a      	mov	r2, r5
 800afe4:	4431      	add	r1, r6
 800afe6:	4620      	mov	r0, r4
 800afe8:	f7ff fec8 	bl	800ad7c <prvInsertTimerInActiveList>
 800afec:	2800      	cmp	r0, #0
 800afee:	d0f1      	beq.n	800afd4 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aff0:	2100      	movs	r1, #0
 800aff2:	9100      	str	r1, [sp, #0]
 800aff4:	460b      	mov	r3, r1
 800aff6:	4632      	mov	r2, r6
 800aff8:	4620      	mov	r0, r4
 800affa:	f7ff ff4d 	bl	800ae98 <xTimerGenericCommand>
			configASSERT( xResult );
 800affe:	2800      	cmp	r0, #0
 800b000:	d1e8      	bne.n	800afd4 <prvProcessExpiredTimer+0x28>
 800b002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b006:	f383 8811 	msr	BASEPRI, r3
 800b00a:	f3bf 8f6f 	isb	sy
 800b00e:	f3bf 8f4f 	dsb	sy
 800b012:	e7fe      	b.n	800b012 <prvProcessExpiredTimer+0x66>
 800b014:	20003380 	.word	0x20003380

0800b018 <prvProcessTimerOrBlockTask>:
{
 800b018:	b570      	push	{r4, r5, r6, lr}
 800b01a:	b082      	sub	sp, #8
 800b01c:	4606      	mov	r6, r0
 800b01e:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800b020:	f7ff fa44 	bl	800a4ac <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b024:	a801      	add	r0, sp, #4
 800b026:	f7ff ffab 	bl	800af80 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800b02a:	9b01      	ldr	r3, [sp, #4]
 800b02c:	bb33      	cbnz	r3, 800b07c <prvProcessTimerOrBlockTask+0x64>
 800b02e:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b030:	b9e4      	cbnz	r4, 800b06c <prvProcessTimerOrBlockTask+0x54>
 800b032:	42b0      	cmp	r0, r6
 800b034:	d213      	bcs.n	800b05e <prvProcessTimerOrBlockTask+0x46>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b036:	4622      	mov	r2, r4
 800b038:	1b71      	subs	r1, r6, r5
 800b03a:	4b12      	ldr	r3, [pc, #72]	@ (800b084 <prvProcessTimerOrBlockTask+0x6c>)
 800b03c:	6818      	ldr	r0, [r3, #0]
 800b03e:	f7fe ffbf 	bl	8009fc0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b042:	f7ff fae7 	bl	800a614 <xTaskResumeAll>
 800b046:	b9d8      	cbnz	r0, 800b080 <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 800b048:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b04c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b050:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b054:	f3bf 8f4f 	dsb	sy
 800b058:	f3bf 8f6f 	isb	sy
 800b05c:	e010      	b.n	800b080 <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 800b05e:	f7ff fad9 	bl	800a614 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b062:	4629      	mov	r1, r5
 800b064:	4630      	mov	r0, r6
 800b066:	f7ff ffa1 	bl	800afac <prvProcessExpiredTimer>
 800b06a:	e009      	b.n	800b080 <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b06c:	4a06      	ldr	r2, [pc, #24]	@ (800b088 <prvProcessTimerOrBlockTask+0x70>)
 800b06e:	6812      	ldr	r2, [r2, #0]
 800b070:	6812      	ldr	r2, [r2, #0]
 800b072:	b90a      	cbnz	r2, 800b078 <prvProcessTimerOrBlockTask+0x60>
 800b074:	2401      	movs	r4, #1
 800b076:	e7de      	b.n	800b036 <prvProcessTimerOrBlockTask+0x1e>
 800b078:	461c      	mov	r4, r3
 800b07a:	e7dc      	b.n	800b036 <prvProcessTimerOrBlockTask+0x1e>
			( void ) xTaskResumeAll();
 800b07c:	f7ff faca 	bl	800a614 <xTaskResumeAll>
}
 800b080:	b002      	add	sp, #8
 800b082:	bd70      	pop	{r4, r5, r6, pc}
 800b084:	20003378 	.word	0x20003378
 800b088:	2000337c 	.word	0x2000337c

0800b08c <prvProcessReceivedCommands>:
{
 800b08c:	b510      	push	{r4, lr}
 800b08e:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b090:	e002      	b.n	800b098 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b092:	9b04      	ldr	r3, [sp, #16]
 800b094:	2b00      	cmp	r3, #0
 800b096:	da0f      	bge.n	800b0b8 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b098:	2200      	movs	r2, #0
 800b09a:	a904      	add	r1, sp, #16
 800b09c:	4b3d      	ldr	r3, [pc, #244]	@ (800b194 <prvProcessReceivedCommands+0x108>)
 800b09e:	6818      	ldr	r0, [r3, #0]
 800b0a0:	f7fe fecb 	bl	8009e3a <xQueueReceive>
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	d073      	beq.n	800b190 <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b0a8:	9b04      	ldr	r3, [sp, #16]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	daf1      	bge.n	800b092 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b0ae:	9907      	ldr	r1, [sp, #28]
 800b0b0:	9806      	ldr	r0, [sp, #24]
 800b0b2:	9b05      	ldr	r3, [sp, #20]
 800b0b4:	4798      	blx	r3
 800b0b6:	e7ec      	b.n	800b092 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b0b8:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b0ba:	6963      	ldr	r3, [r4, #20]
 800b0bc:	b113      	cbz	r3, 800b0c4 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b0be:	1d20      	adds	r0, r4, #4
 800b0c0:	f7fe fa28 	bl	8009514 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b0c4:	a803      	add	r0, sp, #12
 800b0c6:	f7ff ff5b 	bl	800af80 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800b0ca:	9b04      	ldr	r3, [sp, #16]
 800b0cc:	2b09      	cmp	r3, #9
 800b0ce:	d8e3      	bhi.n	800b098 <prvProcessReceivedCommands+0xc>
 800b0d0:	e8df f003 	tbb	[pc, r3]
 800b0d4:	30050505 	.word	0x30050505
 800b0d8:	05055037 	.word	0x05055037
 800b0dc:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b0de:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800b0e2:	f043 0301 	orr.w	r3, r3, #1
 800b0e6:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b0ea:	9b05      	ldr	r3, [sp, #20]
 800b0ec:	69a1      	ldr	r1, [r4, #24]
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	4419      	add	r1, r3
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	f7ff fe42 	bl	800ad7c <prvInsertTimerInActiveList>
 800b0f8:	2800      	cmp	r0, #0
 800b0fa:	d0cd      	beq.n	800b098 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b0fc:	6a23      	ldr	r3, [r4, #32]
 800b0fe:	4620      	mov	r0, r4
 800b100:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b102:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800b106:	f013 0f04 	tst.w	r3, #4
 800b10a:	d0c5      	beq.n	800b098 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b10c:	69a2      	ldr	r2, [r4, #24]
 800b10e:	2100      	movs	r1, #0
 800b110:	9100      	str	r1, [sp, #0]
 800b112:	460b      	mov	r3, r1
 800b114:	9805      	ldr	r0, [sp, #20]
 800b116:	4402      	add	r2, r0
 800b118:	4620      	mov	r0, r4
 800b11a:	f7ff febd 	bl	800ae98 <xTimerGenericCommand>
							configASSERT( xResult );
 800b11e:	2800      	cmp	r0, #0
 800b120:	d1ba      	bne.n	800b098 <prvProcessReceivedCommands+0xc>
 800b122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b126:	f383 8811 	msr	BASEPRI, r3
 800b12a:	f3bf 8f6f 	isb	sy
 800b12e:	f3bf 8f4f 	dsb	sy
 800b132:	e7fe      	b.n	800b132 <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b134:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800b138:	f023 0301 	bic.w	r3, r3, #1
 800b13c:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 800b140:	e7aa      	b.n	800b098 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b142:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800b146:	f043 0301 	orr.w	r3, r3, #1
 800b14a:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b14e:	9905      	ldr	r1, [sp, #20]
 800b150:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b152:	b131      	cbz	r1, 800b162 <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b154:	4603      	mov	r3, r0
 800b156:	4602      	mov	r2, r0
 800b158:	4401      	add	r1, r0
 800b15a:	4620      	mov	r0, r4
 800b15c:	f7ff fe0e 	bl	800ad7c <prvInsertTimerInActiveList>
					break;
 800b160:	e79a      	b.n	800b098 <prvProcessReceivedCommands+0xc>
 800b162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b166:	f383 8811 	msr	BASEPRI, r3
 800b16a:	f3bf 8f6f 	isb	sy
 800b16e:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b172:	e7fe      	b.n	800b172 <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b174:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800b178:	f013 0f02 	tst.w	r3, #2
 800b17c:	d004      	beq.n	800b188 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b17e:	f023 0301 	bic.w	r3, r3, #1
 800b182:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800b186:	e787      	b.n	800b098 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 800b188:	4620      	mov	r0, r4
 800b18a:	f7fe f959 	bl	8009440 <vPortFree>
 800b18e:	e783      	b.n	800b098 <prvProcessReceivedCommands+0xc>
}
 800b190:	b008      	add	sp, #32
 800b192:	bd10      	pop	{r4, pc}
 800b194:	20003378 	.word	0x20003378

0800b198 <prvTimerTask>:
{
 800b198:	b500      	push	{lr}
 800b19a:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b19c:	a801      	add	r0, sp, #4
 800b19e:	f7ff fddd 	bl	800ad5c <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b1a2:	9901      	ldr	r1, [sp, #4]
 800b1a4:	f7ff ff38 	bl	800b018 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800b1a8:	f7ff ff70 	bl	800b08c <prvProcessReceivedCommands>
	for( ;; )
 800b1ac:	e7f6      	b.n	800b19c <prvTimerTask+0x4>
	...

0800b1b0 <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800b1b0:	2804      	cmp	r0, #4
 800b1b2:	d807      	bhi.n	800b1c4 <LmHandlerPackageIsInitialized+0x14>
{
 800b1b4:	b508      	push	{r3, lr}
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800b1b6:	4b05      	ldr	r3, [pc, #20]	@ (800b1cc <LmHandlerPackageIsInitialized+0x1c>)
 800b1b8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b1bc:	689b      	ldr	r3, [r3, #8]
 800b1be:	b11b      	cbz	r3, 800b1c8 <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800b1c0:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 800b1c2:	bd08      	pop	{r3, pc}
        return false;
 800b1c4:	2000      	movs	r0, #0
}
 800b1c6:	4770      	bx	lr
        return false;
 800b1c8:	2000      	movs	r0, #0
 800b1ca:	e7fa      	b.n	800b1c2 <LmHandlerPackageIsInitialized+0x12>
 800b1cc:	200034ec 	.word	0x200034ec

0800b1d0 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800b1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1d2:	4605      	mov	r5, r0
 800b1d4:	460f      	mov	r7, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800b1d6:	2400      	movs	r4, #0
 800b1d8:	e005      	b.n	800b1e6 <LmHandlerPackagesNotify+0x16>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800b1da:	69db      	ldr	r3, [r3, #28]
 800b1dc:	b10b      	cbz	r3, 800b1e2 <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800b1de:	4638      	mov	r0, r7
 800b1e0:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800b1e2:	3401      	adds	r4, #1
 800b1e4:	b264      	sxtb	r4, r4
 800b1e6:	2c04      	cmp	r4, #4
 800b1e8:	dc34      	bgt.n	800b254 <LmHandlerPackagesNotify+0x84>
        if( LmHandlerPackages[i] != NULL )
 800b1ea:	4626      	mov	r6, r4
 800b1ec:	4b1a      	ldr	r3, [pc, #104]	@ (800b258 <LmHandlerPackagesNotify+0x88>)
 800b1ee:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d0f5      	beq.n	800b1e2 <LmHandlerPackagesNotify+0x12>
            switch( notifyType )
 800b1f6:	2d03      	cmp	r5, #3
 800b1f8:	d8f3      	bhi.n	800b1e2 <LmHandlerPackagesNotify+0x12>
 800b1fa:	a201      	add	r2, pc, #4	@ (adr r2, 800b200 <LmHandlerPackagesNotify+0x30>)
 800b1fc:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 800b200:	0800b1db 	.word	0x0800b1db
 800b204:	0800b211 	.word	0x0800b211
 800b208:	0800b23d 	.word	0x0800b23d
 800b20c:	0800b249 	.word	0x0800b249
                        break;
                    }
                case PACKAGE_MCPS_INDICATION:
                    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800b210:	6a1a      	ldr	r2, [r3, #32]
 800b212:	2a00      	cmp	r2, #0
 800b214:	d0e5      	beq.n	800b1e2 <LmHandlerPackagesNotify+0x12>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 800b216:	781a      	ldrb	r2, [r3, #0]
 800b218:	78fb      	ldrb	r3, [r7, #3]
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d007      	beq.n	800b22e <LmHandlerPackagesNotify+0x5e>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 800b21e:	2c00      	cmp	r4, #0
 800b220:	d1df      	bne.n	800b1e2 <LmHandlerPackagesNotify+0x12>
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
 800b222:	4b0d      	ldr	r3, [pc, #52]	@ (800b258 <LmHandlerPackagesNotify+0x88>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	68db      	ldr	r3, [r3, #12]
 800b228:	4798      	blx	r3
 800b22a:	2800      	cmp	r0, #0
 800b22c:	d0d9      	beq.n	800b1e2 <LmHandlerPackagesNotify+0x12>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800b22e:	4b0a      	ldr	r3, [pc, #40]	@ (800b258 <LmHandlerPackagesNotify+0x88>)
 800b230:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800b234:	6a1b      	ldr	r3, [r3, #32]
 800b236:	4638      	mov	r0, r7
 800b238:	4798      	blx	r3
 800b23a:	e7d2      	b.n	800b1e2 <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800b23c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d0cf      	beq.n	800b1e2 <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800b242:	4638      	mov	r0, r7
 800b244:	4798      	blx	r3
 800b246:	e7cc      	b.n	800b1e2 <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800b248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d0c9      	beq.n	800b1e2 <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800b24e:	4638      	mov	r0, r7
 800b250:	4798      	blx	r3
 800b252:	e7c6      	b.n	800b1e2 <LmHandlerPackagesNotify+0x12>
                        break;
                    }
            }
        }
    }
}
 800b254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b256:	bf00      	nop
 800b258:	200034ec 	.word	0x200034ec

0800b25c <MlmeIndication>:
{
 800b25c:	b510      	push	{r4, lr}
 800b25e:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 800b260:	4b11      	ldr	r3, [pc, #68]	@ (800b2a8 <MlmeIndication+0x4c>)
 800b262:	2200      	movs	r2, #0
 800b264:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800b266:	7842      	ldrb	r2, [r0, #1]
 800b268:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800b26a:	f990 2002 	ldrsb.w	r2, [r0, #2]
 800b26e:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800b270:	f9b1 2000 	ldrsh.w	r2, [r1]
 800b274:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800b276:	f991 2002 	ldrsb.w	r2, [r1, #2]
 800b27a:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800b27c:	78ca      	ldrb	r2, [r1, #3]
 800b27e:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800b280:	6842      	ldr	r2, [r0, #4]
 800b282:	60da      	str	r2, [r3, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800b284:	4b09      	ldr	r3, [pc, #36]	@ (800b2ac <MlmeIndication+0x50>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b28a:	b13b      	cbz	r3, 800b29c <MlmeIndication+0x40>
 800b28c:	7802      	ldrb	r2, [r0, #0]
 800b28e:	2a0b      	cmp	r2, #11
 800b290:	d004      	beq.n	800b29c <MlmeIndication+0x40>
 800b292:	2a0f      	cmp	r2, #15
 800b294:	d002      	beq.n	800b29c <MlmeIndication+0x40>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800b296:	4904      	ldr	r1, [pc, #16]	@ (800b2a8 <MlmeIndication+0x4c>)
 800b298:	2000      	movs	r0, #0
 800b29a:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800b29c:	4621      	mov	r1, r4
 800b29e:	2003      	movs	r0, #3
 800b2a0:	f7ff ff96 	bl	800b1d0 <LmHandlerPackagesNotify>
}
 800b2a4:	bd10      	pop	{r4, pc}
 800b2a6:	bf00      	nop
 800b2a8:	20000080 	.word	0x20000080
 800b2ac:	200034d0 	.word	0x200034d0

0800b2b0 <McpsConfirm>:
{
 800b2b0:	b510      	push	{r4, lr}
 800b2b2:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 800b2b4:	4b0d      	ldr	r3, [pc, #52]	@ (800b2ec <McpsConfirm+0x3c>)
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800b2ba:	7842      	ldrb	r2, [r0, #1]
 800b2bc:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800b2be:	f990 2002 	ldrsb.w	r2, [r0, #2]
 800b2c2:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800b2c4:	68c2      	ldr	r2, [r0, #12]
 800b2c6:	60da      	str	r2, [r3, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800b2c8:	f990 2003 	ldrsb.w	r2, [r0, #3]
 800b2cc:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800b2ce:	6902      	ldr	r2, [r0, #16]
 800b2d0:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800b2d2:	7902      	ldrb	r2, [r0, #4]
 800b2d4:	725a      	strb	r2, [r3, #9]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800b2d6:	4b06      	ldr	r3, [pc, #24]	@ (800b2f0 <McpsConfirm+0x40>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2dc:	b10b      	cbz	r3, 800b2e2 <McpsConfirm+0x32>
        LmHandlerCallbacks->OnTxData( &TxParams );
 800b2de:	4803      	ldr	r0, [pc, #12]	@ (800b2ec <McpsConfirm+0x3c>)
 800b2e0:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800b2e2:	4621      	mov	r1, r4
 800b2e4:	2000      	movs	r0, #0
 800b2e6:	f7ff ff73 	bl	800b1d0 <LmHandlerPackagesNotify>
}
 800b2ea:	bd10      	pop	{r4, pc}
 800b2ec:	20000094 	.word	0x20000094
 800b2f0:	200034d0 	.word	0x200034d0

0800b2f4 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800b2f4:	b510      	push	{r4, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800b2f6:	2400      	movs	r4, #0
 800b2f8:	e001      	b.n	800b2fe <LmHandlerPackageIsTxPending+0xa>
 800b2fa:	3401      	adds	r4, #1
 800b2fc:	b264      	sxtb	r4, r4
 800b2fe:	2c04      	cmp	r4, #4
 800b300:	dc0c      	bgt.n	800b31c <LmHandlerPackageIsTxPending+0x28>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
 800b302:	4b08      	ldr	r3, [pc, #32]	@ (800b324 <LmHandlerPackageIsTxPending+0x30>)
 800b304:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d0f6      	beq.n	800b2fa <LmHandlerPackageIsTxPending+0x6>
 800b30c:	2c00      	cmp	r4, #0
 800b30e:	d0f4      	beq.n	800b2fa <LmHandlerPackageIsTxPending+0x6>
#else
        if( LmHandlerPackages[i] != NULL )
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800b310:	691b      	ldr	r3, [r3, #16]
 800b312:	4798      	blx	r3
 800b314:	4603      	mov	r3, r0
 800b316:	2800      	cmp	r0, #0
 800b318:	d0ef      	beq.n	800b2fa <LmHandlerPackageIsTxPending+0x6>
 800b31a:	e000      	b.n	800b31e <LmHandlerPackageIsTxPending+0x2a>
            {
                return true;
            }
        }
    }
    return false;
 800b31c:	2300      	movs	r3, #0
}
 800b31e:	4618      	mov	r0, r3
 800b320:	bd10      	pop	{r4, pc}
 800b322:	bf00      	nop
 800b324:	200034ec 	.word	0x200034ec

0800b328 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800b328:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800b32a:	2400      	movs	r4, #0
 800b32c:	e001      	b.n	800b332 <LmHandlerPackagesProcess+0xa>
 800b32e:	3401      	adds	r4, #1
 800b330:	b264      	sxtb	r4, r4
 800b332:	2c04      	cmp	r4, #4
 800b334:	dc12      	bgt.n	800b35c <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800b336:	4b0a      	ldr	r3, [pc, #40]	@ (800b360 <LmHandlerPackagesProcess+0x38>)
 800b338:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d0f6      	beq.n	800b32e <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800b340:	695b      	ldr	r3, [r3, #20]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800b342:	2b00      	cmp	r3, #0
 800b344:	d0f3      	beq.n	800b32e <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800b346:	b2e0      	uxtb	r0, r4
 800b348:	f7ff ff32 	bl	800b1b0 <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800b34c:	2800      	cmp	r0, #0
 800b34e:	d0ee      	beq.n	800b32e <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 800b350:	4b03      	ldr	r3, [pc, #12]	@ (800b360 <LmHandlerPackagesProcess+0x38>)
 800b352:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b356:	695b      	ldr	r3, [r3, #20]
 800b358:	4798      	blx	r3
 800b35a:	e7e8      	b.n	800b32e <LmHandlerPackagesProcess+0x6>
        }
    }
}
 800b35c:	bd38      	pop	{r3, r4, r5, pc}
 800b35e:	bf00      	nop
 800b360:	200034ec 	.word	0x200034ec

0800b364 <LmHandlerDeviceTimeReq>:
{
 800b364:	b500      	push	{lr}
 800b366:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 800b368:	230a      	movs	r3, #10
 800b36a:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 800b36e:	a801      	add	r0, sp, #4
 800b370:	f003 fef6 	bl	800f160 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800b374:	9a05      	ldr	r2, [sp, #20]
 800b376:	4b04      	ldr	r3, [pc, #16]	@ (800b388 <LmHandlerDeviceTimeReq+0x24>)
 800b378:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 800b37a:	b910      	cbnz	r0, 800b382 <LmHandlerDeviceTimeReq+0x1e>
}
 800b37c:	b007      	add	sp, #28
 800b37e:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800b382:	f04f 30ff 	mov.w	r0, #4294967295
 800b386:	e7f9      	b.n	800b37c <LmHandlerDeviceTimeReq+0x18>
 800b388:	200034a4 	.word	0x200034a4

0800b38c <LmHandlerProcess>:
{
 800b38c:	b508      	push	{r3, lr}
    LoRaMacProcess( );
 800b38e:	f002 ffed 	bl	800e36c <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 800b392:	f7ff ffc9 	bl	800b328 <LmHandlerPackagesProcess>
    if( LmHandlerPackageIsTxPending( ) == true )
 800b396:	f7ff ffad 	bl	800b2f4 <LmHandlerPackageIsTxPending>
}
 800b39a:	bd08      	pop	{r3, pc}

0800b39c <LmHandlerGetDutyCycleWaitTime>:
}
 800b39c:	4b01      	ldr	r3, [pc, #4]	@ (800b3a4 <LmHandlerGetDutyCycleWaitTime+0x8>)
 800b39e:	6818      	ldr	r0, [r3, #0]
 800b3a0:	4770      	bx	lr
 800b3a2:	bf00      	nop
 800b3a4:	200034a4 	.word	0x200034a4

0800b3a8 <LmHandlerJoinStatus>:
{
 800b3a8:	b500      	push	{lr}
 800b3aa:	b08b      	sub	sp, #44	@ 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	f88d 3000 	strb.w	r3, [sp]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800b3b2:	4668      	mov	r0, sp
 800b3b4:	f003 fabc 	bl	800e930 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 800b3b8:	b920      	cbnz	r0, 800b3c4 <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800b3ba:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800b3be:	b110      	cbz	r0, 800b3c6 <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 800b3c0:	2001      	movs	r0, #1
 800b3c2:	e000      	b.n	800b3c6 <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 800b3c4:	2000      	movs	r0, #0
}
 800b3c6:	b00b      	add	sp, #44	@ 0x2c
 800b3c8:	f85d fb04 	ldr.w	pc, [sp], #4

0800b3cc <LmHandlerRequestClass>:
{
 800b3cc:	b510      	push	{r4, lr}
 800b3ce:	b08a      	sub	sp, #40	@ 0x28
 800b3d0:	4604      	mov	r4, r0
    if( LoRaMacIsBusy() == true )
 800b3d2:	f002 ffa9 	bl	800e328 <LoRaMacIsBusy>
 800b3d6:	bbb0      	cbnz	r0, 800b446 <LmHandlerRequestClass+0x7a>
    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800b3d8:	f7ff ffe6 	bl	800b3a8 <LmHandlerJoinStatus>
 800b3dc:	2801      	cmp	r0, #1
 800b3de:	d135      	bne.n	800b44c <LmHandlerRequestClass+0x80>
    mibReq.Type = MIB_DEVICE_CLASS;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800b3e6:	4668      	mov	r0, sp
 800b3e8:	f003 faa2 	bl	800e930 <LoRaMacMibGetRequestConfirm>
 800b3ec:	bb88      	cbnz	r0, 800b452 <LmHandlerRequestClass+0x86>
    currentClass = mibReq.Param.Class;
 800b3ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if( currentClass != newClass )
 800b3f2:	42a3      	cmp	r3, r4
 800b3f4:	d030      	beq.n	800b458 <LmHandlerRequestClass+0x8c>
        switch( newClass )
 800b3f6:	2c01      	cmp	r4, #1
 800b3f8:	d030      	beq.n	800b45c <LmHandlerRequestClass+0x90>
 800b3fa:	2c02      	cmp	r4, #2
 800b3fc:	d014      	beq.n	800b428 <LmHandlerRequestClass+0x5c>
 800b3fe:	b114      	cbz	r4, 800b406 <LmHandlerRequestClass+0x3a>
 800b400:	2000      	movs	r0, #0
}
 800b402:	b00a      	add	sp, #40	@ 0x28
 800b404:	bd10      	pop	{r4, pc}
                    if( currentClass != CLASS_A )
 800b406:	b90b      	cbnz	r3, 800b40c <LmHandlerRequestClass+0x40>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800b408:	2000      	movs	r0, #0
 800b40a:	e7fa      	b.n	800b402 <LmHandlerRequestClass+0x36>
                        mibReq.Param.Class = newClass;
 800b40c:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800b410:	4668      	mov	r0, sp
 800b412:	f003 fbe7 	bl	800ebe4 <LoRaMacMibSetRequestConfirm>
 800b416:	bb20      	cbnz	r0, 800b462 <LmHandlerRequestClass+0x96>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800b418:	4b18      	ldr	r3, [pc, #96]	@ (800b47c <LmHandlerRequestClass+0xb0>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b41e:	b31b      	cbz	r3, 800b468 <LmHandlerRequestClass+0x9c>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800b420:	4620      	mov	r0, r4
 800b422:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800b424:	2000      	movs	r0, #0
 800b426:	e7ec      	b.n	800b402 <LmHandlerRequestClass+0x36>
                    if( currentClass != CLASS_A )
 800b428:	bb03      	cbnz	r3, 800b46c <LmHandlerRequestClass+0xa0>
                        mibReq.Param.Class = newClass;
 800b42a:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800b42e:	4668      	mov	r0, sp
 800b430:	f003 fbd8 	bl	800ebe4 <LoRaMacMibSetRequestConfirm>
 800b434:	b9e8      	cbnz	r0, 800b472 <LmHandlerRequestClass+0xa6>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800b436:	4b11      	ldr	r3, [pc, #68]	@ (800b47c <LmHandlerRequestClass+0xb0>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b43c:	b1e3      	cbz	r3, 800b478 <LmHandlerRequestClass+0xac>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800b43e:	4620      	mov	r0, r4
 800b440:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800b442:	2000      	movs	r0, #0
 800b444:	e7dd      	b.n	800b402 <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_BUSY_ERROR;
 800b446:	f06f 0001 	mvn.w	r0, #1
 800b44a:	e7da      	b.n	800b402 <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800b44c:	f06f 0002 	mvn.w	r0, #2
 800b450:	e7d7      	b.n	800b402 <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_ERROR;
 800b452:	f04f 30ff 	mov.w	r0, #4294967295
 800b456:	e7d4      	b.n	800b402 <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800b458:	2000      	movs	r0, #0
 800b45a:	e7d2      	b.n	800b402 <LmHandlerRequestClass+0x36>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800b45c:	f04f 30ff 	mov.w	r0, #4294967295
 800b460:	e7cf      	b.n	800b402 <LmHandlerRequestClass+0x36>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800b462:	f04f 30ff 	mov.w	r0, #4294967295
 800b466:	e7cc      	b.n	800b402 <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800b468:	2000      	movs	r0, #0
 800b46a:	e7ca      	b.n	800b402 <LmHandlerRequestClass+0x36>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800b46c:	f04f 30ff 	mov.w	r0, #4294967295
 800b470:	e7c7      	b.n	800b402 <LmHandlerRequestClass+0x36>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800b472:	f04f 30ff 	mov.w	r0, #4294967295
 800b476:	e7c4      	b.n	800b402 <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800b478:	2000      	movs	r0, #0
 800b47a:	e7c2      	b.n	800b402 <LmHandlerRequestClass+0x36>
 800b47c:	200034d0 	.word	0x200034d0

0800b480 <LmHandlerJoin>:
{
 800b480:	b510      	push	{r4, lr}
 800b482:	b090      	sub	sp, #64	@ 0x40
    mlmeReq.Type = MLME_JOIN;
 800b484:	2301      	movs	r3, #1
 800b486:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800b48a:	4b35      	ldr	r3, [pc, #212]	@ (800b560 <LmHandlerJoin+0xe0>)
 800b48c:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800b490:	f88d 2031 	strb.w	r2, [sp, #49]	@ 0x31
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800b494:	f993 c005 	ldrsb.w	ip, [r3, #5]
 800b498:	f88d c032 	strb.w	ip, [sp, #50]	@ 0x32
    if( mode == ACTIVATION_TYPE_OTAA )
 800b49c:	2802      	cmp	r0, #2
 800b49e:	d023      	beq.n	800b4e8 <LmHandlerJoin+0x68>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800b4a0:	2001      	movs	r0, #1
 800b4a2:	f88d 0030 	strb.w	r0, [sp, #48]	@ 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800b4a6:	4b2f      	ldr	r3, [pc, #188]	@ (800b564 <LmHandlerJoin+0xe4>)
 800b4a8:	71d8      	strb	r0, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800b4aa:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800b4ac:	f883 c005 	strb.w	ip, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800b4b0:	2000      	movs	r0, #0
 800b4b2:	7198      	strb	r0, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800b4b4:	7219      	strb	r1, [r3, #8]
        if( CtxRestoreDone == false )
 800b4b6:	4b2c      	ldr	r3, [pc, #176]	@ (800b568 <LmHandlerJoin+0xe8>)
 800b4b8:	781b      	ldrb	r3, [r3, #0]
 800b4ba:	b30b      	cbz	r3, 800b500 <LmHandlerJoin+0x80>
        LoRaMacStart();
 800b4bc:	f003 f978 	bl	800e7b0 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	f88d 3004 	strb.w	r3, [sp, #4]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800b4c6:	f88d 3008 	strb.w	r3, [sp, #8]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800b4ca:	a801      	add	r0, sp, #4
 800b4cc:	f003 fb8a 	bl	800ebe4 <LoRaMacMibSetRequestConfirm>
        if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800b4d0:	4b26      	ldr	r3, [pc, #152]	@ (800b56c <LmHandlerJoin+0xec>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4d6:	b10b      	cbz	r3, 800b4dc <LmHandlerJoin+0x5c>
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800b4d8:	4822      	ldr	r0, [pc, #136]	@ (800b564 <LmHandlerJoin+0xe4>)
 800b4da:	4798      	blx	r3
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800b4dc:	4b20      	ldr	r3, [pc, #128]	@ (800b560 <LmHandlerJoin+0xe0>)
 800b4de:	7858      	ldrb	r0, [r3, #1]
 800b4e0:	f7ff ff74 	bl	800b3cc <LmHandlerRequestClass>
}
 800b4e4:	b010      	add	sp, #64	@ 0x40
 800b4e6:	bd10      	pop	{r4, pc}
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800b4e8:	2202      	movs	r2, #2
 800b4ea:	f88d 2030 	strb.w	r2, [sp, #48]	@ 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800b4ee:	4b1d      	ldr	r3, [pc, #116]	@ (800b564 <LmHandlerJoin+0xe4>)
 800b4f0:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800b4f2:	7219      	strb	r1, [r3, #8]
        LoRaMacStart();
 800b4f4:	f003 f95c 	bl	800e7b0 <LoRaMacStart>
        LoRaMacMlmeRequest( &mlmeReq );
 800b4f8:	a80b      	add	r0, sp, #44	@ 0x2c
 800b4fa:	f003 fe31 	bl	800f160 <LoRaMacMlmeRequest>
 800b4fe:	e7f1      	b.n	800b4e4 <LmHandlerJoin+0x64>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800b500:	231e      	movs	r3, #30
 800b502:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800b506:	f88d 2008 	strb.w	r2, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800b50a:	a801      	add	r0, sp, #4
 800b50c:	f003 fb6a 	bl	800ebe4 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800b510:	231f      	movs	r3, #31
 800b512:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800b516:	4c12      	ldr	r4, [pc, #72]	@ (800b560 <LmHandlerJoin+0xe0>)
 800b518:	f994 3004 	ldrsb.w	r3, [r4, #4]
 800b51c:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800b520:	a801      	add	r0, sp, #4
 800b522:	f003 fb5f 	bl	800ebe4 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800b526:	2321      	movs	r3, #33	@ 0x21
 800b528:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800b52c:	f994 3005 	ldrsb.w	r3, [r4, #5]
 800b530:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800b534:	a801      	add	r0, sp, #4
 800b536:	f003 fb55 	bl	800ebe4 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800b53a:	2320      	movs	r3, #32
 800b53c:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800b540:	f994 3005 	ldrsb.w	r3, [r4, #5]
 800b544:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800b548:	a801      	add	r0, sp, #4
 800b54a:	f003 fb4b 	bl	800ebe4 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800b54e:	2328      	movs	r3, #40	@ 0x28
 800b550:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800b554:	4b06      	ldr	r3, [pc, #24]	@ (800b570 <LmHandlerJoin+0xf0>)
 800b556:	9302      	str	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800b558:	a801      	add	r0, sp, #4
 800b55a:	f003 fb43 	bl	800ebe4 <LoRaMacMibSetRequestConfirm>
 800b55e:	e7ad      	b.n	800b4bc <LmHandlerJoin+0x3c>
 800b560:	200034d4 	.word	0x200034d4
 800b564:	200000b0 	.word	0x200000b0
 800b568:	200033ac 	.word	0x200033ac
 800b56c:	200034d0 	.word	0x200034d0
 800b570:	01000300 	.word	0x01000300

0800b574 <LmHandlerIsBusy>:
{
 800b574:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == true )
 800b576:	f002 fed7 	bl	800e328 <LoRaMacIsBusy>
 800b57a:	b100      	cbz	r0, 800b57e <LmHandlerIsBusy+0xa>
}
 800b57c:	bd08      	pop	{r3, pc}
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800b57e:	f7ff ff13 	bl	800b3a8 <LmHandlerJoinStatus>
 800b582:	2801      	cmp	r0, #1
 800b584:	d108      	bne.n	800b598 <LmHandlerIsBusy+0x24>
    if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true )
 800b586:	4b08      	ldr	r3, [pc, #32]	@ (800b5a8 <LmHandlerIsBusy+0x34>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	4798      	blx	r3
 800b58e:	2800      	cmp	r0, #0
 800b590:	d1f4      	bne.n	800b57c <LmHandlerIsBusy+0x8>
    if( LmHandlerPackageIsTxPending( ) == true )
 800b592:	f7ff feaf 	bl	800b2f4 <LmHandlerPackageIsTxPending>
 800b596:	e7f1      	b.n	800b57c <LmHandlerIsBusy+0x8>
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800b598:	4b04      	ldr	r3, [pc, #16]	@ (800b5ac <LmHandlerIsBusy+0x38>)
 800b59a:	7a19      	ldrb	r1, [r3, #8]
 800b59c:	79d8      	ldrb	r0, [r3, #7]
 800b59e:	f7ff ff6f 	bl	800b480 <LmHandlerJoin>
        return true;
 800b5a2:	2001      	movs	r0, #1
 800b5a4:	e7ea      	b.n	800b57c <LmHandlerIsBusy+0x8>
 800b5a6:	bf00      	nop
 800b5a8:	200034ec 	.word	0x200034ec
 800b5ac:	200000b0 	.word	0x200000b0

0800b5b0 <LmHandlerSend>:
{
 800b5b0:	b570      	push	{r4, r5, r6, lr}
 800b5b2:	b086      	sub	sp, #24
 800b5b4:	4604      	mov	r4, r0
 800b5b6:	460d      	mov	r5, r1
 800b5b8:	4616      	mov	r6, r2
    if( LoRaMacIsBusy() == true )
 800b5ba:	f002 feb5 	bl	800e328 <LoRaMacIsBusy>
 800b5be:	2800      	cmp	r0, #0
 800b5c0:	d172      	bne.n	800b6a8 <LmHandlerSend+0xf8>
    if( LoRaMacIsStopped() == true )
 800b5c2:	f002 fec7 	bl	800e354 <LoRaMacIsStopped>
 800b5c6:	2800      	cmp	r0, #0
 800b5c8:	d171      	bne.n	800b6ae <LmHandlerSend+0xfe>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800b5ca:	f7ff feed 	bl	800b3a8 <LmHandlerJoinStatus>
 800b5ce:	2801      	cmp	r0, #1
 800b5d0:	d144      	bne.n	800b65c <LmHandlerSend+0xac>
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true )
 800b5d2:	4b3b      	ldr	r3, [pc, #236]	@ (800b6c0 <LmHandlerSend+0x110>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	68db      	ldr	r3, [r3, #12]
 800b5d8:	4798      	blx	r3
 800b5da:	b138      	cbz	r0, 800b5ec <LmHandlerSend+0x3c>
        && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800b5dc:	7823      	ldrb	r3, [r4, #0]
 800b5de:	4a38      	ldr	r2, [pc, #224]	@ (800b6c0 <LmHandlerSend+0x110>)
 800b5e0:	6812      	ldr	r2, [r2, #0]
 800b5e2:	7812      	ldrb	r2, [r2, #0]
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d001      	beq.n	800b5ec <LmHandlerSend+0x3c>
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d163      	bne.n	800b6b4 <LmHandlerSend+0x104>
    TxParams.MsgType = isTxConfirmed;
 800b5ec:	4b35      	ldr	r3, [pc, #212]	@ (800b6c4 <LmHandlerSend+0x114>)
 800b5ee:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800b5f0:	3d00      	subs	r5, #0
 800b5f2:	bf18      	it	ne
 800b5f4:	2501      	movne	r5, #1
 800b5f6:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800b5fa:	4b33      	ldr	r3, [pc, #204]	@ (800b6c8 <LmHandlerSend+0x118>)
 800b5fc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800b600:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800b604:	4669      	mov	r1, sp
 800b606:	7860      	ldrb	r0, [r4, #1]
 800b608:	f003 f930 	bl	800e86c <LoRaMacQueryTxPossible>
 800b60c:	b370      	cbz	r0, 800b66c <LmHandlerSend+0xbc>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800b60e:	2300      	movs	r3, #0
 800b610:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800b614:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800b616:	f8ad 3010 	strh.w	r3, [sp, #16]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800b61a:	f06f 0506 	mvn.w	r5, #6
    TxParams.AppData = *appData;
 800b61e:	4b29      	ldr	r3, [pc, #164]	@ (800b6c4 <LmHandlerSend+0x114>)
 800b620:	f103 0c10 	add.w	ip, r3, #16
 800b624:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b628:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800b62c:	4a26      	ldr	r2, [pc, #152]	@ (800b6c8 <LmHandlerSend+0x118>)
 800b62e:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800b632:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800b634:	4631      	mov	r1, r6
 800b636:	a801      	add	r0, sp, #4
 800b638:	f003 fe72 	bl	800f320 <LoRaMacMcpsRequest>
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800b63c:	9a05      	ldr	r2, [sp, #20]
 800b63e:	4b23      	ldr	r3, [pc, #140]	@ (800b6cc <LmHandlerSend+0x11c>)
 800b640:	601a      	str	r2, [r3, #0]
    switch( status )
 800b642:	2811      	cmp	r0, #17
 800b644:	d82d      	bhi.n	800b6a2 <LmHandlerSend+0xf2>
 800b646:	e8df f000 	tbb	[pc, r0]
 800b64a:	1c21      	.short	0x1c21
 800b64c:	2c2c2c2c 	.word	0x2c2c2c2c
 800b650:	2c2c382c 	.word	0x2c2c382c
 800b654:	2c2c292c 	.word	0x2c2c292c
 800b658:	261c1c1c 	.word	0x261c1c1c
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800b65c:	4b1c      	ldr	r3, [pc, #112]	@ (800b6d0 <LmHandlerSend+0x120>)
 800b65e:	7a19      	ldrb	r1, [r3, #8]
 800b660:	79d8      	ldrb	r0, [r3, #7]
 800b662:	f7ff ff0d 	bl	800b480 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800b666:	f06f 0502 	mvn.w	r5, #2
 800b66a:	e00c      	b.n	800b686 <LmHandlerSend+0xd6>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800b66c:	7823      	ldrb	r3, [r4, #0]
 800b66e:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800b672:	7863      	ldrb	r3, [r4, #1]
 800b674:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800b678:	6863      	ldr	r3, [r4, #4]
 800b67a:	9303      	str	r3, [sp, #12]
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800b67c:	f04f 35ff 	mov.w	r5, #4294967295
 800b680:	e7cd      	b.n	800b61e <LmHandlerSend+0x6e>
    switch( status )
 800b682:	f06f 0501 	mvn.w	r5, #1
}
 800b686:	4628      	mov	r0, r5
 800b688:	b006      	add	sp, #24
 800b68a:	bd70      	pop	{r4, r5, r6, pc}
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800b68c:	f115 0f07 	cmn.w	r5, #7
 800b690:	d0f9      	beq.n	800b686 <LmHandlerSend+0xd6>
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800b692:	2500      	movs	r5, #0
 800b694:	e7f7      	b.n	800b686 <LmHandlerSend+0xd6>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800b696:	f06f 0504 	mvn.w	r5, #4
            break;
 800b69a:	e7f4      	b.n	800b686 <LmHandlerSend+0xd6>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800b69c:	f06f 0505 	mvn.w	r5, #5
            break;
 800b6a0:	e7f1      	b.n	800b686 <LmHandlerSend+0xd6>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800b6a2:	f04f 35ff 	mov.w	r5, #4294967295
            break;
 800b6a6:	e7ee      	b.n	800b686 <LmHandlerSend+0xd6>
        return LORAMAC_HANDLER_BUSY_ERROR;
 800b6a8:	f06f 0501 	mvn.w	r5, #1
 800b6ac:	e7eb      	b.n	800b686 <LmHandlerSend+0xd6>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800b6ae:	f06f 0502 	mvn.w	r5, #2
 800b6b2:	e7e8      	b.n	800b686 <LmHandlerSend+0xd6>
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800b6b4:	f06f 0503 	mvn.w	r5, #3
 800b6b8:	e7e5      	b.n	800b686 <LmHandlerSend+0xd6>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800b6ba:	f06f 0502 	mvn.w	r5, #2
 800b6be:	e7e2      	b.n	800b686 <LmHandlerSend+0xd6>
 800b6c0:	200034ec 	.word	0x200034ec
 800b6c4:	20000094 	.word	0x20000094
 800b6c8:	200034d4 	.word	0x200034d4
 800b6cc:	200034a4 	.word	0x200034a4
 800b6d0:	200000b0 	.word	0x200000b0

0800b6d4 <LmHandlerGetCurrentClass>:
    if( deviceClass == NULL )
 800b6d4:	b170      	cbz	r0, 800b6f4 <LmHandlerGetCurrentClass+0x20>
{
 800b6d6:	b510      	push	{r4, lr}
 800b6d8:	b08a      	sub	sp, #40	@ 0x28
 800b6da:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800b6e2:	4668      	mov	r0, sp
 800b6e4:	f003 f924 	bl	800e930 <LoRaMacMibGetRequestConfirm>
 800b6e8:	b938      	cbnz	r0, 800b6fa <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 800b6ea:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b6ee:	7023      	strb	r3, [r4, #0]
}
 800b6f0:	b00a      	add	sp, #40	@ 0x28
 800b6f2:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800b6f4:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b6f8:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800b6fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b6fe:	e7f7      	b.n	800b6f0 <LmHandlerGetCurrentClass+0x1c>

0800b700 <McpsIndication>:
{
 800b700:	b510      	push	{r4, lr}
 800b702:	b086      	sub	sp, #24
    DeviceClass_t deviceClass = CLASS_A;
 800b704:	2300      	movs	r3, #0
 800b706:	f88d 300f 	strb.w	r3, [sp, #15]
    RxParams.IsMcpsIndication = 1;
 800b70a:	4a21      	ldr	r2, [pc, #132]	@ (800b790 <McpsIndication+0x90>)
 800b70c:	2301      	movs	r3, #1
 800b70e:	7013      	strb	r3, [r2, #0]
    RxParams.Status = mcpsIndication->Status;
 800b710:	7843      	ldrb	r3, [r0, #1]
 800b712:	7053      	strb	r3, [r2, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800b714:	2b00      	cmp	r3, #0
 800b716:	d12e      	bne.n	800b776 <McpsIndication+0x76>
 800b718:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 800b71a:	f990 2004 	ldrsb.w	r2, [r0, #4]
 800b71e:	4b1c      	ldr	r3, [pc, #112]	@ (800b790 <McpsIndication+0x90>)
 800b720:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800b722:	f9b1 2000 	ldrsh.w	r2, [r1]
 800b726:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800b728:	f991 2002 	ldrsb.w	r2, [r1, #2]
 800b72c:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800b72e:	78ca      	ldrb	r2, [r1, #3]
 800b730:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800b732:	6902      	ldr	r2, [r0, #16]
 800b734:	60da      	str	r2, [r3, #12]
    appData.Port = mcpsIndication->Port;
 800b736:	78c3      	ldrb	r3, [r0, #3]
 800b738:	f88d 3010 	strb.w	r3, [sp, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800b73c:	7b03      	ldrb	r3, [r0, #12]
 800b73e:	f88d 3011 	strb.w	r3, [sp, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800b742:	6883      	ldr	r3, [r0, #8]
 800b744:	9305      	str	r3, [sp, #20]
    if( LmHandlerCallbacks->OnRxData != NULL )
 800b746:	4b13      	ldr	r3, [pc, #76]	@ (800b794 <McpsIndication+0x94>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b74c:	b113      	cbz	r3, 800b754 <McpsIndication+0x54>
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800b74e:	4910      	ldr	r1, [pc, #64]	@ (800b790 <McpsIndication+0x90>)
 800b750:	a804      	add	r0, sp, #16
 800b752:	4798      	blx	r3
    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800b754:	4b0f      	ldr	r3, [pc, #60]	@ (800b794 <McpsIndication+0x94>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b75a:	b113      	cbz	r3, 800b762 <McpsIndication+0x62>
 800b75c:	7e22      	ldrb	r2, [r4, #24]
 800b75e:	b102      	cbz	r2, 800b762 <McpsIndication+0x62>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800b760:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800b762:	4621      	mov	r1, r4
 800b764:	2001      	movs	r0, #1
 800b766:	f7ff fd33 	bl	800b1d0 <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass( &deviceClass );
 800b76a:	f10d 000f 	add.w	r0, sp, #15
 800b76e:	f7ff ffb1 	bl	800b6d4 <LmHandlerGetCurrentClass>
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800b772:	7963      	ldrb	r3, [r4, #5]
 800b774:	b90b      	cbnz	r3, 800b77a <McpsIndication+0x7a>
}
 800b776:	b006      	add	sp, #24
 800b778:	bd10      	pop	{r4, pc}
        LmHandlerAppData_t appData =
 800b77a:	2100      	movs	r1, #0
 800b77c:	f88d 1004 	strb.w	r1, [sp, #4]
 800b780:	f88d 1005 	strb.w	r1, [sp, #5]
 800b784:	9102      	str	r1, [sp, #8]
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800b786:	2201      	movs	r2, #1
 800b788:	a801      	add	r0, sp, #4
 800b78a:	f7ff ff11 	bl	800b5b0 <LmHandlerSend>
 800b78e:	e7f2      	b.n	800b776 <McpsIndication+0x76>
 800b790:	20000080 	.word	0x20000080
 800b794:	200034d0 	.word	0x200034d0

0800b798 <LmHandlerGetTxDatarate>:
    if( txDatarate == NULL )
 800b798:	b180      	cbz	r0, 800b7bc <LmHandlerGetTxDatarate+0x24>
{
 800b79a:	b510      	push	{r4, lr}
 800b79c:	b08a      	sub	sp, #40	@ 0x28
 800b79e:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 800b7a0:	231f      	movs	r3, #31
 800b7a2:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800b7a6:	4668      	mov	r0, sp
 800b7a8:	f003 f8c2 	bl	800e930 <LoRaMacMibGetRequestConfirm>
 800b7ac:	b948      	cbnz	r0, 800b7c2 <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 800b7ae:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 800b7b2:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800b7b4:	4a04      	ldr	r2, [pc, #16]	@ (800b7c8 <LmHandlerGetTxDatarate+0x30>)
 800b7b6:	7113      	strb	r3, [r2, #4]
}
 800b7b8:	b00a      	add	sp, #40	@ 0x28
 800b7ba:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800b7bc:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b7c0:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800b7c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b7c6:	e7f7      	b.n	800b7b8 <LmHandlerGetTxDatarate+0x20>
 800b7c8:	200034d4 	.word	0x200034d4

0800b7cc <LmHandlerSetSystemMaxRxError>:
{
 800b7cc:	b500      	push	{lr}
 800b7ce:	b08b      	sub	sp, #44	@ 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800b7d0:	2322      	movs	r3, #34	@ 0x22
 800b7d2:	f88d 3000 	strb.w	r3, [sp]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800b7d6:	9001      	str	r0, [sp, #4]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800b7d8:	4668      	mov	r0, sp
 800b7da:	f003 fa03 	bl	800ebe4 <LoRaMacMibSetRequestConfirm>
 800b7de:	b910      	cbnz	r0, 800b7e6 <LmHandlerSetSystemMaxRxError+0x1a>
}
 800b7e0:	b00b      	add	sp, #44	@ 0x2c
 800b7e2:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800b7e6:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ea:	e7f9      	b.n	800b7e0 <LmHandlerSetSystemMaxRxError+0x14>

0800b7ec <LmHandlerConfigure>:
{
 800b7ec:	b570      	push	{r4, r5, r6, lr}
 800b7ee:	b08e      	sub	sp, #56	@ 0x38
 800b7f0:	4601      	mov	r1, r0
    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800b7f2:	4c6c      	ldr	r4, [pc, #432]	@ (800b9a4 <LmHandlerConfigure+0x1b8>)
 800b7f4:	2218      	movs	r2, #24
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	f008 f8c5 	bl	8013986 <memcpy1>
    loraInfo = LoraInfo_GetPtr();
 800b7fc:	f7f7 fade 	bl	8002dbc <LoraInfo_GetPtr>
    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800b800:	7822      	ldrb	r2, [r4, #0]
 800b802:	2301      	movs	r3, #1
 800b804:	4093      	lsls	r3, r2
 800b806:	6841      	ldr	r1, [r0, #4]
 800b808:	420b      	tst	r3, r1
 800b80a:	d106      	bne.n	800b81a <LmHandlerConfigure+0x2e>
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800b80c:	4b66      	ldr	r3, [pc, #408]	@ (800b9a8 <LmHandlerConfigure+0x1bc>)
 800b80e:	2201      	movs	r2, #1
 800b810:	2100      	movs	r1, #0
 800b812:	4608      	mov	r0, r1
 800b814:	f009 ff92 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800b818:	e7fe      	b.n	800b818 <LmHandlerConfigure+0x2c>
    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800b81a:	4964      	ldr	r1, [pc, #400]	@ (800b9ac <LmHandlerConfigure+0x1c0>)
 800b81c:	4864      	ldr	r0, [pc, #400]	@ (800b9b0 <LmHandlerConfigure+0x1c4>)
 800b81e:	f002 fded 	bl	800e3fc <LoRaMacInitialization>
 800b822:	2800      	cmp	r0, #0
 800b824:	f040 80b7 	bne.w	800b996 <LmHandlerConfigure+0x1aa>
    mibReq.Type = MIB_NVM_CTXS;
 800b828:	2326      	movs	r3, #38	@ 0x26
 800b82a:	f88d 3010 	strb.w	r3, [sp, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800b82e:	a804      	add	r0, sp, #16
 800b830:	f003 f9d8 	bl	800ebe4 <LoRaMacMibSetRequestConfirm>
 800b834:	2800      	cmp	r0, #0
 800b836:	d17c      	bne.n	800b932 <LmHandlerConfigure+0x146>
        CtxRestoreDone = true;
 800b838:	4b5e      	ldr	r3, [pc, #376]	@ (800b9b4 <LmHandlerConfigure+0x1c8>)
 800b83a:	2201      	movs	r2, #1
 800b83c:	701a      	strb	r2, [r3, #0]
    if( CtxRestoreDone == true )
 800b83e:	4b5d      	ldr	r3, [pc, #372]	@ (800b9b4 <LmHandlerConfigure+0x1c8>)
 800b840:	781b      	ldrb	r3, [r3, #0]
 800b842:	2b00      	cmp	r3, #0
 800b844:	f000 809e 	beq.w	800b984 <LmHandlerConfigure+0x198>
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800b848:	4b5b      	ldr	r3, [pc, #364]	@ (800b9b8 <LmHandlerConfigure+0x1cc>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	69db      	ldr	r3, [r3, #28]
 800b84e:	b10b      	cbz	r3, 800b854 <LmHandlerConfigure+0x68>
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800b850:	2000      	movs	r0, #0
 800b852:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 800b854:	2326      	movs	r3, #38	@ 0x26
 800b856:	f88d 3010 	strb.w	r3, [sp, #16]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800b85a:	a804      	add	r0, sp, #16
 800b85c:	f003 f868 	bl	800e930 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 800b860:	9a05      	ldr	r2, [sp, #20]
        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 800b862:	f892 1048 	ldrb.w	r1, [r2, #72]	@ 0x48
 800b866:	4b4f      	ldr	r3, [pc, #316]	@ (800b9a4 <LmHandlerConfigure+0x1b8>)
 800b868:	7019      	strb	r1, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 800b86a:	f892 1118 	ldrb.w	r1, [r2, #280]	@ 0x118
 800b86e:	7059      	strb	r1, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 800b870:	f892 211a 	ldrb.w	r2, [r2, #282]	@ 0x11a
 800b874:	709a      	strb	r2, [r3, #2]
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800b876:	4b4d      	ldr	r3, [pc, #308]	@ (800b9ac <LmHandlerConfigure+0x1c0>)
 800b878:	68d9      	ldr	r1, [r3, #12]
 800b87a:	6898      	ldr	r0, [r3, #8]
 800b87c:	f007 ff96 	bl	80137ac <SecureElementInitMcuID>
 800b880:	2800      	cmp	r0, #0
 800b882:	f040 808b 	bne.w	800b99c <LmHandlerConfigure+0x1b0>
    mibReq.Type = MIB_DEV_ADDR;
 800b886:	2306      	movs	r3, #6
 800b888:	f88d 3010 	strb.w	r3, [sp, #16]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800b88c:	a804      	add	r0, sp, #16
 800b88e:	f003 f84f 	bl	800e930 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800b892:	4c4a      	ldr	r4, [pc, #296]	@ (800b9bc <LmHandlerConfigure+0x1d0>)
 800b894:	9b05      	ldr	r3, [sp, #20]
 800b896:	6163      	str	r3, [r4, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b898:	a804      	add	r0, sp, #16
 800b89a:	f003 f9a3 	bl	800ebe4 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_DEV_EUI;
 800b89e:	2302      	movs	r3, #2
 800b8a0:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800b8a4:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800b8a6:	a804      	add	r0, sp, #16
 800b8a8:	f003 f842 	bl	800e930 <LoRaMacMibGetRequestConfirm>
    mibReq.Type = MIB_JOIN_EUI;
 800b8ac:	2303      	movs	r3, #3
 800b8ae:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800b8b2:	3408      	adds	r4, #8
 800b8b4:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800b8b6:	a804      	add	r0, sp, #16
 800b8b8:	f003 f83a 	bl	800e930 <LoRaMacMibGetRequestConfirm>
    SecureElementPrintKeys();
 800b8bc:	f008 f810 	bl	80138e0 <SecureElementPrintKeys>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 800b8c0:	260f      	movs	r6, #15
 800b8c2:	f88d 6010 	strb.w	r6, [sp, #16]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b8cc:	a804      	add	r0, sp, #16
 800b8ce:	f003 f989 	bl	800ebe4 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 800b8d2:	2310      	movs	r3, #16
 800b8d4:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800b8d8:	2500      	movs	r5, #0
 800b8da:	f88d 5014 	strb.w	r5, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b8de:	eb0d 0003 	add.w	r0, sp, r3
 800b8e2:	f003 f97f 	bl	800ebe4 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 800b8e6:	2304      	movs	r3, #4
 800b8e8:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800b8ec:	4c2d      	ldr	r4, [pc, #180]	@ (800b9a4 <LmHandlerConfigure+0x1b8>)
 800b8ee:	78a3      	ldrb	r3, [r4, #2]
 800b8f0:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b8f4:	a804      	add	r0, sp, #16
 800b8f6:	f003 f975 	bl	800ebe4 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800b8fa:	2339      	movs	r3, #57	@ 0x39
 800b8fc:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800b900:	6963      	ldr	r3, [r4, #20]
 800b902:	9305      	str	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b904:	a804      	add	r0, sp, #16
 800b906:	f003 f96d 	bl	800ebe4 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800b90a:	f88d 6008 	strb.w	r6, [sp, #8]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800b90e:	a902      	add	r1, sp, #8
 800b910:	7820      	ldrb	r0, [r4, #0]
 800b912:	f004 fe9b 	bl	801064c <RegionGetPhyParam>
 800b916:	9001      	str	r0, [sp, #4]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800b918:	1b43      	subs	r3, r0, r5
 800b91a:	bf18      	it	ne
 800b91c:	2301      	movne	r3, #1
 800b91e:	71e3      	strb	r3, [r4, #7]
    LmHandlerSetSystemMaxRxError( 20 );
 800b920:	2014      	movs	r0, #20
 800b922:	f7ff ff53 	bl	800b7cc <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800b926:	79e0      	ldrb	r0, [r4, #7]
 800b928:	f003 fdb8 	bl	800f49c <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 800b92c:	4628      	mov	r0, r5
}
 800b92e:	b00e      	add	sp, #56	@ 0x38
 800b930:	bd70      	pop	{r4, r5, r6, pc}
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800b932:	2327      	movs	r3, #39	@ 0x27
 800b934:	f88d 3010 	strb.w	r3, [sp, #16]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 800b938:	4b1f      	ldr	r3, [pc, #124]	@ (800b9b8 <LmHandlerConfigure+0x1cc>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	691b      	ldr	r3, [r3, #16]
 800b93e:	b14b      	cbz	r3, 800b954 <LmHandlerConfigure+0x168>
            LoRaMacMibGetRequestConfirm( &mibReq );
 800b940:	a804      	add	r0, sp, #16
 800b942:	f002 fff5 	bl	800e930 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 800b946:	4b1c      	ldr	r3, [pc, #112]	@ (800b9b8 <LmHandlerConfigure+0x1cc>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	691b      	ldr	r3, [r3, #16]
 800b94c:	f44f 61ef 	mov.w	r1, #1912	@ 0x778
 800b950:	9805      	ldr	r0, [sp, #20]
 800b952:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 800b954:	2326      	movs	r3, #38	@ 0x26
 800b956:	f88d 3010 	strb.w	r3, [sp, #16]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800b95a:	a804      	add	r0, sp, #16
 800b95c:	f003 f942 	bl	800ebe4 <LoRaMacMibSetRequestConfirm>
 800b960:	2800      	cmp	r0, #0
 800b962:	f47f af6c 	bne.w	800b83e <LmHandlerConfigure+0x52>
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800b966:	2301      	movs	r3, #1
 800b968:	f88d 3010 	strb.w	r3, [sp, #16]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800b96c:	a804      	add	r0, sp, #16
 800b96e:	f002 ffdf 	bl	800e930 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 800b972:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800b976:	2b00      	cmp	r3, #0
 800b978:	f43f af61 	beq.w	800b83e <LmHandlerConfigure+0x52>
                CtxRestoreDone = true;
 800b97c:	4b0d      	ldr	r3, [pc, #52]	@ (800b9b4 <LmHandlerConfigure+0x1c8>)
 800b97e:	2201      	movs	r2, #1
 800b980:	701a      	strb	r2, [r3, #0]
 800b982:	e75c      	b.n	800b83e <LmHandlerConfigure+0x52>
        mibReq.Type = MIB_NET_ID;
 800b984:	2305      	movs	r3, #5
 800b986:	f88d 3010 	strb.w	r3, [sp, #16]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800b98a:	2300      	movs	r3, #0
 800b98c:	9305      	str	r3, [sp, #20]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800b98e:	a804      	add	r0, sp, #16
 800b990:	f003 f928 	bl	800ebe4 <LoRaMacMibSetRequestConfirm>
 800b994:	e76f      	b.n	800b876 <LmHandlerConfigure+0x8a>
        return LORAMAC_HANDLER_ERROR;
 800b996:	f04f 30ff 	mov.w	r0, #4294967295
 800b99a:	e7c8      	b.n	800b92e <LmHandlerConfigure+0x142>
        return LORAMAC_HANDLER_ERROR;
 800b99c:	f04f 30ff 	mov.w	r0, #4294967295
 800b9a0:	e7c5      	b.n	800b92e <LmHandlerConfigure+0x142>
 800b9a2:	bf00      	nop
 800b9a4:	200034d4 	.word	0x200034d4
 800b9a8:	08016ac4 	.word	0x08016ac4
 800b9ac:	200034a8 	.word	0x200034a8
 800b9b0:	200034c0 	.word	0x200034c0
 800b9b4:	200033ac 	.word	0x200033ac
 800b9b8:	200034d0 	.word	0x200034d0
 800b9bc:	20003500 	.word	0x20003500

0800b9c0 <LmHandlerPackageRegister>:
{
 800b9c0:	b530      	push	{r4, r5, lr}
 800b9c2:	b083      	sub	sp, #12
 800b9c4:	460d      	mov	r5, r1
    LmhPackage_t *package = NULL;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	9301      	str	r3, [sp, #4]
    switch( id )
 800b9ca:	4604      	mov	r4, r0
 800b9cc:	b9c8      	cbnz	r0, 800ba02 <LmHandlerPackageRegister+0x42>
                package = LmhpCompliancePackageFactory( );
 800b9ce:	f000 fb25 	bl	800c01c <LmhpCompliancePackageFactory>
 800b9d2:	9001      	str	r0, [sp, #4]
    if( package != NULL )
 800b9d4:	9b01      	ldr	r3, [sp, #4]
 800b9d6:	b1e3      	cbz	r3, 800ba12 <LmHandlerPackageRegister+0x52>
        LmHandlerPackages[id] = package;
 800b9d8:	4a0f      	ldr	r2, [pc, #60]	@ (800ba18 <LmHandlerPackageRegister+0x58>)
 800b9da:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800b9de:	4a0f      	ldr	r2, [pc, #60]	@ (800ba1c <LmHandlerPackageRegister+0x5c>)
 800b9e0:	62da      	str	r2, [r3, #44]	@ 0x2c
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800b9e2:	4a0f      	ldr	r2, [pc, #60]	@ (800ba20 <LmHandlerPackageRegister+0x60>)
 800b9e4:	631a      	str	r2, [r3, #48]	@ 0x30
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800b9e6:	4a0f      	ldr	r2, [pc, #60]	@ (800ba24 <LmHandlerPackageRegister+0x64>)
 800b9e8:	635a      	str	r2, [r3, #52]	@ 0x34
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800b9ea:	4a0f      	ldr	r2, [pc, #60]	@ (800ba28 <LmHandlerPackageRegister+0x68>)
 800b9ec:	6812      	ldr	r2, [r2, #0]
 800b9ee:	6992      	ldr	r2, [r2, #24]
 800b9f0:	619a      	str	r2, [r3, #24]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	22f2      	movs	r2, #242	@ 0xf2
 800b9f6:	490d      	ldr	r1, [pc, #52]	@ (800ba2c <LmHandlerPackageRegister+0x6c>)
 800b9f8:	4628      	mov	r0, r5
 800b9fa:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 800b9fc:	2000      	movs	r0, #0
}
 800b9fe:	b003      	add	sp, #12
 800ba00:	bd30      	pop	{r4, r5, pc}
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800ba02:	a901      	add	r1, sp, #4
 800ba04:	f000 fb10 	bl	800c028 <LmhpPackagesRegister>
 800ba08:	2800      	cmp	r0, #0
 800ba0a:	d0e3      	beq.n	800b9d4 <LmHandlerPackageRegister+0x14>
                    return LORAMAC_HANDLER_ERROR;
 800ba0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba10:	e7f5      	b.n	800b9fe <LmHandlerPackageRegister+0x3e>
        return LORAMAC_HANDLER_ERROR;
 800ba12:	f04f 30ff 	mov.w	r0, #4294967295
 800ba16:	e7f2      	b.n	800b9fe <LmHandlerPackageRegister+0x3e>
 800ba18:	200034ec 	.word	0x200034ec
 800ba1c:	0800b481 	.word	0x0800b481
 800ba20:	0800b5b1 	.word	0x0800b5b1
 800ba24:	0800b365 	.word	0x0800b365
 800ba28:	200034d0 	.word	0x200034d0
 800ba2c:	200033b0 	.word	0x200033b0

0800ba30 <LmHandlerInit>:
{
 800ba30:	b500      	push	{lr}
 800ba32:	b083      	sub	sp, #12
 800ba34:	9101      	str	r1, [sp, #4]
    LmHandlerCallbacks = handlerCallbacks;
 800ba36:	4b15      	ldr	r3, [pc, #84]	@ (800ba8c <LmHandlerInit+0x5c>)
 800ba38:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800ba3a:	4b15      	ldr	r3, [pc, #84]	@ (800ba90 <LmHandlerInit+0x60>)
 800ba3c:	4a15      	ldr	r2, [pc, #84]	@ (800ba94 <LmHandlerInit+0x64>)
 800ba3e:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800ba40:	4a15      	ldr	r2, [pc, #84]	@ (800ba98 <LmHandlerInit+0x68>)
 800ba42:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800ba44:	4a15      	ldr	r2, [pc, #84]	@ (800ba9c <LmHandlerInit+0x6c>)
 800ba46:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800ba48:	4a15      	ldr	r2, [pc, #84]	@ (800baa0 <LmHandlerInit+0x70>)
 800ba4a:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800ba4c:	6802      	ldr	r2, [r0, #0]
 800ba4e:	4b15      	ldr	r3, [pc, #84]	@ (800baa4 <LmHandlerInit+0x74>)
 800ba50:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800ba52:	6842      	ldr	r2, [r0, #4]
 800ba54:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800ba56:	6882      	ldr	r2, [r0, #8]
 800ba58:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800ba5a:	68c2      	ldr	r2, [r0, #12]
 800ba5c:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800ba5e:	4a12      	ldr	r2, [pc, #72]	@ (800baa8 <LmHandlerInit+0x78>)
 800ba60:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800ba62:	6982      	ldr	r2, [r0, #24]
 800ba64:	615a      	str	r2, [r3, #20]
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800ba66:	4911      	ldr	r1, [pc, #68]	@ (800baac <LmHandlerInit+0x7c>)
 800ba68:	2000      	movs	r0, #0
 800ba6a:	f7ff ffa9 	bl	800b9c0 <LmHandlerPackageRegister>
 800ba6e:	b930      	cbnz	r0, 800ba7e <LmHandlerInit+0x4e>
    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800ba70:	a801      	add	r0, sp, #4
 800ba72:	f000 fad7 	bl	800c024 <LmhpPackagesRegistrationInit>
 800ba76:	b928      	cbnz	r0, 800ba84 <LmHandlerInit+0x54>
}
 800ba78:	b003      	add	sp, #12
 800ba7a:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800ba7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ba82:	e7f9      	b.n	800ba78 <LmHandlerInit+0x48>
        return LORAMAC_HANDLER_ERROR;
 800ba84:	f04f 30ff 	mov.w	r0, #4294967295
 800ba88:	e7f6      	b.n	800ba78 <LmHandlerInit+0x48>
 800ba8a:	bf00      	nop
 800ba8c:	200034d0 	.word	0x200034d0
 800ba90:	200034c0 	.word	0x200034c0
 800ba94:	0800b2b1 	.word	0x0800b2b1
 800ba98:	0800b701 	.word	0x0800b701
 800ba9c:	0800bb31 	.word	0x0800bb31
 800baa0:	0800b25d 	.word	0x0800b25d
 800baa4:	200034a8 	.word	0x200034a8
 800baa8:	080105f5 	.word	0x080105f5
 800baac:	200000bc 	.word	0x200000bc

0800bab0 <LmHandlerGetVersion>:
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
    if( featureVersion == NULL )
 800bab0:	b161      	cbz	r1, 800bacc <LmHandlerGetVersion+0x1c>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    switch( lmhType )
 800bab2:	b118      	cbz	r0, 800babc <LmHandlerGetVersion+0xc>
 800bab4:	2801      	cmp	r0, #1
 800bab6:	d005      	beq.n	800bac4 <LmHandlerGetVersion+0x14>
 800bab8:	2000      	movs	r0, #0
 800baba:	4770      	bx	lr
    {
        case LORAMAC_HANDLER_L2_VERSION:
            *featureVersion = LORAMAC_VERSION;
 800babc:	4a05      	ldr	r2, [pc, #20]	@ (800bad4 <LmHandlerGetVersion+0x24>)
 800babe:	600a      	str	r2, [r1, #0]
            break;
        default:
            break;
    }

    return LORAMAC_HANDLER_SUCCESS;
 800bac0:	2000      	movs	r0, #0
            break;
 800bac2:	4770      	bx	lr
            *featureVersion = REGION_VERSION;
 800bac4:	4a04      	ldr	r2, [pc, #16]	@ (800bad8 <LmHandlerGetVersion+0x28>)
 800bac6:	600a      	str	r2, [r1, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800bac8:	2000      	movs	r0, #0
            break;
 800baca:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800bacc:	f04f 30ff 	mov.w	r0, #4294967295
}
 800bad0:	4770      	bx	lr
 800bad2:	bf00      	nop
 800bad4:	01000300 	.word	0x01000300
 800bad8:	01010003 	.word	0x01010003

0800badc <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800badc:	b508      	push	{r3, lr}
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800bade:	f003 fcfb 	bl	800f4d8 <LoRaMacDeInitialization>
 800bae2:	b900      	cbnz	r0, 800bae6 <LmHandlerStop+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 800bae4:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 800bae6:	f06f 0001 	mvn.w	r0, #1
 800baea:	e7fb      	b.n	800bae4 <LmHandlerStop+0x8>

0800baec <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800baec:	b508      	push	{r3, lr}
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800baee:	f002 fe8d 	bl	800e80c <LoRaMacHalt>
 800baf2:	b900      	cbnz	r0, 800baf6 <LmHandlerHalt+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 800baf4:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 800baf6:	f06f 0001 	mvn.w	r0, #1
 800bafa:	e7fb      	b.n	800baf4 <LmHandlerHalt+0x8>

0800bafc <LmHandlerGetTxPower>:
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800bafc:	b180      	cbz	r0, 800bb20 <LmHandlerGetTxPower+0x24>
{
 800bafe:	b510      	push	{r4, lr}
 800bb00:	b08a      	sub	sp, #40	@ 0x28
 800bb02:	4604      	mov	r4, r0
    {
        return LORAMAC_HANDLER_ERROR;
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800bb04:	2320      	movs	r3, #32
 800bb06:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800bb0a:	4668      	mov	r0, sp
 800bb0c:	f002 ff10 	bl	800e930 <LoRaMacMibGetRequestConfirm>
 800bb10:	b948      	cbnz	r0, 800bb26 <LmHandlerGetTxPower+0x2a>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800bb12:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 800bb16:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxPower = *txPower;
 800bb18:	4a04      	ldr	r2, [pc, #16]	@ (800bb2c <LmHandlerGetTxPower+0x30>)
 800bb1a:	7153      	strb	r3, [r2, #5]
    return LORAMAC_HANDLER_SUCCESS;
}
 800bb1c:	b00a      	add	sp, #40	@ 0x28
 800bb1e:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800bb20:	f04f 30ff 	mov.w	r0, #4294967295
}
 800bb24:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800bb26:	f04f 30ff 	mov.w	r0, #4294967295
 800bb2a:	e7f7      	b.n	800bb1c <LmHandlerGetTxPower+0x20>
 800bb2c:	200034d4 	.word	0x200034d4

0800bb30 <MlmeConfirm>:
{
 800bb30:	b510      	push	{r4, lr}
 800bb32:	b08a      	sub	sp, #40	@ 0x28
 800bb34:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 800bb36:	4b2c      	ldr	r3, [pc, #176]	@ (800bbe8 <MlmeConfirm+0xb8>)
 800bb38:	2200      	movs	r2, #0
 800bb3a:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800bb3c:	7842      	ldrb	r2, [r0, #1]
 800bb3e:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800bb40:	4b2a      	ldr	r3, [pc, #168]	@ (800bbec <MlmeConfirm+0xbc>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb46:	b10b      	cbz	r3, 800bb4c <MlmeConfirm+0x1c>
        LmHandlerCallbacks->OnTxData( &TxParams );
 800bb48:	4827      	ldr	r0, [pc, #156]	@ (800bbe8 <MlmeConfirm+0xb8>)
 800bb4a:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800bb4c:	4621      	mov	r1, r4
 800bb4e:	2002      	movs	r0, #2
 800bb50:	f7ff fb3e 	bl	800b1d0 <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 800bb54:	7823      	ldrb	r3, [r4, #0]
 800bb56:	2b05      	cmp	r3, #5
 800bb58:	d038      	beq.n	800bbcc <MlmeConfirm+0x9c>
 800bb5a:	2b0c      	cmp	r3, #12
 800bb5c:	d03e      	beq.n	800bbdc <MlmeConfirm+0xac>
 800bb5e:	2b01      	cmp	r3, #1
 800bb60:	d001      	beq.n	800bb66 <MlmeConfirm+0x36>
}
 800bb62:	b00a      	add	sp, #40	@ 0x28
 800bb64:	bd10      	pop	{r4, pc}
                mibReq.Type = MIB_DEV_ADDR;
 800bb66:	2306      	movs	r3, #6
 800bb68:	f88d 3000 	strb.w	r3, [sp]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800bb6c:	4668      	mov	r0, sp
 800bb6e:	f002 fedf 	bl	800e930 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800bb72:	9901      	ldr	r1, [sp, #4]
 800bb74:	4b1e      	ldr	r3, [pc, #120]	@ (800bbf0 <MlmeConfirm+0xc0>)
 800bb76:	79d8      	ldrb	r0, [r3, #7]
 800bb78:	f007 fdf6 	bl	8013768 <SecureElementSetDevAddr>
 800bb7c:	b910      	cbnz	r0, 800bb84 <MlmeConfirm+0x54>
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800bb7e:	9a01      	ldr	r2, [sp, #4]
 800bb80:	4b1c      	ldr	r3, [pc, #112]	@ (800bbf4 <MlmeConfirm+0xc4>)
 800bb82:	615a      	str	r2, [r3, #20]
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800bb84:	4c1c      	ldr	r4, [pc, #112]	@ (800bbf8 <MlmeConfirm+0xc8>)
 800bb86:	4620      	mov	r0, r4
 800bb88:	f7ff fe06 	bl	800b798 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800bb8c:	1c60      	adds	r0, r4, #1
 800bb8e:	f7ff ffb5 	bl	800bafc <LmHandlerGetTxPower>
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800bb92:	4b15      	ldr	r3, [pc, #84]	@ (800bbe8 <MlmeConfirm+0xb8>)
 800bb94:	785b      	ldrb	r3, [r3, #1]
 800bb96:	b18b      	cbz	r3, 800bbbc <MlmeConfirm+0x8c>
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800bb98:	4b15      	ldr	r3, [pc, #84]	@ (800bbf0 <MlmeConfirm+0xc0>)
 800bb9a:	22ff      	movs	r2, #255	@ 0xff
 800bb9c:	719a      	strb	r2, [r3, #6]
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800bb9e:	4b13      	ldr	r3, [pc, #76]	@ (800bbec <MlmeConfirm+0xbc>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bba4:	b10b      	cbz	r3, 800bbaa <MlmeConfirm+0x7a>
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800bba6:	4812      	ldr	r0, [pc, #72]	@ (800bbf0 <MlmeConfirm+0xc0>)
 800bba8:	4798      	blx	r3
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800bbaa:	4b0f      	ldr	r3, [pc, #60]	@ (800bbe8 <MlmeConfirm+0xb8>)
 800bbac:	785b      	ldrb	r3, [r3, #1]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d1d7      	bne.n	800bb62 <MlmeConfirm+0x32>
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800bbb2:	4b0f      	ldr	r3, [pc, #60]	@ (800bbf0 <MlmeConfirm+0xc0>)
 800bbb4:	79d8      	ldrb	r0, [r3, #7]
 800bbb6:	f007 fea5 	bl	8013904 <SecureElementPrintSessionKeys>
            break;
 800bbba:	e7d2      	b.n	800bb62 <MlmeConfirm+0x32>
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800bbbc:	1f23      	subs	r3, r4, #4
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800bbc2:	4b0e      	ldr	r3, [pc, #56]	@ (800bbfc <MlmeConfirm+0xcc>)
 800bbc4:	7858      	ldrb	r0, [r3, #1]
 800bbc6:	f7ff fc01 	bl	800b3cc <LmHandlerRequestClass>
 800bbca:	e7e8      	b.n	800bb9e <MlmeConfirm+0x6e>
                RxParams.LinkCheck = true;
 800bbcc:	4b0c      	ldr	r3, [pc, #48]	@ (800bc00 <MlmeConfirm+0xd0>)
 800bbce:	2201      	movs	r2, #1
 800bbd0:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800bbd2:	7a22      	ldrb	r2, [r4, #8]
 800bbd4:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800bbd6:	7a62      	ldrb	r2, [r4, #9]
 800bbd8:	74da      	strb	r2, [r3, #19]
            break;
 800bbda:	e7c2      	b.n	800bb62 <MlmeConfirm+0x32>
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800bbdc:	7863      	ldrb	r3, [r4, #1]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d0bf      	beq.n	800bb62 <MlmeConfirm+0x32>
                    LmHandlerDeviceTimeReq( );
 800bbe2:	f7ff fbbf 	bl	800b364 <LmHandlerDeviceTimeReq>
}
 800bbe6:	e7bc      	b.n	800bb62 <MlmeConfirm+0x32>
 800bbe8:	20000094 	.word	0x20000094
 800bbec:	200034d0 	.word	0x200034d0
 800bbf0:	200000b0 	.word	0x200000b0
 800bbf4:	20003500 	.word	0x20003500
 800bbf8:	200000b4 	.word	0x200000b4
 800bbfc:	200034d4 	.word	0x200034d4
 800bc00:	20000080 	.word	0x20000080

0800bc04 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800bc04:	b510      	push	{r4, lr}
 800bc06:	b08a      	sub	sp, #40	@ 0x28
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
    int32_t status = NVM_DATA_OK;

    lmhStatus = LmHandlerHalt();
 800bc08:	f7ff ff70 	bl	800baec <LmHandlerHalt>

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 800bc0c:	4604      	mov	r4, r0
 800bc0e:	b110      	cbz	r0, 800bc16 <LmHandlerNvmDataStore+0x12>

    return lmhStatus;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800bc10:	4620      	mov	r0, r4
 800bc12:	b00a      	add	sp, #40	@ 0x28
 800bc14:	bd10      	pop	{r4, pc}
        status = NvmDataMgmtStoreBegin();
 800bc16:	f004 fcf5 	bl	8010604 <NvmDataMgmtStoreBegin>
        if( status == NVM_DATA_NO_UPDATED_DATA )
 800bc1a:	f110 0f02 	cmn.w	r0, #2
 800bc1e:	d012      	beq.n	800bc46 <LmHandlerNvmDataStore+0x42>
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 800bc20:	bb00      	cbnz	r0, 800bc64 <LmHandlerNvmDataStore+0x60>
 800bc22:	4b15      	ldr	r3, [pc, #84]	@ (800bc78 <LmHandlerNvmDataStore+0x74>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	695b      	ldr	r3, [r3, #20]
 800bc28:	b1fb      	cbz	r3, 800bc6a <LmHandlerNvmDataStore+0x66>
            mibReq.Type = MIB_NVM_CTXS;
 800bc2a:	2326      	movs	r3, #38	@ 0x26
 800bc2c:	f88d 3000 	strb.w	r3, [sp]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800bc30:	4668      	mov	r0, sp
 800bc32:	f002 fe7d 	bl	800e930 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 800bc36:	4b10      	ldr	r3, [pc, #64]	@ (800bc78 <LmHandlerNvmDataStore+0x74>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	695b      	ldr	r3, [r3, #20]
 800bc3c:	f44f 61ef 	mov.w	r1, #1912	@ 0x778
 800bc40:	9801      	ldr	r0, [sp, #4]
 800bc42:	4798      	blx	r3
 800bc44:	e001      	b.n	800bc4a <LmHandlerNvmDataStore+0x46>
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800bc46:	f06f 0407 	mvn.w	r4, #7
        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800bc4a:	f004 fceb 	bl	8010624 <NvmDataMgmtStoreEnd>
 800bc4e:	b978      	cbnz	r0, 800bc70 <LmHandlerNvmDataStore+0x6c>
    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 800bc50:	2c00      	cmp	r4, #0
 800bc52:	d1dd      	bne.n	800bc10 <LmHandlerNvmDataStore+0xc>
 800bc54:	4b08      	ldr	r3, [pc, #32]	@ (800bc78 <LmHandlerNvmDataStore+0x74>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	69db      	ldr	r3, [r3, #28]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d0d8      	beq.n	800bc10 <LmHandlerNvmDataStore+0xc>
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800bc5e:	2001      	movs	r0, #1
 800bc60:	4798      	blx	r3
 800bc62:	e7d5      	b.n	800bc10 <LmHandlerNvmDataStore+0xc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800bc64:	f04f 34ff 	mov.w	r4, #4294967295
 800bc68:	e7ef      	b.n	800bc4a <LmHandlerNvmDataStore+0x46>
 800bc6a:	f04f 34ff 	mov.w	r4, #4294967295
 800bc6e:	e7ec      	b.n	800bc4a <LmHandlerNvmDataStore+0x46>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800bc70:	f04f 34ff 	mov.w	r4, #4294967295
 800bc74:	e7cc      	b.n	800bc10 <LmHandlerNvmDataStore+0xc>
 800bc76:	bf00      	nop
 800bc78:	200034d0 	.word	0x200034d0

0800bc7c <LmhpComplianceInit>:
    return &LmhpCompliancePackage;
}

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	b140      	cbz	r0, 800bc92 <LmhpComplianceInit+0x16>
 800bc80:	b139      	cbz	r1, 800bc92 <LmhpComplianceInit+0x16>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t * )params;
 800bc82:	4807      	ldr	r0, [pc, #28]	@ (800bca0 <LmhpComplianceInit+0x24>)
 800bc84:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800bc86:	4b07      	ldr	r3, [pc, #28]	@ (800bca4 <LmhpComplianceInit+0x28>)
 800bc88:	6099      	str	r1, [r3, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800bc8a:	715a      	strb	r2, [r3, #5]
        ComplianceTestState.Initialized = true;
 800bc8c:	2201      	movs	r2, #1
 800bc8e:	701a      	strb	r2, [r3, #0]
 800bc90:	4770      	bx	lr
    }
    else
    {
        LmhpComplianceParams = NULL;
 800bc92:	2300      	movs	r3, #0
 800bc94:	4a02      	ldr	r2, [pc, #8]	@ (800bca0 <LmhpComplianceInit+0x24>)
 800bc96:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 800bc98:	4a02      	ldr	r2, [pc, #8]	@ (800bca4 <LmhpComplianceInit+0x28>)
 800bc9a:	7013      	strb	r3, [r2, #0]
    }
}
 800bc9c:	4770      	bx	lr
 800bc9e:	bf00      	nop
 800bca0:	20003518 	.word	0x20003518
 800bca4:	2000351c 	.word	0x2000351c

0800bca8 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 800bca8:	4b01      	ldr	r3, [pc, #4]	@ (800bcb0 <LmhpComplianceIsInitialized+0x8>)
 800bcaa:	7818      	ldrb	r0, [r3, #0]
 800bcac:	4770      	bx	lr
 800bcae:	bf00      	nop
 800bcb0:	2000351c 	.word	0x2000351c

0800bcb4 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
    if( ComplianceTestState.Initialized == false )
 800bcb4:	4b02      	ldr	r3, [pc, #8]	@ (800bcc0 <LmhpComplianceIsRunning+0xc>)
 800bcb6:	7818      	ldrb	r0, [r3, #0]
 800bcb8:	b100      	cbz	r0, 800bcbc <LmhpComplianceIsRunning+0x8>
    {
        return false;
    }

    return ComplianceTestState.IsRunning;
 800bcba:	7858      	ldrb	r0, [r3, #1]
}
 800bcbc:	4770      	bx	lr
 800bcbe:	bf00      	nop
 800bcc0:	2000351c 	.word	0x2000351c

0800bcc4 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm( McpsConfirm_t *mcpsConfirm )
{
    if( ComplianceTestState.Initialized == false )
 800bcc4:	4b08      	ldr	r3, [pc, #32]	@ (800bce8 <LmhpComplianceOnMcpsConfirm+0x24>)
 800bcc6:	781b      	ldrb	r3, [r3, #0]
 800bcc8:	b12b      	cbz	r3, 800bcd6 <LmhpComplianceOnMcpsConfirm+0x12>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 800bcca:	4b07      	ldr	r3, [pc, #28]	@ (800bce8 <LmhpComplianceOnMcpsConfirm+0x24>)
 800bccc:	785b      	ldrb	r3, [r3, #1]
 800bcce:	b113      	cbz	r3, 800bcd6 <LmhpComplianceOnMcpsConfirm+0x12>
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 800bcd0:	7803      	ldrb	r3, [r0, #0]
    if( ( ComplianceTestState.IsRunning == true ) &&
 800bcd2:	2b01      	cmp	r3, #1
 800bcd4:	d000      	beq.n	800bcd8 <LmhpComplianceOnMcpsConfirm+0x14>
        ( mcpsConfirm->AckReceived != 0 ) )
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
    }
}
 800bcd6:	4770      	bx	lr
        ( mcpsConfirm->AckReceived != 0 ) )
 800bcd8:	7903      	ldrb	r3, [r0, #4]
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d0fb      	beq.n	800bcd6 <LmhpComplianceOnMcpsConfirm+0x12>
        ComplianceTestState.DownLinkCounter++;
 800bcde:	4a02      	ldr	r2, [pc, #8]	@ (800bce8 <LmhpComplianceOnMcpsConfirm+0x24>)
 800bce0:	8993      	ldrh	r3, [r2, #12]
 800bce2:	3301      	adds	r3, #1
 800bce4:	8193      	strh	r3, [r2, #12]
 800bce6:	e7f6      	b.n	800bcd6 <LmhpComplianceOnMcpsConfirm+0x12>
 800bce8:	2000351c 	.word	0x2000351c

0800bcec <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
    if( ComplianceTestState.Initialized == false )
 800bcec:	4b08      	ldr	r3, [pc, #32]	@ (800bd10 <LmhpComplianceOnMlmeConfirm+0x24>)
 800bcee:	781b      	ldrb	r3, [r3, #0]
 800bcf0:	b12b      	cbz	r3, 800bcfe <LmhpComplianceOnMlmeConfirm+0x12>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800bcf2:	4b07      	ldr	r3, [pc, #28]	@ (800bd10 <LmhpComplianceOnMlmeConfirm+0x24>)
 800bcf4:	785b      	ldrb	r3, [r3, #1]
 800bcf6:	b113      	cbz	r3, 800bcfe <LmhpComplianceOnMlmeConfirm+0x12>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800bcf8:	7803      	ldrb	r3, [r0, #0]
 800bcfa:	2b05      	cmp	r3, #5
 800bcfc:	d000      	beq.n	800bd00 <LmhpComplianceOnMlmeConfirm+0x14>
    {
        ComplianceTestState.LinkCheck = true;
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
    }
}
 800bcfe:	4770      	bx	lr
        ComplianceTestState.LinkCheck = true;
 800bd00:	4b03      	ldr	r3, [pc, #12]	@ (800bd10 <LmhpComplianceOnMlmeConfirm+0x24>)
 800bd02:	2201      	movs	r2, #1
 800bd04:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800bd06:	7a02      	ldrb	r2, [r0, #8]
 800bd08:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800bd0a:	7a42      	ldrb	r2, [r0, #9]
 800bd0c:	741a      	strb	r2, [r3, #16]
 800bd0e:	e7f6      	b.n	800bcfe <LmhpComplianceOnMlmeConfirm+0x12>
 800bd10:	2000351c 	.word	0x2000351c

0800bd14 <LmhpComplianceProcess>:
}

static void LmhpComplianceProcess( void )
{
    /* Nothing to process */
}
 800bd14:	4770      	bx	lr
	...

0800bd18 <LmhpComplianceTxProcess>:
    if( ComplianceTestState.Initialized == false )
 800bd18:	4b26      	ldr	r3, [pc, #152]	@ (800bdb4 <LmhpComplianceTxProcess+0x9c>)
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d040      	beq.n	800bda2 <LmhpComplianceTxProcess+0x8a>
    if( ComplianceTestState.IsRunning == false )
 800bd20:	4b24      	ldr	r3, [pc, #144]	@ (800bdb4 <LmhpComplianceTxProcess+0x9c>)
 800bd22:	785b      	ldrb	r3, [r3, #1]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d03f      	beq.n	800bda8 <LmhpComplianceTxProcess+0x90>
{
 800bd28:	b500      	push	{lr}
 800bd2a:	b083      	sub	sp, #12
    if( ComplianceTestState.LinkCheck == true )
 800bd2c:	4b21      	ldr	r3, [pc, #132]	@ (800bdb4 <LmhpComplianceTxProcess+0x9c>)
 800bd2e:	7b9b      	ldrb	r3, [r3, #14]
 800bd30:	b323      	cbz	r3, 800bd7c <LmhpComplianceTxProcess+0x64>
        ComplianceTestState.LinkCheck = false;
 800bd32:	4b20      	ldr	r3, [pc, #128]	@ (800bdb4 <LmhpComplianceTxProcess+0x9c>)
 800bd34:	2200      	movs	r2, #0
 800bd36:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800bd38:	2203      	movs	r2, #3
 800bd3a:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800bd3c:	689a      	ldr	r2, [r3, #8]
 800bd3e:	2105      	movs	r1, #5
 800bd40:	7011      	strb	r1, [r2, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800bd42:	7bd9      	ldrb	r1, [r3, #15]
 800bd44:	7051      	strb	r1, [r2, #1]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800bd46:	7c19      	ldrb	r1, [r3, #16]
 800bd48:	7091      	strb	r1, [r2, #2]
        ComplianceTestState.State = 1;
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	709a      	strb	r2, [r3, #2]
    LmHandlerAppData_t appData =
 800bd4e:	23e0      	movs	r3, #224	@ 0xe0
 800bd50:	f88d 3000 	strb.w	r3, [sp]
        .BufferSize = ComplianceTestState.DataBufferSize,
 800bd54:	4b17      	ldr	r3, [pc, #92]	@ (800bdb4 <LmhpComplianceTxProcess+0x9c>)
 800bd56:	799a      	ldrb	r2, [r3, #6]
    LmHandlerAppData_t appData =
 800bd58:	f88d 2001 	strb.w	r2, [sp, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800bd5c:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800bd5e:	9301      	str	r3, [sp, #4]
    TimerStart( &ComplianceTxNextPacketTimer );
 800bd60:	4815      	ldr	r0, [pc, #84]	@ (800bdb8 <LmhpComplianceTxProcess+0xa0>)
 800bd62:	f009 ffc3 	bl	8015cec <UTIL_TIMER_Start>
    if( LmhpCompliancePackage.OnSendRequest == NULL)
 800bd66:	4b15      	ldr	r3, [pc, #84]	@ (800bdbc <LmhpComplianceTxProcess+0xa4>)
 800bd68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd6a:	b1fb      	cbz	r3, 800bdac <LmhpComplianceTxProcess+0x94>
    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 800bd6c:	2201      	movs	r2, #1
 800bd6e:	4911      	ldr	r1, [pc, #68]	@ (800bdb4 <LmhpComplianceTxProcess+0x9c>)
 800bd70:	78c9      	ldrb	r1, [r1, #3]
 800bd72:	4668      	mov	r0, sp
 800bd74:	4798      	blx	r3
}
 800bd76:	b003      	add	sp, #12
 800bd78:	f85d fb04 	ldr.w	pc, [sp], #4
        switch( ComplianceTestState.State )
 800bd7c:	4b0d      	ldr	r3, [pc, #52]	@ (800bdb4 <LmhpComplianceTxProcess+0x9c>)
 800bd7e:	789b      	ldrb	r3, [r3, #2]
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d005      	beq.n	800bd90 <LmhpComplianceTxProcess+0x78>
 800bd84:	2b04      	cmp	r3, #4
 800bd86:	d1e2      	bne.n	800bd4e <LmhpComplianceTxProcess+0x36>
                ComplianceTestState.State = 1;
 800bd88:	4b0a      	ldr	r3, [pc, #40]	@ (800bdb4 <LmhpComplianceTxProcess+0x9c>)
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	709a      	strb	r2, [r3, #2]
                break;
 800bd8e:	e7de      	b.n	800bd4e <LmhpComplianceTxProcess+0x36>
                ComplianceTestState.DataBufferSize = 2;
 800bd90:	4b08      	ldr	r3, [pc, #32]	@ (800bdb4 <LmhpComplianceTxProcess+0x9c>)
 800bd92:	2202      	movs	r2, #2
 800bd94:	719a      	strb	r2, [r3, #6]
                ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800bd96:	899a      	ldrh	r2, [r3, #12]
 800bd98:	689b      	ldr	r3, [r3, #8]
 800bd9a:	0a11      	lsrs	r1, r2, #8
 800bd9c:	7019      	strb	r1, [r3, #0]
                ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800bd9e:	705a      	strb	r2, [r3, #1]
                break;
 800bda0:	e7d5      	b.n	800bd4e <LmhpComplianceTxProcess+0x36>
        return LORAMAC_HANDLER_ERROR;
 800bda2:	f04f 30ff 	mov.w	r0, #4294967295
 800bda6:	4770      	bx	lr
        return LORAMAC_HANDLER_SUCCESS;
 800bda8:	2000      	movs	r0, #0
}
 800bdaa:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800bdac:	f04f 30ff 	mov.w	r0, #4294967295
 800bdb0:	e7e1      	b.n	800bd76 <LmhpComplianceTxProcess+0x5e>
 800bdb2:	bf00      	nop
 800bdb4:	2000351c 	.word	0x2000351c
 800bdb8:	20003530 	.word	0x20003530
 800bdbc:	200000c8 	.word	0x200000c8

0800bdc0 <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 800bdc0:	4b8f      	ldr	r3, [pc, #572]	@ (800c000 <LmhpComplianceOnMcpsIndication+0x240>)
 800bdc2:	781b      	ldrb	r3, [r3, #0]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	f000 8119 	beq.w	800bffc <LmhpComplianceOnMcpsIndication+0x23c>
    if( mcpsIndication->RxData == false )
 800bdca:	7b43      	ldrb	r3, [r0, #13]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	f000 8115 	beq.w	800bffc <LmhpComplianceOnMcpsIndication+0x23c>
    if( ( ComplianceTestState.IsRunning == true ) &&
 800bdd2:	4b8b      	ldr	r3, [pc, #556]	@ (800c000 <LmhpComplianceOnMcpsIndication+0x240>)
 800bdd4:	785b      	ldrb	r3, [r3, #1]
 800bdd6:	b12b      	cbz	r3, 800bde4 <LmhpComplianceOnMcpsIndication+0x24>
        ( mcpsIndication->AckReceived == 0 ) )
 800bdd8:	7b82      	ldrb	r2, [r0, #14]
    if( ( ComplianceTestState.IsRunning == true ) &&
 800bdda:	b91a      	cbnz	r2, 800bde4 <LmhpComplianceOnMcpsIndication+0x24>
        ComplianceTestState.DownLinkCounter++;
 800bddc:	4988      	ldr	r1, [pc, #544]	@ (800c000 <LmhpComplianceOnMcpsIndication+0x240>)
 800bdde:	898a      	ldrh	r2, [r1, #12]
 800bde0:	3201      	adds	r2, #1
 800bde2:	818a      	strh	r2, [r1, #12]
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800bde4:	78c2      	ldrb	r2, [r0, #3]
 800bde6:	2ae0      	cmp	r2, #224	@ 0xe0
 800bde8:	f040 8108 	bne.w	800bffc <LmhpComplianceOnMcpsIndication+0x23c>
{
 800bdec:	b510      	push	{r4, lr}
 800bdee:	b08c      	sub	sp, #48	@ 0x30
    if( ComplianceTestState.IsRunning == false )
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d140      	bne.n	800be76 <LmhpComplianceOnMcpsIndication+0xb6>
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800bdf4:	7b03      	ldrb	r3, [r0, #12]
 800bdf6:	2b04      	cmp	r3, #4
 800bdf8:	d001      	beq.n	800bdfe <LmhpComplianceOnMcpsIndication+0x3e>
}
 800bdfa:	b00c      	add	sp, #48	@ 0x30
 800bdfc:	bd10      	pop	{r4, pc}
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800bdfe:	6883      	ldr	r3, [r0, #8]
 800be00:	781a      	ldrb	r2, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800be02:	2a01      	cmp	r2, #1
 800be04:	d1f9      	bne.n	800bdfa <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800be06:	785a      	ldrb	r2, [r3, #1]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800be08:	2a01      	cmp	r2, #1
 800be0a:	d1f6      	bne.n	800bdfa <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800be0c:	789a      	ldrb	r2, [r3, #2]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800be0e:	2a01      	cmp	r2, #1
 800be10:	d1f3      	bne.n	800bdfa <LmhpComplianceOnMcpsIndication+0x3a>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800be12:	78db      	ldrb	r3, [r3, #3]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800be14:	2b01      	cmp	r3, #1
 800be16:	d1f0      	bne.n	800bdfa <LmhpComplianceOnMcpsIndication+0x3a>
            ComplianceTestState.IsTxConfirmed = false;
 800be18:	4b79      	ldr	r3, [pc, #484]	@ (800c000 <LmhpComplianceOnMcpsIndication+0x240>)
 800be1a:	2400      	movs	r4, #0
 800be1c:	70dc      	strb	r4, [r3, #3]
            ComplianceTestState.Port = 224;
 800be1e:	22e0      	movs	r2, #224	@ 0xe0
 800be20:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800be22:	2202      	movs	r2, #2
 800be24:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800be26:	819c      	strh	r4, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800be28:	739c      	strb	r4, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800be2a:	73dc      	strb	r4, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800be2c:	741c      	strb	r4, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800be2e:	2201      	movs	r2, #1
 800be30:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800be32:	709a      	strb	r2, [r3, #2]
            mibReq.Type = MIB_ADR;
 800be34:	2304      	movs	r3, #4
 800be36:	f88d 3008 	strb.w	r3, [sp, #8]
            mibReq.Param.AdrEnable = true;
 800be3a:	f88d 200c 	strb.w	r2, [sp, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800be3e:	a802      	add	r0, sp, #8
 800be40:	f002 fed0 	bl	800ebe4 <LoRaMacMibSetRequestConfirm>
            LoRaMacTestSetDutyCycleOn( false );
 800be44:	4620      	mov	r0, r4
 800be46:	f003 fb29 	bl	800f49c <LoRaMacTestSetDutyCycleOn>
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800be4a:	4b6e      	ldr	r3, [pc, #440]	@ (800c004 <LmhpComplianceOnMcpsIndication+0x244>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	b103      	cbz	r3, 800be54 <LmhpComplianceOnMcpsIndication+0x94>
                LmhpComplianceParams->StopPeripherals( );
 800be52:	4798      	blx	r3
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800be54:	4c6c      	ldr	r4, [pc, #432]	@ (800c008 <LmhpComplianceOnMcpsIndication+0x248>)
 800be56:	2200      	movs	r2, #0
 800be58:	9200      	str	r2, [sp, #0]
 800be5a:	4b6c      	ldr	r3, [pc, #432]	@ (800c00c <LmhpComplianceOnMcpsIndication+0x24c>)
 800be5c:	f04f 31ff 	mov.w	r1, #4294967295
 800be60:	4620      	mov	r0, r4
 800be62:	f009 fe85 	bl	8015b70 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800be66:	f241 3188 	movw	r1, #5000	@ 0x1388
 800be6a:	4620      	mov	r0, r4
 800be6c:	f009 ff84 	bl	8015d78 <UTIL_TIMER_SetPeriod>
            LmhpComplianceTxProcess( );
 800be70:	f7ff ff52 	bl	800bd18 <LmhpComplianceTxProcess>
 800be74:	e7c1      	b.n	800bdfa <LmhpComplianceOnMcpsIndication+0x3a>
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800be76:	6882      	ldr	r2, [r0, #8]
 800be78:	7813      	ldrb	r3, [r2, #0]
 800be7a:	4961      	ldr	r1, [pc, #388]	@ (800c000 <LmhpComplianceOnMcpsIndication+0x240>)
 800be7c:	708b      	strb	r3, [r1, #2]
        switch( ComplianceTestState.State )
 800be7e:	2b0a      	cmp	r3, #10
 800be80:	d8bb      	bhi.n	800bdfa <LmhpComplianceOnMcpsIndication+0x3a>
 800be82:	e8df f003 	tbb	[pc, r3]
 800be86:	2206      	.short	0x2206
 800be88:	47312b26 	.word	0x47312b26
 800be8c:	a7a0714e 	.word	0xa7a0714e
 800be90:	b1          	.byte	0xb1
 800be91:	00          	.byte	0x00
                    TimerStop( &ComplianceTxNextPacketTimer );
 800be92:	485d      	ldr	r0, [pc, #372]	@ (800c008 <LmhpComplianceOnMcpsIndication+0x248>)
 800be94:	f009 fed0 	bl	8015c38 <UTIL_TIMER_Stop>
                    ComplianceTestState.DownLinkCounter = 0;
 800be98:	4b59      	ldr	r3, [pc, #356]	@ (800c000 <LmhpComplianceOnMcpsIndication+0x240>)
 800be9a:	2200      	movs	r2, #0
 800be9c:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 800be9e:	705a      	strb	r2, [r3, #1]
                    mibReq.Type = MIB_ADR;
 800bea0:	2304      	movs	r3, #4
 800bea2:	f88d 3008 	strb.w	r3, [sp, #8]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800bea6:	4c57      	ldr	r4, [pc, #348]	@ (800c004 <LmhpComplianceOnMcpsIndication+0x244>)
 800bea8:	6823      	ldr	r3, [r4, #0]
 800beaa:	781b      	ldrb	r3, [r3, #0]
 800beac:	f88d 300c 	strb.w	r3, [sp, #12]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800beb0:	a802      	add	r0, sp, #8
 800beb2:	f002 fe97 	bl	800ebe4 <LoRaMacMibSetRequestConfirm>
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800beb6:	6823      	ldr	r3, [r4, #0]
 800beb8:	7858      	ldrb	r0, [r3, #1]
 800beba:	f003 faef 	bl	800f49c <LoRaMacTestSetDutyCycleOn>
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 800bebe:	6823      	ldr	r3, [r4, #0]
 800bec0:	689b      	ldr	r3, [r3, #8]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d099      	beq.n	800bdfa <LmhpComplianceOnMcpsIndication+0x3a>
                        LmhpComplianceParams->StartPeripherals( );
 800bec6:	4798      	blx	r3
                break;
 800bec8:	e797      	b.n	800bdfa <LmhpComplianceOnMcpsIndication+0x3a>
                ComplianceTestState.DataBufferSize = 2;
 800beca:	4b4d      	ldr	r3, [pc, #308]	@ (800c000 <LmhpComplianceOnMcpsIndication+0x240>)
 800becc:	2202      	movs	r2, #2
 800bece:	719a      	strb	r2, [r3, #6]
                break;
 800bed0:	e793      	b.n	800bdfa <LmhpComplianceOnMcpsIndication+0x3a>
                ComplianceTestState.IsTxConfirmed = true;
 800bed2:	4b4b      	ldr	r3, [pc, #300]	@ (800c000 <LmhpComplianceOnMcpsIndication+0x240>)
 800bed4:	2201      	movs	r2, #1
 800bed6:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 800bed8:	709a      	strb	r2, [r3, #2]
                break;
 800beda:	e78e      	b.n	800bdfa <LmhpComplianceOnMcpsIndication+0x3a>
                ComplianceTestState.IsTxConfirmed = false;
 800bedc:	4b48      	ldr	r3, [pc, #288]	@ (800c000 <LmhpComplianceOnMcpsIndication+0x240>)
 800bede:	2200      	movs	r2, #0
 800bee0:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 800bee2:	2201      	movs	r2, #1
 800bee4:	709a      	strb	r2, [r3, #2]
                break;
 800bee6:	e788      	b.n	800bdfa <LmhpComplianceOnMcpsIndication+0x3a>
                ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800bee8:	7b01      	ldrb	r1, [r0, #12]
 800beea:	4b45      	ldr	r3, [pc, #276]	@ (800c000 <LmhpComplianceOnMcpsIndication+0x240>)
 800beec:	7199      	strb	r1, [r3, #6]
                ComplianceTestState.DataBuffer[0] = 4;
 800beee:	689c      	ldr	r4, [r3, #8]
 800bef0:	2304      	movs	r3, #4
 800bef2:	7023      	strb	r3, [r4, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800bef4:	2301      	movs	r3, #1
 800bef6:	4a42      	ldr	r2, [pc, #264]	@ (800c000 <LmhpComplianceOnMcpsIndication+0x240>)
 800bef8:	7952      	ldrb	r2, [r2, #5]
 800befa:	428a      	cmp	r2, r1
 800befc:	bf28      	it	cs
 800befe:	460a      	movcs	r2, r1
 800bf00:	429a      	cmp	r2, r3
 800bf02:	f67f af7a 	bls.w	800bdfa <LmhpComplianceOnMcpsIndication+0x3a>
                    ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800bf06:	6882      	ldr	r2, [r0, #8]
 800bf08:	5cd2      	ldrb	r2, [r2, r3]
 800bf0a:	3201      	adds	r2, #1
 800bf0c:	54e2      	strb	r2, [r4, r3]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800bf0e:	3301      	adds	r3, #1
 800bf10:	b2db      	uxtb	r3, r3
 800bf12:	e7f0      	b.n	800bef6 <LmhpComplianceOnMcpsIndication+0x136>
                    mlmeReq.Type = MLME_LINK_CHECK;
 800bf14:	2305      	movs	r3, #5
 800bf16:	f88d 3008 	strb.w	r3, [sp, #8]
                    LoRaMacMlmeRequest( &mlmeReq );
 800bf1a:	a802      	add	r0, sp, #8
 800bf1c:	f003 f920 	bl	800f160 <LoRaMacMlmeRequest>
                break;
 800bf20:	e76b      	b.n	800bdfa <LmhpComplianceOnMcpsIndication+0x3a>
                    TimerStop( &ComplianceTxNextPacketTimer );
 800bf22:	4839      	ldr	r0, [pc, #228]	@ (800c008 <LmhpComplianceOnMcpsIndication+0x248>)
 800bf24:	f009 fe88 	bl	8015c38 <UTIL_TIMER_Stop>
                    ComplianceTestState.DownLinkCounter = 0;
 800bf28:	4b35      	ldr	r3, [pc, #212]	@ (800c000 <LmhpComplianceOnMcpsIndication+0x240>)
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 800bf2e:	705a      	strb	r2, [r3, #1]
                    mibReq.Type = MIB_ADR;
 800bf30:	2304      	movs	r3, #4
 800bf32:	f88d 3008 	strb.w	r3, [sp, #8]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800bf36:	4c33      	ldr	r4, [pc, #204]	@ (800c004 <LmhpComplianceOnMcpsIndication+0x244>)
 800bf38:	6823      	ldr	r3, [r4, #0]
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	f88d 300c 	strb.w	r3, [sp, #12]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800bf40:	a802      	add	r0, sp, #8
 800bf42:	f002 fe4f 	bl	800ebe4 <LoRaMacMibSetRequestConfirm>
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800bf46:	6823      	ldr	r3, [r4, #0]
 800bf48:	7858      	ldrb	r0, [r3, #1]
 800bf4a:	f003 faa7 	bl	800f49c <LoRaMacTestSetDutyCycleOn>
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 800bf4e:	6823      	ldr	r3, [r4, #0]
 800bf50:	689b      	ldr	r3, [r3, #8]
 800bf52:	b103      	cbz	r3, 800bf56 <LmhpComplianceOnMcpsIndication+0x196>
                        LmhpComplianceParams->StartPeripherals( );
 800bf54:	4798      	blx	r3
                    if( LmhpCompliancePackage.OnJoinRequest != NULL )
 800bf56:	4b2e      	ldr	r3, [pc, #184]	@ (800c010 <LmhpComplianceOnMcpsIndication+0x250>)
 800bf58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	f43f af4d 	beq.w	800bdfa <LmhpComplianceOnMcpsIndication+0x3a>
                        LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800bf60:	2101      	movs	r1, #1
 800bf62:	2002      	movs	r0, #2
 800bf64:	4798      	blx	r3
                break;
 800bf66:	e748      	b.n	800bdfa <LmhpComplianceOnMcpsIndication+0x3a>
                    if( mcpsIndication->BufferSize == 3 )
 800bf68:	7b03      	ldrb	r3, [r0, #12]
 800bf6a:	2b03      	cmp	r3, #3
 800bf6c:	d008      	beq.n	800bf80 <LmhpComplianceOnMcpsIndication+0x1c0>
                    else if( mcpsIndication->BufferSize == 7 )
 800bf6e:	2b07      	cmp	r3, #7
 800bf70:	d010      	beq.n	800bf94 <LmhpComplianceOnMcpsIndication+0x1d4>
                    LoRaMacMlmeRequest( &mlmeReq );
 800bf72:	a802      	add	r0, sp, #8
 800bf74:	f003 f8f4 	bl	800f160 <LoRaMacMlmeRequest>
                    ComplianceTestState.State = 1;
 800bf78:	4b21      	ldr	r3, [pc, #132]	@ (800c000 <LmhpComplianceOnMcpsIndication+0x240>)
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	709a      	strb	r2, [r3, #2]
                break;
 800bf7e:	e73c      	b.n	800bdfa <LmhpComplianceOnMcpsIndication+0x3a>
                        mlmeReq.Type = MLME_TXCW;
 800bf80:	2306      	movs	r3, #6
 800bf82:	f88d 3008 	strb.w	r3, [sp, #8]
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800bf86:	7851      	ldrb	r1, [r2, #1]
 800bf88:	7893      	ldrb	r3, [r2, #2]
 800bf8a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800bf8e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800bf92:	e7ee      	b.n	800bf72 <LmhpComplianceOnMcpsIndication+0x1b2>
                        mlmeReq.Type = MLME_TXCW_1;
 800bf94:	f88d 3008 	strb.w	r3, [sp, #8]
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800bf98:	7851      	ldrb	r1, [r2, #1]
 800bf9a:	7893      	ldrb	r3, [r2, #2]
 800bf9c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800bfa0:	f8ad 300c 	strh.w	r3, [sp, #12]
                        mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800bfa4:	78d1      	ldrb	r1, [r2, #3]
 800bfa6:	7913      	ldrb	r3, [r2, #4]
 800bfa8:	021b      	lsls	r3, r3, #8
 800bfaa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800bfae:	7952      	ldrb	r2, [r2, #5]
 800bfb0:	4313      	orrs	r3, r2
 800bfb2:	2264      	movs	r2, #100	@ 0x64
 800bfb4:	fb02 f303 	mul.w	r3, r2, r3
 800bfb8:	9304      	str	r3, [sp, #16]
                        mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800bfba:	6883      	ldr	r3, [r0, #8]
 800bfbc:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800bfc0:	f88d 3014 	strb.w	r3, [sp, #20]
 800bfc4:	e7d5      	b.n	800bf72 <LmhpComplianceOnMcpsIndication+0x1b2>
                    mlmeReq.Type = MLME_DEVICE_TIME;
 800bfc6:	230a      	movs	r3, #10
 800bfc8:	f88d 3008 	strb.w	r3, [sp, #8]
                    LoRaMacMlmeRequest( &mlmeReq );
 800bfcc:	a802      	add	r0, sp, #8
 800bfce:	f003 f8c7 	bl	800f160 <LoRaMacMlmeRequest>
                break;
 800bfd2:	e712      	b.n	800bdfa <LmhpComplianceOnMcpsIndication+0x3a>
                    mibReq.Type = MIB_DEVICE_CLASS;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	f88d 3008 	strb.w	r3, [sp, #8]
                    mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800bfda:	7853      	ldrb	r3, [r2, #1]
 800bfdc:	f88d 300c 	strb.w	r3, [sp, #12]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800bfe0:	a802      	add	r0, sp, #8
 800bfe2:	f002 fdff 	bl	800ebe4 <LoRaMacMibSetRequestConfirm>
                break;
 800bfe6:	e708      	b.n	800bdfa <LmhpComplianceOnMcpsIndication+0x3a>
                    mlmeReq.Type = MLME_PING_SLOT_INFO;
 800bfe8:	230d      	movs	r3, #13
 800bfea:	f88d 3008 	strb.w	r3, [sp, #8]
                    mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800bfee:	7853      	ldrb	r3, [r2, #1]
 800bff0:	f88d 300c 	strb.w	r3, [sp, #12]
                    LoRaMacMlmeRequest( &mlmeReq );
 800bff4:	a802      	add	r0, sp, #8
 800bff6:	f003 f8b3 	bl	800f160 <LoRaMacMlmeRequest>
                break;
 800bffa:	e6fe      	b.n	800bdfa <LmhpComplianceOnMcpsIndication+0x3a>
 800bffc:	4770      	bx	lr
 800bffe:	bf00      	nop
 800c000:	2000351c 	.word	0x2000351c
 800c004:	20003518 	.word	0x20003518
 800c008:	20003530 	.word	0x20003530
 800c00c:	0800c015 	.word	0x0800c015
 800c010:	200000c8 	.word	0x200000c8

0800c014 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void *context )
{
 800c014:	b508      	push	{r3, lr}
    LmhpComplianceTxProcess( );
 800c016:	f7ff fe7f 	bl	800bd18 <LmhpComplianceTxProcess>
}
 800c01a:	bd08      	pop	{r3, pc}

0800c01c <LmhpCompliancePackageFactory>:
}
 800c01c:	4800      	ldr	r0, [pc, #0]	@ (800c020 <LmhpCompliancePackageFactory+0x4>)
 800c01e:	4770      	bx	lr
 800c020:	200000c8 	.word	0x200000c8

0800c024 <LmhpPackagesRegistrationInit>:
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
}
 800c024:	2000      	movs	r0, #0
 800c026:	4770      	bx	lr

0800c028 <LmhpPackagesRegister>:
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800c028:	f04f 30ff 	mov.w	r0, #4294967295
 800c02c:	4770      	bx	lr
	...

0800c030 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800c030:	4b07      	ldr	r3, [pc, #28]	@ (800c050 <UpdateRxSlotIdleState+0x20>)
 800c032:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800c036:	2b02      	cmp	r3, #2
 800c038:	d004      	beq.n	800c044 <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800c03a:	4b06      	ldr	r3, [pc, #24]	@ (800c054 <UpdateRxSlotIdleState+0x24>)
 800c03c:	2206      	movs	r2, #6
 800c03e:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
 800c042:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800c044:	4b03      	ldr	r3, [pc, #12]	@ (800c054 <UpdateRxSlotIdleState+0x24>)
 800c046:	2202      	movs	r2, #2
 800c048:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
    }
}
 800c04c:	4770      	bx	lr
 800c04e:	bf00      	nop
 800c050:	20008000 	.word	0x20008000
 800c054:	20003560 	.word	0x20003560

0800c058 <LoRaMacEnableRequests>:
    return false;
}

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 800c058:	4b01      	ldr	r3, [pc, #4]	@ (800c060 <LoRaMacEnableRequests+0x8>)
 800c05a:	f883 0482 	strb.w	r0, [r3, #1154]	@ 0x482
}
 800c05e:	4770      	bx	lr
 800c060:	20003560 	.word	0x20003560

0800c064 <LoRaMacHandleIndicationEvents>:
        MacCtx.MacFlags.Bits.MacDone = 0;
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 800c064:	b508      	push	{r3, lr}
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800c066:	4b15      	ldr	r3, [pc, #84]	@ (800c0bc <LoRaMacHandleIndicationEvents+0x58>)
 800c068:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800c06c:	f013 0f08 	tst.w	r3, #8
 800c070:	d00e      	beq.n	800c090 <LoRaMacHandleIndicationEvents+0x2c>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800c072:	4812      	ldr	r0, [pc, #72]	@ (800c0bc <LoRaMacHandleIndicationEvents+0x58>)
 800c074:	f890 3481 	ldrb.w	r3, [r0, #1153]	@ 0x481
 800c078:	f36f 03c3 	bfc	r3, #3, #1
 800c07c:	f880 3481 	strb.w	r3, [r0, #1153]	@ 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800c080:	f8d0 3344 	ldr.w	r3, [r0, #836]	@ 0x344
 800c084:	68db      	ldr	r3, [r3, #12]
 800c086:	f200 417c 	addw	r1, r0, #1148	@ 0x47c
 800c08a:	f200 405c 	addw	r0, r0, #1116	@ 0x45c
 800c08e:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800c090:	4b0a      	ldr	r3, [pc, #40]	@ (800c0bc <LoRaMacHandleIndicationEvents+0x58>)
 800c092:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800c096:	f013 0f02 	tst.w	r3, #2
 800c09a:	d00e      	beq.n	800c0ba <LoRaMacHandleIndicationEvents+0x56>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800c09c:	4807      	ldr	r0, [pc, #28]	@ (800c0bc <LoRaMacHandleIndicationEvents+0x58>)
 800c09e:	f890 3481 	ldrb.w	r3, [r0, #1153]	@ 0x481
 800c0a2:	f36f 0341 	bfc	r3, #1, #1
 800c0a6:	f880 3481 	strb.w	r3, [r0, #1153]	@ 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800c0aa:	f8d0 3344 	ldr.w	r3, [r0, #836]	@ 0x344
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	f200 417c 	addw	r1, r0, #1148	@ 0x47c
 800c0b4:	f500 6083 	add.w	r0, r0, #1048	@ 0x418
 800c0b8:	4798      	blx	r3
    }
}
 800c0ba:	bd08      	pop	{r3, pc}
 800c0bc:	20003560 	.word	0x20003560

0800c0c0 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800c0c0:	4b07      	ldr	r3, [pc, #28]	@ (800c0e0 <LoRaMacCheckForRxAbort+0x20>)
 800c0c2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c0c6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c0ca:	d008      	beq.n	800c0de <LoRaMacCheckForRxAbort+0x1e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800c0cc:	4a04      	ldr	r2, [pc, #16]	@ (800c0e0 <LoRaMacCheckForRxAbort+0x20>)
 800c0ce:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800c0d2:	f8c2 1340 	str.w	r1, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800c0d6:	f023 0382 	bic.w	r3, r3, #130	@ 0x82
 800c0da:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 800c0de:	4770      	bx	lr
 800c0e0:	20003560 	.word	0x20003560

0800c0e4 <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800c0e4:	4b06      	ldr	r3, [pc, #24]	@ (800c100 <CalculateBackOff+0x1c>)
 800c0e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0e8:	b94b      	cbnz	r3, 800c0fe <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800c0ea:	4a05      	ldr	r2, [pc, #20]	@ (800c100 <CalculateBackOff+0x1c>)
 800c0ec:	f8b2 311e 	ldrh.w	r3, [r2, #286]	@ 0x11e
 800c0f0:	4904      	ldr	r1, [pc, #16]	@ (800c104 <CalculateBackOff+0x20>)
 800c0f2:	f8d1 1414 	ldr.w	r1, [r1, #1044]	@ 0x414
 800c0f6:	3b01      	subs	r3, #1
 800c0f8:	fb01 f303 	mul.w	r3, r1, r3
 800c0fc:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 800c0fe:	4770      	bx	lr
 800c100:	20008000 	.word	0x20008000
 800c104:	20003560 	.word	0x20003560

0800c108 <SetTxContinuousWave1>:

    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 800c108:	b508      	push	{r3, lr}
 800c10a:	4684      	mov	ip, r0
 800c10c:	4608      	mov	r0, r1
 800c10e:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800c110:	4b06      	ldr	r3, [pc, #24]	@ (800c12c <SetTxContinuousWave1+0x24>)
 800c112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c114:	4662      	mov	r2, ip
 800c116:	b249      	sxtb	r1, r1
 800c118:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800c11a:	4a05      	ldr	r2, [pc, #20]	@ (800c130 <SetTxContinuousWave1+0x28>)
 800c11c:	f8d2 3340 	ldr.w	r3, [r2, #832]	@ 0x340
 800c120:	f043 0302 	orr.w	r3, r3, #2
 800c124:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
}
 800c128:	2000      	movs	r0, #0
 800c12a:	bd08      	pop	{r3, pc}
 800c12c:	080172ac 	.word	0x080172ac
 800c130:	20003560 	.word	0x20003560

0800c134 <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800c134:	4602      	mov	r2, r0
 800c136:	b1f8      	cbz	r0, 800c178 <DetermineFrameType+0x44>
 800c138:	b301      	cbz	r1, 800c17c <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800c13a:	7b03      	ldrb	r3, [r0, #12]
 800c13c:	f013 030f 	ands.w	r3, r3, #15
 800c140:	d005      	beq.n	800c14e <DetermineFrameType+0x1a>
 800c142:	f890 0020 	ldrb.w	r0, [r0, #32]
 800c146:	b110      	cbz	r0, 800c14e <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 800c148:	2000      	movs	r0, #0
 800c14a:	7008      	strb	r0, [r1, #0]
 800c14c:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800c14e:	f892 0028 	ldrb.w	r0, [r2, #40]	@ 0x28
 800c152:	b910      	cbnz	r0, 800c15a <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 800c154:	2301      	movs	r3, #1
 800c156:	700b      	strb	r3, [r1, #0]
 800c158:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800c15a:	b92b      	cbnz	r3, 800c168 <DetermineFrameType+0x34>
 800c15c:	f892 0020 	ldrb.w	r0, [r2, #32]
 800c160:	b910      	cbnz	r0, 800c168 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 800c162:	2302      	movs	r3, #2
 800c164:	700b      	strb	r3, [r1, #0]
 800c166:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800c168:	b953      	cbnz	r3, 800c180 <DetermineFrameType+0x4c>
 800c16a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800c16e:	b14a      	cbz	r2, 800c184 <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 800c170:	2203      	movs	r2, #3
 800c172:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 800c174:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 800c176:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c178:	2003      	movs	r0, #3
 800c17a:	4770      	bx	lr
 800c17c:	2003      	movs	r0, #3
 800c17e:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 800c180:	2018      	movs	r0, #24
 800c182:	4770      	bx	lr
 800c184:	2018      	movs	r0, #24
}
 800c186:	4770      	bx	lr

0800c188 <CheckRetransUnconfirmedUplink>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 800c188:	4b0f      	ldr	r3, [pc, #60]	@ (800c1c8 <CheckRetransUnconfirmedUplink+0x40>)
 800c18a:	f893 240c 	ldrb.w	r2, [r3, #1036]	@ 0x40c
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 800c18e:	4b0f      	ldr	r3, [pc, #60]	@ (800c1cc <CheckRetransUnconfirmedUplink+0x44>)
 800c190:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    if( MacCtx.ChannelsNbTransCounter >=
 800c194:	429a      	cmp	r2, r3
 800c196:	d20f      	bcs.n	800c1b8 <CheckRetransUnconfirmedUplink+0x30>
    {
        return true;
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800c198:	4b0b      	ldr	r3, [pc, #44]	@ (800c1c8 <CheckRetransUnconfirmedUplink+0x40>)
 800c19a:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800c19e:	f013 0f02 	tst.w	r3, #2
 800c1a2:	d00b      	beq.n	800c1bc <CheckRetransUnconfirmedUplink+0x34>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800c1a4:	4b09      	ldr	r3, [pc, #36]	@ (800c1cc <CheckRetransUnconfirmedUplink+0x44>)
 800c1a6:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800c1aa:	b14b      	cbz	r3, 800c1c0 <CheckRetransUnconfirmedUplink+0x38>
        {
            return true;
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800c1ac:	4b06      	ldr	r3, [pc, #24]	@ (800c1c8 <CheckRetransUnconfirmedUplink+0x40>)
 800c1ae:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800c1b2:	b13b      	cbz	r3, 800c1c4 <CheckRetransUnconfirmedUplink+0x3c>
            {
                return true;
            }
        }
    }
    return false;
 800c1b4:	2000      	movs	r0, #0
 800c1b6:	4770      	bx	lr
        return true;
 800c1b8:	2001      	movs	r0, #1
 800c1ba:	4770      	bx	lr
    return false;
 800c1bc:	2000      	movs	r0, #0
 800c1be:	4770      	bx	lr
            return true;
 800c1c0:	2001      	movs	r0, #1
 800c1c2:	4770      	bx	lr
                return true;
 800c1c4:	2001      	movs	r0, #1
}
 800c1c6:	4770      	bx	lr
 800c1c8:	20003560 	.word	0x20003560
 800c1cc:	20008000 	.word	0x20008000

0800c1d0 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 800c1d0:	4b0a      	ldr	r3, [pc, #40]	@ (800c1fc <CheckRetransConfirmedUplink+0x2c>)
 800c1d2:	f893 240e 	ldrb.w	r2, [r3, #1038]	@ 0x40e
        MacCtx.AckTimeoutRetries )
 800c1d6:	f893 340d 	ldrb.w	r3, [r3, #1037]	@ 0x40d
    if( MacCtx.AckTimeoutRetriesCounter >=
 800c1da:	429a      	cmp	r2, r3
 800c1dc:	d209      	bcs.n	800c1f2 <CheckRetransConfirmedUplink+0x22>
    {
        return true;
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800c1de:	4b07      	ldr	r3, [pc, #28]	@ (800c1fc <CheckRetransConfirmedUplink+0x2c>)
 800c1e0:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800c1e4:	f013 0f02 	tst.w	r3, #2
 800c1e8:	d005      	beq.n	800c1f6 <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800c1ea:	4b04      	ldr	r3, [pc, #16]	@ (800c1fc <CheckRetransConfirmedUplink+0x2c>)
 800c1ec:	f893 0438 	ldrb.w	r0, [r3, #1080]	@ 0x438
 800c1f0:	4770      	bx	lr
        return true;
 800c1f2:	2001      	movs	r0, #1
 800c1f4:	4770      	bx	lr
        {
            return true;
        }
    }
    return false;
 800c1f6:	2000      	movs	r0, #0
}
 800c1f8:	4770      	bx	lr
 800c1fa:	bf00      	nop
 800c1fc:	20003560 	.word	0x20003560

0800c200 <StopRetransmission>:
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800c200:	4b11      	ldr	r3, [pc, #68]	@ (800c248 <StopRetransmission+0x48>)
 800c202:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800c206:	f013 0f02 	tst.w	r3, #2
 800c20a:	d004      	beq.n	800c216 <StopRetransmission+0x16>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800c20c:	4b0e      	ldr	r3, [pc, #56]	@ (800c248 <StopRetransmission+0x48>)
 800c20e:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800c212:	2b01      	cmp	r3, #1
 800c214:	d907      	bls.n	800c226 <StopRetransmission+0x26>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800c216:	4b0d      	ldr	r3, [pc, #52]	@ (800c24c <StopRetransmission+0x4c>)
 800c218:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800c21c:	b11b      	cbz	r3, 800c226 <StopRetransmission+0x26>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 800c21e:	4a0b      	ldr	r2, [pc, #44]	@ (800c24c <StopRetransmission+0x4c>)
 800c220:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 800c222:	3301      	adds	r3, #1
 800c224:	6293      	str	r3, [r2, #40]	@ 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800c226:	4b08      	ldr	r3, [pc, #32]	@ (800c248 <StopRetransmission+0x48>)
 800c228:	2200      	movs	r2, #0
 800c22a:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
    MacCtx.NodeAckRequested = false;
 800c22e:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 800c232:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800c236:	f8d3 2340 	ldr.w	r2, [r3, #832]	@ 0x340
 800c23a:	f022 0202 	bic.w	r2, r2, #2
 800c23e:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return true;
}
 800c242:	2001      	movs	r0, #1
 800c244:	4770      	bx	lr
 800c246:	bf00      	nop
 800c248:	20003560 	.word	0x20003560
 800c24c:	20008000 	.word	0x20008000

0800c250 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 800c250:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800c252:	4b04      	ldr	r3, [pc, #16]	@ (800c264 <OnMacProcessNotify+0x14>)
 800c254:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800c258:	b113      	cbz	r3, 800c260 <OnMacProcessNotify+0x10>
 800c25a:	695b      	ldr	r3, [r3, #20]
 800c25c:	b103      	cbz	r3, 800c260 <OnMacProcessNotify+0x10>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800c25e:	4798      	blx	r3
    }
}
 800c260:	bd08      	pop	{r3, pc}
 800c262:	bf00      	nop
 800c264:	20003560 	.word	0x20003560

0800c268 <OnRadioRxError>:
{
 800c268:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 800c26a:	4a04      	ldr	r2, [pc, #16]	@ (800c27c <OnRadioRxError+0x14>)
 800c26c:	7813      	ldrb	r3, [r2, #0]
 800c26e:	f043 0302 	orr.w	r3, r3, #2
 800c272:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800c274:	f7ff ffec 	bl	800c250 <OnMacProcessNotify>
}
 800c278:	bd08      	pop	{r3, pc}
 800c27a:	bf00      	nop
 800c27c:	2000355c 	.word	0x2000355c

0800c280 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 800c280:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 800c282:	4b04      	ldr	r3, [pc, #16]	@ (800c294 <CallNvmDataChangeCallback+0x14>)
 800c284:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800c288:	b113      	cbz	r3, 800c290 <CallNvmDataChangeCallback+0x10>
 800c28a:	691b      	ldr	r3, [r3, #16]
 800c28c:	b103      	cbz	r3, 800c290 <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 800c28e:	4798      	blx	r3
    }
}
 800c290:	bd08      	pop	{r3, pc}
 800c292:	bf00      	nop
 800c294:	20003560 	.word	0x20003560

0800c298 <IsRequestPending>:
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800c298:	4b04      	ldr	r3, [pc, #16]	@ (800c2ac <IsRequestPending+0x14>)
 800c29a:	f893 0481 	ldrb.w	r0, [r3, #1153]	@ 0x481
 800c29e:	f010 0005 	ands.w	r0, r0, #5
 800c2a2:	d100      	bne.n	800c2a6 <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 800c2a4:	4770      	bx	lr
        return 1;
 800c2a6:	2001      	movs	r0, #1
 800c2a8:	e7fc      	b.n	800c2a4 <IsRequestPending+0xc>
 800c2aa:	bf00      	nop
 800c2ac:	20003560 	.word	0x20003560

0800c2b0 <AckTimeoutRetriesProcess>:
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 800c2b0:	4a13      	ldr	r2, [pc, #76]	@ (800c300 <AckTimeoutRetriesProcess+0x50>)
 800c2b2:	f892 340e 	ldrb.w	r3, [r2, #1038]	@ 0x40e
 800c2b6:	f892 240d 	ldrb.w	r2, [r2, #1037]	@ 0x40d
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d207      	bcs.n	800c2ce <AckTimeoutRetriesProcess+0x1e>
        MacCtx.AckTimeoutRetriesCounter++;
 800c2be:	3301      	adds	r3, #1
 800c2c0:	b2db      	uxtb	r3, r3
 800c2c2:	4a0f      	ldr	r2, [pc, #60]	@ (800c300 <AckTimeoutRetriesProcess+0x50>)
 800c2c4:	f882 340e 	strb.w	r3, [r2, #1038]	@ 0x40e
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 800c2c8:	f013 0f01 	tst.w	r3, #1
 800c2cc:	d100      	bne.n	800c2d0 <AckTimeoutRetriesProcess+0x20>
 800c2ce:	4770      	bx	lr
{
 800c2d0:	b510      	push	{r4, lr}
 800c2d2:	b084      	sub	sp, #16
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800c2d4:	2322      	movs	r3, #34	@ 0x22
 800c2d6:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c2da:	4c0a      	ldr	r4, [pc, #40]	@ (800c304 <AckTimeoutRetriesProcess+0x54>)
 800c2dc:	f894 307c 	ldrb.w	r3, [r4, #124]	@ 0x7c
 800c2e0:	f88d 300a 	strb.w	r3, [sp, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800c2e4:	f994 3039 	ldrsb.w	r3, [r4, #57]	@ 0x39
 800c2e8:	f88d 3009 	strb.w	r3, [sp, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c2ec:	a902      	add	r1, sp, #8
 800c2ee:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800c2f2:	f004 f9ab 	bl	801064c <RegionGetPhyParam>
 800c2f6:	9001      	str	r0, [sp, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 800c2f8:	f884 0039 	strb.w	r0, [r4, #57]	@ 0x39
}
 800c2fc:	b004      	add	sp, #16
 800c2fe:	bd10      	pop	{r4, pc}
 800c300:	20003560 	.word	0x20003560
 800c304:	20008000 	.word	0x20008000

0800c308 <GetMaxAppPayloadWithoutFOptsLength>:
{
 800c308:	b500      	push	{lr}
 800c30a:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c30c:	4b0d      	ldr	r3, [pc, #52]	@ (800c344 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 800c30e:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 800c312:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 800c316:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800c31a:	220d      	movs	r2, #13
 800c31c:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800c320:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800c324:	b113      	cbz	r3, 800c32c <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800c326:	230e      	movs	r3, #14
 800c328:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c32c:	a902      	add	r1, sp, #8
 800c32e:	4b05      	ldr	r3, [pc, #20]	@ (800c344 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 800c330:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800c334:	f004 f98a 	bl	801064c <RegionGetPhyParam>
 800c338:	9001      	str	r0, [sp, #4]
}
 800c33a:	b2c0      	uxtb	r0, r0
 800c33c:	b005      	add	sp, #20
 800c33e:	f85d fb04 	ldr.w	pc, [sp], #4
 800c342:	bf00      	nop
 800c344:	20008000 	.word	0x20008000

0800c348 <ValidatePayloadLength>:
{
 800c348:	b538      	push	{r3, r4, r5, lr}
 800c34a:	4604      	mov	r4, r0
 800c34c:	4615      	mov	r5, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800c34e:	4608      	mov	r0, r1
 800c350:	f7ff ffda 	bl	800c308 <GetMaxAppPayloadWithoutFOptsLength>
    payloadSize = ( lenN + fOptsLen );
 800c354:	442c      	add	r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800c356:	42a0      	cmp	r0, r4
 800c358:	d201      	bcs.n	800c35e <ValidatePayloadLength+0x16>
    return false;
 800c35a:	2000      	movs	r0, #0
}
 800c35c:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 800c35e:	2001      	movs	r0, #1
 800c360:	e7fc      	b.n	800c35c <ValidatePayloadLength+0x14>
	...

0800c364 <ProcessRadioTxDone>:
{
 800c364:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c366:	b08f      	sub	sp, #60	@ 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800c368:	4b40      	ldr	r3, [pc, #256]	@ (800c46c <ProcessRadioTxDone+0x108>)
 800c36a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800c36e:	2b02      	cmp	r3, #2
 800c370:	d002      	beq.n	800c378 <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 800c372:	4b3f      	ldr	r3, [pc, #252]	@ (800c470 <ProcessRadioTxDone+0x10c>)
 800c374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c376:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c378:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c37c:	b672      	cpsid	i
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800c37e:	f009 fc1b 	bl	8015bb8 <UTIL_TIMER_GetCurrentTime>
 800c382:	4b3c      	ldr	r3, [pc, #240]	@ (800c474 <ProcessRadioTxDone+0x110>)
 800c384:	681d      	ldr	r5, [r3, #0]
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800c386:	4c3c      	ldr	r4, [pc, #240]	@ (800c478 <ProcessRadioTxDone+0x114>)
 800c388:	f8d4 13b0 	ldr.w	r1, [r4, #944]	@ 0x3b0
 800c38c:	1a2d      	subs	r5, r5, r0
 800c38e:	f504 7660 	add.w	r6, r4, #896	@ 0x380
 800c392:	4429      	add	r1, r5
 800c394:	4630      	mov	r0, r6
 800c396:	f009 fcef 	bl	8015d78 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800c39a:	4630      	mov	r0, r6
 800c39c:	f009 fca6 	bl	8015cec <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800c3a0:	f8d4 13b4 	ldr.w	r1, [r4, #948]	@ 0x3b4
 800c3a4:	f504 7466 	add.w	r4, r4, #920	@ 0x398
 800c3a8:	4429      	add	r1, r5
 800c3aa:	4620      	mov	r0, r4
 800c3ac:	f009 fce4 	bl	8015d78 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800c3b0:	4620      	mov	r0, r4
 800c3b2:	f009 fc9b 	bl	8015cec <UTIL_TIMER_Start>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3b6:	f387 8810 	msr	PRIMASK, r7
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800c3ba:	4b2c      	ldr	r3, [pc, #176]	@ (800c46c <ProcessRadioTxDone+0x108>)
 800c3bc:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800c3c0:	2b02      	cmp	r3, #2
 800c3c2:	d004      	beq.n	800c3ce <ProcessRadioTxDone+0x6a>
 800c3c4:	f5a4 7366 	sub.w	r3, r4, #920	@ 0x398
 800c3c8:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800c3cc:	b1ab      	cbz	r3, 800c3fa <ProcessRadioTxDone+0x96>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800c3ce:	2316      	movs	r3, #22
 800c3d0:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c3d4:	a90a      	add	r1, sp, #40	@ 0x28
 800c3d6:	4b25      	ldr	r3, [pc, #148]	@ (800c46c <ProcessRadioTxDone+0x108>)
 800c3d8:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800c3dc:	f004 f936 	bl	801064c <RegionGetPhyParam>
 800c3e0:	9009      	str	r0, [sp, #36]	@ 0x24
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800c3e2:	4c25      	ldr	r4, [pc, #148]	@ (800c478 <ProcessRadioTxDone+0x114>)
 800c3e4:	f8d4 13b4 	ldr.w	r1, [r4, #948]	@ 0x3b4
 800c3e8:	f504 747d 	add.w	r4, r4, #1012	@ 0x3f4
 800c3ec:	4401      	add	r1, r0
 800c3ee:	4620      	mov	r0, r4
 800c3f0:	f009 fcc2 	bl	8015d78 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800c3f4:	4620      	mov	r0, r4
 800c3f6:	f009 fc79 	bl	8015cec <UTIL_TIMER_Start>
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800c3fa:	4b1e      	ldr	r3, [pc, #120]	@ (800c474 <ProcessRadioTxDone+0x110>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	4c1b      	ldr	r4, [pc, #108]	@ (800c46c <ProcessRadioTxDone+0x108>)
 800c400:	62e3      	str	r3, [r4, #44]	@ 0x2c
    txDone.Channel = MacCtx.Channel;
 800c402:	4f1d      	ldr	r7, [pc, #116]	@ (800c478 <ProcessRadioTxDone+0x114>)
 800c404:	f897 2411 	ldrb.w	r2, [r7, #1041]	@ 0x411
 800c408:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800c40c:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800c40e:	ae0c      	add	r6, sp, #48	@ 0x30
 800c410:	4630      	mov	r0, r6
 800c412:	f009 fb3f 	bl	8015a94 <SysTimeGetMcuTime>
 800c416:	ad02      	add	r5, sp, #8
 800c418:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
 800c41c:	9300      	str	r3, [sp, #0]
 800c41e:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
 800c422:	e896 0006 	ldmia.w	r6, {r1, r2}
 800c426:	4628      	mov	r0, r5
 800c428:	f009 fad1 	bl	80159ce <SysTimeSub>
 800c42c:	ab07      	add	r3, sp, #28
 800c42e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c432:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800c436:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 800c43a:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 800c43c:	2301      	movs	r3, #1
 800c43e:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c442:	f894 312c 	ldrb.w	r3, [r4, #300]	@ 0x12c
 800c446:	b90b      	cbnz	r3, 800c44c <ProcessRadioTxDone+0xe8>
        txDone.Joined  = false;
 800c448:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800c44c:	a904      	add	r1, sp, #16
 800c44e:	4b07      	ldr	r3, [pc, #28]	@ (800c46c <ProcessRadioTxDone+0x108>)
 800c450:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800c454:	f004 f912 	bl	801067c <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
 800c458:	4b07      	ldr	r3, [pc, #28]	@ (800c478 <ProcessRadioTxDone+0x114>)
 800c45a:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800c45e:	b91b      	cbnz	r3, 800c468 <ProcessRadioTxDone+0x104>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800c460:	4b05      	ldr	r3, [pc, #20]	@ (800c478 <ProcessRadioTxDone+0x114>)
 800c462:	2200      	movs	r2, #0
 800c464:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
}
 800c468:	b00f      	add	sp, #60	@ 0x3c
 800c46a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c46c:	20008000 	.word	0x20008000
 800c470:	080172ac 	.word	0x080172ac
 800c474:	20003558 	.word	0x20003558
 800c478:	20003560 	.word	0x20003560

0800c47c <OnAckTimeoutTimerEvent>:
{
 800c47c:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 800c47e:	4c0d      	ldr	r4, [pc, #52]	@ (800c4b4 <OnAckTimeoutTimerEvent+0x38>)
 800c480:	4620      	mov	r0, r4
 800c482:	f009 fbd9 	bl	8015c38 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 800c486:	7f23      	ldrb	r3, [r4, #28]
 800c488:	b123      	cbz	r3, 800c494 <OnAckTimeoutTimerEvent+0x18>
        MacCtx.AckTimeoutRetry = true;
 800c48a:	f5a4 737d 	sub.w	r3, r4, #1012	@ 0x3f4
 800c48e:	2201      	movs	r2, #1
 800c490:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800c494:	4b08      	ldr	r3, [pc, #32]	@ (800c4b8 <OnAckTimeoutTimerEvent+0x3c>)
 800c496:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800c49a:	2b02      	cmp	r3, #2
 800c49c:	d002      	beq.n	800c4a4 <OnAckTimeoutTimerEvent+0x28>
    OnMacProcessNotify( );
 800c49e:	f7ff fed7 	bl	800c250 <OnMacProcessNotify>
}
 800c4a2:	bd10      	pop	{r4, pc}
        MacCtx.MacFlags.Bits.MacDone = 1;
 800c4a4:	4a05      	ldr	r2, [pc, #20]	@ (800c4bc <OnAckTimeoutTimerEvent+0x40>)
 800c4a6:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800c4aa:	f043 0310 	orr.w	r3, r3, #16
 800c4ae:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
 800c4b2:	e7f4      	b.n	800c49e <OnAckTimeoutTimerEvent+0x22>
 800c4b4:	20003954 	.word	0x20003954
 800c4b8:	20008000 	.word	0x20008000
 800c4bc:	20003560 	.word	0x20003560

0800c4c0 <PrepareRxDoneAbort>:
{
 800c4c0:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800c4c2:	4b0e      	ldr	r3, [pc, #56]	@ (800c4fc <PrepareRxDoneAbort+0x3c>)
 800c4c4:	f8d3 2340 	ldr.w	r2, [r3, #832]	@ 0x340
 800c4c8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c4cc:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == true )
 800c4d0:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800c4d4:	b973      	cbnz	r3, 800c4f4 <PrepareRxDoneAbort+0x34>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 800c4d6:	4b09      	ldr	r3, [pc, #36]	@ (800c4fc <PrepareRxDoneAbort+0x3c>)
 800c4d8:	f893 2481 	ldrb.w	r2, [r3, #1153]	@ 0x481
 800c4dc:	f042 0202 	orr.w	r2, r2, #2
 800c4e0:	f883 2481 	strb.w	r2, [r3, #1153]	@ 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 800c4e4:	b2d2      	uxtb	r2, r2
 800c4e6:	f042 0210 	orr.w	r2, r2, #16
 800c4ea:	f883 2481 	strb.w	r2, [r3, #1153]	@ 0x481
    UpdateRxSlotIdleState( );
 800c4ee:	f7ff fd9f 	bl	800c030 <UpdateRxSlotIdleState>
}
 800c4f2:	bd08      	pop	{r3, pc}
        OnAckTimeoutTimerEvent( NULL );
 800c4f4:	2000      	movs	r0, #0
 800c4f6:	f7ff ffc1 	bl	800c47c <OnAckTimeoutTimerEvent>
 800c4fa:	e7ec      	b.n	800c4d6 <PrepareRxDoneAbort+0x16>
 800c4fc:	20003560 	.word	0x20003560

0800c500 <LoRaMacCheckForBeaconAcquisition>:
{
 800c500:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800c502:	200c      	movs	r0, #12
 800c504:	f003 fb0e 	bl	800fb24 <LoRaMacConfirmQueueIsCmdActive>
 800c508:	b188      	cbz	r0, 800c52e <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800c50a:	4b0b      	ldr	r3, [pc, #44]	@ (800c538 <LoRaMacCheckForBeaconAcquisition+0x38>)
 800c50c:	f893 0481 	ldrb.w	r0, [r3, #1153]	@ 0x481
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800c510:	f010 0f01 	tst.w	r0, #1
 800c514:	d10d      	bne.n	800c532 <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800c516:	f010 0004 	ands.w	r0, r0, #4
 800c51a:	d009      	beq.n	800c530 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800c51c:	461a      	mov	r2, r3
 800c51e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800c522:	f023 0302 	bic.w	r3, r3, #2
 800c526:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 800c52a:	2001      	movs	r0, #1
 800c52c:	e000      	b.n	800c530 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 800c52e:	2000      	movs	r0, #0
}
 800c530:	bd08      	pop	{r3, pc}
    return 0x00;
 800c532:	2000      	movs	r0, #0
 800c534:	e7fc      	b.n	800c530 <LoRaMacCheckForBeaconAcquisition+0x30>
 800c536:	bf00      	nop
 800c538:	20003560 	.word	0x20003560

0800c53c <GetFCntDown>:
{
 800c53c:	b538      	push	{r3, r4, r5, lr}
 800c53e:	9c05      	ldr	r4, [sp, #20]
 800c540:	9d06      	ldr	r5, [sp, #24]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800c542:	b302      	cbz	r2, 800c586 <GetFCntDown+0x4a>
 800c544:	4694      	mov	ip, r2
 800c546:	b304      	cbz	r4, 800c58a <GetFCntDown+0x4e>
 800c548:	b30d      	cbz	r5, 800c58e <GetFCntDown+0x52>
    switch( addrID )
 800c54a:	b188      	cbz	r0, 800c570 <GetFCntDown+0x34>
 800c54c:	2801      	cmp	r0, #1
 800c54e:	d120      	bne.n	800c592 <GetFCntDown+0x56>
            if( lrWanVersion.Fields.Minor == 1 )
 800c550:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800c554:	2a01      	cmp	r2, #1
 800c556:	d002      	beq.n	800c55e <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 800c558:	2303      	movs	r3, #3
 800c55a:	7023      	strb	r3, [r4, #0]
 800c55c:	e00a      	b.n	800c574 <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800c55e:	b121      	cbz	r1, 800c56a <GetFCntDown+0x2e>
 800c560:	2903      	cmp	r1, #3
 800c562:	d002      	beq.n	800c56a <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 800c564:	2301      	movs	r3, #1
 800c566:	7023      	strb	r3, [r4, #0]
 800c568:	e004      	b.n	800c574 <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 800c56a:	2302      	movs	r3, #2
 800c56c:	7023      	strb	r3, [r4, #0]
 800c56e:	e001      	b.n	800c574 <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 800c570:	2304      	movs	r3, #4
 800c572:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800c574:	462b      	mov	r3, r5
 800c576:	f8bc 200e 	ldrh.w	r2, [ip, #14]
 800c57a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800c57e:	7820      	ldrb	r0, [r4, #0]
 800c580:	f003 fcfa 	bl	800ff78 <LoRaMacCryptoGetFCntDown>
}
 800c584:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c586:	200a      	movs	r0, #10
 800c588:	e7fc      	b.n	800c584 <GetFCntDown+0x48>
 800c58a:	200a      	movs	r0, #10
 800c58c:	e7fa      	b.n	800c584 <GetFCntDown+0x48>
 800c58e:	200a      	movs	r0, #10
 800c590:	e7f8      	b.n	800c584 <GetFCntDown+0x48>
    switch( addrID )
 800c592:	2005      	movs	r0, #5
 800c594:	e7f6      	b.n	800c584 <GetFCntDown+0x48>

0800c596 <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800c596:	2801      	cmp	r0, #1
 800c598:	d900      	bls.n	800c59c <RemoveMacCommands+0x6>
 800c59a:	4770      	bx	lr
{
 800c59c:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 800c59e:	2a01      	cmp	r2, #1
 800c5a0:	d105      	bne.n	800c5ae <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 800c5a2:	f011 0f20 	tst.w	r1, #32
 800c5a6:	d004      	beq.n	800c5b2 <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800c5a8:	f003 f968 	bl	800f87c <LoRaMacCommandsRemoveStickyAnsCmds>
 800c5ac:	e001      	b.n	800c5b2 <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800c5ae:	f003 f965 	bl	800f87c <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800c5b2:	bd08      	pop	{r3, pc}

0800c5b4 <ProcessMacCommands>:
{
 800c5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5b8:	b08f      	sub	sp, #60	@ 0x3c
 800c5ba:	4605      	mov	r5, r0
 800c5bc:	460c      	mov	r4, r1
 800c5be:	4616      	mov	r6, r2
 800c5c0:	4698      	mov	r8, r3
    uint8_t status = 0;
 800c5c2:	2700      	movs	r7, #0
 800c5c4:	f88d 702f 	strb.w	r7, [sp, #47]	@ 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800c5c8:	f8ad 702c 	strh.w	r7, [sp, #44]	@ 0x2c
    while( macIndex < commandsSize )
 800c5cc:	42b4      	cmp	r4, r6
 800c5ce:	f080 82c0 	bcs.w	800cb52 <ProcessMacCommands+0x59e>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800c5d2:	5d28      	ldrb	r0, [r5, r4]
 800c5d4:	f003 f9aa 	bl	800f92c <LoRaMacCommandsGetCmdSize>
 800c5d8:	4420      	add	r0, r4
 800c5da:	42b0      	cmp	r0, r6
 800c5dc:	f300 82b9 	bgt.w	800cb52 <ProcessMacCommands+0x59e>
        switch( payload[macIndex++] )
 800c5e0:	1c63      	adds	r3, r4, #1
 800c5e2:	fa5f f983 	uxtb.w	r9, r3
 800c5e6:	5d29      	ldrb	r1, [r5, r4]
 800c5e8:	3902      	subs	r1, #2
 800c5ea:	2911      	cmp	r1, #17
 800c5ec:	f200 82b1 	bhi.w	800cb52 <ProcessMacCommands+0x59e>
 800c5f0:	e8df f011 	tbh	[pc, r1, lsl #1]
 800c5f4:	00290012 	.word	0x00290012
 800c5f8:	00a50091 	.word	0x00a50091
 800c5fc:	010300eb 	.word	0x010300eb
 800c600:	0154013d 	.word	0x0154013d
 800c604:	02af01aa 	.word	0x02af01aa
 800c608:	01db02af 	.word	0x01db02af
 800c60c:	02af02af 	.word	0x02af02af
 800c610:	0252023b 	.word	0x0252023b
 800c614:	028e0272 	.word	0x028e0272
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800c618:	2005      	movs	r0, #5
 800c61a:	f003 fa83 	bl	800fb24 <LoRaMacConfirmQueueIsCmdActive>
 800c61e:	b908      	cbnz	r0, 800c624 <ProcessMacCommands+0x70>
        switch( payload[macIndex++] )
 800c620:	464c      	mov	r4, r9
 800c622:	e7d3      	b.n	800c5cc <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800c624:	2105      	movs	r1, #5
 800c626:	2000      	movs	r0, #0
 800c628:	f003 fa30 	bl	800fa8c <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800c62c:	1ca3      	adds	r3, r4, #2
 800c62e:	b2db      	uxtb	r3, r3
 800c630:	f815 1009 	ldrb.w	r1, [r5, r9]
 800c634:	4ac0      	ldr	r2, [pc, #768]	@ (800c938 <ProcessMacCommands+0x384>)
 800c636:	f882 1450 	strb.w	r1, [r2, #1104]	@ 0x450
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800c63a:	3403      	adds	r4, #3
 800c63c:	b2e4      	uxtb	r4, r4
 800c63e:	5ceb      	ldrb	r3, [r5, r3]
 800c640:	f882 3451 	strb.w	r3, [r2, #1105]	@ 0x451
 800c644:	e7c2      	b.n	800c5cc <ProcessMacCommands+0x18>
                int8_t linkAdrDatarate = DR_0;
 800c646:	2300      	movs	r3, #0
 800c648:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 800c64c:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 800c650:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 800c654:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 800c658:	b10f      	cbz	r7, 800c65e <ProcessMacCommands+0xaa>
                break;
 800c65a:	464c      	mov	r4, r9
 800c65c:	e7b6      	b.n	800c5cc <ProcessMacCommands+0x18>
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800c65e:	f109 33ff 	add.w	r3, r9, #4294967295
 800c662:	442b      	add	r3, r5
 800c664:	9308      	str	r3, [sp, #32]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800c666:	eba6 0309 	sub.w	r3, r6, r9
 800c66a:	3301      	adds	r3, #1
 800c66c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800c670:	48b2      	ldr	r0, [pc, #712]	@ (800c93c <ProcessMacCommands+0x388>)
 800c672:	f890 311a 	ldrb.w	r3, [r0, #282]	@ 0x11a
 800c676:	f88d 3026 	strb.w	r3, [sp, #38]	@ 0x26
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c67a:	f890 307c 	ldrb.w	r3, [r0, #124]	@ 0x7c
 800c67e:	f88d 3025 	strb.w	r3, [sp, #37]	@ 0x25
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800c682:	f990 3039 	ldrsb.w	r3, [r0, #57]	@ 0x39
 800c686:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800c68a:	f990 3038 	ldrsb.w	r3, [r0, #56]	@ 0x38
 800c68e:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800c692:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 800c696:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800c69a:	f8d0 3128 	ldr.w	r3, [r0, #296]	@ 0x128
 800c69e:	9307      	str	r3, [sp, #28]
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800c6a0:	ab05      	add	r3, sp, #20
 800c6a2:	9301      	str	r3, [sp, #4]
 800c6a4:	ab03      	add	r3, sp, #12
 800c6a6:	9300      	str	r3, [sp, #0]
 800c6a8:	f10d 030b 	add.w	r3, sp, #11
 800c6ac:	f10d 020a 	add.w	r2, sp, #10
 800c6b0:	a907      	add	r1, sp, #28
 800c6b2:	f890 0048 	ldrb.w	r0, [r0, #72]	@ 0x48
 800c6b6:	f004 f861 	bl	801077c <RegionLinkAdrReq>
 800c6ba:	f88d 002f 	strb.w	r0, [sp, #47]	@ 0x2f
                    if( ( status & 0x07 ) == 0x07 )
 800c6be:	f000 0007 	and.w	r0, r0, #7
 800c6c2:	2807      	cmp	r0, #7
 800c6c4:	d001      	beq.n	800c6ca <ProcessMacCommands+0x116>
{
 800c6c6:	2400      	movs	r4, #0
 800c6c8:	e015      	b.n	800c6f6 <ProcessMacCommands+0x142>
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800c6ca:	4b9c      	ldr	r3, [pc, #624]	@ (800c93c <ProcessMacCommands+0x388>)
 800c6cc:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800c6d0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800c6d4:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800c6d8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800c6dc:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800c6e0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
 800c6e4:	e7ef      	b.n	800c6c6 <ProcessMacCommands+0x112>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	f10d 012f 	add.w	r1, sp, #47	@ 0x2f
 800c6ec:	2003      	movs	r0, #3
 800c6ee:	f003 f851 	bl	800f794 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800c6f2:	3401      	adds	r4, #1
 800c6f4:	b2e4      	uxtb	r4, r4
 800c6f6:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800c6fa:	4b91      	ldr	r3, [pc, #580]	@ (800c940 <ProcessMacCommands+0x38c>)
 800c6fc:	fba3 1302 	umull	r1, r3, r3, r2
 800c700:	ebb4 0f93 	cmp.w	r4, r3, lsr #2
 800c704:	d3ef      	bcc.n	800c6e6 <ProcessMacCommands+0x132>
                    macIndex += linkAdrNbBytesParsed - 1;
 800c706:	eb02 0309 	add.w	r3, r2, r9
 800c70a:	b2db      	uxtb	r3, r3
 800c70c:	3b01      	subs	r3, #1
 800c70e:	fa5f f983 	uxtb.w	r9, r3
                    adrBlockFound = true;
 800c712:	2701      	movs	r7, #1
 800c714:	e7a1      	b.n	800c65a <ProcessMacCommands+0xa6>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800c716:	3402      	adds	r4, #2
 800c718:	b2e4      	uxtb	r4, r4
 800c71a:	f815 3009 	ldrb.w	r3, [r5, r9]
 800c71e:	f003 030f 	and.w	r3, r3, #15
 800c722:	4986      	ldr	r1, [pc, #536]	@ (800c93c <ProcessMacCommands+0x388>)
 800c724:	f881 311b 	strb.w	r3, [r1, #283]	@ 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800c728:	2201      	movs	r2, #1
 800c72a:	fa02 f303 	lsl.w	r3, r2, r3
 800c72e:	f8a1 311e 	strh.w	r3, [r1, #286]	@ 0x11e
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800c732:	2200      	movs	r2, #0
 800c734:	a90b      	add	r1, sp, #44	@ 0x2c
 800c736:	2004      	movs	r0, #4
 800c738:	f003 f82c 	bl	800f794 <LoRaMacCommandsAddCmd>
                break;
 800c73c:	e746      	b.n	800c5cc <ProcessMacCommands+0x18>
                status = 0x07;
 800c73e:	2307      	movs	r3, #7
 800c740:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800c744:	f815 3009 	ldrb.w	r3, [r5, r9]
 800c748:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800c74c:	f88d 201d 	strb.w	r2, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800c750:	f003 030f 	and.w	r3, r3, #15
 800c754:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 800c758:	1ca3      	adds	r3, r4, #2
 800c75a:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800c75c:	1ce1      	adds	r1, r4, #3
 800c75e:	b2c9      	uxtb	r1, r1
 800c760:	5ceb      	ldrb	r3, [r5, r3]
 800c762:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800c764:	1d22      	adds	r2, r4, #4
 800c766:	b2d2      	uxtb	r2, r2
 800c768:	5c69      	ldrb	r1, [r5, r1]
 800c76a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c76e:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800c770:	3405      	adds	r4, #5
 800c772:	b2e4      	uxtb	r4, r4
 800c774:	5caa      	ldrb	r2, [r5, r2]
 800c776:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c77a:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency *= 100;
 800c77c:	2264      	movs	r2, #100	@ 0x64
 800c77e:	fb02 f303 	mul.w	r3, r2, r3
 800c782:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800c784:	a907      	add	r1, sp, #28
 800c786:	4b6d      	ldr	r3, [pc, #436]	@ (800c93c <ProcessMacCommands+0x388>)
 800c788:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800c78c:	f004 f812 	bl	80107b4 <RegionRxParamSetupReq>
 800c790:	f88d 002f 	strb.w	r0, [sp, #47]	@ 0x2f
                if( ( status & 0x07 ) == 0x07 )
 800c794:	f000 0307 	and.w	r3, r0, #7
 800c798:	2b07      	cmp	r3, #7
 800c79a:	d007      	beq.n	800c7ac <ProcessMacCommands+0x1f8>
                macCmdPayload[0] = status;
 800c79c:	f88d 002c 	strb.w	r0, [sp, #44]	@ 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	a90b      	add	r1, sp, #44	@ 0x2c
 800c7a4:	2005      	movs	r0, #5
 800c7a6:	f002 fff5 	bl	800f794 <LoRaMacCommandsAddCmd>
                break;
 800c7aa:	e70f      	b.n	800c5cc <ProcessMacCommands+0x18>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800c7ac:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800c7b0:	4b62      	ldr	r3, [pc, #392]	@ (800c93c <ProcessMacCommands+0x388>)
 800c7b2:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800c7b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800c7ba:	9a08      	ldr	r2, [sp, #32]
 800c7bc:	66da      	str	r2, [r3, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800c7be:	675a      	str	r2, [r3, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800c7c0:	f89d 201d 	ldrb.w	r2, [sp, #29]
 800c7c4:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
 800c7c8:	e7e8      	b.n	800c79c <ProcessMacCommands+0x1e8>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800c7ca:	4b5b      	ldr	r3, [pc, #364]	@ (800c938 <ProcessMacCommands+0x384>)
 800c7cc:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800c7d0:	b17b      	cbz	r3, 800c7f2 <ProcessMacCommands+0x23e>
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	b17b      	cbz	r3, 800c7f6 <ProcessMacCommands+0x242>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800c7d6:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 800c7d8:	f88d 002c 	strb.w	r0, [sp, #44]	@ 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800c7dc:	f008 033f 	and.w	r3, r8, #63	@ 0x3f
 800c7e0:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800c7e4:	2202      	movs	r2, #2
 800c7e6:	a90b      	add	r1, sp, #44	@ 0x2c
 800c7e8:	2006      	movs	r0, #6
 800c7ea:	f002 ffd3 	bl	800f794 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 800c7ee:	464c      	mov	r4, r9
                break;
 800c7f0:	e6ec      	b.n	800c5cc <ProcessMacCommands+0x18>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800c7f2:	20ff      	movs	r0, #255	@ 0xff
 800c7f4:	e7f0      	b.n	800c7d8 <ProcessMacCommands+0x224>
 800c7f6:	20ff      	movs	r0, #255	@ 0xff
 800c7f8:	e7ee      	b.n	800c7d8 <ProcessMacCommands+0x224>
                status = 0x03;
 800c7fa:	2303      	movs	r3, #3
 800c7fc:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 800c800:	1ca3      	adds	r3, r4, #2
 800c802:	b2db      	uxtb	r3, r3
 800c804:	f915 2009 	ldrsb.w	r2, [r5, r9]
 800c808:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 800c80c:	aa07      	add	r2, sp, #28
 800c80e:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800c810:	1ce2      	adds	r2, r4, #3
 800c812:	b2d2      	uxtb	r2, r2
 800c814:	5ceb      	ldrb	r3, [r5, r3]
 800c816:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800c818:	1d21      	adds	r1, r4, #4
 800c81a:	b2c9      	uxtb	r1, r1
 800c81c:	5caa      	ldrb	r2, [r5, r2]
 800c81e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c822:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800c824:	1d62      	adds	r2, r4, #5
 800c826:	b2d2      	uxtb	r2, r2
 800c828:	5c69      	ldrb	r1, [r5, r1]
 800c82a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c82e:	9307      	str	r3, [sp, #28]
                chParam.Frequency *= 100;
 800c830:	2164      	movs	r1, #100	@ 0x64
 800c832:	fb01 f303 	mul.w	r3, r1, r3
 800c836:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 800c838:	2300      	movs	r3, #0
 800c83a:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 800c83c:	3406      	adds	r4, #6
 800c83e:	b2e4      	uxtb	r4, r4
 800c840:	56ab      	ldrsb	r3, [r5, r2]
 800c842:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800c846:	a905      	add	r1, sp, #20
 800c848:	4b3c      	ldr	r3, [pc, #240]	@ (800c93c <ProcessMacCommands+0x388>)
 800c84a:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800c84e:	f003 ffc0 	bl	80107d2 <RegionNewChannelReq>
 800c852:	b2c3      	uxtb	r3, r0
 800c854:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                if( ( int8_t )status >= 0 )
 800c858:	2800      	cmp	r0, #0
 800c85a:	f6ff aeb7 	blt.w	800c5cc <ProcessMacCommands+0x18>
                    macCmdPayload[0] = status;
 800c85e:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800c862:	2201      	movs	r2, #1
 800c864:	a90b      	add	r1, sp, #44	@ 0x2c
 800c866:	2007      	movs	r0, #7
 800c868:	f002 ff94 	bl	800f794 <LoRaMacCommandsAddCmd>
                break;
 800c86c:	e6ae      	b.n	800c5cc <ProcessMacCommands+0x18>
                uint8_t delay = payload[macIndex++] & 0x0F;
 800c86e:	3402      	adds	r4, #2
 800c870:	b2e4      	uxtb	r4, r4
 800c872:	f815 3009 	ldrb.w	r3, [r5, r9]
                if( delay == 0 )
 800c876:	f013 030f 	ands.w	r3, r3, #15
 800c87a:	d100      	bne.n	800c87e <ProcessMacCommands+0x2ca>
                    delay++;
 800c87c:	3301      	adds	r3, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800c87e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c882:	fb02 f303 	mul.w	r3, r2, r3
 800c886:	4a2d      	ldr	r2, [pc, #180]	@ (800c93c <ProcessMacCommands+0x388>)
 800c888:	6593      	str	r3, [r2, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800c88a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800c88e:	65d3      	str	r3, [r2, #92]	@ 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800c890:	2200      	movs	r2, #0
 800c892:	a90b      	add	r1, sp, #44	@ 0x2c
 800c894:	2008      	movs	r0, #8
 800c896:	f002 ff7d 	bl	800f794 <LoRaMacCommandsAddCmd>
                break;
 800c89a:	e697      	b.n	800c5cc <ProcessMacCommands+0x18>
                uint8_t eirpDwellTime = payload[macIndex++];
 800c89c:	3402      	adds	r4, #2
 800c89e:	b2e4      	uxtb	r4, r4
 800c8a0:	f815 3009 	ldrb.w	r3, [r5, r9]
                txParamSetupReq.UplinkDwellTime = 0;
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 800c8aa:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800c8ae:	f013 0f20 	tst.w	r3, #32
 800c8b2:	d002      	beq.n	800c8ba <ProcessMacCommands+0x306>
                    txParamSetupReq.DownlinkDwellTime = 1;
 800c8b4:	2201      	movs	r2, #1
 800c8b6:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800c8ba:	f013 0f10 	tst.w	r3, #16
 800c8be:	d002      	beq.n	800c8c6 <ProcessMacCommands+0x312>
                    txParamSetupReq.UplinkDwellTime = 1;
 800c8c0:	2201      	movs	r2, #1
 800c8c2:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800c8c6:	f003 030f 	and.w	r3, r3, #15
 800c8ca:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800c8ce:	a903      	add	r1, sp, #12
 800c8d0:	4b1a      	ldr	r3, [pc, #104]	@ (800c93c <ProcessMacCommands+0x388>)
 800c8d2:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800c8d6:	f003 ff8b 	bl	80107f0 <RegionTxParamSetupReq>
 800c8da:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c8de:	f43f ae75 	beq.w	800c5cc <ProcessMacCommands+0x18>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800c8e2:	f89d a00c 	ldrb.w	sl, [sp, #12]
 800c8e6:	f8df 9054 	ldr.w	r9, [pc, #84]	@ 800c93c <ProcessMacCommands+0x388>
 800c8ea:	f889 a07c 	strb.w	sl, [r9, #124]	@ 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800c8ee:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800c8f2:	f889 307d 	strb.w	r3, [r9, #125]	@ 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800c8f6:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800c8fa:	4a12      	ldr	r2, [pc, #72]	@ (800c944 <ProcessMacCommands+0x390>)
 800c8fc:	5cd0      	ldrb	r0, [r2, r3]
 800c8fe:	f7f4 f81d 	bl	800093c <__aeabi_ui2f>
 800c902:	f8c9 0080 	str.w	r0, [r9, #128]	@ 0x80
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800c906:	2302      	movs	r3, #2
 800c908:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c90c:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c910:	a907      	add	r1, sp, #28
 800c912:	f899 0048 	ldrb.w	r0, [r9, #72]	@ 0x48
 800c916:	f003 fe99 	bl	801064c <RegionGetPhyParam>
 800c91a:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800c91c:	b240      	sxtb	r0, r0
 800c91e:	f999 3039 	ldrsb.w	r3, [r9, #57]	@ 0x39
 800c922:	4298      	cmp	r0, r3
 800c924:	bfb8      	it	lt
 800c926:	4618      	movlt	r0, r3
 800c928:	f889 0039 	strb.w	r0, [r9, #57]	@ 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800c92c:	2200      	movs	r2, #0
 800c92e:	a90b      	add	r1, sp, #44	@ 0x2c
 800c930:	2009      	movs	r0, #9
 800c932:	f002 ff2f 	bl	800f794 <LoRaMacCommandsAddCmd>
                break;
 800c936:	e649      	b.n	800c5cc <ProcessMacCommands+0x18>
 800c938:	20003560 	.word	0x20003560
 800c93c:	20008000 	.word	0x20008000
 800c940:	cccccccd 	.word	0xcccccccd
 800c944:	08016b50 	.word	0x08016b50
                status = 0x03;
 800c948:	2303      	movs	r3, #3
 800c94a:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 800c94e:	1ca3      	adds	r3, r4, #2
 800c950:	b2db      	uxtb	r3, r3
 800c952:	f815 2009 	ldrb.w	r2, [r5, r9]
 800c956:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800c95a:	1ce1      	adds	r1, r4, #3
 800c95c:	b2c9      	uxtb	r1, r1
 800c95e:	5ceb      	ldrb	r3, [r5, r3]
 800c960:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800c962:	1d22      	adds	r2, r4, #4
 800c964:	b2d2      	uxtb	r2, r2
 800c966:	5c69      	ldrb	r1, [r5, r1]
 800c968:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c96c:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800c96e:	3405      	adds	r4, #5
 800c970:	b2e4      	uxtb	r4, r4
 800c972:	5caa      	ldrb	r2, [r5, r2]
 800c974:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c978:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency *= 100;
 800c97a:	2264      	movs	r2, #100	@ 0x64
 800c97c:	fb02 f303 	mul.w	r3, r2, r3
 800c980:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800c982:	a907      	add	r1, sp, #28
 800c984:	4b74      	ldr	r3, [pc, #464]	@ (800cb58 <ProcessMacCommands+0x5a4>)
 800c986:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800c98a:	f003 ff40 	bl	801080e <RegionDlChannelReq>
 800c98e:	b2c3      	uxtb	r3, r0
 800c990:	f88d 302f 	strb.w	r3, [sp, #47]	@ 0x2f
                if( ( int8_t )status >= 0 )
 800c994:	2800      	cmp	r0, #0
 800c996:	f6ff ae19 	blt.w	800c5cc <ProcessMacCommands+0x18>
                    macCmdPayload[0] = status;
 800c99a:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800c99e:	2201      	movs	r2, #1
 800c9a0:	a90b      	add	r1, sp, #44	@ 0x2c
 800c9a2:	200a      	movs	r0, #10
 800c9a4:	f002 fef6 	bl	800f794 <LoRaMacCommandsAddCmd>
                break;
 800c9a8:	e610      	b.n	800c5cc <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800c9aa:	200a      	movs	r0, #10
 800c9ac:	f003 f8ba 	bl	800fb24 <LoRaMacConfirmQueueIsCmdActive>
 800c9b0:	b908      	cbnz	r0, 800c9b6 <ProcessMacCommands+0x402>
        switch( payload[macIndex++] )
 800c9b2:	464c      	mov	r4, r9
 800c9b4:	e60a      	b.n	800c5cc <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800c9b6:	210a      	movs	r1, #10
 800c9b8:	2000      	movs	r0, #0
 800c9ba:	f003 f867 	bl	800fa8c <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800c9be:	a903      	add	r1, sp, #12
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	9303      	str	r3, [sp, #12]
 800c9c4:	9304      	str	r3, [sp, #16]
                    SysTime_t sysTime = { 0 };
 800c9c6:	f10d 0a14 	add.w	sl, sp, #20
 800c9ca:	9305      	str	r3, [sp, #20]
 800c9cc:	9306      	str	r3, [sp, #24]
                    SysTime_t sysTimeCurrent = { 0 };
 800c9ce:	f10d 0b1c 	add.w	fp, sp, #28
 800c9d2:	9307      	str	r3, [sp, #28]
 800c9d4:	9308      	str	r3, [sp, #32]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800c9d6:	1ca0      	adds	r0, r4, #2
 800c9d8:	b2c0      	uxtb	r0, r0
 800c9da:	f815 3009 	ldrb.w	r3, [r5, r9]
 800c9de:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800c9e0:	1ce2      	adds	r2, r4, #3
 800c9e2:	b2d2      	uxtb	r2, r2
 800c9e4:	5c28      	ldrb	r0, [r5, r0]
 800c9e6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800c9ea:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800c9ec:	1d20      	adds	r0, r4, #4
 800c9ee:	b2c0      	uxtb	r0, r0
 800c9f0:	5caa      	ldrb	r2, [r5, r2]
 800c9f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c9f6:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800c9f8:	1d62      	adds	r2, r4, #5
 800c9fa:	b2d2      	uxtb	r2, r2
 800c9fc:	5c28      	ldrb	r0, [r5, r0]
 800c9fe:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800ca02:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800ca04:	3406      	adds	r4, #6
 800ca06:	b2e4      	uxtb	r4, r4
 800ca08:	5caa      	ldrb	r2, [r5, r2]
 800ca0a:	f8ad 2010 	strh.w	r2, [sp, #16]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800ca0e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800ca12:	fb00 f202 	mul.w	r2, r0, r2
 800ca16:	0a12      	lsrs	r2, r2, #8
 800ca18:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 800ca1c:	c903      	ldmia	r1, {r0, r1}
 800ca1e:	e88a 0003 	stmia.w	sl, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800ca22:	4a4e      	ldr	r2, [pc, #312]	@ (800cb5c <ProcessMacCommands+0x5a8>)
 800ca24:	441a      	add	r2, r3
 800ca26:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 800ca28:	4658      	mov	r0, fp
 800ca2a:	f009 f811 	bl	8015a50 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800ca2e:	f8df 9130 	ldr.w	r9, [pc, #304]	@ 800cb60 <ProcessMacCommands+0x5ac>
 800ca32:	f8d9 333c 	ldr.w	r3, [r9, #828]	@ 0x33c
 800ca36:	9300      	str	r3, [sp, #0]
 800ca38:	f8d9 3338 	ldr.w	r3, [r9, #824]	@ 0x338
 800ca3c:	e89a 0006 	ldmia.w	sl, {r1, r2}
 800ca40:	a80c      	add	r0, sp, #48	@ 0x30
 800ca42:	f008 ffc4 	bl	80159ce <SysTimeSub>
 800ca46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ca48:	9300      	str	r3, [sp, #0]
 800ca4a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ca4c:	e89b 0006 	ldmia.w	fp, {r1, r2}
 800ca50:	4650      	mov	r0, sl
 800ca52:	f008 ff9d 	bl	8015990 <SysTimeAdd>
                    SysTimeSet( sysTime );
 800ca56:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800ca5a:	f008 ffd7 	bl	8015a0c <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800ca5e:	f002 fdff 	bl	800f660 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800ca62:	2301      	movs	r3, #1
 800ca64:	f889 3430 	strb.w	r3, [r9, #1072]	@ 0x430
 800ca68:	e5b0      	b.n	800c5cc <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800ca6a:	200d      	movs	r0, #13
 800ca6c:	f003 f85a 	bl	800fb24 <LoRaMacConfirmQueueIsCmdActive>
 800ca70:	b908      	cbnz	r0, 800ca76 <ProcessMacCommands+0x4c2>
        switch( payload[macIndex++] )
 800ca72:	464c      	mov	r4, r9
 800ca74:	e5aa      	b.n	800c5cc <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800ca76:	210d      	movs	r1, #13
 800ca78:	2000      	movs	r0, #0
 800ca7a:	f003 f807 	bl	800fa8c <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800ca7e:	4b38      	ldr	r3, [pc, #224]	@ (800cb60 <ProcessMacCommands+0x5ac>)
 800ca80:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800ca84:	3b04      	subs	r3, #4
 800ca86:	b2db      	uxtb	r3, r3
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	d801      	bhi.n	800ca90 <ProcessMacCommands+0x4dc>
        switch( payload[macIndex++] )
 800ca8c:	464c      	mov	r4, r9
 800ca8e:	e59d      	b.n	800c5cc <ProcessMacCommands+0x18>
                        LoRaMacClassBPingSlotInfoAns( );
 800ca90:	f002 fde2 	bl	800f658 <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 800ca94:	464c      	mov	r4, r9
 800ca96:	e599      	b.n	800c5cc <ProcessMacCommands+0x18>
                frequency = ( uint32_t )payload[macIndex++];
 800ca98:	1ca2      	adds	r2, r4, #2
 800ca9a:	b2d2      	uxtb	r2, r2
 800ca9c:	f815 3009 	ldrb.w	r3, [r5, r9]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800caa0:	1ce1      	adds	r1, r4, #3
 800caa2:	b2c9      	uxtb	r1, r1
 800caa4:	5caa      	ldrb	r2, [r5, r2]
 800caa6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800caaa:	1d22      	adds	r2, r4, #4
 800caac:	b2d2      	uxtb	r2, r2
 800caae:	5c69      	ldrb	r1, [r5, r1]
 800cab0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 800cab4:	3405      	adds	r4, #5
 800cab6:	b2e4      	uxtb	r4, r4
 800cab8:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800caba:	2164      	movs	r1, #100	@ 0x64
 800cabc:	fb03 f101 	mul.w	r1, r3, r1
 800cac0:	f000 000f 	and.w	r0, r0, #15
 800cac4:	f002 fdc9 	bl	800f65a <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 800cac8:	f88d 002c 	strb.w	r0, [sp, #44]	@ 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800cacc:	2201      	movs	r2, #1
 800cace:	a90b      	add	r1, sp, #44	@ 0x2c
 800cad0:	2011      	movs	r0, #17
 800cad2:	f002 fe5f 	bl	800f794 <LoRaMacCommandsAddCmd>
                break;
 800cad6:	e579      	b.n	800c5cc <ProcessMacCommands+0x18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800cad8:	200e      	movs	r0, #14
 800cada:	f003 f823 	bl	800fb24 <LoRaMacConfirmQueueIsCmdActive>
 800cade:	b908      	cbnz	r0, 800cae4 <ProcessMacCommands+0x530>
        switch( payload[macIndex++] )
 800cae0:	464c      	mov	r4, r9
 800cae2:	e573      	b.n	800c5cc <ProcessMacCommands+0x18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800cae4:	210e      	movs	r1, #14
 800cae6:	2000      	movs	r0, #0
 800cae8:	f002 ffd0 	bl	800fa8c <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800caec:	1ca2      	adds	r2, r4, #2
 800caee:	b2d2      	uxtb	r2, r2
 800caf0:	f815 0009 	ldrb.w	r0, [r5, r9]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800caf4:	1ce3      	adds	r3, r4, #3
 800caf6:	b2db      	uxtb	r3, r3
 800caf8:	f815 c002 	ldrb.w	ip, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 800cafc:	3404      	adds	r4, #4
 800cafe:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800cb00:	4a18      	ldr	r2, [pc, #96]	@ (800cb64 <ProcessMacCommands+0x5b0>)
 800cb02:	6812      	ldr	r2, [r2, #0]
 800cb04:	5ce9      	ldrb	r1, [r5, r3]
 800cb06:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
 800cb0a:	f002 fda8 	bl	800f65e <LoRaMacClassBBeaconTimingAns>
 800cb0e:	e55d      	b.n	800c5cc <ProcessMacCommands+0x18>
                    frequency = ( uint32_t )payload[macIndex++];
 800cb10:	1ca1      	adds	r1, r4, #2
 800cb12:	b2c9      	uxtb	r1, r1
 800cb14:	f815 3009 	ldrb.w	r3, [r5, r9]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800cb18:	1ce2      	adds	r2, r4, #3
 800cb1a:	b2d2      	uxtb	r2, r2
 800cb1c:	5c69      	ldrb	r1, [r5, r1]
 800cb1e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800cb22:	3404      	adds	r4, #4
 800cb24:	b2e4      	uxtb	r4, r4
 800cb26:	5caa      	ldrb	r2, [r5, r2]
 800cb28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800cb2c:	2064      	movs	r0, #100	@ 0x64
 800cb2e:	fb03 f000 	mul.w	r0, r3, r0
 800cb32:	f002 fd96 	bl	800f662 <LoRaMacClassBBeaconFreqReq>
 800cb36:	b140      	cbz	r0, 800cb4a <ProcessMacCommands+0x596>
                        macCmdPayload[0] = 1;
 800cb38:	2301      	movs	r3, #1
 800cb3a:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800cb3e:	2201      	movs	r2, #1
 800cb40:	a90b      	add	r1, sp, #44	@ 0x2c
 800cb42:	2013      	movs	r0, #19
 800cb44:	f002 fe26 	bl	800f794 <LoRaMacCommandsAddCmd>
                break;
 800cb48:	e540      	b.n	800c5cc <ProcessMacCommands+0x18>
                        macCmdPayload[0] = 0;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800cb50:	e7f5      	b.n	800cb3e <ProcessMacCommands+0x58a>
}
 800cb52:	b00f      	add	sp, #60	@ 0x3c
 800cb54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb58:	20008000 	.word	0x20008000
 800cb5c:	12d53d80 	.word	0x12d53d80
 800cb60:	20003560 	.word	0x20003560
 800cb64:	20003548 	.word	0x20003548

0800cb68 <ProcessRadioRxDone>:
{
 800cb68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb6c:	b0a5      	sub	sp, #148	@ 0x94
    uint8_t *payload = RxDoneParams.Payload;
 800cb6e:	4b9c      	ldr	r3, [pc, #624]	@ (800cde0 <ProcessRadioRxDone+0x278>)
 800cb70:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 800cb72:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 800cb74:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 800cb78:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	9308      	str	r3, [sp, #32]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800cb80:	4a98      	ldr	r2, [pc, #608]	@ (800cde4 <ProcessRadioRxDone+0x27c>)
 800cb82:	f8d2 80e4 	ldr.w	r8, [r2, #228]	@ 0xe4
    MacCtx.McpsConfirm.AckReceived = false;
 800cb86:	4c98      	ldr	r4, [pc, #608]	@ (800cde8 <ProcessRadioRxDone+0x280>)
 800cb88:	f884 3438 	strb.w	r3, [r4, #1080]	@ 0x438
    MacCtx.RxStatus.Rssi = rssi;
 800cb8c:	f8a4 947c 	strh.w	r9, [r4, #1148]	@ 0x47c
    MacCtx.RxStatus.Snr = snr;
 800cb90:	f884 747e 	strb.w	r7, [r4, #1150]	@ 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800cb94:	f894 2480 	ldrb.w	r2, [r4, #1152]	@ 0x480
 800cb98:	f884 247f 	strb.w	r2, [r4, #1151]	@ 0x47f
    MacCtx.McpsIndication.Port = 0;
 800cb9c:	f884 341b 	strb.w	r3, [r4, #1051]	@ 0x41b
    MacCtx.McpsIndication.Multicast = 0;
 800cba0:	f884 341a 	strb.w	r3, [r4, #1050]	@ 0x41a
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800cba4:	f884 341d 	strb.w	r3, [r4, #1053]	@ 0x41d
    MacCtx.McpsIndication.Buffer = NULL;
 800cba8:	f8c4 3420 	str.w	r3, [r4, #1056]	@ 0x420
    MacCtx.McpsIndication.BufferSize = 0;
 800cbac:	f884 3424 	strb.w	r3, [r4, #1060]	@ 0x424
    MacCtx.McpsIndication.RxData = false;
 800cbb0:	f884 3425 	strb.w	r3, [r4, #1061]	@ 0x425
    MacCtx.McpsIndication.AckReceived = false;
 800cbb4:	f884 3426 	strb.w	r3, [r4, #1062]	@ 0x426
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800cbb8:	f8c4 3428 	str.w	r3, [r4, #1064]	@ 0x428
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800cbbc:	f884 3418 	strb.w	r3, [r4, #1048]	@ 0x418
    MacCtx.McpsIndication.DevAddress = 0;
 800cbc0:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800cbc4:	f884 3430 	strb.w	r3, [r4, #1072]	@ 0x430
    Radio.Sleep( );
 800cbc8:	4b88      	ldr	r3, [pc, #544]	@ (800cdec <ProcessRadioRxDone+0x284>)
 800cbca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbcc:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800cbce:	f504 7066 	add.w	r0, r4, #920	@ 0x398
 800cbd2:	f009 f831 	bl	8015c38 <UTIL_TIMER_Stop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800cbd6:	4629      	mov	r1, r5
 800cbd8:	4630      	mov	r0, r6
 800cbda:	f002 fd2a 	bl	800f632 <LoRaMacClassBRxBeacon>
 800cbde:	b9a0      	cbnz	r0, 800cc0a <ProcessRadioRxDone+0xa2>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800cbe0:	4b80      	ldr	r3, [pc, #512]	@ (800cde4 <ProcessRadioRxDone+0x27c>)
 800cbe2:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800cbe6:	2b01      	cmp	r3, #1
 800cbe8:	d016      	beq.n	800cc18 <ProcessRadioRxDone+0xb0>
    if( size == 0 )
 800cbea:	b395      	cbz	r5, 800cc52 <ProcessRadioRxDone+0xea>
    macHdr.Value = payload[pktHeaderLen++];
 800cbec:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 800cbee:	0963      	lsrs	r3, r4, #5
 800cbf0:	3b01      	subs	r3, #1
 800cbf2:	2b06      	cmp	r3, #6
 800cbf4:	f200 82b1 	bhi.w	800d15a <ProcessRadioRxDone+0x5f2>
 800cbf8:	e8df f013 	tbh	[pc, r3, lsl #1]
 800cbfc:	02af0032 	.word	0x02af0032
 800cc00:	02af00c6 	.word	0x02af00c6
 800cc04:	02af00c2 	.word	0x02af00c2
 800cc08:	028b      	.short	0x028b
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800cc0a:	f8a4 9472 	strh.w	r9, [r4, #1138]	@ 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800cc0e:	f884 7474 	strb.w	r7, [r4, #1140]	@ 0x474
}
 800cc12:	b025      	add	sp, #148	@ 0x94
 800cc14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800cc18:	f002 fd0f 	bl	800f63a <LoRaMacClassBIsPingExpected>
 800cc1c:	b150      	cbz	r0, 800cc34 <ProcessRadioRxDone+0xcc>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800cc1e:	2000      	movs	r0, #0
 800cc20:	f002 fd00 	bl	800f624 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800cc24:	2000      	movs	r0, #0
 800cc26:	f002 fd02 	bl	800f62e <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800cc2a:	4b6f      	ldr	r3, [pc, #444]	@ (800cde8 <ProcessRadioRxDone+0x280>)
 800cc2c:	2204      	movs	r2, #4
 800cc2e:	f883 247f 	strb.w	r2, [r3, #1151]	@ 0x47f
 800cc32:	e7da      	b.n	800cbea <ProcessRadioRxDone+0x82>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800cc34:	f002 fd03 	bl	800f63e <LoRaMacClassBIsMulticastExpected>
 800cc38:	2800      	cmp	r0, #0
 800cc3a:	d0d6      	beq.n	800cbea <ProcessRadioRxDone+0x82>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800cc3c:	2000      	movs	r0, #0
 800cc3e:	f002 fcf2 	bl	800f626 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800cc42:	2000      	movs	r0, #0
 800cc44:	f002 fcf4 	bl	800f630 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800cc48:	4b67      	ldr	r3, [pc, #412]	@ (800cde8 <ProcessRadioRxDone+0x280>)
 800cc4a:	2205      	movs	r2, #5
 800cc4c:	f883 247f 	strb.w	r2, [r3, #1151]	@ 0x47f
 800cc50:	e7cb      	b.n	800cbea <ProcessRadioRxDone+0x82>
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cc52:	4b65      	ldr	r3, [pc, #404]	@ (800cde8 <ProcessRadioRxDone+0x280>)
 800cc54:	2201      	movs	r2, #1
 800cc56:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
        PrepareRxDoneAbort( );
 800cc5a:	f7ff fc31 	bl	800c4c0 <PrepareRxDoneAbort>
        return;
 800cc5e:	e7d8      	b.n	800cc12 <ProcessRadioRxDone+0xaa>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800cc60:	2d10      	cmp	r5, #16
 800cc62:	d92e      	bls.n	800ccc2 <ProcessRadioRxDone+0x15a>
            macMsgJoinAccept.Buffer = payload;
 800cc64:	9609      	str	r6, [sp, #36]	@ 0x24
            macMsgJoinAccept.BufSize = size;
 800cc66:	b2ed      	uxtb	r5, r5
 800cc68:	f88d 5028 	strb.w	r5, [sp, #40]	@ 0x28
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800cc6c:	4b5d      	ldr	r3, [pc, #372]	@ (800cde4 <ProcessRadioRxDone+0x27c>)
 800cc6e:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800cc72:	bb6b      	cbnz	r3, 800ccd0 <ProcessRadioRxDone+0x168>
            SecureElementGetJoinEui( joinEui );
 800cc74:	a805      	add	r0, sp, #20
 800cc76:	f006 fd69 	bl	801374c <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800cc7a:	aa09      	add	r2, sp, #36	@ 0x24
 800cc7c:	a905      	add	r1, sp, #20
 800cc7e:	20ff      	movs	r0, #255	@ 0xff
 800cc80:	f003 fae6 	bl	8010250 <LoRaMacCryptoHandleJoinAccept>
 800cc84:	4604      	mov	r4, r0
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800cc86:	f89d 3034 	ldrb.w	r3, [sp, #52]	@ 0x34
 800cc8a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800cc8e:	f88d 3010 	strb.w	r3, [sp, #16]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800cc92:	4b54      	ldr	r3, [pc, #336]	@ (800cde4 <ProcessRadioRxDone+0x27c>)
 800cc94:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800cc98:	f88d 2011 	strb.w	r2, [sp, #17]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 800cc9c:	2207      	movs	r2, #7
 800cc9e:	a904      	add	r1, sp, #16
 800cca0:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800cca4:	f003 fd06 	bl	80106b4 <RegionVerify>
            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 800cca8:	b904      	cbnz	r4, 800ccac <ProcessRadioRxDone+0x144>
 800ccaa:	b9c0      	cbnz	r0, 800ccde <ProcessRadioRxDone+0x176>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ccac:	2001      	movs	r0, #1
 800ccae:	f002 ff39 	bl	800fb24 <LoRaMacConfirmQueueIsCmdActive>
 800ccb2:	2800      	cmp	r0, #0
 800ccb4:	f000 8245 	beq.w	800d142 <ProcessRadioRxDone+0x5da>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800ccb8:	2101      	movs	r1, #1
 800ccba:	2007      	movs	r0, #7
 800ccbc:	f002 fee6 	bl	800fa8c <LoRaMacConfirmQueueSetStatus>
 800ccc0:	e23f      	b.n	800d142 <ProcessRadioRxDone+0x5da>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ccc2:	4b49      	ldr	r3, [pc, #292]	@ (800cde8 <ProcessRadioRxDone+0x280>)
 800ccc4:	2201      	movs	r2, #1
 800ccc6:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800ccca:	f7ff fbf9 	bl	800c4c0 <PrepareRxDoneAbort>
                return;
 800ccce:	e7a0      	b.n	800cc12 <ProcessRadioRxDone+0xaa>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ccd0:	4b45      	ldr	r3, [pc, #276]	@ (800cde8 <ProcessRadioRxDone+0x280>)
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800ccd8:	f7ff fbf2 	bl	800c4c0 <PrepareRxDoneAbort>
                return;
 800ccdc:	e799      	b.n	800cc12 <ProcessRadioRxDone+0xaa>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800ccde:	f89d 302d 	ldrb.w	r3, [sp, #45]	@ 0x2d
 800cce2:	4c40      	ldr	r4, [pc, #256]	@ (800cde4 <ProcessRadioRxDone+0x27c>)
 800cce4:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800cce8:	f89d 202e 	ldrb.w	r2, [sp, #46]	@ 0x2e
 800ccec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ccf0:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800ccf4:	f89d 202f 	ldrb.w	r2, [sp, #47]	@ 0x2f
 800ccf8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ccfc:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800cd00:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cd02:	f8c4 10e4 	str.w	r1, [r4, #228]	@ 0xe4
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800cd06:	2002      	movs	r0, #2
 800cd08:	f006 fd2e 	bl	8013768 <SecureElementSetDevAddr>
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800cd0c:	f89d 3034 	ldrb.w	r3, [sp, #52]	@ 0x34
 800cd10:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800cd14:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800cd18:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800cd1c:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800cd20:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800cd24:	f89d 3035 	ldrb.w	r3, [sp, #53]	@ 0x35
 800cd28:	65a3      	str	r3, [r4, #88]	@ 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800cd2a:	b90b      	cbnz	r3, 800cd30 <ProcessRadioRxDone+0x1c8>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800cd2c:	2201      	movs	r2, #1
 800cd2e:	65a2      	str	r2, [r4, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800cd30:	4c2c      	ldr	r4, [pc, #176]	@ (800cde4 <ProcessRadioRxDone+0x27c>)
 800cd32:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cd34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800cd38:	fb02 f303 	mul.w	r3, r2, r3
 800cd3c:	65a3      	str	r3, [r4, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800cd3e:	4413      	add	r3, r2
 800cd40:	65e3      	str	r3, [r4, #92]	@ 0x5c
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800cd42:	2601      	movs	r6, #1
 800cd44:	f884 6068 	strb.w	r6, [r4, #104]	@ 0x68
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	f884 312a 	strb.w	r3, [r4, #298]	@ 0x12a
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800cd4e:	f10d 0336 	add.w	r3, sp, #54	@ 0x36
 800cd52:	9322      	str	r3, [sp, #136]	@ 0x88
                applyCFList.Size = size - 17;
 800cd54:	3d11      	subs	r5, #17
 800cd56:	f88d 508c 	strb.w	r5, [sp, #140]	@ 0x8c
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800cd5a:	a922      	add	r1, sp, #136	@ 0x88
 800cd5c:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800cd60:	f003 fcb8 	bl	80106d4 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800cd64:	2302      	movs	r3, #2
 800cd66:	f884 312c 	strb.w	r3, [r4, #300]	@ 0x12c
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800cd6a:	4630      	mov	r0, r6
 800cd6c:	f002 feda 	bl	800fb24 <LoRaMacConfirmQueueIsCmdActive>
 800cd70:	2800      	cmp	r0, #0
 800cd72:	f000 81e6 	beq.w	800d142 <ProcessRadioRxDone+0x5da>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800cd76:	4631      	mov	r1, r6
 800cd78:	2000      	movs	r0, #0
 800cd7a:	f002 fe87 	bl	800fa8c <LoRaMacConfirmQueueSetStatus>
 800cd7e:	e1e0      	b.n	800d142 <ProcessRadioRxDone+0x5da>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800cd80:	4b19      	ldr	r3, [pc, #100]	@ (800cde8 <ProcessRadioRxDone+0x280>)
 800cd82:	2201      	movs	r2, #1
 800cd84:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800cd88:	4b16      	ldr	r3, [pc, #88]	@ (800cde4 <ProcessRadioRxDone+0x27c>)
 800cd8a:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800cd8e:	f88d 2082 	strb.w	r2, [sp, #130]	@ 0x82
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800cd92:	4a15      	ldr	r2, [pc, #84]	@ (800cde8 <ProcessRadioRxDone+0x280>)
 800cd94:	f992 241c 	ldrsb.w	r2, [r2, #1052]	@ 0x41c
 800cd98:	f88d 2081 	strb.w	r2, [sp, #129]	@ 0x81
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800cd9c:	220d      	movs	r2, #13
 800cd9e:	f88d 2080 	strb.w	r2, [sp, #128]	@ 0x80
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800cda2:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800cda6:	b113      	cbz	r3, 800cdae <ProcessRadioRxDone+0x246>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800cda8:	230e      	movs	r3, #14
 800cdaa:	f88d 3080 	strb.w	r3, [sp, #128]	@ 0x80
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800cdae:	a920      	add	r1, sp, #128	@ 0x80
 800cdb0:	4b0c      	ldr	r3, [pc, #48]	@ (800cde4 <ProcessRadioRxDone+0x27c>)
 800cdb2:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800cdb6:	f003 fc49 	bl	801064c <RegionGetPhyParam>
 800cdba:	901f      	str	r0, [sp, #124]	@ 0x7c
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800cdbc:	f1a5 030d 	sub.w	r3, r5, #13
 800cdc0:	b21b      	sxth	r3, r3
 800cdc2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cdc6:	b200      	sxth	r0, r0
 800cdc8:	4283      	cmp	r3, r0
 800cdca:	dc01      	bgt.n	800cdd0 <ProcessRadioRxDone+0x268>
 800cdcc:	2d0b      	cmp	r5, #11
 800cdce:	d80f      	bhi.n	800cdf0 <ProcessRadioRxDone+0x288>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cdd0:	4b05      	ldr	r3, [pc, #20]	@ (800cde8 <ProcessRadioRxDone+0x280>)
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800cdd8:	f7ff fb72 	bl	800c4c0 <PrepareRxDoneAbort>
                return;
 800cddc:	e719      	b.n	800cc12 <ProcessRadioRxDone+0xaa>
 800cdde:	bf00      	nop
 800cde0:	20003548 	.word	0x20003548
 800cde4:	20008000 	.word	0x20008000
 800cde8:	20003560 	.word	0x20003560
 800cdec:	080172ac 	.word	0x080172ac
            macMsgData.Buffer = payload;
 800cdf0:	9613      	str	r6, [sp, #76]	@ 0x4c
            macMsgData.BufSize = size;
 800cdf2:	f88d 5050 	strb.w	r5, [sp, #80]	@ 0x50
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800cdf6:	4bb0      	ldr	r3, [pc, #704]	@ (800d0b8 <ProcessRadioRxDone+0x550>)
 800cdf8:	931c      	str	r3, [sp, #112]	@ 0x70
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800cdfa:	23ff      	movs	r3, #255	@ 0xff
 800cdfc:	f88d 3074 	strb.w	r3, [sp, #116]	@ 0x74
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800ce00:	a813      	add	r0, sp, #76	@ 0x4c
 800ce02:	f003 faf3 	bl	80103ec <LoRaMacParserData>
 800ce06:	2800      	cmp	r0, #0
 800ce08:	d148      	bne.n	800ce9c <ProcessRadioRxDone+0x334>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800ce0a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800ce0c:	4bab      	ldr	r3, [pc, #684]	@ (800d0bc <ProcessRadioRxDone+0x554>)
 800ce0e:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800ce12:	a905      	add	r1, sp, #20
 800ce14:	a813      	add	r0, sp, #76	@ 0x4c
 800ce16:	f7ff f98d 	bl	800c134 <DetermineFrameType>
 800ce1a:	4605      	mov	r5, r0
 800ce1c:	2800      	cmp	r0, #0
 800ce1e:	d144      	bne.n	800ceaa <ProcessRadioRxDone+0x342>
            downLinkCounter = 0;
 800ce20:	2300      	movs	r3, #0
 800ce22:	9308      	str	r3, [sp, #32]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ce24:	4603      	mov	r3, r0
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d046      	beq.n	800ceb8 <ProcessRadioRxDone+0x350>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800ce2a:	f04f 0901 	mov.w	r9, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ce2e:	2d01      	cmp	r5, #1
 800ce30:	d108      	bne.n	800ce44 <ProcessRadioRxDone+0x2dc>
 800ce32:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800ce36:	2b03      	cmp	r3, #3
 800ce38:	d16d      	bne.n	800cf16 <ProcessRadioRxDone+0x3ae>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800ce3a:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800ce3e:	f013 0f60 	tst.w	r3, #96	@ 0x60
 800ce42:	d168      	bne.n	800cf16 <ProcessRadioRxDone+0x3ae>
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800ce44:	2315      	movs	r3, #21
 800ce46:	f88d 3080 	strb.w	r3, [sp, #128]	@ 0x80
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ce4a:	4e9d      	ldr	r6, [pc, #628]	@ (800d0c0 <ProcessRadioRxDone+0x558>)
 800ce4c:	a920      	add	r1, sp, #128	@ 0x80
 800ce4e:	f896 0048 	ldrb.w	r0, [r6, #72]	@ 0x48
 800ce52:	f003 fbfb 	bl	801064c <RegionGetPhyParam>
 800ce56:	901f      	str	r0, [sp, #124]	@ 0x7c
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800ce58:	ab08      	add	r3, sp, #32
 800ce5a:	9302      	str	r3, [sp, #8]
 800ce5c:	f10d 031f 	add.w	r3, sp, #31
 800ce60:	9301      	str	r3, [sp, #4]
 800ce62:	b280      	uxth	r0, r0
 800ce64:	9000      	str	r0, [sp, #0]
 800ce66:	f8d6 3128 	ldr.w	r3, [r6, #296]	@ 0x128
 800ce6a:	aa13      	add	r2, sp, #76	@ 0x4c
 800ce6c:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800ce70:	4648      	mov	r0, r9
 800ce72:	f7ff fb63 	bl	800c53c <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ce76:	2800      	cmp	r0, #0
 800ce78:	d06d      	beq.n	800cf56 <ProcessRadioRxDone+0x3ee>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800ce7a:	2807      	cmp	r0, #7
 800ce7c:	d052      	beq.n	800cf24 <ProcessRadioRxDone+0x3bc>
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800ce7e:	2808      	cmp	r0, #8
 800ce80:	d064      	beq.n	800cf4c <ProcessRadioRxDone+0x3e4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ce82:	4b8e      	ldr	r3, [pc, #568]	@ (800d0bc <ProcessRadioRxDone+0x554>)
 800ce84:	2201      	movs	r2, #1
 800ce86:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800ce8a:	9a08      	ldr	r2, [sp, #32]
 800ce8c:	4b8b      	ldr	r3, [pc, #556]	@ (800d0bc <ProcessRadioRxDone+0x554>)
 800ce8e:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800ce92:	f8c3 2460 	str.w	r2, [r3, #1120]	@ 0x460
                PrepareRxDoneAbort( );
 800ce96:	f7ff fb13 	bl	800c4c0 <PrepareRxDoneAbort>
                return;
 800ce9a:	e6ba      	b.n	800cc12 <ProcessRadioRxDone+0xaa>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ce9c:	4b87      	ldr	r3, [pc, #540]	@ (800d0bc <ProcessRadioRxDone+0x554>)
 800ce9e:	2201      	movs	r2, #1
 800cea0:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800cea4:	f7ff fb0c 	bl	800c4c0 <PrepareRxDoneAbort>
                return;
 800cea8:	e6b3      	b.n	800cc12 <ProcessRadioRxDone+0xaa>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ceaa:	4b84      	ldr	r3, [pc, #528]	@ (800d0bc <ProcessRadioRxDone+0x554>)
 800ceac:	2201      	movs	r2, #1
 800ceae:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800ceb2:	f7ff fb05 	bl	800c4c0 <PrepareRxDoneAbort>
                return;
 800ceb6:	e6ac      	b.n	800cc12 <ProcessRadioRxDone+0xaa>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800ceb8:	4618      	mov	r0, r3
 800ceba:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800cebe:	4a80      	ldr	r2, [pc, #512]	@ (800d0c0 <ProcessRadioRxDone+0x558>)
 800cec0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800cec4:	f8d2 20ec 	ldr.w	r2, [r2, #236]	@ 0xec
 800cec8:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800ceca:	428a      	cmp	r2, r1
 800cecc:	d002      	beq.n	800ced4 <ProcessRadioRxDone+0x36c>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800cece:	3301      	adds	r3, #1
 800ced0:	b2db      	uxtb	r3, r3
 800ced2:	e7a8      	b.n	800ce26 <ProcessRadioRxDone+0x2be>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800ced4:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 800ced8:	4979      	ldr	r1, [pc, #484]	@ (800d0c0 <ProcessRadioRxDone+0x558>)
 800ceda:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800cede:	f891 10e9 	ldrb.w	r1, [r1, #233]	@ 0xe9
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800cee2:	2900      	cmp	r1, #0
 800cee4:	d0f3      	beq.n	800cece <ProcessRadioRxDone+0x366>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800cee6:	4b76      	ldr	r3, [pc, #472]	@ (800d0c0 <ProcessRadioRxDone+0x558>)
 800cee8:	2130      	movs	r1, #48	@ 0x30
 800ceea:	fb01 3000 	mla	r0, r1, r0, r3
 800ceee:	f890 90ea 	ldrb.w	r9, [r0, #234]	@ 0xea
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800cef2:	f8d0 110c 	ldr.w	r1, [r0, #268]	@ 0x10c
 800cef6:	6809      	ldr	r1, [r1, #0]
 800cef8:	9108      	str	r1, [sp, #32]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800cefa:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800cefe:	2b02      	cmp	r3, #2
 800cf00:	d002      	beq.n	800cf08 <ProcessRadioRxDone+0x3a0>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800cf02:	4690      	mov	r8, r2
                    multicast = 1;
 800cf04:	2501      	movs	r5, #1
 800cf06:	e792      	b.n	800ce2e <ProcessRadioRxDone+0x2c6>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800cf08:	4b6c      	ldr	r3, [pc, #432]	@ (800d0bc <ProcessRadioRxDone+0x554>)
 800cf0a:	2103      	movs	r1, #3
 800cf0c:	f883 147f 	strb.w	r1, [r3, #1151]	@ 0x47f
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800cf10:	4690      	mov	r8, r2
                    multicast = 1;
 800cf12:	2501      	movs	r5, #1
 800cf14:	e78b      	b.n	800ce2e <ProcessRadioRxDone+0x2c6>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cf16:	4b69      	ldr	r3, [pc, #420]	@ (800d0bc <ProcessRadioRxDone+0x554>)
 800cf18:	2201      	movs	r2, #1
 800cf1a:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800cf1e:	f7ff facf 	bl	800c4c0 <PrepareRxDoneAbort>
                return;
 800cf22:	e676      	b.n	800cc12 <ProcessRadioRxDone+0xaa>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800cf24:	4b65      	ldr	r3, [pc, #404]	@ (800d0bc <ProcessRadioRxDone+0x554>)
 800cf26:	2208      	movs	r2, #8
 800cf28:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800cf2c:	f896 312a 	ldrb.w	r3, [r6, #298]	@ 0x12a
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d1aa      	bne.n	800ce8a <ProcessRadioRxDone+0x322>
 800cf34:	f004 04e0 	and.w	r4, r4, #224	@ 0xe0
 800cf38:	2ca0      	cmp	r4, #160	@ 0xa0
 800cf3a:	d1a6      	bne.n	800ce8a <ProcessRadioRxDone+0x322>
 800cf3c:	6b72      	ldr	r2, [r6, #52]	@ 0x34
 800cf3e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d1a2      	bne.n	800ce8a <ProcessRadioRxDone+0x322>
                        Nvm.MacGroup1.SrvAckRequested = true;
 800cf44:	2201      	movs	r2, #1
 800cf46:	f886 203a 	strb.w	r2, [r6, #58]	@ 0x3a
 800cf4a:	e79e      	b.n	800ce8a <ProcessRadioRxDone+0x322>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800cf4c:	4b5b      	ldr	r3, [pc, #364]	@ (800d0bc <ProcessRadioRxDone+0x554>)
 800cf4e:	220a      	movs	r2, #10
 800cf50:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
 800cf54:	e799      	b.n	800ce8a <ProcessRadioRxDone+0x322>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800cf56:	ab13      	add	r3, sp, #76	@ 0x4c
 800cf58:	9300      	str	r3, [sp, #0]
 800cf5a:	9b08      	ldr	r3, [sp, #32]
 800cf5c:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800cf60:	4641      	mov	r1, r8
 800cf62:	4648      	mov	r0, r9
 800cf64:	f003 f8cc 	bl	8010100 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800cf68:	2800      	cmp	r0, #0
 800cf6a:	d14a      	bne.n	800d002 <ProcessRadioRxDone+0x49a>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800cf6c:	4b53      	ldr	r3, [pc, #332]	@ (800d0bc <ProcessRadioRxDone+0x554>)
 800cf6e:	2100      	movs	r1, #0
 800cf70:	f883 1419 	strb.w	r1, [r3, #1049]	@ 0x419
            MacCtx.McpsIndication.Multicast = multicast;
 800cf74:	f883 541a 	strb.w	r5, [r3, #1050]	@ 0x41a
            MacCtx.McpsIndication.Buffer = NULL;
 800cf78:	f8c3 1420 	str.w	r1, [r3, #1056]	@ 0x420
            MacCtx.McpsIndication.BufferSize = 0;
 800cf7c:	f883 1424 	strb.w	r1, [r3, #1060]	@ 0x424
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800cf80:	9a08      	ldr	r2, [sp, #32]
 800cf82:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800cf86:	f8c3 2460 	str.w	r2, [r3, #1120]	@ 0x460
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800cf8a:	f89d 2058 	ldrb.w	r2, [sp, #88]	@ 0x58
 800cf8e:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800cf92:	f883 2426 	strb.w	r2, [r3, #1062]	@ 0x426
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800cf96:	f883 1435 	strb.w	r1, [r3, #1077]	@ 0x435
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800cf9a:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800cf9e:	f893 047f 	ldrb.w	r0, [r3, #1151]	@ 0x47f
 800cfa2:	2801      	cmp	r0, #1
 800cfa4:	d93b      	bls.n	800d01e <ProcessRadioRxDone+0x4b6>
            if( multicast == 1 )
 800cfa6:	2d01      	cmp	r5, #1
 800cfa8:	d03c      	beq.n	800d024 <ProcessRadioRxDone+0x4bc>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800cfaa:	f004 04e0 	and.w	r4, r4, #224	@ 0xe0
 800cfae:	2ca0      	cmp	r4, #160	@ 0xa0
 800cfb0:	d03d      	beq.n	800d02e <ProcessRadioRxDone+0x4c6>
                    Nvm.MacGroup1.SrvAckRequested = false;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	4a42      	ldr	r2, [pc, #264]	@ (800d0c0 <ProcessRadioRxDone+0x558>)
 800cfb6:	f882 303a 	strb.w	r3, [r2, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800cfba:	4a40      	ldr	r2, [pc, #256]	@ (800d0bc <ProcessRadioRxDone+0x554>)
 800cfbc:	f882 3418 	strb.w	r3, [r2, #1048]	@ 0x418
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 800cfc0:	4b3f      	ldr	r3, [pc, #252]	@ (800d0c0 <ProcessRadioRxDone+0x558>)
 800cfc2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800cfc6:	b923      	cbnz	r3, 800cfd2 <ProcessRadioRxDone+0x46a>
 800cfc8:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800cfcc:	f013 0f10 	tst.w	r3, #16
 800cfd0:	d007      	beq.n	800cfe2 <ProcessRadioRxDone+0x47a>
 800cfd2:	4b3b      	ldr	r3, [pc, #236]	@ (800d0c0 <ProcessRadioRxDone+0x558>)
 800cfd4:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800cfd8:	b91b      	cbnz	r3, 800cfe2 <ProcessRadioRxDone+0x47a>
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800cfda:	4b38      	ldr	r3, [pc, #224]	@ (800d0bc <ProcessRadioRxDone+0x554>)
 800cfdc:	2201      	movs	r2, #1
 800cfde:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800cfe2:	4b36      	ldr	r3, [pc, #216]	@ (800d0bc <ProcessRadioRxDone+0x554>)
 800cfe4:	f893 2434 	ldrb.w	r2, [r3, #1076]	@ 0x434
 800cfe8:	f89d 1058 	ldrb.w	r1, [sp, #88]	@ 0x58
 800cfec:	f7ff fad3 	bl	800c596 <RemoveMacCommands>
            switch( fType )
 800cff0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800cff4:	2b03      	cmp	r3, #3
 800cff6:	f200 8085 	bhi.w	800d104 <ProcessRadioRxDone+0x59c>
 800cffa:	e8df f003 	tbb	[pc, r3]
 800cffe:	4a27      	.short	0x4a27
 800d000:	7363      	.short	0x7363
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800d002:	2802      	cmp	r0, #2
 800d004:	d006      	beq.n	800d014 <ProcessRadioRxDone+0x4ac>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800d006:	4b2d      	ldr	r3, [pc, #180]	@ (800d0bc <ProcessRadioRxDone+0x554>)
 800d008:	220c      	movs	r2, #12
 800d00a:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800d00e:	f7ff fa57 	bl	800c4c0 <PrepareRxDoneAbort>
                return;
 800d012:	e5fe      	b.n	800cc12 <ProcessRadioRxDone+0xaa>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800d014:	4b29      	ldr	r3, [pc, #164]	@ (800d0bc <ProcessRadioRxDone+0x554>)
 800d016:	220b      	movs	r2, #11
 800d018:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
 800d01c:	e7f7      	b.n	800d00e <ProcessRadioRxDone+0x4a6>
                Nvm.MacGroup1.AdrAckCounter = 0;
 800d01e:	4b28      	ldr	r3, [pc, #160]	@ (800d0c0 <ProcessRadioRxDone+0x558>)
 800d020:	6299      	str	r1, [r3, #40]	@ 0x28
 800d022:	e7c0      	b.n	800cfa6 <ProcessRadioRxDone+0x43e>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800d024:	4b25      	ldr	r3, [pc, #148]	@ (800d0bc <ProcessRadioRxDone+0x554>)
 800d026:	2202      	movs	r2, #2
 800d028:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
 800d02c:	e7c8      	b.n	800cfc0 <ProcessRadioRxDone+0x458>
                    Nvm.MacGroup1.SrvAckRequested = true;
 800d02e:	4b24      	ldr	r3, [pc, #144]	@ (800d0c0 <ProcessRadioRxDone+0x558>)
 800d030:	2201      	movs	r2, #1
 800d032:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800d036:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 800d03a:	b913      	cbnz	r3, 800d042 <ProcessRadioRxDone+0x4da>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800d03c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800d03e:	4b20      	ldr	r3, [pc, #128]	@ (800d0c0 <ProcessRadioRxDone+0x558>)
 800d040:	635a      	str	r2, [r3, #52]	@ 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800d042:	4b1e      	ldr	r3, [pc, #120]	@ (800d0bc <ProcessRadioRxDone+0x554>)
 800d044:	2201      	movs	r2, #1
 800d046:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
 800d04a:	e7b9      	b.n	800cfc0 <ProcessRadioRxDone+0x458>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800d04c:	f89d 2058 	ldrb.w	r2, [sp, #88]	@ 0x58
 800d050:	4c1a      	ldr	r4, [pc, #104]	@ (800d0bc <ProcessRadioRxDone+0x554>)
 800d052:	f894 347f 	ldrb.w	r3, [r4, #1151]	@ 0x47f
 800d056:	9300      	str	r3, [sp, #0]
 800d058:	463b      	mov	r3, r7
 800d05a:	f002 020f 	and.w	r2, r2, #15
 800d05e:	2100      	movs	r1, #0
 800d060:	a817      	add	r0, sp, #92	@ 0x5c
 800d062:	f7ff faa7 	bl	800c5b4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d066:	f89d 306c 	ldrb.w	r3, [sp, #108]	@ 0x6c
 800d06a:	f884 341b 	strb.w	r3, [r4, #1051]	@ 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800d06e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800d070:	f8c4 3420 	str.w	r3, [r4, #1056]	@ 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800d074:	f89d 3074 	ldrb.w	r3, [sp, #116]	@ 0x74
 800d078:	f884 3424 	strb.w	r3, [r4, #1060]	@ 0x424
                    MacCtx.McpsIndication.RxData = true;
 800d07c:	2301      	movs	r3, #1
 800d07e:	f884 3425 	strb.w	r3, [r4, #1061]	@ 0x425
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800d082:	4a0e      	ldr	r2, [pc, #56]	@ (800d0bc <ProcessRadioRxDone+0x554>)
 800d084:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800d088:	f043 0302 	orr.w	r3, r3, #2
 800d08c:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
            break;
 800d090:	e057      	b.n	800d142 <ProcessRadioRxDone+0x5da>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800d092:	f89d 2058 	ldrb.w	r2, [sp, #88]	@ 0x58
 800d096:	4c09      	ldr	r4, [pc, #36]	@ (800d0bc <ProcessRadioRxDone+0x554>)
 800d098:	f894 347f 	ldrb.w	r3, [r4, #1151]	@ 0x47f
 800d09c:	9300      	str	r3, [sp, #0]
 800d09e:	463b      	mov	r3, r7
 800d0a0:	f002 020f 	and.w	r2, r2, #15
 800d0a4:	2100      	movs	r1, #0
 800d0a6:	a817      	add	r0, sp, #92	@ 0x5c
 800d0a8:	f7ff fa84 	bl	800c5b4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d0ac:	f89d 306c 	ldrb.w	r3, [sp, #108]	@ 0x6c
 800d0b0:	f884 341b 	strb.w	r3, [r4, #1051]	@ 0x41b
                    break;
 800d0b4:	e7e5      	b.n	800d082 <ProcessRadioRxDone+0x51a>
 800d0b6:	bf00      	nop
 800d0b8:	20003798 	.word	0x20003798
 800d0bc:	20003560 	.word	0x20003560
 800d0c0:	20008000 	.word	0x20008000
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800d0c4:	4c32      	ldr	r4, [pc, #200]	@ (800d190 <ProcessRadioRxDone+0x628>)
 800d0c6:	f894 347f 	ldrb.w	r3, [r4, #1151]	@ 0x47f
 800d0ca:	9300      	str	r3, [sp, #0]
 800d0cc:	463b      	mov	r3, r7
 800d0ce:	f89d 2074 	ldrb.w	r2, [sp, #116]	@ 0x74
 800d0d2:	2100      	movs	r1, #0
 800d0d4:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800d0d6:	f7ff fa6d 	bl	800c5b4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d0da:	f89d 306c 	ldrb.w	r3, [sp, #108]	@ 0x6c
 800d0de:	f884 341b 	strb.w	r3, [r4, #1051]	@ 0x41b
                    break;
 800d0e2:	e7ce      	b.n	800d082 <ProcessRadioRxDone+0x51a>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d0e4:	f89d 206c 	ldrb.w	r2, [sp, #108]	@ 0x6c
 800d0e8:	4b29      	ldr	r3, [pc, #164]	@ (800d190 <ProcessRadioRxDone+0x628>)
 800d0ea:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800d0ee:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d0f0:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800d0f4:	f89d 2074 	ldrb.w	r2, [sp, #116]	@ 0x74
 800d0f8:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
                    MacCtx.McpsIndication.RxData = true;
 800d0fc:	2201      	movs	r2, #1
 800d0fe:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                    break;
 800d102:	e7be      	b.n	800d082 <ProcessRadioRxDone+0x51a>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d104:	4b22      	ldr	r3, [pc, #136]	@ (800d190 <ProcessRadioRxDone+0x628>)
 800d106:	2201      	movs	r2, #1
 800d108:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                    PrepareRxDoneAbort( );
 800d10c:	f7ff f9d8 	bl	800c4c0 <PrepareRxDoneAbort>
                    break;
 800d110:	e7b7      	b.n	800d082 <ProcessRadioRxDone+0x51a>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800d112:	1e6a      	subs	r2, r5, #1
 800d114:	4c1f      	ldr	r4, [pc, #124]	@ (800d194 <ProcessRadioRxDone+0x62c>)
 800d116:	b292      	uxth	r2, r2
 800d118:	1c71      	adds	r1, r6, #1
 800d11a:	4620      	mov	r0, r4
 800d11c:	f006 fc33 	bl	8013986 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800d120:	2203      	movs	r2, #3
 800d122:	f884 21e0 	strb.w	r2, [r4, #480]	@ 0x1e0
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d126:	2200      	movs	r2, #0
 800d128:	f884 21e1 	strb.w	r2, [r4, #481]	@ 0x1e1
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800d12c:	f8c4 41e8 	str.w	r4, [r4, #488]	@ 0x1e8
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800d130:	3d01      	subs	r5, #1
 800d132:	f884 51ec 	strb.w	r5, [r4, #492]	@ 0x1ec
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800d136:	f894 2249 	ldrb.w	r2, [r4, #585]	@ 0x249
 800d13a:	f042 0202 	orr.w	r2, r2, #2
 800d13e:	f884 2249 	strb.w	r2, [r4, #585]	@ 0x249
    if( MacCtx.NodeAckRequested == true )
 800d142:	4b13      	ldr	r3, [pc, #76]	@ (800d190 <ProcessRadioRxDone+0x628>)
 800d144:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800d148:	b173      	cbz	r3, 800d168 <ProcessRadioRxDone+0x600>
        if( MacCtx.McpsConfirm.AckReceived == true )
 800d14a:	4b11      	ldr	r3, [pc, #68]	@ (800d190 <ProcessRadioRxDone+0x628>)
 800d14c:	f893 3438 	ldrb.w	r3, [r3, #1080]	@ 0x438
 800d150:	b17b      	cbz	r3, 800d172 <ProcessRadioRxDone+0x60a>
            OnAckTimeoutTimerEvent( NULL );
 800d152:	2000      	movs	r0, #0
 800d154:	f7ff f992 	bl	800c47c <OnAckTimeoutTimerEvent>
 800d158:	e00b      	b.n	800d172 <ProcessRadioRxDone+0x60a>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d15a:	4b0d      	ldr	r3, [pc, #52]	@ (800d190 <ProcessRadioRxDone+0x628>)
 800d15c:	2201      	movs	r2, #1
 800d15e:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            PrepareRxDoneAbort( );
 800d162:	f7ff f9ad 	bl	800c4c0 <PrepareRxDoneAbort>
            break;
 800d166:	e7ec      	b.n	800d142 <ProcessRadioRxDone+0x5da>
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800d168:	4b0b      	ldr	r3, [pc, #44]	@ (800d198 <ProcessRadioRxDone+0x630>)
 800d16a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800d16e:	2b02      	cmp	r3, #2
 800d170:	d009      	beq.n	800d186 <ProcessRadioRxDone+0x61e>
    MacCtx.MacFlags.Bits.MacDone = 1;
 800d172:	4a07      	ldr	r2, [pc, #28]	@ (800d190 <ProcessRadioRxDone+0x628>)
 800d174:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800d178:	f043 0310 	orr.w	r3, r3, #16
 800d17c:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    UpdateRxSlotIdleState( );
 800d180:	f7fe ff56 	bl	800c030 <UpdateRxSlotIdleState>
 800d184:	e545      	b.n	800cc12 <ProcessRadioRxDone+0xaa>
            OnAckTimeoutTimerEvent( NULL );
 800d186:	2000      	movs	r0, #0
 800d188:	f7ff f978 	bl	800c47c <OnAckTimeoutTimerEvent>
 800d18c:	e7f1      	b.n	800d172 <ProcessRadioRxDone+0x60a>
 800d18e:	bf00      	nop
 800d190:	20003560 	.word	0x20003560
 800d194:	20003798 	.word	0x20003798
 800d198:	20008000 	.word	0x20008000

0800d19c <ProcessRadioTxTimeout>:
{
 800d19c:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d19e:	4b0f      	ldr	r3, [pc, #60]	@ (800d1dc <ProcessRadioTxTimeout+0x40>)
 800d1a0:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800d1a4:	2b02      	cmp	r3, #2
 800d1a6:	d002      	beq.n	800d1ae <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 800d1a8:	4b0d      	ldr	r3, [pc, #52]	@ (800d1e0 <ProcessRadioTxTimeout+0x44>)
 800d1aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1ac:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 800d1ae:	f7fe ff3f 	bl	800c030 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800d1b2:	4c0c      	ldr	r4, [pc, #48]	@ (800d1e4 <ProcessRadioTxTimeout+0x48>)
 800d1b4:	2002      	movs	r0, #2
 800d1b6:	f884 0435 	strb.w	r0, [r4, #1077]	@ 0x435
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800d1ba:	f002 fc95 	bl	800fae8 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800d1be:	f894 3410 	ldrb.w	r3, [r4, #1040]	@ 0x410
 800d1c2:	b113      	cbz	r3, 800d1ca <ProcessRadioTxTimeout+0x2e>
        MacCtx.AckTimeoutRetry = true;
 800d1c4:	2201      	movs	r2, #1
 800d1c6:	f884 240f 	strb.w	r2, [r4, #1039]	@ 0x40f
    MacCtx.MacFlags.Bits.MacDone = 1;
 800d1ca:	4a06      	ldr	r2, [pc, #24]	@ (800d1e4 <ProcessRadioTxTimeout+0x48>)
 800d1cc:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800d1d0:	f043 0310 	orr.w	r3, r3, #16
 800d1d4:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
}
 800d1d8:	bd10      	pop	{r4, pc}
 800d1da:	bf00      	nop
 800d1dc:	20008000 	.word	0x20008000
 800d1e0:	080172ac 	.word	0x080172ac
 800d1e4:	20003560 	.word	0x20003560

0800d1e8 <CheckForClassBCollision>:
{
 800d1e8:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800d1ea:	f002 fa24 	bl	800f636 <LoRaMacClassBIsBeaconExpected>
 800d1ee:	b978      	cbnz	r0, 800d210 <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d1f0:	4b09      	ldr	r3, [pc, #36]	@ (800d218 <CheckForClassBCollision+0x30>)
 800d1f2:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800d1f6:	2b01      	cmp	r3, #1
 800d1f8:	d001      	beq.n	800d1fe <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 800d1fa:	2000      	movs	r0, #0
}
 800d1fc:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800d1fe:	f002 fa1c 	bl	800f63a <LoRaMacClassBIsPingExpected>
 800d202:	b938      	cbnz	r0, 800d214 <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800d204:	f002 fa1b 	bl	800f63e <LoRaMacClassBIsMulticastExpected>
 800d208:	2800      	cmp	r0, #0
 800d20a:	d0f7      	beq.n	800d1fc <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800d20c:	200f      	movs	r0, #15
 800d20e:	e7f5      	b.n	800d1fc <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800d210:	200e      	movs	r0, #14
 800d212:	e7f3      	b.n	800d1fc <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800d214:	200f      	movs	r0, #15
 800d216:	e7f1      	b.n	800d1fc <CheckForClassBCollision+0x14>
 800d218:	20008000 	.word	0x20008000

0800d21c <HandleRadioRxErrorTimeout>:
{
 800d21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d21e:	4605      	mov	r5, r0
 800d220:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d222:	4b36      	ldr	r3, [pc, #216]	@ (800d2fc <HandleRadioRxErrorTimeout+0xe0>)
 800d224:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800d228:	2b02      	cmp	r3, #2
 800d22a:	d002      	beq.n	800d232 <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 800d22c:	4b34      	ldr	r3, [pc, #208]	@ (800d300 <HandleRadioRxErrorTimeout+0xe4>)
 800d22e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d230:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800d232:	f002 fa00 	bl	800f636 <LoRaMacClassBIsBeaconExpected>
 800d236:	4606      	mov	r6, r0
 800d238:	bb00      	cbnz	r0, 800d27c <HandleRadioRxErrorTimeout+0x60>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d23a:	4b30      	ldr	r3, [pc, #192]	@ (800d2fc <HandleRadioRxErrorTimeout+0xe0>)
 800d23c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800d240:	2b01      	cmp	r3, #1
 800d242:	d022      	beq.n	800d28a <HandleRadioRxErrorTimeout+0x6e>
    if( classBRx == false )
 800d244:	b9be      	cbnz	r6, 800d276 <HandleRadioRxErrorTimeout+0x5a>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800d246:	4b2f      	ldr	r3, [pc, #188]	@ (800d304 <HandleRadioRxErrorTimeout+0xe8>)
 800d248:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d13e      	bne.n	800d2ce <HandleRadioRxErrorTimeout+0xb2>
            if( MacCtx.NodeAckRequested == true )
 800d250:	4b2c      	ldr	r3, [pc, #176]	@ (800d304 <HandleRadioRxErrorTimeout+0xe8>)
 800d252:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800d256:	b113      	cbz	r3, 800d25e <HandleRadioRxErrorTimeout+0x42>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800d258:	4b2a      	ldr	r3, [pc, #168]	@ (800d304 <HandleRadioRxErrorTimeout+0xe8>)
 800d25a:	f883 5435 	strb.w	r5, [r3, #1077]	@ 0x435
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800d25e:	4628      	mov	r0, r5
 800d260:	f002 fc42 	bl	800fae8 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800d264:	4b25      	ldr	r3, [pc, #148]	@ (800d2fc <HandleRadioRxErrorTimeout+0xe0>)
 800d266:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800d268:	f008 fcb0 	bl	8015bcc <UTIL_TIMER_GetElapsedTime>
 800d26c:	4b25      	ldr	r3, [pc, #148]	@ (800d304 <HandleRadioRxErrorTimeout+0xe8>)
 800d26e:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800d272:	4298      	cmp	r0, r3
 800d274:	d220      	bcs.n	800d2b8 <HandleRadioRxErrorTimeout+0x9c>
    UpdateRxSlotIdleState( );
 800d276:	f7fe fedb 	bl	800c030 <UpdateRxSlotIdleState>
}
 800d27a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800d27c:	2002      	movs	r0, #2
 800d27e:	f002 f9d0 	bl	800f622 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800d282:	2000      	movs	r0, #0
 800d284:	f002 f9d2 	bl	800f62c <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800d288:	e7d7      	b.n	800d23a <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800d28a:	f002 f9d6 	bl	800f63a <LoRaMacClassBIsPingExpected>
 800d28e:	4607      	mov	r7, r0
 800d290:	b950      	cbnz	r0, 800d2a8 <HandleRadioRxErrorTimeout+0x8c>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800d292:	f002 f9d4 	bl	800f63e <LoRaMacClassBIsMulticastExpected>
 800d296:	2800      	cmp	r0, #0
 800d298:	d0d4      	beq.n	800d244 <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d29a:	2000      	movs	r0, #0
 800d29c:	f002 f9c3 	bl	800f626 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800d2a0:	2000      	movs	r0, #0
 800d2a2:	f002 f9c5 	bl	800f630 <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 800d2a6:	e7e6      	b.n	800d276 <HandleRadioRxErrorTimeout+0x5a>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d2a8:	2000      	movs	r0, #0
 800d2aa:	f002 f9bb 	bl	800f624 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800d2ae:	2000      	movs	r0, #0
 800d2b0:	f002 f9bd 	bl	800f62e <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800d2b4:	463e      	mov	r6, r7
 800d2b6:	e7ec      	b.n	800d292 <HandleRadioRxErrorTimeout+0x76>
                TimerStop( &MacCtx.RxWindowTimer2 );
 800d2b8:	4c13      	ldr	r4, [pc, #76]	@ (800d308 <HandleRadioRxErrorTimeout+0xec>)
 800d2ba:	4620      	mov	r0, r4
 800d2bc:	f008 fcbc 	bl	8015c38 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800d2c0:	f894 30e9 	ldrb.w	r3, [r4, #233]	@ 0xe9
 800d2c4:	f043 0310 	orr.w	r3, r3, #16
 800d2c8:	f884 30e9 	strb.w	r3, [r4, #233]	@ 0xe9
 800d2cc:	e7d3      	b.n	800d276 <HandleRadioRxErrorTimeout+0x5a>
            if( MacCtx.NodeAckRequested == true )
 800d2ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d304 <HandleRadioRxErrorTimeout+0xe8>)
 800d2d0:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800d2d4:	b113      	cbz	r3, 800d2dc <HandleRadioRxErrorTimeout+0xc0>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800d2d6:	4b0b      	ldr	r3, [pc, #44]	@ (800d304 <HandleRadioRxErrorTimeout+0xe8>)
 800d2d8:	f883 4435 	strb.w	r4, [r3, #1077]	@ 0x435
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800d2dc:	4620      	mov	r0, r4
 800d2de:	f002 fc03 	bl	800fae8 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d2e2:	4b06      	ldr	r3, [pc, #24]	@ (800d2fc <HandleRadioRxErrorTimeout+0xe0>)
 800d2e4:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800d2e8:	2b02      	cmp	r3, #2
 800d2ea:	d0c4      	beq.n	800d276 <HandleRadioRxErrorTimeout+0x5a>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800d2ec:	4a05      	ldr	r2, [pc, #20]	@ (800d304 <HandleRadioRxErrorTimeout+0xe8>)
 800d2ee:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800d2f2:	f043 0310 	orr.w	r3, r3, #16
 800d2f6:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
 800d2fa:	e7bc      	b.n	800d276 <HandleRadioRxErrorTimeout+0x5a>
 800d2fc:	20008000 	.word	0x20008000
 800d300:	080172ac 	.word	0x080172ac
 800d304:	20003560 	.word	0x20003560
 800d308:	200038f8 	.word	0x200038f8

0800d30c <ProcessRadioRxError>:
{
 800d30c:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800d30e:	2106      	movs	r1, #6
 800d310:	2005      	movs	r0, #5
 800d312:	f7ff ff83 	bl	800d21c <HandleRadioRxErrorTimeout>
}
 800d316:	bd08      	pop	{r3, pc}

0800d318 <ProcessRadioRxTimeout>:
{
 800d318:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800d31a:	2104      	movs	r1, #4
 800d31c:	2003      	movs	r0, #3
 800d31e:	f7ff ff7d 	bl	800d21c <HandleRadioRxErrorTimeout>
}
 800d322:	bd08      	pop	{r3, pc}

0800d324 <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d324:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d328:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 800d32a:	4a14      	ldr	r2, [pc, #80]	@ (800d37c <LoRaMacHandleIrqEvents+0x58>)
 800d32c:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 800d32e:	2000      	movs	r0, #0
 800d330:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d332:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 800d336:	b303      	cbz	r3, 800d37a <LoRaMacHandleIrqEvents+0x56>
{
 800d338:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 800d33a:	b2dc      	uxtb	r4, r3
 800d33c:	f013 0f10 	tst.w	r3, #16
 800d340:	d10c      	bne.n	800d35c <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 800d342:	f014 0f08 	tst.w	r4, #8
 800d346:	d10c      	bne.n	800d362 <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 800d348:	f014 0f04 	tst.w	r4, #4
 800d34c:	d10c      	bne.n	800d368 <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 800d34e:	f014 0f02 	tst.w	r4, #2
 800d352:	d10c      	bne.n	800d36e <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 800d354:	f014 0f01 	tst.w	r4, #1
 800d358:	d10c      	bne.n	800d374 <LoRaMacHandleIrqEvents+0x50>
}
 800d35a:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 800d35c:	f7ff f802 	bl	800c364 <ProcessRadioTxDone>
 800d360:	e7ef      	b.n	800d342 <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 800d362:	f7ff fc01 	bl	800cb68 <ProcessRadioRxDone>
 800d366:	e7ef      	b.n	800d348 <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 800d368:	f7ff ff18 	bl	800d19c <ProcessRadioTxTimeout>
 800d36c:	e7ef      	b.n	800d34e <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 800d36e:	f7ff ffcd 	bl	800d30c <ProcessRadioRxError>
 800d372:	e7ef      	b.n	800d354 <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 800d374:	f7ff ffd0 	bl	800d318 <ProcessRadioRxTimeout>
}
 800d378:	e7ef      	b.n	800d35a <LoRaMacHandleIrqEvents+0x36>
 800d37a:	4770      	bx	lr
 800d37c:	2000355c 	.word	0x2000355c

0800d380 <LoRaMacHandleMlmeRequest>:
{
 800d380:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800d382:	4b16      	ldr	r3, [pc, #88]	@ (800d3dc <LoRaMacHandleMlmeRequest+0x5c>)
 800d384:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800d388:	f013 0f04 	tst.w	r3, #4
 800d38c:	d100      	bne.n	800d390 <LoRaMacHandleMlmeRequest+0x10>
}
 800d38e:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800d390:	2001      	movs	r0, #1
 800d392:	f002 fbc7 	bl	800fb24 <LoRaMacConfirmQueueIsCmdActive>
 800d396:	b178      	cbz	r0, 800d3b8 <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800d398:	2001      	movs	r0, #1
 800d39a:	f002 fb8d 	bl	800fab8 <LoRaMacConfirmQueueGetStatus>
 800d39e:	b918      	cbnz	r0, 800d3a8 <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 800d3a0:	4b0e      	ldr	r3, [pc, #56]	@ (800d3dc <LoRaMacHandleMlmeRequest+0x5c>)
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800d3a8:	4a0c      	ldr	r2, [pc, #48]	@ (800d3dc <LoRaMacHandleMlmeRequest+0x5c>)
 800d3aa:	f8d2 3340 	ldr.w	r3, [r2, #832]	@ 0x340
 800d3ae:	f023 0302 	bic.w	r3, r3, #2
 800d3b2:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
 800d3b6:	e7ea      	b.n	800d38e <LoRaMacHandleMlmeRequest+0xe>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800d3b8:	2006      	movs	r0, #6
 800d3ba:	f002 fbb3 	bl	800fb24 <LoRaMacConfirmQueueIsCmdActive>
 800d3be:	b138      	cbz	r0, 800d3d0 <LoRaMacHandleMlmeRequest+0x50>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800d3c0:	4a06      	ldr	r2, [pc, #24]	@ (800d3dc <LoRaMacHandleMlmeRequest+0x5c>)
 800d3c2:	f8d2 3340 	ldr.w	r3, [r2, #832]	@ 0x340
 800d3c6:	f023 0302 	bic.w	r3, r3, #2
 800d3ca:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 800d3ce:	e7de      	b.n	800d38e <LoRaMacHandleMlmeRequest+0xe>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800d3d0:	2007      	movs	r0, #7
 800d3d2:	f002 fba7 	bl	800fb24 <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800d3d6:	2800      	cmp	r0, #0
 800d3d8:	d0d9      	beq.n	800d38e <LoRaMacHandleMlmeRequest+0xe>
 800d3da:	e7f1      	b.n	800d3c0 <LoRaMacHandleMlmeRequest+0x40>
 800d3dc:	20003560 	.word	0x20003560

0800d3e0 <AckTimeoutRetriesFinalize>:
    if( MacCtx.McpsConfirm.AckReceived == false )
 800d3e0:	4b14      	ldr	r3, [pc, #80]	@ (800d434 <AckTimeoutRetriesFinalize+0x54>)
 800d3e2:	f893 3438 	ldrb.w	r3, [r3, #1080]	@ 0x438
 800d3e6:	b12b      	cbz	r3, 800d3f4 <AckTimeoutRetriesFinalize+0x14>
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800d3e8:	4b12      	ldr	r3, [pc, #72]	@ (800d434 <AckTimeoutRetriesFinalize+0x54>)
 800d3ea:	f893 240e 	ldrb.w	r2, [r3, #1038]	@ 0x40e
 800d3ee:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
 800d3f2:	4770      	bx	lr
{
 800d3f4:	b500      	push	{lr}
 800d3f6:	b085      	sub	sp, #20
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800d3f8:	2302      	movs	r3, #2
 800d3fa:	f88d 300c 	strb.w	r3, [sp, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 800d3fe:	4b0e      	ldr	r3, [pc, #56]	@ (800d438 <AckTimeoutRetriesFinalize+0x58>)
 800d400:	9301      	str	r3, [sp, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 800d402:	f103 02a4 	add.w	r2, r3, #164	@ 0xa4
 800d406:	9202      	str	r2, [sp, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800d408:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800d40c:	a901      	add	r1, sp, #4
 800d40e:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800d412:	f003 f941 	bl	8010698 <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 800d416:	4b07      	ldr	r3, [pc, #28]	@ (800d434 <AckTimeoutRetriesFinalize+0x54>)
 800d418:	2200      	movs	r2, #0
 800d41a:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
        MacCtx.McpsConfirm.AckReceived = false;
 800d41e:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800d422:	4b04      	ldr	r3, [pc, #16]	@ (800d434 <AckTimeoutRetriesFinalize+0x54>)
 800d424:	f893 240e 	ldrb.w	r2, [r3, #1038]	@ 0x40e
 800d428:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
}
 800d42c:	b005      	add	sp, #20
 800d42e:	f85d fb04 	ldr.w	pc, [sp], #4
 800d432:	bf00      	nop
 800d434:	20003560 	.word	0x20003560
 800d438:	20008220 	.word	0x20008220

0800d43c <SerializeTxFrame>:
{
 800d43c:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 800d43e:	4b0f      	ldr	r3, [pc, #60]	@ (800d47c <SerializeTxFrame+0x40>)
 800d440:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800d444:	b11b      	cbz	r3, 800d44e <SerializeTxFrame+0x12>
 800d446:	2b04      	cmp	r3, #4
 800d448:	d00a      	beq.n	800d460 <SerializeTxFrame+0x24>
 800d44a:	2003      	movs	r0, #3
}
 800d44c:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800d44e:	480c      	ldr	r0, [pc, #48]	@ (800d480 <SerializeTxFrame+0x44>)
 800d450:	f003 f82b 	bl	80104aa <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800d454:	b968      	cbnz	r0, 800d472 <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800d456:	4b09      	ldr	r3, [pc, #36]	@ (800d47c <SerializeTxFrame+0x40>)
 800d458:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 800d45c:	801a      	strh	r2, [r3, #0]
            break;
 800d45e:	e7f5      	b.n	800d44c <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800d460:	4807      	ldr	r0, [pc, #28]	@ (800d480 <SerializeTxFrame+0x44>)
 800d462:	f003 f858 	bl	8010516 <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800d466:	b930      	cbnz	r0, 800d476 <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800d468:	4b04      	ldr	r3, [pc, #16]	@ (800d47c <SerializeTxFrame+0x40>)
 800d46a:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 800d46e:	801a      	strh	r2, [r3, #0]
            break;
 800d470:	e7ec      	b.n	800d44c <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800d472:	2011      	movs	r0, #17
 800d474:	e7ea      	b.n	800d44c <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800d476:	2011      	movs	r0, #17
 800d478:	e7e8      	b.n	800d44c <SerializeTxFrame+0x10>
 800d47a:	bf00      	nop
 800d47c:	20003560 	.word	0x20003560
 800d480:	20003668 	.word	0x20003668

0800d484 <ComputeRxWindowParameters>:
{
 800d484:	b570      	push	{r4, r5, r6, lr}
 800d486:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800d488:	4c1e      	ldr	r4, [pc, #120]	@ (800d504 <ComputeRxWindowParameters+0x80>)
 800d48a:	f894 6048 	ldrb.w	r6, [r4, #72]	@ 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800d48e:	f994 3069 	ldrsb.w	r3, [r4, #105]	@ 0x69
 800d492:	f994 2039 	ldrsb.w	r2, [r4, #57]	@ 0x39
 800d496:	f894 107d 	ldrb.w	r1, [r4, #125]	@ 0x7d
 800d49a:	4630      	mov	r0, r6
 800d49c:	f003 f9f9 	bl	8010892 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800d4a0:	4d19      	ldr	r5, [pc, #100]	@ (800d508 <ComputeRxWindowParameters+0x84>)
 800d4a2:	9500      	str	r5, [sp, #0]
 800d4a4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800d4a6:	f894 2050 	ldrb.w	r2, [r4, #80]	@ 0x50
 800d4aa:	b241      	sxtb	r1, r0
 800d4ac:	4630      	mov	r0, r6
 800d4ae:	f003 f92e 	bl	801070e <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800d4b2:	f105 0314 	add.w	r3, r5, #20
 800d4b6:	9300      	str	r3, [sp, #0]
 800d4b8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800d4ba:	f894 2050 	ldrb.w	r2, [r4, #80]	@ 0x50
 800d4be:	f994 1070 	ldrsb.w	r1, [r4, #112]	@ 0x70
 800d4c2:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800d4c6:	f003 f922 	bl	801070e <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800d4ca:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800d4cc:	f5a5 736e 	sub.w	r3, r5, #952	@ 0x3b8
 800d4d0:	68e8      	ldr	r0, [r5, #12]
 800d4d2:	4402      	add	r2, r0
 800d4d4:	f845 2c08 	str.w	r2, [r5, #-8]
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800d4d8:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800d4da:	6a29      	ldr	r1, [r5, #32]
 800d4dc:	440a      	add	r2, r1
 800d4de:	f845 2c04 	str.w	r2, [r5, #-4]
    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 800d4e2:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800d4e6:	2b04      	cmp	r3, #4
 800d4e8:	d009      	beq.n	800d4fe <ComputeRxWindowParameters+0x7a>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800d4ea:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800d4ec:	4418      	add	r0, r3
 800d4ee:	f5a5 736e 	sub.w	r3, r5, #952	@ 0x3b8
 800d4f2:	f8c3 03b0 	str.w	r0, [r3, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800d4f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d4f8:	4411      	add	r1, r2
 800d4fa:	f8c3 13b4 	str.w	r1, [r3, #948]	@ 0x3b4
}
 800d4fe:	b002      	add	sp, #8
 800d500:	bd70      	pop	{r4, r5, r6, pc}
 800d502:	bf00      	nop
 800d504:	20008000 	.word	0x20008000
 800d508:	20003918 	.word	0x20003918

0800d50c <VerifyTxFrame>:
{
 800d50c:	b510      	push	{r4, lr}
 800d50e:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 800d510:	2300      	movs	r3, #0
 800d512:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800d514:	4b0d      	ldr	r3, [pc, #52]	@ (800d54c <VerifyTxFrame+0x40>)
 800d516:	f893 412c 	ldrb.w	r4, [r3, #300]	@ 0x12c
 800d51a:	b914      	cbnz	r4, 800d522 <VerifyTxFrame+0x16>
}
 800d51c:	4620      	mov	r0, r4
 800d51e:	b002      	add	sp, #8
 800d520:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800d522:	a801      	add	r0, sp, #4
 800d524:	f002 f9c4 	bl	800f8b0 <LoRaMacCommandsGetSizeSerializedCmds>
 800d528:	4604      	mov	r4, r0
 800d52a:	b968      	cbnz	r0, 800d548 <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800d52c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d530:	4b06      	ldr	r3, [pc, #24]	@ (800d54c <VerifyTxFrame+0x40>)
 800d532:	f993 1039 	ldrsb.w	r1, [r3, #57]	@ 0x39
 800d536:	4b06      	ldr	r3, [pc, #24]	@ (800d550 <VerifyTxFrame+0x44>)
 800d538:	f893 0237 	ldrb.w	r0, [r3, #567]	@ 0x237
 800d53c:	f7fe ff04 	bl	800c348 <ValidatePayloadLength>
 800d540:	2800      	cmp	r0, #0
 800d542:	d1eb      	bne.n	800d51c <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 800d544:	2408      	movs	r4, #8
 800d546:	e7e9      	b.n	800d51c <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d548:	2413      	movs	r4, #19
 800d54a:	e7e7      	b.n	800d51c <VerifyTxFrame+0x10>
 800d54c:	20008000 	.word	0x20008000
 800d550:	20003560 	.word	0x20003560

0800d554 <SecureFrame>:
{
 800d554:	b530      	push	{r4, r5, lr}
 800d556:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 800d558:	2300      	movs	r3, #0
 800d55a:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 800d55c:	4b1a      	ldr	r3, [pc, #104]	@ (800d5c8 <SecureFrame+0x74>)
 800d55e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800d562:	b133      	cbz	r3, 800d572 <SecureFrame+0x1e>
 800d564:	4605      	mov	r5, r0
 800d566:	460c      	mov	r4, r1
 800d568:	2b04      	cmp	r3, #4
 800d56a:	d00b      	beq.n	800d584 <SecureFrame+0x30>
 800d56c:	2003      	movs	r0, #3
}
 800d56e:	b003      	add	sp, #12
 800d570:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800d572:	4816      	ldr	r0, [pc, #88]	@ (800d5cc <SecureFrame+0x78>)
 800d574:	f002 fd54 	bl	8010020 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800d578:	bb00      	cbnz	r0, 800d5bc <SecureFrame+0x68>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800d57a:	4b13      	ldr	r3, [pc, #76]	@ (800d5c8 <SecureFrame+0x74>)
 800d57c:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 800d580:	801a      	strh	r2, [r3, #0]
            break;
 800d582:	e7f4      	b.n	800d56e <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800d584:	a801      	add	r0, sp, #4
 800d586:	f002 fceb 	bl	800ff60 <LoRaMacCryptoGetFCntUp>
 800d58a:	b9c8      	cbnz	r0, 800d5c0 <SecureFrame+0x6c>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800d58c:	4b0e      	ldr	r3, [pc, #56]	@ (800d5c8 <SecureFrame+0x74>)
 800d58e:	f893 340c 	ldrb.w	r3, [r3, #1036]	@ 0x40c
 800d592:	b923      	cbnz	r3, 800d59e <SecureFrame+0x4a>
 800d594:	4b0c      	ldr	r3, [pc, #48]	@ (800d5c8 <SecureFrame+0x74>)
 800d596:	f893 340e 	ldrb.w	r3, [r3, #1038]	@ 0x40e
 800d59a:	2b01      	cmp	r3, #1
 800d59c:	d902      	bls.n	800d5a4 <SecureFrame+0x50>
                fCntUp -= 1;
 800d59e:	9b01      	ldr	r3, [sp, #4]
 800d5a0:	3b01      	subs	r3, #1
 800d5a2:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800d5a4:	4b09      	ldr	r3, [pc, #36]	@ (800d5cc <SecureFrame+0x78>)
 800d5a6:	4622      	mov	r2, r4
 800d5a8:	4629      	mov	r1, r5
 800d5aa:	9801      	ldr	r0, [sp, #4]
 800d5ac:	f002 fd64 	bl	8010078 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800d5b0:	b940      	cbnz	r0, 800d5c4 <SecureFrame+0x70>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800d5b2:	4b05      	ldr	r3, [pc, #20]	@ (800d5c8 <SecureFrame+0x74>)
 800d5b4:	f893 210c 	ldrb.w	r2, [r3, #268]	@ 0x10c
 800d5b8:	801a      	strh	r2, [r3, #0]
            break;
 800d5ba:	e7d8      	b.n	800d56e <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800d5bc:	2011      	movs	r0, #17
 800d5be:	e7d6      	b.n	800d56e <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800d5c0:	2012      	movs	r0, #18
 800d5c2:	e7d4      	b.n	800d56e <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800d5c4:	2011      	movs	r0, #17
 800d5c6:	e7d2      	b.n	800d56e <SecureFrame+0x1a>
 800d5c8:	20003560 	.word	0x20003560
 800d5cc:	20003668 	.word	0x20003668

0800d5d0 <SendFrameOnChannel>:
{
 800d5d0:	b570      	push	{r4, r5, r6, lr}
 800d5d2:	b086      	sub	sp, #24
 800d5d4:	4606      	mov	r6, r0
    int8_t txPower = 0;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 800d5dc:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800d5e0:	4d34      	ldr	r5, [pc, #208]	@ (800d6b4 <SendFrameOnChannel+0xe4>)
 800d5e2:	f995 3039 	ldrsb.w	r3, [r5, #57]	@ 0x39
 800d5e6:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800d5ea:	f995 3038 	ldrsb.w	r3, [r5, #56]	@ 0x38
 800d5ee:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800d5f2:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800d5f6:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800d5f8:	f8d5 3084 	ldr.w	r3, [r5, #132]	@ 0x84
 800d5fc:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800d5fe:	4c2e      	ldr	r4, [pc, #184]	@ (800d6b8 <SendFrameOnChannel+0xe8>)
 800d600:	8823      	ldrh	r3, [r4, #0]
 800d602:	f8ad 3014 	strh.w	r3, [sp, #20]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800d606:	f204 4314 	addw	r3, r4, #1044	@ 0x414
 800d60a:	f10d 0207 	add.w	r2, sp, #7
 800d60e:	a902      	add	r1, sp, #8
 800d610:	f895 0048 	ldrb.w	r0, [r5, #72]	@ 0x48
 800d614:	f003 f89f 	bl	8010756 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d618:	2301      	movs	r3, #1
 800d61a:	f884 3435 	strb.w	r3, [r4, #1077]	@ 0x435
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800d61e:	f895 3039 	ldrb.w	r3, [r5, #57]	@ 0x39
 800d622:	f884 3436 	strb.w	r3, [r4, #1078]	@ 0x436
    MacCtx.McpsConfirm.TxPower = txPower;
 800d626:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d62a:	f884 3437 	strb.w	r3, [r4, #1079]	@ 0x437
    MacCtx.McpsConfirm.Channel = channel;
 800d62e:	f8c4 6444 	str.w	r6, [r4, #1092]	@ 0x444
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800d632:	f8d4 3414 	ldr.w	r3, [r4, #1044]	@ 0x414
 800d636:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800d63a:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800d63e:	f002 f800 	bl	800f642 <LoRaMacClassBIsBeaconModeActive>
 800d642:	bb58      	cbnz	r0, 800d69c <SendFrameOnChannel+0xcc>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d644:	4b1b      	ldr	r3, [pc, #108]	@ (800d6b4 <SendFrameOnChannel+0xe4>)
 800d646:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800d64a:	2b01      	cmp	r3, #1
 800d64c:	d02e      	beq.n	800d6ac <SendFrameOnChannel+0xdc>
    LoRaMacClassBHaltBeaconing( );
 800d64e:	f001 fffb 	bl	800f648 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800d652:	4b18      	ldr	r3, [pc, #96]	@ (800d6b4 <SendFrameOnChannel+0xe4>)
 800d654:	f993 0039 	ldrsb.w	r0, [r3, #57]	@ 0x39
 800d658:	4b17      	ldr	r3, [pc, #92]	@ (800d6b8 <SendFrameOnChannel+0xe8>)
 800d65a:	f893 1411 	ldrb.w	r1, [r3, #1041]	@ 0x411
 800d65e:	b2c0      	uxtb	r0, r0
 800d660:	f7ff ff78 	bl	800d554 <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 800d664:	4604      	mov	r4, r0
 800d666:	b9b0      	cbnz	r0, 800d696 <SendFrameOnChannel+0xc6>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800d668:	4b13      	ldr	r3, [pc, #76]	@ (800d6b8 <SendFrameOnChannel+0xe8>)
 800d66a:	f8d3 2340 	ldr.w	r2, [r3, #832]	@ 0x340
 800d66e:	f042 0202 	orr.w	r2, r2, #2
 800d672:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == false )
 800d676:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800d67a:	b92b      	cbnz	r3, 800d688 <SendFrameOnChannel+0xb8>
        MacCtx.ChannelsNbTransCounter++;
 800d67c:	4a0e      	ldr	r2, [pc, #56]	@ (800d6b8 <SendFrameOnChannel+0xe8>)
 800d67e:	f892 340c 	ldrb.w	r3, [r2, #1036]	@ 0x40c
 800d682:	3301      	adds	r3, #1
 800d684:	f882 340c 	strb.w	r3, [r2, #1036]	@ 0x40c
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800d688:	4b0c      	ldr	r3, [pc, #48]	@ (800d6bc <SendFrameOnChannel+0xec>)
 800d68a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d68c:	480a      	ldr	r0, [pc, #40]	@ (800d6b8 <SendFrameOnChannel+0xe8>)
 800d68e:	f830 1b02 	ldrh.w	r1, [r0], #2
 800d692:	b2c9      	uxtb	r1, r1
 800d694:	4798      	blx	r3
}
 800d696:	4620      	mov	r0, r4
 800d698:	b006      	add	sp, #24
 800d69a:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800d69c:	f8d4 0414 	ldr.w	r0, [r4, #1044]	@ 0x414
 800d6a0:	f001 ffe1 	bl	800f666 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 800d6a4:	2800      	cmp	r0, #0
 800d6a6:	d0cd      	beq.n	800d644 <SendFrameOnChannel+0x74>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800d6a8:	2410      	movs	r4, #16
 800d6aa:	e7f4      	b.n	800d696 <SendFrameOnChannel+0xc6>
        LoRaMacClassBStopRxSlots( );
 800d6ac:	f001 ffdd 	bl	800f66a <LoRaMacClassBStopRxSlots>
 800d6b0:	e7cd      	b.n	800d64e <SendFrameOnChannel+0x7e>
 800d6b2:	bf00      	nop
 800d6b4:	20008000 	.word	0x20008000
 800d6b8:	20003560 	.word	0x20003560
 800d6bc:	080172ac 	.word	0x080172ac

0800d6c0 <ScheduleTx>:
{
 800d6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6c4:	b08c      	sub	sp, #48	@ 0x30
 800d6c6:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 800d6c8:	f7ff fd8e 	bl	800d1e8 <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 800d6cc:	4604      	mov	r4, r0
 800d6ce:	b118      	cbz	r0, 800d6d8 <ScheduleTx+0x18>
}
 800d6d0:	4620      	mov	r0, r4
 800d6d2:	b00c      	add	sp, #48	@ 0x30
 800d6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 800d6d8:	f7fe fd04 	bl	800c0e4 <CalculateBackOff>
    status = SerializeTxFrame( );
 800d6dc:	f7ff feae 	bl	800d43c <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800d6e0:	4604      	mov	r4, r0
 800d6e2:	2800      	cmp	r0, #0
 800d6e4:	d1f4      	bne.n	800d6d0 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800d6e6:	4e35      	ldr	r6, [pc, #212]	@ (800d7bc <ScheduleTx+0xfc>)
 800d6e8:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 800d6ea:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800d6ec:	f996 3039 	ldrsb.w	r3, [r6, #57]	@ 0x39
 800d6f0:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800d6f4:	f896 311c 	ldrb.w	r3, [r6, #284]	@ 0x11c
 800d6f8:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800d6fc:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800d700:	4640      	mov	r0, r8
 800d702:	f008 f9c7 	bl	8015a94 <SysTimeGetMcuTime>
 800d706:	af02      	add	r7, sp, #8
 800d708:	f8d6 3124 	ldr.w	r3, [r6, #292]	@ 0x124
 800d70c:	9300      	str	r3, [sp, #0]
 800d70e:	f8d6 3120 	ldr.w	r3, [r6, #288]	@ 0x120
 800d712:	e898 0006 	ldmia.w	r8, {r1, r2}
 800d716:	4638      	mov	r0, r7
 800d718:	f008 f959 	bl	80159ce <SysTimeSub>
 800d71c:	ab07      	add	r3, sp, #28
 800d71e:	e897 0003 	ldmia.w	r7, {r0, r1}
 800d722:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800d726:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 800d728:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 800d72a:	2300      	movs	r3, #0
 800d72c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    nextChan.Joined = true;
 800d730:	2301      	movs	r3, #1
 800d732:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800d736:	4b22      	ldr	r3, [pc, #136]	@ (800d7c0 <ScheduleTx+0x100>)
 800d738:	881b      	ldrh	r3, [r3, #0]
 800d73a:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800d73e:	f896 312c 	ldrb.w	r3, [r6, #300]	@ 0x12c
 800d742:	b92b      	cbnz	r3, 800d750 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 800d744:	2301      	movs	r3, #1
 800d746:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
        nextChan.Joined = false;
 800d74a:	2300      	movs	r3, #0
 800d74c:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800d750:	4b1c      	ldr	r3, [pc, #112]	@ (800d7c4 <ScheduleTx+0x104>)
 800d752:	481a      	ldr	r0, [pc, #104]	@ (800d7bc <ScheduleTx+0xfc>)
 800d754:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800d758:	9200      	str	r2, [sp, #0]
 800d75a:	f1a3 0273 	sub.w	r2, r3, #115	@ 0x73
 800d75e:	a904      	add	r1, sp, #16
 800d760:	f890 0048 	ldrb.w	r0, [r0, #72]	@ 0x48
 800d764:	f003 f872 	bl	801084c <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 800d768:	b1c0      	cbz	r0, 800d79c <ScheduleTx+0xdc>
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 800d76a:	280b      	cmp	r0, #11
 800d76c:	d124      	bne.n	800d7b8 <ScheduleTx+0xf8>
            if( MacCtx.DutyCycleWaitTime != 0 )
 800d76e:	4a14      	ldr	r2, [pc, #80]	@ (800d7c0 <ScheduleTx+0x100>)
 800d770:	f8d2 1484 	ldr.w	r1, [r2, #1156]	@ 0x484
 800d774:	b191      	cbz	r1, 800d79c <ScheduleTx+0xdc>
                if( allowDelayedTx == true )
 800d776:	b90d      	cbnz	r5, 800d77c <ScheduleTx+0xbc>
                return status;
 800d778:	4604      	mov	r4, r0
 800d77a:	e7a9      	b.n	800d6d0 <ScheduleTx+0x10>
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800d77c:	4615      	mov	r5, r2
 800d77e:	f8d2 2340 	ldr.w	r2, [r2, #832]	@ 0x340
 800d782:	f042 0220 	orr.w	r2, r2, #32
 800d786:	f8c5 2340 	str.w	r2, [r5, #832]	@ 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800d78a:	f505 755a 	add.w	r5, r5, #872	@ 0x368
 800d78e:	4628      	mov	r0, r5
 800d790:	f008 faf2 	bl	8015d78 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 800d794:	4628      	mov	r0, r5
 800d796:	f008 faa9 	bl	8015cec <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 800d79a:	e799      	b.n	800d6d0 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 800d79c:	f7ff fe72 	bl	800d484 <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 800d7a0:	f7ff feb4 	bl	800d50c <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800d7a4:	4604      	mov	r4, r0
 800d7a6:	2800      	cmp	r0, #0
 800d7a8:	d192      	bne.n	800d6d0 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 800d7aa:	4b05      	ldr	r3, [pc, #20]	@ (800d7c0 <ScheduleTx+0x100>)
 800d7ac:	f893 0411 	ldrb.w	r0, [r3, #1041]	@ 0x411
 800d7b0:	f7ff ff0e 	bl	800d5d0 <SendFrameOnChannel>
 800d7b4:	4604      	mov	r4, r0
 800d7b6:	e78b      	b.n	800d6d0 <ScheduleTx+0x10>
            return status;
 800d7b8:	4604      	mov	r4, r0
 800d7ba:	e789      	b.n	800d6d0 <ScheduleTx+0x10>
 800d7bc:	20008000 	.word	0x20008000
 800d7c0:	20003560 	.word	0x20003560
 800d7c4:	200039e4 	.word	0x200039e4

0800d7c8 <OnTxDelayedTimerEvent>:
{
 800d7c8:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800d7ca:	4c12      	ldr	r4, [pc, #72]	@ (800d814 <OnTxDelayedTimerEvent+0x4c>)
 800d7cc:	4620      	mov	r0, r4
 800d7ce:	f008 fa33 	bl	8015c38 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800d7d2:	f854 3c28 	ldr.w	r3, [r4, #-40]
 800d7d6:	f023 0320 	bic.w	r3, r3, #32
 800d7da:	f844 3c28 	str.w	r3, [r4, #-40]
    switch( ScheduleTx( true ) )
 800d7de:	2001      	movs	r0, #1
 800d7e0:	f7ff ff6e 	bl	800d6c0 <ScheduleTx>
 800d7e4:	b118      	cbz	r0, 800d7ee <OnTxDelayedTimerEvent+0x26>
 800d7e6:	f5a4 745a 	sub.w	r4, r4, #872	@ 0x368
 800d7ea:	280b      	cmp	r0, #11
 800d7ec:	d100      	bne.n	800d7f0 <OnTxDelayedTimerEvent+0x28>
}
 800d7ee:	bd10      	pop	{r4, pc}
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800d7f0:	4b09      	ldr	r3, [pc, #36]	@ (800d818 <OnTxDelayedTimerEvent+0x50>)
 800d7f2:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 800d7f6:	f884 2436 	strb.w	r2, [r4, #1078]	@ 0x436
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800d7fa:	f894 240e 	ldrb.w	r2, [r4, #1038]	@ 0x40e
 800d7fe:	f884 2439 	strb.w	r2, [r4, #1081]	@ 0x439
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800d802:	2009      	movs	r0, #9
 800d804:	f884 0435 	strb.w	r0, [r4, #1077]	@ 0x435
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800d808:	f002 f96e 	bl	800fae8 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800d80c:	f7fe fcf8 	bl	800c200 <StopRetransmission>
}
 800d810:	e7ed      	b.n	800d7ee <OnTxDelayedTimerEvent+0x26>
 800d812:	bf00      	nop
 800d814:	200038c8 	.word	0x200038c8
 800d818:	20008000 	.word	0x20008000

0800d81c <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800d81c:	4b23      	ldr	r3, [pc, #140]	@ (800d8ac <LoRaMacHandleMcpsRequest+0x90>)
 800d81e:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800d822:	f013 0f01 	tst.w	r3, #1
 800d826:	d03f      	beq.n	800d8a8 <LoRaMacHandleMcpsRequest+0x8c>
{
 800d828:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800d82a:	4b20      	ldr	r3, [pc, #128]	@ (800d8ac <LoRaMacHandleMcpsRequest+0x90>)
 800d82c:	f893 3434 	ldrb.w	r3, [r3, #1076]	@ 0x434
 800d830:	b12b      	cbz	r3, 800d83e <LoRaMacHandleMcpsRequest+0x22>
 800d832:	2b03      	cmp	r3, #3
 800d834:	d003      	beq.n	800d83e <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800d836:	2b01      	cmp	r3, #1
 800d838:	d007      	beq.n	800d84a <LoRaMacHandleMcpsRequest+0x2e>
        bool waitForRetransmission = false;
 800d83a:	2400      	movs	r4, #0
 800d83c:	e003      	b.n	800d846 <LoRaMacHandleMcpsRequest+0x2a>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800d83e:	f7fe fca3 	bl	800c188 <CheckRetransUnconfirmedUplink>
 800d842:	4604      	mov	r4, r0
        if( stopRetransmission == true )
 800d844:	b9a4      	cbnz	r4, 800d870 <LoRaMacHandleMcpsRequest+0x54>
        else if( waitForRetransmission == false )
 800d846:	b314      	cbz	r4, 800d88e <LoRaMacHandleMcpsRequest+0x72>
}
 800d848:	bd10      	pop	{r4, pc}
            if( MacCtx.AckTimeoutRetry == true )
 800d84a:	4b18      	ldr	r3, [pc, #96]	@ (800d8ac <LoRaMacHandleMcpsRequest+0x90>)
 800d84c:	f893 340f 	ldrb.w	r3, [r3, #1039]	@ 0x40f
 800d850:	b1db      	cbz	r3, 800d88a <LoRaMacHandleMcpsRequest+0x6e>
                stopRetransmission = CheckRetransConfirmedUplink( );
 800d852:	f7fe fcbd 	bl	800c1d0 <CheckRetransConfirmedUplink>
 800d856:	4604      	mov	r4, r0
                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800d858:	4b15      	ldr	r3, [pc, #84]	@ (800d8b0 <LoRaMacHandleMcpsRequest+0x94>)
 800d85a:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d1f0      	bne.n	800d844 <LoRaMacHandleMcpsRequest+0x28>
                    if( stopRetransmission == false )
 800d862:	b910      	cbnz	r0, 800d86a <LoRaMacHandleMcpsRequest+0x4e>
                        AckTimeoutRetriesProcess( );
 800d864:	f7fe fd24 	bl	800c2b0 <AckTimeoutRetriesProcess>
 800d868:	e7ec      	b.n	800d844 <LoRaMacHandleMcpsRequest+0x28>
                        AckTimeoutRetriesFinalize( );
 800d86a:	f7ff fdb9 	bl	800d3e0 <AckTimeoutRetriesFinalize>
 800d86e:	e7e9      	b.n	800d844 <LoRaMacHandleMcpsRequest+0x28>
            TimerStop( &MacCtx.TxDelayedTimer );
 800d870:	4c10      	ldr	r4, [pc, #64]	@ (800d8b4 <LoRaMacHandleMcpsRequest+0x98>)
 800d872:	4620      	mov	r0, r4
 800d874:	f008 f9e0 	bl	8015c38 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800d878:	f854 3c28 	ldr.w	r3, [r4, #-40]
 800d87c:	f023 0320 	bic.w	r3, r3, #32
 800d880:	f844 3c28 	str.w	r3, [r4, #-40]
            StopRetransmission( );
 800d884:	f7fe fcbc 	bl	800c200 <StopRetransmission>
 800d888:	e7de      	b.n	800d848 <LoRaMacHandleMcpsRequest+0x2c>
                waitForRetransmission = true;
 800d88a:	2401      	movs	r4, #1
 800d88c:	e7db      	b.n	800d846 <LoRaMacHandleMcpsRequest+0x2a>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800d88e:	4b07      	ldr	r3, [pc, #28]	@ (800d8ac <LoRaMacHandleMcpsRequest+0x90>)
 800d890:	f893 2481 	ldrb.w	r2, [r3, #1153]	@ 0x481
 800d894:	f36f 1204 	bfc	r2, #4, #1
 800d898:	f883 2481 	strb.w	r2, [r3, #1153]	@ 0x481
            MacCtx.AckTimeoutRetry = false;
 800d89c:	2000      	movs	r0, #0
 800d89e:	f883 040f 	strb.w	r0, [r3, #1039]	@ 0x40f
            OnTxDelayedTimerEvent( NULL );
 800d8a2:	f7ff ff91 	bl	800d7c8 <OnTxDelayedTimerEvent>
}
 800d8a6:	e7cf      	b.n	800d848 <LoRaMacHandleMcpsRequest+0x2c>
 800d8a8:	4770      	bx	lr
 800d8aa:	bf00      	nop
 800d8ac:	20003560 	.word	0x20003560
 800d8b0:	20008000 	.word	0x20008000
 800d8b4:	200038c8 	.word	0x200038c8

0800d8b8 <LoRaMacHandleRequestEvents>:
{
 800d8b8:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 800d8ba:	4b22      	ldr	r3, [pc, #136]	@ (800d944 <LoRaMacHandleRequestEvents+0x8c>)
 800d8bc:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800d8c0:	bb7b      	cbnz	r3, 800d922 <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800d8c2:	4b20      	ldr	r3, [pc, #128]	@ (800d944 <LoRaMacHandleRequestEvents+0x8c>)
 800d8c4:	f893 4481 	ldrb.w	r4, [r3, #1153]	@ 0x481
 800d8c8:	f014 0501 	ands.w	r5, r4, #1
 800d8cc:	d005      	beq.n	800d8da <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800d8ce:	f893 2481 	ldrb.w	r2, [r3, #1153]	@ 0x481
 800d8d2:	f36f 0200 	bfc	r2, #0, #1
 800d8d6:	f883 2481 	strb.w	r2, [r3, #1153]	@ 0x481
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800d8da:	4b1a      	ldr	r3, [pc, #104]	@ (800d944 <LoRaMacHandleRequestEvents+0x8c>)
 800d8dc:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800d8e0:	f013 0f04 	tst.w	r3, #4
 800d8e4:	d006      	beq.n	800d8f4 <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800d8e6:	4b17      	ldr	r3, [pc, #92]	@ (800d944 <LoRaMacHandleRequestEvents+0x8c>)
 800d8e8:	f893 2481 	ldrb.w	r2, [r3, #1153]	@ 0x481
 800d8ec:	f36f 0282 	bfc	r2, #2, #1
 800d8f0:	f883 2481 	strb.w	r2, [r3, #1153]	@ 0x481
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800d8f4:	2001      	movs	r0, #1
 800d8f6:	f7fe fbaf 	bl	800c058 <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 800d8fa:	b135      	cbz	r5, 800d90a <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800d8fc:	4811      	ldr	r0, [pc, #68]	@ (800d944 <LoRaMacHandleRequestEvents+0x8c>)
 800d8fe:	f8d0 3344 	ldr.w	r3, [r0, #836]	@ 0x344
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	f200 4034 	addw	r0, r0, #1076	@ 0x434
 800d908:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800d90a:	f014 0f04 	tst.w	r4, #4
 800d90e:	d109      	bne.n	800d924 <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 800d910:	f001 fe9b 	bl	800f64a <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 800d914:	4b0b      	ldr	r3, [pc, #44]	@ (800d944 <LoRaMacHandleRequestEvents+0x8c>)
 800d916:	f893 2481 	ldrb.w	r2, [r3, #1153]	@ 0x481
 800d91a:	f36f 1204 	bfc	r2, #4, #1
 800d91e:	f883 2481 	strb.w	r2, [r3, #1153]	@ 0x481
}
 800d922:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800d924:	4808      	ldr	r0, [pc, #32]	@ (800d948 <LoRaMacHandleRequestEvents+0x90>)
 800d926:	f002 f909 	bl	800fb3c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800d92a:	f002 f93f 	bl	800fbac <LoRaMacConfirmQueueGetCnt>
 800d92e:	2800      	cmp	r0, #0
 800d930:	d0ee      	beq.n	800d910 <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800d932:	4a04      	ldr	r2, [pc, #16]	@ (800d944 <LoRaMacHandleRequestEvents+0x8c>)
 800d934:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800d938:	f043 0304 	orr.w	r3, r3, #4
 800d93c:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
 800d940:	e7e6      	b.n	800d910 <LoRaMacHandleRequestEvents+0x58>
 800d942:	bf00      	nop
 800d944:	20003560 	.word	0x20003560
 800d948:	200039a8 	.word	0x200039a8

0800d94c <OpenContinuousRxCWindow>:
{
 800d94c:	b530      	push	{r4, r5, lr}
 800d94e:	b083      	sub	sp, #12
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800d950:	4c13      	ldr	r4, [pc, #76]	@ (800d9a0 <OpenContinuousRxCWindow+0x54>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800d952:	4d14      	ldr	r5, [pc, #80]	@ (800d9a4 <OpenContinuousRxCWindow+0x58>)
 800d954:	9500      	str	r5, [sp, #0]
 800d956:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800d958:	f894 2050 	ldrb.w	r2, [r4, #80]	@ 0x50
 800d95c:	f994 1078 	ldrsb.w	r1, [r4, #120]	@ 0x78
 800d960:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800d964:	f002 fed3 	bl	801070e <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d968:	2302      	movs	r3, #2
 800d96a:	74eb      	strb	r3, [r5, #19]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800d96c:	2301      	movs	r3, #1
 800d96e:	74ab      	strb	r3, [r5, #18]
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800d970:	f105 023c 	add.w	r2, r5, #60	@ 0x3c
 800d974:	4629      	mov	r1, r5
 800d976:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800d97a:	f002 fedc 	bl	8010736 <RegionRxConfig>
 800d97e:	b168      	cbz	r0, 800d99c <OpenContinuousRxCWindow+0x50>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800d980:	f5a5 7478 	sub.w	r4, r5, #992	@ 0x3e0
 800d984:	f894 341c 	ldrb.w	r3, [r4, #1052]	@ 0x41c
 800d988:	f884 345e 	strb.w	r3, [r4, #1118]	@ 0x45e
        Radio.Rx( 0 ); // Continuous mode
 800d98c:	4b06      	ldr	r3, [pc, #24]	@ (800d9a8 <OpenContinuousRxCWindow+0x5c>)
 800d98e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d990:	2000      	movs	r0, #0
 800d992:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800d994:	f894 33f3 	ldrb.w	r3, [r4, #1011]	@ 0x3f3
 800d998:	f884 3480 	strb.w	r3, [r4, #1152]	@ 0x480
}
 800d99c:	b003      	add	sp, #12
 800d99e:	bd30      	pop	{r4, r5, pc}
 800d9a0:	20008000 	.word	0x20008000
 800d9a4:	20003940 	.word	0x20003940
 800d9a8:	080172ac 	.word	0x080172ac

0800d9ac <RxWindowSetup>:
{
 800d9ac:	b538      	push	{r3, r4, r5, lr}
 800d9ae:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 800d9b0:	f008 f942 	bl	8015c38 <UTIL_TIMER_Stop>
    Radio.Standby( );
 800d9b4:	4b0c      	ldr	r3, [pc, #48]	@ (800d9e8 <RxWindowSetup+0x3c>)
 800d9b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9b8:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800d9ba:	4a0c      	ldr	r2, [pc, #48]	@ (800d9ec <RxWindowSetup+0x40>)
 800d9bc:	4621      	mov	r1, r4
 800d9be:	4b0c      	ldr	r3, [pc, #48]	@ (800d9f0 <RxWindowSetup+0x44>)
 800d9c0:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800d9c4:	f002 feb7 	bl	8010736 <RegionRxConfig>
 800d9c8:	b160      	cbz	r0, 800d9e4 <RxWindowSetup+0x38>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800d9ca:	4d0a      	ldr	r5, [pc, #40]	@ (800d9f4 <RxWindowSetup+0x48>)
 800d9cc:	f895 341c 	ldrb.w	r3, [r5, #1052]	@ 0x41c
 800d9d0:	f885 345e 	strb.w	r3, [r5, #1118]	@ 0x45e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800d9d4:	4b04      	ldr	r3, [pc, #16]	@ (800d9e8 <RxWindowSetup+0x3c>)
 800d9d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9d8:	4a05      	ldr	r2, [pc, #20]	@ (800d9f0 <RxWindowSetup+0x44>)
 800d9da:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 800d9dc:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800d9de:	7ce3      	ldrb	r3, [r4, #19]
 800d9e0:	f885 3480 	strb.w	r3, [r5, #1152]	@ 0x480
}
 800d9e4:	bd38      	pop	{r3, r4, r5, pc}
 800d9e6:	bf00      	nop
 800d9e8:	080172ac 	.word	0x080172ac
 800d9ec:	2000397c 	.word	0x2000397c
 800d9f0:	20008000 	.word	0x20008000
 800d9f4:	20003560 	.word	0x20003560

0800d9f8 <OnRxWindow2TimerEvent>:
{
 800d9f8:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800d9fa:	4b11      	ldr	r3, [pc, #68]	@ (800da40 <OnRxWindow2TimerEvent+0x48>)
 800d9fc:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800da00:	b903      	cbnz	r3, 800da04 <OnRxWindow2TimerEvent+0xc>
}
 800da02:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800da04:	480e      	ldr	r0, [pc, #56]	@ (800da40 <OnRxWindow2TimerEvent+0x48>)
 800da06:	f890 3411 	ldrb.w	r3, [r0, #1041]	@ 0x411
 800da0a:	f880 33cc 	strb.w	r3, [r0, #972]	@ 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800da0e:	4b0d      	ldr	r3, [pc, #52]	@ (800da44 <OnRxWindow2TimerEvent+0x4c>)
 800da10:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800da12:	f8c0 23d0 	str.w	r2, [r0, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800da16:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800da1a:	f880 23dc 	strb.w	r2, [r0, #988]	@ 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800da1e:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800da22:	f880 33dd 	strb.w	r3, [r0, #989]	@ 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800da26:	2300      	movs	r3, #0
 800da28:	f880 33de 	strb.w	r3, [r0, #990]	@ 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800da2c:	2301      	movs	r3, #1
 800da2e:	f880 33df 	strb.w	r3, [r0, #991]	@ 0x3df
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800da32:	f500 7173 	add.w	r1, r0, #972	@ 0x3cc
 800da36:	f500 7066 	add.w	r0, r0, #920	@ 0x398
 800da3a:	f7ff ffb7 	bl	800d9ac <RxWindowSetup>
 800da3e:	e7e0      	b.n	800da02 <OnRxWindow2TimerEvent+0xa>
 800da40:	20003560 	.word	0x20003560
 800da44:	20008000 	.word	0x20008000

0800da48 <OnRxWindow1TimerEvent>:
{
 800da48:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800da4a:	480f      	ldr	r0, [pc, #60]	@ (800da88 <OnRxWindow1TimerEvent+0x40>)
 800da4c:	f890 3411 	ldrb.w	r3, [r0, #1041]	@ 0x411
 800da50:	f880 33b8 	strb.w	r3, [r0, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800da54:	4b0d      	ldr	r3, [pc, #52]	@ (800da8c <OnRxWindow1TimerEvent+0x44>)
 800da56:	f993 2069 	ldrsb.w	r2, [r3, #105]	@ 0x69
 800da5a:	f880 23bb 	strb.w	r2, [r0, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800da5e:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800da62:	f880 23c8 	strb.w	r2, [r0, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800da66:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800da6a:	f880 33c9 	strb.w	r3, [r0, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800da6e:	2300      	movs	r3, #0
 800da70:	f880 33ca 	strb.w	r3, [r0, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800da74:	f880 33cb 	strb.w	r3, [r0, #971]	@ 0x3cb
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800da78:	f500 716e 	add.w	r1, r0, #952	@ 0x3b8
 800da7c:	f500 7060 	add.w	r0, r0, #896	@ 0x380
 800da80:	f7ff ff94 	bl	800d9ac <RxWindowSetup>
}
 800da84:	bd08      	pop	{r3, pc}
 800da86:	bf00      	nop
 800da88:	20003560 	.word	0x20003560
 800da8c:	20008000 	.word	0x20008000

0800da90 <LoRaMacHandleNvm>:
{
 800da90:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 800da92:	4b30      	ldr	r3, [pc, #192]	@ (800db54 <LoRaMacHandleNvm+0xc4>)
 800da94:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800da98:	b103      	cbz	r3, 800da9c <LoRaMacHandleNvm+0xc>
}
 800da9a:	bd38      	pop	{r3, r4, r5, pc}
 800da9c:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800da9e:	2124      	movs	r1, #36	@ 0x24
 800daa0:	f005 ff92 	bl	80139c8 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 800daa4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800daa6:	4283      	cmp	r3, r0
 800daa8:	d052      	beq.n	800db50 <LoRaMacHandleNvm+0xc0>
        nvmData->Crypto.Crc32 = crc;
 800daaa:	6260      	str	r0, [r4, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800daac:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800daae:	211c      	movs	r1, #28
 800dab0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800dab4:	f005 ff88 	bl	80139c8 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 800dab8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800daba:	4283      	cmp	r3, r0
 800dabc:	d002      	beq.n	800dac4 <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 800dabe:	6460      	str	r0, [r4, #68]	@ 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800dac0:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800dac4:	21fc      	movs	r1, #252	@ 0xfc
 800dac6:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 800daca:	f005 ff7d 	bl	80139c8 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 800dace:	f8d4 3144 	ldr.w	r3, [r4, #324]	@ 0x144
 800dad2:	4283      	cmp	r3, r0
 800dad4:	d003      	beq.n	800dade <LoRaMacHandleNvm+0x4e>
        nvmData->MacGroup2.Crc32 = crc;
 800dad6:	f8c4 0144 	str.w	r0, [r4, #324]	@ 0x144
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800dada:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800dade:	21d4      	movs	r1, #212	@ 0xd4
 800dae0:	f504 70a4 	add.w	r0, r4, #328	@ 0x148
 800dae4:	f005 ff70 	bl	80139c8 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 800dae8:	f8d4 321c 	ldr.w	r3, [r4, #540]	@ 0x21c
 800daec:	4283      	cmp	r3, r0
 800daee:	d003      	beq.n	800daf8 <LoRaMacHandleNvm+0x68>
        nvmData->SecureElement.Crc32 = crc;
 800daf0:	f8c4 021c 	str.w	r0, [r4, #540]	@ 0x21c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800daf4:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800daf8:	21a0      	movs	r1, #160	@ 0xa0
 800dafa:	f504 7008 	add.w	r0, r4, #544	@ 0x220
 800dafe:	f005 ff63 	bl	80139c8 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 800db02:	f8d4 32c0 	ldr.w	r3, [r4, #704]	@ 0x2c0
 800db06:	4283      	cmp	r3, r0
 800db08:	d003      	beq.n	800db12 <LoRaMacHandleNvm+0x82>
        nvmData->RegionGroup1.Crc32 = crc;
 800db0a:	f8c4 02c0 	str.w	r0, [r4, #704]	@ 0x2c0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800db0e:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800db12:	f44f 6193 	mov.w	r1, #1176	@ 0x498
 800db16:	f504 7031 	add.w	r0, r4, #708	@ 0x2c4
 800db1a:	f005 ff55 	bl	80139c8 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 800db1e:	f8d4 375c 	ldr.w	r3, [r4, #1884]	@ 0x75c
 800db22:	4283      	cmp	r3, r0
 800db24:	d003      	beq.n	800db2e <LoRaMacHandleNvm+0x9e>
        nvmData->RegionGroup2.Crc32 = crc;
 800db26:	f8c4 075c 	str.w	r0, [r4, #1884]	@ 0x75c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800db2a:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800db2e:	2114      	movs	r1, #20
 800db30:	f504 60ec 	add.w	r0, r4, #1888	@ 0x760
 800db34:	f005 ff48 	bl	80139c8 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 800db38:	f8d4 3774 	ldr.w	r3, [r4, #1908]	@ 0x774
 800db3c:	4283      	cmp	r3, r0
 800db3e:	d003      	beq.n	800db48 <LoRaMacHandleNvm+0xb8>
        nvmData->ClassB.Crc32 = crc;
 800db40:	f8c4 0774 	str.w	r0, [r4, #1908]	@ 0x774
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800db44:	f045 0540 	orr.w	r5, r5, #64	@ 0x40
    CallNvmDataChangeCallback( notifyFlags );
 800db48:	4628      	mov	r0, r5
 800db4a:	f7fe fb99 	bl	800c280 <CallNvmDataChangeCallback>
 800db4e:	e7a4      	b.n	800da9a <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800db50:	2500      	movs	r5, #0
 800db52:	e7ac      	b.n	800daae <LoRaMacHandleNvm+0x1e>
 800db54:	20003560 	.word	0x20003560

0800db58 <RestoreNvmData>:
{
 800db58:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800db5a:	4b3e      	ldr	r3, [pc, #248]	@ (800dc54 <RestoreNvmData+0xfc>)
 800db5c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800db60:	2b01      	cmp	r3, #1
 800db62:	d001      	beq.n	800db68 <RestoreNvmData+0x10>
        return LORAMAC_STATUS_BUSY;
 800db64:	2001      	movs	r0, #1
}
 800db66:	bd38      	pop	{r3, r4, r5, pc}
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 800db68:	4c3b      	ldr	r4, [pc, #236]	@ (800dc58 <RestoreNvmData+0x100>)
 800db6a:	2124      	movs	r1, #36	@ 0x24
 800db6c:	4620      	mov	r0, r4
 800db6e:	f005 ff2b 	bl	80139c8 <Crc32>
    if( crc != NvmBackup.Crypto.Crc32 )
 800db72:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800db74:	4283      	cmp	r3, r0
 800db76:	d001      	beq.n	800db7c <RestoreNvmData+0x24>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800db78:	2017      	movs	r0, #23
 800db7a:	e7f4      	b.n	800db66 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 800db7c:	3428      	adds	r4, #40	@ 0x28
 800db7e:	211c      	movs	r1, #28
 800db80:	4620      	mov	r0, r4
 800db82:	f005 ff21 	bl	80139c8 <Crc32>
    if( crc != NvmBackup.MacGroup1.Crc32 )
 800db86:	69e3      	ldr	r3, [r4, #28]
 800db88:	4283      	cmp	r3, r0
 800db8a:	d001      	beq.n	800db90 <RestoreNvmData+0x38>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800db8c:	2017      	movs	r0, #23
 800db8e:	e7ea      	b.n	800db66 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 800db90:	3420      	adds	r4, #32
 800db92:	21fc      	movs	r1, #252	@ 0xfc
 800db94:	4620      	mov	r0, r4
 800db96:	f005 ff17 	bl	80139c8 <Crc32>
    if( crc != NvmBackup.MacGroup2.Crc32 )
 800db9a:	f8d4 30fc 	ldr.w	r3, [r4, #252]	@ 0xfc
 800db9e:	4283      	cmp	r3, r0
 800dba0:	d001      	beq.n	800dba6 <RestoreNvmData+0x4e>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800dba2:	2017      	movs	r0, #23
 800dba4:	e7df      	b.n	800db66 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 800dba6:	f504 7480 	add.w	r4, r4, #256	@ 0x100
 800dbaa:	21d4      	movs	r1, #212	@ 0xd4
 800dbac:	4620      	mov	r0, r4
 800dbae:	f005 ff0b 	bl	80139c8 <Crc32>
    if( crc != NvmBackup.SecureElement.Crc32 )
 800dbb2:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 800dbb6:	4283      	cmp	r3, r0
 800dbb8:	d001      	beq.n	800dbbe <RestoreNvmData+0x66>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800dbba:	2017      	movs	r0, #23
 800dbbc:	e7d3      	b.n	800db66 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 800dbbe:	34d8      	adds	r4, #216	@ 0xd8
 800dbc0:	21a0      	movs	r1, #160	@ 0xa0
 800dbc2:	4620      	mov	r0, r4
 800dbc4:	f005 ff00 	bl	80139c8 <Crc32>
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 800dbc8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 800dbcc:	4283      	cmp	r3, r0
 800dbce:	d001      	beq.n	800dbd4 <RestoreNvmData+0x7c>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800dbd0:	2017      	movs	r0, #23
 800dbd2:	e7c8      	b.n	800db66 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 800dbd4:	34a4      	adds	r4, #164	@ 0xa4
 800dbd6:	f44f 6193 	mov.w	r1, #1176	@ 0x498
 800dbda:	4620      	mov	r0, r4
 800dbdc:	f005 fef4 	bl	80139c8 <Crc32>
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 800dbe0:	f8d4 3498 	ldr.w	r3, [r4, #1176]	@ 0x498
 800dbe4:	4283      	cmp	r3, r0
 800dbe6:	d001      	beq.n	800dbec <RestoreNvmData+0x94>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800dbe8:	2017      	movs	r0, #23
 800dbea:	e7bc      	b.n	800db66 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 800dbec:	f204 449c 	addw	r4, r4, #1180	@ 0x49c
 800dbf0:	2114      	movs	r1, #20
 800dbf2:	4620      	mov	r0, r4
 800dbf4:	f005 fee8 	bl	80139c8 <Crc32>
    if( crc != NvmBackup.ClassB.Crc32 )
 800dbf8:	6963      	ldr	r3, [r4, #20]
 800dbfa:	4283      	cmp	r3, r0
 800dbfc:	d001      	beq.n	800dc02 <RestoreNvmData+0xaa>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800dbfe:	2017      	movs	r0, #23
 800dc00:	e7b1      	b.n	800db66 <RestoreNvmData+0xe>
    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 800dc02:	f5a4 65ec 	sub.w	r5, r4, #1888	@ 0x760
 800dc06:	4c15      	ldr	r4, [pc, #84]	@ (800dc5c <RestoreNvmData+0x104>)
 800dc08:	f44f 62ef 	mov.w	r2, #1912	@ 0x778
 800dc0c:	4629      	mov	r1, r5
 800dc0e:	4620      	mov	r0, r4
 800dc10:	f005 feb9 	bl	8013986 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 800dc14:	f44f 62ef 	mov.w	r2, #1912	@ 0x778
 800dc18:	2100      	movs	r1, #0
 800dc1a:	4628      	mov	r0, r5
 800dc1c:	f005 fecb 	bl	80139b6 <memset1>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800dc20:	4b0c      	ldr	r3, [pc, #48]	@ (800dc54 <RestoreNvmData+0xfc>)
 800dc22:	f893 2411 	ldrb.w	r2, [r3, #1041]	@ 0x411
 800dc26:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800dc2a:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 800dc2c:	f8c3 23e4 	str.w	r2, [r3, #996]	@ 0x3e4
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800dc30:	f894 207d 	ldrb.w	r2, [r4, #125]	@ 0x7d
 800dc34:	f883 23f0 	strb.w	r2, [r3, #1008]	@ 0x3f0
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800dc38:	2201      	movs	r2, #1
 800dc3a:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800dc3e:	2202      	movs	r2, #2
 800dc40:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800dc44:	4b06      	ldr	r3, [pc, #24]	@ (800dc60 <RestoreNvmData+0x108>)
 800dc46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc48:	f894 0119 	ldrb.w	r0, [r4, #281]	@ 0x119
 800dc4c:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 800dc4e:	2000      	movs	r0, #0
 800dc50:	e789      	b.n	800db66 <RestoreNvmData+0xe>
 800dc52:	bf00      	nop
 800dc54:	20003560 	.word	0x20003560
 800dc58:	20008778 	.word	0x20008778
 800dc5c:	20008000 	.word	0x20008000
 800dc60:	080172ac 	.word	0x080172ac

0800dc64 <OnRadioRxTimeout>:
{
 800dc64:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800dc66:	4a07      	ldr	r2, [pc, #28]	@ (800dc84 <OnRadioRxTimeout+0x20>)
 800dc68:	7813      	ldrb	r3, [r2, #0]
 800dc6a:	f043 0301 	orr.w	r3, r3, #1
 800dc6e:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800dc70:	f7fe faee 	bl	800c250 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800dc74:	4b04      	ldr	r3, [pc, #16]	@ (800dc88 <OnRadioRxTimeout+0x24>)
 800dc76:	2201      	movs	r2, #1
 800dc78:	2100      	movs	r1, #0
 800dc7a:	2002      	movs	r0, #2
 800dc7c:	f007 fd5e 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
}
 800dc80:	bd08      	pop	{r3, pc}
 800dc82:	bf00      	nop
 800dc84:	2000355c 	.word	0x2000355c
 800dc88:	08016b10 	.word	0x08016b10

0800dc8c <OnRadioTxTimeout>:
{
 800dc8c:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800dc8e:	4a07      	ldr	r2, [pc, #28]	@ (800dcac <OnRadioTxTimeout+0x20>)
 800dc90:	7813      	ldrb	r3, [r2, #0]
 800dc92:	f043 0304 	orr.w	r3, r3, #4
 800dc96:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800dc98:	f7fe fada 	bl	800c250 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800dc9c:	4b04      	ldr	r3, [pc, #16]	@ (800dcb0 <OnRadioTxTimeout+0x24>)
 800dc9e:	2201      	movs	r2, #1
 800dca0:	2100      	movs	r1, #0
 800dca2:	2002      	movs	r0, #2
 800dca4:	f007 fd4a 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
}
 800dca8:	bd08      	pop	{r3, pc}
 800dcaa:	bf00      	nop
 800dcac:	2000355c 	.word	0x2000355c
 800dcb0:	08016b20 	.word	0x08016b20

0800dcb4 <OnRadioRxDone>:
{
 800dcb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcb8:	4680      	mov	r8, r0
 800dcba:	460f      	mov	r7, r1
 800dcbc:	4616      	mov	r6, r2
 800dcbe:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800dcc0:	f007 ff7a 	bl	8015bb8 <UTIL_TIMER_GetCurrentTime>
 800dcc4:	4c0a      	ldr	r4, [pc, #40]	@ (800dcf0 <OnRadioRxDone+0x3c>)
 800dcc6:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 800dcc8:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 800dccc:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 800dcce:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 800dcd0:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 800dcd2:	4a08      	ldr	r2, [pc, #32]	@ (800dcf4 <OnRadioRxDone+0x40>)
 800dcd4:	7813      	ldrb	r3, [r2, #0]
 800dcd6:	f043 0308 	orr.w	r3, r3, #8
 800dcda:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800dcdc:	f7fe fab8 	bl	800c250 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800dce0:	4b05      	ldr	r3, [pc, #20]	@ (800dcf8 <OnRadioRxDone+0x44>)
 800dce2:	2201      	movs	r2, #1
 800dce4:	2100      	movs	r1, #0
 800dce6:	2002      	movs	r0, #2
 800dce8:	f007 fd28 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
}
 800dcec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcf0:	20003548 	.word	0x20003548
 800dcf4:	2000355c 	.word	0x2000355c
 800dcf8:	08016b30 	.word	0x08016b30

0800dcfc <OnRadioTxDone>:
{
 800dcfc:	b510      	push	{r4, lr}
 800dcfe:	b082      	sub	sp, #8
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800dd00:	f007 ff5a 	bl	8015bb8 <UTIL_TIMER_GetCurrentTime>
 800dd04:	4b0c      	ldr	r3, [pc, #48]	@ (800dd38 <OnRadioTxDone+0x3c>)
 800dd06:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800dd08:	466c      	mov	r4, sp
 800dd0a:	4620      	mov	r0, r4
 800dd0c:	f007 fea0 	bl	8015a50 <SysTimeGet>
 800dd10:	4b0a      	ldr	r3, [pc, #40]	@ (800dd3c <OnRadioTxDone+0x40>)
 800dd12:	e894 0003 	ldmia.w	r4, {r0, r1}
 800dd16:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800dd1a:	4a09      	ldr	r2, [pc, #36]	@ (800dd40 <OnRadioTxDone+0x44>)
 800dd1c:	7813      	ldrb	r3, [r2, #0]
 800dd1e:	f043 0310 	orr.w	r3, r3, #16
 800dd22:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800dd24:	f7fe fa94 	bl	800c250 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800dd28:	4b06      	ldr	r3, [pc, #24]	@ (800dd44 <OnRadioTxDone+0x48>)
 800dd2a:	2201      	movs	r2, #1
 800dd2c:	2100      	movs	r1, #0
 800dd2e:	2002      	movs	r0, #2
 800dd30:	f007 fd04 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
}
 800dd34:	b002      	add	sp, #8
 800dd36:	bd10      	pop	{r4, pc}
 800dd38:	20003558 	.word	0x20003558
 800dd3c:	20003898 	.word	0x20003898
 800dd40:	2000355c 	.word	0x2000355c
 800dd44:	08016b40 	.word	0x08016b40

0800dd48 <ResetMacParameters>:
{
 800dd48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd4a:	b08f      	sub	sp, #60	@ 0x3c
    if( isRejoin == false )
 800dd4c:	b918      	cbnz	r0, 800dd56 <ResetMacParameters+0xe>
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800dd4e:	4b58      	ldr	r3, [pc, #352]	@ (800deb0 <ResetMacParameters+0x168>)
 800dd50:	2200      	movs	r2, #0
 800dd52:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
    Nvm.MacGroup1.AdrAckCounter = 0;
 800dd56:	4c56      	ldr	r4, [pc, #344]	@ (800deb0 <ResetMacParameters+0x168>)
 800dd58:	2500      	movs	r5, #0
 800dd5a:	62a5      	str	r5, [r4, #40]	@ 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 800dd5c:	4e55      	ldr	r6, [pc, #340]	@ (800deb4 <ResetMacParameters+0x16c>)
 800dd5e:	f886 540c 	strb.w	r5, [r6, #1036]	@ 0x40c
    MacCtx.AckTimeoutRetries = 1;
 800dd62:	2701      	movs	r7, #1
 800dd64:	f886 740d 	strb.w	r7, [r6, #1037]	@ 0x40d
    MacCtx.AckTimeoutRetriesCounter = 1;
 800dd68:	f886 740e 	strb.w	r7, [r6, #1038]	@ 0x40e
    MacCtx.AckTimeoutRetry = false;
 800dd6c:	f886 540f 	strb.w	r5, [r6, #1039]	@ 0x40f
    Nvm.MacGroup2.MaxDCycle = 0;
 800dd70:	f884 511b 	strb.w	r5, [r4, #283]	@ 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800dd74:	f8a4 711e 	strh.w	r7, [r4, #286]	@ 0x11e
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800dd78:	f994 30dc 	ldrsb.w	r3, [r4, #220]	@ 0xdc
 800dd7c:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800dd80:	f994 30dd 	ldrsb.w	r3, [r4, #221]	@ 0xdd
 800dd84:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800dd88:	f894 30b1 	ldrb.w	r3, [r4, #177]	@ 0xb1
 800dd8c:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800dd90:	f104 036c 	add.w	r3, r4, #108	@ 0x6c
 800dd94:	f104 02b4 	add.w	r2, r4, #180	@ 0xb4
 800dd98:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dd9c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800dda0:	f104 0374 	add.w	r3, r4, #116	@ 0x74
 800dda4:	f104 02bc 	add.w	r2, r4, #188	@ 0xbc
 800dda8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ddac:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800ddb0:	f894 30c4 	ldrb.w	r3, [r4, #196]	@ 0xc4
 800ddb4:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800ddb8:	f894 30c5 	ldrb.w	r3, [r4, #197]	@ 0xc5
 800ddbc:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800ddc0:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
 800ddc4:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800ddc8:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
 800ddcc:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800ddd0:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	@ 0xd0
 800ddd4:	f8a4 3088 	strh.w	r3, [r4, #136]	@ 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800ddd8:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	@ 0xd2
 800dddc:	f8a4 308a 	strh.w	r3, [r4, #138]	@ 0x8a
    MacCtx.NodeAckRequested = false;
 800dde0:	f886 5410 	strb.w	r5, [r6, #1040]	@ 0x410
    Nvm.MacGroup1.SrvAckRequested = false;
 800dde4:	f884 503a 	strb.w	r5, [r4, #58]	@ 0x3a
    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 800dde8:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 800ddec:	f884 5134 	strb.w	r5, [r4, #308]	@ 0x134
    Nvm.MacGroup2.ForceRejoinType = 0;
 800ddf0:	f884 5135 	strb.w	r5, [r4, #309]	@ 0x135
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 800ddf4:	f8c4 5138 	str.w	r5, [r4, #312]	@ 0x138
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 800ddf8:	f8c4 513c 	str.w	r5, [r4, #316]	@ 0x13c
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 800ddfc:	f884 5141 	strb.w	r5, [r4, #321]	@ 0x141
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 800de00:	f884 5142 	strb.w	r5, [r4, #322]	@ 0x142
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 800de04:	f884 5143 	strb.w	r5, [r4, #323]	@ 0x143
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800de08:	f88d 700c 	strb.w	r7, [sp, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800de0c:	f504 7308 	add.w	r3, r4, #544	@ 0x220
 800de10:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800de12:	f504 7331 	add.w	r3, r4, #708	@ 0x2c4
 800de16:	9302      	str	r3, [sp, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800de18:	a901      	add	r1, sp, #4
 800de1a:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800de1e:	f002 fc3b 	bl	8010698 <RegionInitDefaults>
    MacCtx.Channel = 0;
 800de22:	f886 5411 	strb.w	r5, [r6, #1041]	@ 0x411
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800de26:	f886 53cc 	strb.w	r5, [r6, #972]	@ 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800de2a:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800de2c:	f8c6 33d0 	str.w	r3, [r6, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800de30:	f894 307d 	ldrb.w	r3, [r4, #125]	@ 0x7d
 800de34:	f886 33dc 	strb.w	r3, [r6, #988]	@ 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800de38:	f894 308c 	ldrb.w	r3, [r4, #140]	@ 0x8c
 800de3c:	f886 33dd 	strb.w	r3, [r6, #989]	@ 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800de40:	f886 53de 	strb.w	r5, [r6, #990]	@ 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800de44:	f886 73df 	strb.w	r7, [r6, #991]	@ 0x3df
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800de48:	f506 7478 	add.w	r4, r6, #992	@ 0x3e0
 800de4c:	f506 7c73 	add.w	ip, r6, #972	@ 0x3cc
 800de50:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800de54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800de56:	f8dc 3000 	ldr.w	r3, [ip]
 800de5a:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800de5c:	f886 73f2 	strb.w	r7, [r6, #1010]	@ 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800de60:	2302      	movs	r3, #2
 800de62:	f886 33f3 	strb.w	r3, [r6, #1011]	@ 0x3f3
    classBCallbacks.GetTemperatureLevel = NULL;
 800de66:	950c      	str	r5, [sp, #48]	@ 0x30
    classBCallbacks.MacProcessNotify = NULL;
 800de68:	950d      	str	r5, [sp, #52]	@ 0x34
    if( MacCtx.MacCallbacks != NULL )
 800de6a:	f8d6 3348 	ldr.w	r3, [r6, #840]	@ 0x348
 800de6e:	b11b      	cbz	r3, 800de78 <ResetMacParameters+0x130>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800de70:	685a      	ldr	r2, [r3, #4]
 800de72:	920c      	str	r2, [sp, #48]	@ 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800de74:	695b      	ldr	r3, [r3, #20]
 800de76:	930d      	str	r3, [sp, #52]	@ 0x34
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800de78:	4b0f      	ldr	r3, [pc, #60]	@ (800deb8 <ResetMacParameters+0x170>)
 800de7a:	9304      	str	r3, [sp, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800de7c:	f1a3 0244 	sub.w	r2, r3, #68	@ 0x44
 800de80:	9205      	str	r2, [sp, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800de82:	f1a3 0214 	sub.w	r2, r3, #20
 800de86:	9206      	str	r2, [sp, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800de88:	3325      	adds	r3, #37	@ 0x25
 800de8a:	9307      	str	r3, [sp, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800de8c:	4a0b      	ldr	r2, [pc, #44]	@ (800debc <ResetMacParameters+0x174>)
 800de8e:	9208      	str	r2, [sp, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800de90:	f1a2 039c 	sub.w	r3, r2, #156	@ 0x9c
 800de94:	9309      	str	r3, [sp, #36]	@ 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800de96:	f1a2 0398 	sub.w	r3, r2, #152	@ 0x98
 800de9a:	930a      	str	r3, [sp, #40]	@ 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800de9c:	1d13      	adds	r3, r2, #4
 800de9e:	930b      	str	r3, [sp, #44]	@ 0x2c
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800dea0:	f202 627c 	addw	r2, r2, #1660	@ 0x67c
 800dea4:	a90c      	add	r1, sp, #48	@ 0x30
 800dea6:	a804      	add	r0, sp, #16
 800dea8:	f001 fbba 	bl	800f620 <LoRaMacClassBInit>
}
 800deac:	b00f      	add	sp, #60	@ 0x3c
 800deae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800deb0:	20008000 	.word	0x20008000
 800deb4:	20003560 	.word	0x20003560
 800deb8:	200039bc 	.word	0x200039bc
 800debc:	200080e4 	.word	0x200080e4

0800dec0 <SwitchClass>:
{
 800dec0:	b570      	push	{r4, r5, r6, lr}
 800dec2:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 800dec4:	4b44      	ldr	r3, [pc, #272]	@ (800dfd8 <SwitchClass+0x118>)
 800dec6:	f893 5118 	ldrb.w	r5, [r3, #280]	@ 0x118
 800deca:	2d01      	cmp	r5, #1
 800decc:	d06d      	beq.n	800dfaa <SwitchClass+0xea>
 800dece:	2d02      	cmp	r5, #2
 800ded0:	d073      	beq.n	800dfba <SwitchClass+0xfa>
 800ded2:	b10d      	cbz	r5, 800ded8 <SwitchClass+0x18>
 800ded4:	2003      	movs	r0, #3
}
 800ded6:	bd70      	pop	{r4, r5, r6, pc}
            if( deviceClass == CLASS_A )
 800ded8:	bb50      	cbnz	r0, 800df30 <SwitchClass+0x70>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800deda:	f103 0274 	add.w	r2, r3, #116	@ 0x74
 800dede:	336c      	adds	r3, #108	@ 0x6c
 800dee0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dee4:	e882 0003 	stmia.w	r2, {r0, r1}
                status = LORAMAC_STATUS_OK;
 800dee8:	4620      	mov	r0, r4
            if( deviceClass == CLASS_B )
 800deea:	2c01      	cmp	r4, #1
 800deec:	d022      	beq.n	800df34 <SwitchClass+0x74>
            if( deviceClass == CLASS_C )
 800deee:	2c02      	cmp	r4, #2
 800def0:	d1f1      	bne.n	800ded6 <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800def2:	4b39      	ldr	r3, [pc, #228]	@ (800dfd8 <SwitchClass+0x118>)
 800def4:	f883 4118 	strb.w	r4, [r3, #280]	@ 0x118
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800def8:	4e38      	ldr	r6, [pc, #224]	@ (800dfdc <SwitchClass+0x11c>)
 800defa:	f506 7478 	add.w	r4, r6, #992	@ 0x3e0
 800defe:	f506 7c73 	add.w	ip, r6, #972	@ 0x3cc
 800df02:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800df06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800df08:	f8dc 3000 	ldr.w	r3, [ip]
 800df0c:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800df0e:	2302      	movs	r3, #2
 800df10:	f886 33f3 	strb.w	r3, [r6, #1011]	@ 0x3f3
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800df14:	2300      	movs	r3, #0
 800df16:	2b00      	cmp	r3, #0
 800df18:	dd15      	ble.n	800df46 <SwitchClass+0x86>
                MacCtx.NodeAckRequested = false;
 800df1a:	4b30      	ldr	r3, [pc, #192]	@ (800dfdc <SwitchClass+0x11c>)
 800df1c:	2200      	movs	r2, #0
 800df1e:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
                Radio.Sleep( );
 800df22:	4b2f      	ldr	r3, [pc, #188]	@ (800dfe0 <SwitchClass+0x120>)
 800df24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df26:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 800df28:	f7ff fd10 	bl	800d94c <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 800df2c:	4628      	mov	r0, r5
 800df2e:	e7d2      	b.n	800ded6 <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800df30:	2003      	movs	r0, #3
 800df32:	e7da      	b.n	800deea <SwitchClass+0x2a>
                status = LoRaMacClassBSwitchClass( deviceClass );
 800df34:	4620      	mov	r0, r4
 800df36:	f001 fb89 	bl	800f64c <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 800df3a:	2800      	cmp	r0, #0
 800df3c:	d1d7      	bne.n	800deee <SwitchClass+0x2e>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800df3e:	4b26      	ldr	r3, [pc, #152]	@ (800dfd8 <SwitchClass+0x118>)
 800df40:	f883 4118 	strb.w	r4, [r3, #280]	@ 0x118
 800df44:	e7d3      	b.n	800deee <SwitchClass+0x2e>
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800df46:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800df4a:	4a23      	ldr	r2, [pc, #140]	@ (800dfd8 <SwitchClass+0x118>)
 800df4c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800df50:	f892 20e9 	ldrb.w	r2, [r2, #233]	@ 0xe9
 800df54:	b132      	cbz	r2, 800df64 <SwitchClass+0xa4>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 800df56:	4a20      	ldr	r2, [pc, #128]	@ (800dfd8 <SwitchClass+0x118>)
 800df58:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800df5c:	f892 2100 	ldrb.w	r2, [r2, #256]	@ 0x100
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800df60:	2a02      	cmp	r2, #2
 800df62:	d002      	beq.n	800df6a <SwitchClass+0xaa>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800df64:	3301      	adds	r3, #1
 800df66:	b25b      	sxtb	r3, r3
 800df68:	e7d5      	b.n	800df16 <SwitchClass+0x56>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800df6a:	4a1b      	ldr	r2, [pc, #108]	@ (800dfd8 <SwitchClass+0x118>)
 800df6c:	eb02 1301 	add.w	r3, r2, r1, lsl #4
 800df70:	f8d3 1104 	ldr.w	r1, [r3, #260]	@ 0x104
 800df74:	6751      	str	r1, [r2, #116]	@ 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800df76:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 800df7a:	f882 3078 	strb.w	r3, [r2, #120]	@ 0x78
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800df7e:	4b17      	ldr	r3, [pc, #92]	@ (800dfdc <SwitchClass+0x11c>)
 800df80:	f893 0411 	ldrb.w	r0, [r3, #1041]	@ 0x411
 800df84:	f883 03e0 	strb.w	r0, [r3, #992]	@ 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800df88:	f8c3 13e4 	str.w	r1, [r3, #996]	@ 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800df8c:	f892 107d 	ldrb.w	r1, [r2, #125]	@ 0x7d
 800df90:	f883 13f0 	strb.w	r1, [r3, #1008]	@ 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800df94:	f892 208c 	ldrb.w	r2, [r2, #140]	@ 0x8c
 800df98:	f883 23f1 	strb.w	r2, [r3, #1009]	@ 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800df9c:	2203      	movs	r2, #3
 800df9e:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800dfa2:	2201      	movs	r2, #1
 800dfa4:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
                        break;
 800dfa8:	e7b7      	b.n	800df1a <SwitchClass+0x5a>
            status = LoRaMacClassBSwitchClass( deviceClass );
 800dfaa:	f001 fb4f 	bl	800f64c <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 800dfae:	2800      	cmp	r0, #0
 800dfb0:	d191      	bne.n	800ded6 <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800dfb2:	4b09      	ldr	r3, [pc, #36]	@ (800dfd8 <SwitchClass+0x118>)
 800dfb4:	f883 4118 	strb.w	r4, [r3, #280]	@ 0x118
 800dfb8:	e78d      	b.n	800ded6 <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 800dfba:	b958      	cbnz	r0, 800dfd4 <SwitchClass+0x114>
                MacCtx.RxSlot = RX_SLOT_NONE;
 800dfbc:	4b07      	ldr	r3, [pc, #28]	@ (800dfdc <SwitchClass+0x11c>)
 800dfbe:	2206      	movs	r2, #6
 800dfc0:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800dfc4:	4b04      	ldr	r3, [pc, #16]	@ (800dfd8 <SwitchClass+0x118>)
 800dfc6:	f883 0118 	strb.w	r0, [r3, #280]	@ 0x118
                Radio.Sleep( );
 800dfca:	4b05      	ldr	r3, [pc, #20]	@ (800dfe0 <SwitchClass+0x120>)
 800dfcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfce:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 800dfd0:	4620      	mov	r0, r4
 800dfd2:	e780      	b.n	800ded6 <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800dfd4:	2003      	movs	r0, #3
 800dfd6:	e77e      	b.n	800ded6 <SwitchClass+0x16>
 800dfd8:	20008000 	.word	0x20008000
 800dfdc:	20003560 	.word	0x20003560
 800dfe0:	080172ac 	.word	0x080172ac

0800dfe4 <SendReJoinReq>:
{
 800dfe4:	b538      	push	{r3, r4, r5, lr}
    switch( joinReqType )
 800dfe6:	28ff      	cmp	r0, #255	@ 0xff
 800dfe8:	d003      	beq.n	800dff2 <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 800dfea:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 800dfec:	f7ff fb68 	bl	800d6c0 <ScheduleTx>
}
 800dff0:	bd38      	pop	{r3, r4, r5, pc}
            SwitchClass( CLASS_A );
 800dff2:	2000      	movs	r0, #0
 800dff4:	f7ff ff64 	bl	800dec0 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800dff8:	4d0a      	ldr	r5, [pc, #40]	@ (800e024 <SendReJoinReq+0x40>)
 800dffa:	2400      	movs	r4, #0
 800dffc:	f885 4104 	strb.w	r4, [r5, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800e000:	1cab      	adds	r3, r5, #2
 800e002:	f8c5 3108 	str.w	r3, [r5, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800e006:	23ff      	movs	r3, #255	@ 0xff
 800e008:	f885 310c 	strb.w	r3, [r5, #268]	@ 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800e00c:	f885 410d 	strb.w	r4, [r5, #269]	@ 0x10d
            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 800e010:	f505 7087 	add.w	r0, r5, #270	@ 0x10e
 800e014:	f005 fb9a 	bl	801374c <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 800e018:	f505 708b 	add.w	r0, r5, #278	@ 0x116
 800e01c:	f005 fb78 	bl	8013710 <SecureElementGetDevEui>
            allowDelayedTx = false;
 800e020:	4620      	mov	r0, r4
            break;
 800e022:	e7e3      	b.n	800dfec <SendReJoinReq+0x8>
 800e024:	20003560 	.word	0x20003560

0800e028 <SetTxContinuousWave>:
{
 800e028:	b510      	push	{r4, lr}
 800e02a:	b084      	sub	sp, #16
    continuousWave.Channel = MacCtx.Channel;
 800e02c:	4c11      	ldr	r4, [pc, #68]	@ (800e074 <SetTxContinuousWave+0x4c>)
 800e02e:	f894 3411 	ldrb.w	r3, [r4, #1041]	@ 0x411
 800e032:	f88d 3000 	strb.w	r3, [sp]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e036:	4b10      	ldr	r3, [pc, #64]	@ (800e078 <SetTxContinuousWave+0x50>)
 800e038:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 800e03c:	f88d 2001 	strb.w	r2, [sp, #1]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800e040:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 800e044:	f88d 2002 	strb.w	r2, [sp, #2]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800e048:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800e04c:	9201      	str	r2, [sp, #4]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800e04e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800e052:	9202      	str	r2, [sp, #8]
    continuousWave.Timeout = timeout;
 800e054:	f8ad 000c 	strh.w	r0, [sp, #12]
    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 800e058:	4669      	mov	r1, sp
 800e05a:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800e05e:	f002 fc0a 	bl	8010876 <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800e062:	f8d4 3340 	ldr.w	r3, [r4, #832]	@ 0x340
 800e066:	f043 0302 	orr.w	r3, r3, #2
 800e06a:	f8c4 3340 	str.w	r3, [r4, #832]	@ 0x340
}
 800e06e:	2000      	movs	r0, #0
 800e070:	b004      	add	sp, #16
 800e072:	bd10      	pop	{r4, pc}
 800e074:	20003560 	.word	0x20003560
 800e078:	20008000 	.word	0x20008000

0800e07c <PrepareFrame>:
{
 800e07c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e080:	b083      	sub	sp, #12
 800e082:	4605      	mov	r5, r0
 800e084:	460e      	mov	r6, r1
 800e086:	4617      	mov	r7, r2
 800e088:	f8bd 8028 	ldrh.w	r8, [sp, #40]	@ 0x28
    MacCtx.PktBufferLen = 0;
 800e08c:	495a      	ldr	r1, [pc, #360]	@ (800e1f8 <PrepareFrame+0x17c>)
 800e08e:	2200      	movs	r2, #0
 800e090:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 800e092:	f881 2410 	strb.w	r2, [r1, #1040]	@ 0x410
    uint32_t fCntUp = 0;
 800e096:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 800e098:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 800e09a:	4699      	mov	r9, r3
 800e09c:	b1cb      	cbz	r3, 800e0d2 <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800e09e:	4c57      	ldr	r4, [pc, #348]	@ (800e1fc <PrepareFrame+0x180>)
 800e0a0:	4642      	mov	r2, r8
 800e0a2:	4649      	mov	r1, r9
 800e0a4:	4620      	mov	r0, r4
 800e0a6:	f005 fc6e 	bl	8013986 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800e0aa:	fa5f f088 	uxtb.w	r0, r8
 800e0ae:	f884 00ff 	strb.w	r0, [r4, #255]	@ 0xff
 800e0b2:	f5a4 749c 	sub.w	r4, r4, #312	@ 0x138
    MacCtx.PktBuffer[0] = macHdr->Value;
 800e0b6:	782b      	ldrb	r3, [r5, #0]
 800e0b8:	70a3      	strb	r3, [r4, #2]
    switch( macHdr->Bits.MType )
 800e0ba:	782b      	ldrb	r3, [r5, #0]
 800e0bc:	095b      	lsrs	r3, r3, #5
 800e0be:	2b04      	cmp	r3, #4
 800e0c0:	d009      	beq.n	800e0d6 <PrepareFrame+0x5a>
 800e0c2:	2b07      	cmp	r3, #7
 800e0c4:	d079      	beq.n	800e1ba <PrepareFrame+0x13e>
 800e0c6:	2b02      	cmp	r3, #2
 800e0c8:	d009      	beq.n	800e0de <PrepareFrame+0x62>
 800e0ca:	2002      	movs	r0, #2
}
 800e0cc:	b003      	add	sp, #12
 800e0ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 800e0d2:	4690      	mov	r8, r2
 800e0d4:	e7e3      	b.n	800e09e <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 800e0d6:	4b48      	ldr	r3, [pc, #288]	@ (800e1f8 <PrepareFrame+0x17c>)
 800e0d8:	2201      	movs	r2, #1
 800e0da:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800e0de:	4b46      	ldr	r3, [pc, #280]	@ (800e1f8 <PrepareFrame+0x17c>)
 800e0e0:	2204      	movs	r2, #4
 800e0e2:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800e0e6:	1c9a      	adds	r2, r3, #2
 800e0e8:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800e0ec:	22ff      	movs	r2, #255	@ 0xff
 800e0ee:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800e0f2:	782a      	ldrb	r2, [r5, #0]
 800e0f4:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800e0f8:	f883 7128 	strb.w	r7, [r3, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800e0fc:	4a40      	ldr	r2, [pc, #256]	@ (800e200 <PrepareFrame+0x184>)
 800e0fe:	f8d2 20e4 	ldr.w	r2, [r2, #228]	@ 0xe4
 800e102:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800e106:	7832      	ldrb	r2, [r6, #0]
 800e108:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800e10c:	f883 0130 	strb.w	r0, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800e110:	f503 729c 	add.w	r2, r3, #312	@ 0x138
 800e114:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800e118:	a801      	add	r0, sp, #4
 800e11a:	f001 ff21 	bl	800ff60 <LoRaMacCryptoGetFCntUp>
 800e11e:	2800      	cmp	r0, #0
 800e120:	d15e      	bne.n	800e1e0 <PrepareFrame+0x164>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800e122:	9a01      	ldr	r2, [sp, #4]
 800e124:	4b34      	ldr	r3, [pc, #208]	@ (800e1f8 <PrepareFrame+0x17c>)
 800e126:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116
            MacCtx.McpsConfirm.NbRetries = 0;
 800e12a:	2100      	movs	r1, #0
 800e12c:	f883 1439 	strb.w	r1, [r3, #1081]	@ 0x439
            MacCtx.McpsConfirm.AckReceived = false;
 800e130:	f883 1438 	strb.w	r1, [r3, #1080]	@ 0x438
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800e134:	f8c3 2440 	str.w	r2, [r3, #1088]	@ 0x440
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800e138:	4668      	mov	r0, sp
 800e13a:	f001 fbb9 	bl	800f8b0 <LoRaMacCommandsGetSizeSerializedCmds>
 800e13e:	2800      	cmp	r0, #0
 800e140:	d150      	bne.n	800e1e4 <PrepareFrame+0x168>
            if( macCmdsSize > 0 )
 800e142:	9b00      	ldr	r3, [sp, #0]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d0c1      	beq.n	800e0cc <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800e148:	4b2d      	ldr	r3, [pc, #180]	@ (800e200 <PrepareFrame+0x184>)
 800e14a:	f993 0039 	ldrsb.w	r0, [r3, #57]	@ 0x39
 800e14e:	f7fe f8db 	bl	800c308 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800e152:	4b29      	ldr	r3, [pc, #164]	@ (800e1f8 <PrepareFrame+0x17c>)
 800e154:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800e158:	b113      	cbz	r3, 800e160 <PrepareFrame+0xe4>
 800e15a:	9a00      	ldr	r2, [sp, #0]
 800e15c:	2a0f      	cmp	r2, #15
 800e15e:	d915      	bls.n	800e18c <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800e160:	b113      	cbz	r3, 800e168 <PrepareFrame+0xec>
 800e162:	9b00      	ldr	r3, [sp, #0]
 800e164:	2b0f      	cmp	r3, #15
 800e166:	d821      	bhi.n	800e1ac <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800e168:	4a26      	ldr	r2, [pc, #152]	@ (800e204 <PrepareFrame+0x188>)
 800e16a:	4669      	mov	r1, sp
 800e16c:	f001 fbac 	bl	800f8c8 <LoRaMacCommandsSerializeCmds>
 800e170:	2800      	cmp	r0, #0
 800e172:	d13d      	bne.n	800e1f0 <PrepareFrame+0x174>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800e174:	4b20      	ldr	r3, [pc, #128]	@ (800e1f8 <PrepareFrame+0x17c>)
 800e176:	2200      	movs	r2, #0
 800e178:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800e17c:	f503 6291 	add.w	r2, r3, #1160	@ 0x488
 800e180:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800e184:	9a00      	ldr	r2, [sp, #0]
 800e186:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
 800e18a:	e79f      	b.n	800e0cc <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800e18c:	4a1e      	ldr	r2, [pc, #120]	@ (800e208 <PrepareFrame+0x18c>)
 800e18e:	4669      	mov	r1, sp
 800e190:	200f      	movs	r0, #15
 800e192:	f001 fb99 	bl	800f8c8 <LoRaMacCommandsSerializeCmds>
 800e196:	bb38      	cbnz	r0, 800e1e8 <PrepareFrame+0x16c>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800e198:	7833      	ldrb	r3, [r6, #0]
 800e19a:	9a00      	ldr	r2, [sp, #0]
 800e19c:	f362 0303 	bfi	r3, r2, #0, #4
 800e1a0:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800e1a2:	b2da      	uxtb	r2, r3
 800e1a4:	4b14      	ldr	r3, [pc, #80]	@ (800e1f8 <PrepareFrame+0x17c>)
 800e1a6:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
 800e1aa:	e78f      	b.n	800e0cc <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800e1ac:	4a15      	ldr	r2, [pc, #84]	@ (800e204 <PrepareFrame+0x188>)
 800e1ae:	4669      	mov	r1, sp
 800e1b0:	f001 fb8a 	bl	800f8c8 <LoRaMacCommandsSerializeCmds>
 800e1b4:	b1d0      	cbz	r0, 800e1ec <PrepareFrame+0x170>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e1b6:	2013      	movs	r0, #19
 800e1b8:	e788      	b.n	800e0cc <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800e1ba:	f1b9 0f00 	cmp.w	r9, #0
 800e1be:	d019      	beq.n	800e1f4 <PrepareFrame+0x178>
 800e1c0:	2800      	cmp	r0, #0
 800e1c2:	d083      	beq.n	800e0cc <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800e1c4:	4c11      	ldr	r4, [pc, #68]	@ (800e20c <PrepareFrame+0x190>)
 800e1c6:	fa5f f288 	uxtb.w	r2, r8
 800e1ca:	4649      	mov	r1, r9
 800e1cc:	4620      	mov	r0, r4
 800e1ce:	f005 fbda 	bl	8013986 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800e1d2:	f894 3234 	ldrb.w	r3, [r4, #564]	@ 0x234
 800e1d6:	3301      	adds	r3, #1
 800e1d8:	f824 3c03 	strh.w	r3, [r4, #-3]
    return LORAMAC_STATUS_OK;
 800e1dc:	2000      	movs	r0, #0
 800e1de:	e775      	b.n	800e0cc <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800e1e0:	2012      	movs	r0, #18
 800e1e2:	e773      	b.n	800e0cc <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e1e4:	2013      	movs	r0, #19
 800e1e6:	e771      	b.n	800e0cc <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e1e8:	2013      	movs	r0, #19
 800e1ea:	e76f      	b.n	800e0cc <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800e1ec:	200a      	movs	r0, #10
 800e1ee:	e76d      	b.n	800e0cc <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e1f0:	2013      	movs	r0, #19
 800e1f2:	e76b      	b.n	800e0cc <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 800e1f4:	2000      	movs	r0, #0
 800e1f6:	e769      	b.n	800e0cc <PrepareFrame+0x50>
 800e1f8:	20003560 	.word	0x20003560
 800e1fc:	20003698 	.word	0x20003698
 800e200:	20008000 	.word	0x20008000
 800e204:	200039e8 	.word	0x200039e8
 800e208:	20003678 	.word	0x20003678
 800e20c:	20003563 	.word	0x20003563

0800e210 <Send>:
{
 800e210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e214:	b08a      	sub	sp, #40	@ 0x28
 800e216:	4617      	mov	r7, r2
 800e218:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e21a:	4c42      	ldr	r4, [pc, #264]	@ (800e324 <Send+0x114>)
 800e21c:	f994 a039 	ldrsb.w	sl, [r4, #57]	@ 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800e220:	f994 9038 	ldrsb.w	r9, [r4, #56]	@ 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800e224:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800e226:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800e228:	f894 312c 	ldrb.w	r3, [r4, #300]	@ 0x12c
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d077      	beq.n	800e320 <Send+0x110>
 800e230:	4605      	mov	r5, r0
 800e232:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800e234:	f894 311b 	ldrb.w	r3, [r4, #283]	@ 0x11b
 800e238:	b90b      	cbnz	r3, 800e23e <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800e23a:	2100      	movs	r1, #0
 800e23c:	6321      	str	r1, [r4, #48]	@ 0x30
    fCtrl.Value = 0;
 800e23e:	2300      	movs	r3, #0
 800e240:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800e244:	4837      	ldr	r0, [pc, #220]	@ (800e324 <Send+0x114>)
 800e246:	f890 111a 	ldrb.w	r1, [r0, #282]	@ 0x11a
 800e24a:	f361 13c7 	bfi	r3, r1, #7, #1
 800e24e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e252:	f890 3118 	ldrb.w	r3, [r0, #280]	@ 0x118
 800e256:	2b01      	cmp	r3, #1
 800e258:	d04f      	beq.n	800e2fa <Send+0xea>
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800e25a:	4b32      	ldr	r3, [pc, #200]	@ (800e324 <Send+0x114>)
 800e25c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800e260:	b12b      	cbz	r3, 800e26e <Send+0x5e>
        fCtrl.Bits.Ack = 1;
 800e262:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800e266:	f043 0320 	orr.w	r3, r3, #32
 800e26a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    adrNext.UpdateChanMask = true;
 800e26e:	2301      	movs	r3, #1
 800e270:	f88d 3010 	strb.w	r3, [sp, #16]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800e274:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800e278:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800e27a:	492a      	ldr	r1, [pc, #168]	@ (800e324 <Send+0x114>)
 800e27c:	f8b1 3088 	ldrh.w	r3, [r1, #136]	@ 0x88
 800e280:	f8ad 3018 	strh.w	r3, [sp, #24]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800e284:	f8b1 308a 	ldrh.w	r3, [r1, #138]	@ 0x8a
 800e288:	f8ad 301a 	strh.w	r3, [sp, #26]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e28c:	f88d a01c 	strb.w	sl, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800e290:	f88d 901d 	strb.w	r9, [sp, #29]
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e294:	f891 307c 	ldrb.w	r3, [r1, #124]	@ 0x7c
 800e298:	f88d 301e 	strb.w	r3, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 800e29c:	f891 3048 	ldrb.w	r3, [r1, #72]	@ 0x48
 800e2a0:	f88d 301f 	strb.w	r3, [sp, #31]
    adrNext.Version = Nvm.MacGroup2.Version;
 800e2a4:	f8d1 3128 	ldr.w	r3, [r1, #296]	@ 0x128
 800e2a8:	9303      	str	r3, [sp, #12]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800e2aa:	ab08      	add	r3, sp, #32
 800e2ac:	f101 0238 	add.w	r2, r1, #56	@ 0x38
 800e2b0:	3139      	adds	r1, #57	@ 0x39
 800e2b2:	a803      	add	r0, sp, #12
 800e2b4:	f001 f9ac 	bl	800f610 <LoRaMacAdrCalcNext>
 800e2b8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800e2bc:	f360 1386 	bfi	r3, r0, #6, #1
 800e2c0:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800e2c4:	f8cd 8000 	str.w	r8, [sp]
 800e2c8:	463b      	mov	r3, r7
 800e2ca:	4632      	mov	r2, r6
 800e2cc:	a909      	add	r1, sp, #36	@ 0x24
 800e2ce:	4628      	mov	r0, r5
 800e2d0:	f7ff fed4 	bl	800e07c <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800e2d4:	4604      	mov	r4, r0
 800e2d6:	b108      	cbz	r0, 800e2dc <Send+0xcc>
 800e2d8:	280a      	cmp	r0, #10
 800e2da:	d104      	bne.n	800e2e6 <Send+0xd6>
        status = ScheduleTx( allowDelayedTx );
 800e2dc:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 800e2e0:	f7ff f9ee 	bl	800d6c0 <ScheduleTx>
 800e2e4:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 800e2e6:	b17c      	cbz	r4, 800e308 <Send+0xf8>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800e2e8:	4b0e      	ldr	r3, [pc, #56]	@ (800e324 <Send+0x114>)
 800e2ea:	f883 a039 	strb.w	sl, [r3, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800e2ee:	f883 9038 	strb.w	r9, [r3, #56]	@ 0x38
}
 800e2f2:	4620      	mov	r0, r4
 800e2f4:	b00a      	add	sp, #40	@ 0x28
 800e2f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 800e2fa:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800e2fe:	f043 0310 	orr.w	r3, r3, #16
 800e302:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800e306:	e7a8      	b.n	800e25a <Send+0x4a>
        Nvm.MacGroup1.SrvAckRequested = false;
 800e308:	4b06      	ldr	r3, [pc, #24]	@ (800e324 <Send+0x114>)
 800e30a:	2200      	movs	r2, #0
 800e30c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800e310:	9a08      	ldr	r2, [sp, #32]
 800e312:	629a      	str	r2, [r3, #40]	@ 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800e314:	f001 fa9a 	bl	800f84c <LoRaMacCommandsRemoveNoneStickyCmds>
 800e318:	2800      	cmp	r0, #0
 800e31a:	d0ea      	beq.n	800e2f2 <Send+0xe2>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e31c:	2413      	movs	r4, #19
 800e31e:	e7e8      	b.n	800e2f2 <Send+0xe2>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800e320:	2407      	movs	r4, #7
 800e322:	e7e6      	b.n	800e2f2 <Send+0xe2>
 800e324:	20008000 	.word	0x20008000

0800e328 <LoRaMacIsBusy>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800e328:	4b09      	ldr	r3, [pc, #36]	@ (800e350 <LoRaMacIsBusy+0x28>)
 800e32a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e32e:	2b01      	cmp	r3, #1
 800e330:	d007      	beq.n	800e342 <LoRaMacIsBusy+0x1a>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e332:	b943      	cbnz	r3, 800e346 <LoRaMacIsBusy+0x1e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800e334:	4b06      	ldr	r3, [pc, #24]	@ (800e350 <LoRaMacIsBusy+0x28>)
 800e336:	f893 3482 	ldrb.w	r3, [r3, #1154]	@ 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e33a:	2b01      	cmp	r3, #1
 800e33c:	d005      	beq.n	800e34a <LoRaMacIsBusy+0x22>
    return true;
 800e33e:	2001      	movs	r0, #1
 800e340:	4770      	bx	lr
        return false;
 800e342:	2000      	movs	r0, #0
 800e344:	4770      	bx	lr
    return true;
 800e346:	2001      	movs	r0, #1
 800e348:	4770      	bx	lr
        return false;
 800e34a:	2000      	movs	r0, #0
}
 800e34c:	4770      	bx	lr
 800e34e:	bf00      	nop
 800e350:	20003560 	.word	0x20003560

0800e354 <LoRaMacIsStopped>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800e354:	4b04      	ldr	r3, [pc, #16]	@ (800e368 <LoRaMacIsStopped+0x14>)
 800e356:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e35a:	2b01      	cmp	r3, #1
 800e35c:	d001      	beq.n	800e362 <LoRaMacIsStopped+0xe>
    return false;
 800e35e:	2000      	movs	r0, #0
 800e360:	4770      	bx	lr
        return true;
 800e362:	2001      	movs	r0, #1
}
 800e364:	4770      	bx	lr
 800e366:	bf00      	nop
 800e368:	20003560 	.word	0x20003560

0800e36c <LoRaMacProcess>:
{
 800e36c:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 800e36e:	f7fe ffd9 	bl	800d324 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800e372:	f001 f97b 	bl	800f66c <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800e376:	4b1f      	ldr	r3, [pc, #124]	@ (800e3f4 <LoRaMacProcess+0x88>)
 800e378:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800e37c:	f013 0f10 	tst.w	r3, #16
 800e380:	d10d      	bne.n	800e39e <LoRaMacProcess+0x32>
    LoRaMacHandleIndicationEvents( );
 800e382:	f7fd fe6f 	bl	800c064 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800e386:	4b1b      	ldr	r3, [pc, #108]	@ (800e3f4 <LoRaMacProcess+0x88>)
 800e388:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800e38c:	2b02      	cmp	r3, #2
 800e38e:	d022      	beq.n	800e3d6 <LoRaMacProcess+0x6a>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800e390:	4b18      	ldr	r3, [pc, #96]	@ (800e3f4 <LoRaMacProcess+0x88>)
 800e392:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800e396:	f013 0f20 	tst.w	r3, #32
 800e39a:	d11f      	bne.n	800e3dc <LoRaMacProcess+0x70>
}
 800e39c:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800e39e:	2000      	movs	r0, #0
 800e3a0:	f7fd fe5a 	bl	800c058 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800e3a4:	f7fd fe8c 	bl	800c0c0 <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 800e3a8:	f7fd ff76 	bl	800c298 <IsRequestPending>
 800e3ac:	b110      	cbz	r0, 800e3b4 <LoRaMacProcess+0x48>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800e3ae:	f7fe f8a7 	bl	800c500 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 800e3b2:	b918      	cbnz	r0, 800e3bc <LoRaMacProcess+0x50>
            LoRaMacHandleMlmeRequest( );
 800e3b4:	f7fe ffe4 	bl	800d380 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800e3b8:	f7ff fa30 	bl	800d81c <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 800e3bc:	f7ff fa7c 	bl	800d8b8 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e3c0:	2001      	movs	r0, #1
 800e3c2:	f7fd fe49 	bl	800c058 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800e3c6:	4a0b      	ldr	r2, [pc, #44]	@ (800e3f4 <LoRaMacProcess+0x88>)
 800e3c8:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e3cc:	f043 0320 	orr.w	r3, r3, #32
 800e3d0:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
 800e3d4:	e7d5      	b.n	800e382 <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 800e3d6:	f7ff fab9 	bl	800d94c <OpenContinuousRxCWindow>
 800e3da:	e7d9      	b.n	800e390 <LoRaMacProcess+0x24>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800e3dc:	4b05      	ldr	r3, [pc, #20]	@ (800e3f4 <LoRaMacProcess+0x88>)
 800e3de:	f893 2481 	ldrb.w	r2, [r3, #1153]	@ 0x481
 800e3e2:	f36f 1245 	bfc	r2, #5, #1
 800e3e6:	f883 2481 	strb.w	r2, [r3, #1153]	@ 0x481
        LoRaMacHandleNvm( &Nvm );
 800e3ea:	4803      	ldr	r0, [pc, #12]	@ (800e3f8 <LoRaMacProcess+0x8c>)
 800e3ec:	f7ff fb50 	bl	800da90 <LoRaMacHandleNvm>
}
 800e3f0:	e7d4      	b.n	800e39c <LoRaMacProcess+0x30>
 800e3f2:	bf00      	nop
 800e3f4:	20003560 	.word	0x20003560
 800e3f8:	20008000 	.word	0x20008000

0800e3fc <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800e3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e400:	b08b      	sub	sp, #44	@ 0x2c
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800e402:	2800      	cmp	r0, #0
 800e404:	f000 81a0 	beq.w	800e748 <LoRaMacInitialization+0x34c>
 800e408:	4688      	mov	r8, r1
 800e40a:	4691      	mov	r9, r2
 800e40c:	4607      	mov	r7, r0
 800e40e:	2900      	cmp	r1, #0
 800e410:	f000 819c 	beq.w	800e74c <LoRaMacInitialization+0x350>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800e414:	6803      	ldr	r3, [r0, #0]
 800e416:	2b00      	cmp	r3, #0
 800e418:	f000 819a 	beq.w	800e750 <LoRaMacInitialization+0x354>
        ( primitives->MacMcpsIndication == NULL ) ||
 800e41c:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800e41e:	2b00      	cmp	r3, #0
 800e420:	f000 8198 	beq.w	800e754 <LoRaMacInitialization+0x358>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800e424:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800e426:	2b00      	cmp	r3, #0
 800e428:	f000 8196 	beq.w	800e758 <LoRaMacInitialization+0x35c>
        ( primitives->MacMlmeIndication == NULL ) )
 800e42c:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800e42e:	2b00      	cmp	r3, #0
 800e430:	f000 8194 	beq.w	800e75c <LoRaMacInitialization+0x360>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800e434:	4610      	mov	r0, r2
 800e436:	f002 f8ff 	bl	8010638 <RegionIsActive>
 800e43a:	2800      	cmp	r0, #0
 800e43c:	f000 8190 	beq.w	800e760 <LoRaMacInitialization+0x364>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800e440:	4638      	mov	r0, r7
 800e442:	f001 fad5 	bl	800f9f0 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800e446:	4ccc      	ldr	r4, [pc, #816]	@ (800e778 <LoRaMacInitialization+0x37c>)
 800e448:	f44f 62ef 	mov.w	r2, #1912	@ 0x778
 800e44c:	2100      	movs	r1, #0
 800e44e:	4620      	mov	r0, r4
 800e450:	f005 fab1 	bl	80139b6 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800e454:	4dc9      	ldr	r5, [pc, #804]	@ (800e77c <LoRaMacInitialization+0x380>)
 800e456:	f44f 62a1 	mov.w	r2, #1288	@ 0x508
 800e45a:	2100      	movs	r1, #0
 800e45c:	4628      	mov	r0, r5
 800e45e:	f005 faaa 	bl	80139b6 <memset1>

    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 800e462:	f04f 0a01 	mov.w	sl, #1
 800e466:	f885 a40e 	strb.w	sl, [r5, #1038]	@ 0x40e
    MacCtx.AckTimeoutRetries = 1;
 800e46a:	f885 a40d 	strb.w	sl, [r5, #1037]	@ 0x40d
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800e46e:	f884 9048 	strb.w	r9, [r4, #72]	@ 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800e472:	2600      	movs	r6, #0
 800e474:	f884 6118 	strb.w	r6, [r4, #280]	@ 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 800e478:	f884 608c 	strb.w	r6, [r4, #140]	@ 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800e47c:	4bc0      	ldr	r3, [pc, #768]	@ (800e780 <LoRaMacInitialization+0x384>)
 800e47e:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800e482:	230f      	movs	r3, #15
 800e484:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e488:	a908      	add	r1, sp, #32
 800e48a:	4648      	mov	r0, r9
 800e48c:	f002 f8de 	bl	801064c <RegionGetPhyParam>
 800e490:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800e492:	1b80      	subs	r0, r0, r6
 800e494:	bf18      	it	ne
 800e496:	2001      	movne	r0, #1
 800e498:	f884 011c 	strb.w	r0, [r4, #284]	@ 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800e49c:	f04f 0b0a 	mov.w	fp, #10
 800e4a0:	f88d b020 	strb.w	fp, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e4a4:	a908      	add	r1, sp, #32
 800e4a6:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800e4aa:	f002 f8cf 	bl	801064c <RegionGetPhyParam>
 800e4ae:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800e4b0:	f884 00dc 	strb.w	r0, [r4, #220]	@ 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800e4b4:	f04f 0906 	mov.w	r9, #6
 800e4b8:	f88d 9020 	strb.w	r9, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e4bc:	a908      	add	r1, sp, #32
 800e4be:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800e4c2:	f002 f8c3 	bl	801064c <RegionGetPhyParam>
 800e4c6:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800e4c8:	f884 00dd 	strb.w	r0, [r4, #221]	@ 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800e4cc:	2310      	movs	r3, #16
 800e4ce:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e4d2:	a908      	add	r1, sp, #32
 800e4d4:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800e4d8:	f002 f8b8 	bl	801064c <RegionGetPhyParam>
 800e4dc:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800e4de:	f8c4 009c 	str.w	r0, [r4, #156]	@ 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800e4e2:	2311      	movs	r3, #17
 800e4e4:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e4e8:	a908      	add	r1, sp, #32
 800e4ea:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800e4ee:	f002 f8ad 	bl	801064c <RegionGetPhyParam>
 800e4f2:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800e4f4:	f8c4 00a0 	str.w	r0, [r4, #160]	@ 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800e4f8:	2312      	movs	r3, #18
 800e4fa:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e4fe:	a908      	add	r1, sp, #32
 800e500:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800e504:	f002 f8a2 	bl	801064c <RegionGetPhyParam>
 800e508:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800e50a:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800e50e:	2313      	movs	r3, #19
 800e510:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e514:	a908      	add	r1, sp, #32
 800e516:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800e51a:	f002 f897 	bl	801064c <RegionGetPhyParam>
 800e51e:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800e520:	f8c4 00a8 	str.w	r0, [r4, #168]	@ 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800e524:	2314      	movs	r3, #20
 800e526:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e52a:	a908      	add	r1, sp, #32
 800e52c:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800e530:	f002 f88c 	bl	801064c <RegionGetPhyParam>
 800e534:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800e536:	f8c4 00ac 	str.w	r0, [r4, #172]	@ 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800e53a:	2317      	movs	r3, #23
 800e53c:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e540:	a908      	add	r1, sp, #32
 800e542:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800e546:	f002 f881 	bl	801064c <RegionGetPhyParam>
 800e54a:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800e54c:	f884 00b1 	strb.w	r0, [r4, #177]	@ 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800e550:	2318      	movs	r3, #24
 800e552:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e556:	a908      	add	r1, sp, #32
 800e558:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800e55c:	f002 f876 	bl	801064c <RegionGetPhyParam>
 800e560:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800e562:	f8c4 00b4 	str.w	r0, [r4, #180]	@ 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800e566:	f8c4 00bc 	str.w	r0, [r4, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800e56a:	2319      	movs	r3, #25
 800e56c:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e570:	a908      	add	r1, sp, #32
 800e572:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800e576:	f002 f869 	bl	801064c <RegionGetPhyParam>
 800e57a:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800e57c:	b2c0      	uxtb	r0, r0
 800e57e:	f884 00b8 	strb.w	r0, [r4, #184]	@ 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800e582:	f884 00c0 	strb.w	r0, [r4, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800e586:	231e      	movs	r3, #30
 800e588:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e58c:	a908      	add	r1, sp, #32
 800e58e:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800e592:	f002 f85b 	bl	801064c <RegionGetPhyParam>
 800e596:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800e598:	f884 00c4 	strb.w	r0, [r4, #196]	@ 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800e59c:	231f      	movs	r3, #31
 800e59e:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e5a2:	a908      	add	r1, sp, #32
 800e5a4:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800e5a8:	f002 f850 	bl	801064c <RegionGetPhyParam>
 800e5ac:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800e5ae:	f884 00c5 	strb.w	r0, [r4, #197]	@ 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800e5b2:	2320      	movs	r3, #32
 800e5b4:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e5b8:	eb0d 0103 	add.w	r1, sp, r3
 800e5bc:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800e5c0:	f002 f844 	bl	801064c <RegionGetPhyParam>
 800e5c4:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800e5c6:	9b07      	ldr	r3, [sp, #28]
 800e5c8:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800e5cc:	2321      	movs	r3, #33	@ 0x21
 800e5ce:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e5d2:	a908      	add	r1, sp, #32
 800e5d4:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800e5d8:	f002 f838 	bl	801064c <RegionGetPhyParam>
 800e5dc:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800e5de:	9b07      	ldr	r3, [sp, #28]
 800e5e0:	f8c4 30cc 	str.w	r3, [r4, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800e5e4:	230b      	movs	r3, #11
 800e5e6:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e5ea:	a908      	add	r1, sp, #32
 800e5ec:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800e5f0:	f002 f82c 	bl	801064c <RegionGetPhyParam>
 800e5f4:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 800e5f6:	f8a4 00d0 	strh.w	r0, [r4, #208]	@ 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800e5fa:	230c      	movs	r3, #12
 800e5fc:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e600:	a908      	add	r1, sp, #32
 800e602:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800e606:	f002 f821 	bl	801064c <RegionGetPhyParam>
 800e60a:	9007      	str	r0, [sp, #28]
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 800e60c:	f8a4 00d2 	strh.w	r0, [r4, #210]	@ 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800e610:	f884 a0b0 	strb.w	sl, [r4, #176]	@ 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800e614:	f8c4 b094 	str.w	fp, [r4, #148]	@ 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800e618:	f884 9098 	strb.w	r9, [r4, #152]	@ 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800e61c:	f8c4 b04c 	str.w	fp, [r4, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800e620:	f884 9050 	strb.w	r9, [r4, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800e624:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 800e628:	6563      	str	r3, [r4, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800e62a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 800e62e:	65a3      	str	r3, [r4, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800e630:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800e634:	65e3      	str	r3, [r4, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800e636:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
 800e63a:	6623      	str	r3, [r4, #96]	@ 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800e63c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 800e640:	6663      	str	r3, [r4, #100]	@ 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800e642:	f884 a068 	strb.w	sl, [r4, #104]	@ 0x68

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800e646:	f88d 6018 	strb.w	r6, [sp, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800e64a:	f504 7308 	add.w	r3, r4, #544	@ 0x220
 800e64e:	9304      	str	r3, [sp, #16]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800e650:	f504 7331 	add.w	r3, r4, #708	@ 0x2c4
 800e654:	9305      	str	r3, [sp, #20]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800e656:	a904      	add	r1, sp, #16
 800e658:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800e65c:	f002 f81c 	bl	8010698 <RegionInitDefaults>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 800e660:	f8c5 8348 	str.w	r8, [r5, #840]	@ 0x348
    ResetMacParameters( false );
 800e664:	4630      	mov	r0, r6
 800e666:	f7ff fb6f 	bl	800dd48 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800e66a:	f884 a119 	strb.w	sl, [r4, #281]	@ 0x119

    MacCtx.MacPrimitives = primitives;
 800e66e:	f8c5 7344 	str.w	r7, [r5, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 800e672:	f885 6481 	strb.w	r6, [r5, #1153]	@ 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 800e676:	f8c5 a340 	str.w	sl, [r5, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800e67a:	62e6      	str	r6, [r4, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800e67c:	6326      	str	r6, [r4, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800e67e:	9600      	str	r6, [sp, #0]
 800e680:	4b40      	ldr	r3, [pc, #256]	@ (800e784 <LoRaMacInitialization+0x388>)
 800e682:	4632      	mov	r2, r6
 800e684:	f04f 31ff 	mov.w	r1, #4294967295
 800e688:	f505 705a 	add.w	r0, r5, #872	@ 0x368
 800e68c:	f007 fa70 	bl	8015b70 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800e690:	9600      	str	r6, [sp, #0]
 800e692:	4b3d      	ldr	r3, [pc, #244]	@ (800e788 <LoRaMacInitialization+0x38c>)
 800e694:	4632      	mov	r2, r6
 800e696:	f04f 31ff 	mov.w	r1, #4294967295
 800e69a:	f505 7060 	add.w	r0, r5, #896	@ 0x380
 800e69e:	f007 fa67 	bl	8015b70 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800e6a2:	9600      	str	r6, [sp, #0]
 800e6a4:	4b39      	ldr	r3, [pc, #228]	@ (800e78c <LoRaMacInitialization+0x390>)
 800e6a6:	4632      	mov	r2, r6
 800e6a8:	f04f 31ff 	mov.w	r1, #4294967295
 800e6ac:	f505 7066 	add.w	r0, r5, #920	@ 0x398
 800e6b0:	f007 fa5e 	bl	8015b70 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 800e6b4:	9600      	str	r6, [sp, #0]
 800e6b6:	4b36      	ldr	r3, [pc, #216]	@ (800e790 <LoRaMacInitialization+0x394>)
 800e6b8:	4632      	mov	r2, r6
 800e6ba:	f04f 31ff 	mov.w	r1, #4294967295
 800e6be:	f505 707d 	add.w	r0, r5, #1012	@ 0x3f4
 800e6c2:	f007 fa55 	bl	8015b70 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800e6c6:	ae02      	add	r6, sp, #8
 800e6c8:	4630      	mov	r0, r6
 800e6ca:	f007 f9e3 	bl	8015a94 <SysTimeGetMcuTime>
 800e6ce:	f504 7390 	add.w	r3, r4, #288	@ 0x120
 800e6d2:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e6d6:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800e6da:	4b2e      	ldr	r3, [pc, #184]	@ (800e794 <LoRaMacInitialization+0x398>)
 800e6dc:	f8c5 334c 	str.w	r3, [r5, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800e6e0:	4b2d      	ldr	r3, [pc, #180]	@ (800e798 <LoRaMacInitialization+0x39c>)
 800e6e2:	f8c5 3354 	str.w	r3, [r5, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800e6e6:	4b2d      	ldr	r3, [pc, #180]	@ (800e79c <LoRaMacInitialization+0x3a0>)
 800e6e8:	f8c5 335c 	str.w	r3, [r5, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800e6ec:	4b2c      	ldr	r3, [pc, #176]	@ (800e7a0 <LoRaMacInitialization+0x3a4>)
 800e6ee:	f8c5 3350 	str.w	r3, [r5, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800e6f2:	4b2c      	ldr	r3, [pc, #176]	@ (800e7a4 <LoRaMacInitialization+0x3a8>)
 800e6f4:	f8c5 3358 	str.w	r3, [r5, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800e6f8:	4b2b      	ldr	r3, [pc, #172]	@ (800e7a8 <LoRaMacInitialization+0x3ac>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	f505 7053 	add.w	r0, r5, #844	@ 0x34c
 800e700:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 800e702:	f504 70a4 	add.w	r0, r4, #328	@ 0x148
 800e706:	f004 fe5f 	bl	80133c8 <SecureElementInit>
 800e70a:	bb70      	cbnz	r0, 800e76a <LoRaMacInitialization+0x36e>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800e70c:	4620      	mov	r0, r4
 800e70e:	f001 fc07 	bl	800ff20 <LoRaMacCryptoInit>
 800e712:	bb60      	cbnz	r0, 800e76e <LoRaMacInitialization+0x372>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800e714:	f001 f830 	bl	800f778 <LoRaMacCommandsInit>
 800e718:	bb58      	cbnz	r0, 800e772 <LoRaMacInitialization+0x376>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800e71a:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 800e71e:	f001 fc65 	bl	800ffec <LoRaMacCryptoSetMulticastReference>
 800e722:	4604      	mov	r4, r0
 800e724:	2800      	cmp	r0, #0
 800e726:	d141      	bne.n	800e7ac <LoRaMacInitialization+0x3b0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800e728:	4d1f      	ldr	r5, [pc, #124]	@ (800e7a8 <LoRaMacInitialization+0x3ac>)
 800e72a:	696b      	ldr	r3, [r5, #20]
 800e72c:	4798      	blx	r3
 800e72e:	f005 f917 	bl	8013960 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800e732:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800e734:	4a10      	ldr	r2, [pc, #64]	@ (800e778 <LoRaMacInitialization+0x37c>)
 800e736:	f892 0119 	ldrb.w	r0, [r2, #281]	@ 0x119
 800e73a:	4798      	blx	r3
    Radio.Sleep( );
 800e73c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800e73e:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e740:	4650      	mov	r0, sl
 800e742:	f7fd fc89 	bl	800c058 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800e746:	e00c      	b.n	800e762 <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e748:	2403      	movs	r4, #3
 800e74a:	e00a      	b.n	800e762 <LoRaMacInitialization+0x366>
 800e74c:	2403      	movs	r4, #3
 800e74e:	e008      	b.n	800e762 <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e750:	2403      	movs	r4, #3
 800e752:	e006      	b.n	800e762 <LoRaMacInitialization+0x366>
 800e754:	2403      	movs	r4, #3
 800e756:	e004      	b.n	800e762 <LoRaMacInitialization+0x366>
 800e758:	2403      	movs	r4, #3
 800e75a:	e002      	b.n	800e762 <LoRaMacInitialization+0x366>
 800e75c:	2403      	movs	r4, #3
 800e75e:	e000      	b.n	800e762 <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800e760:	2409      	movs	r4, #9
}
 800e762:	4620      	mov	r0, r4
 800e764:	b00b      	add	sp, #44	@ 0x2c
 800e766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800e76a:	2411      	movs	r4, #17
 800e76c:	e7f9      	b.n	800e762 <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800e76e:	2411      	movs	r4, #17
 800e770:	e7f7      	b.n	800e762 <LoRaMacInitialization+0x366>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e772:	2413      	movs	r4, #19
 800e774:	e7f5      	b.n	800e762 <LoRaMacInitialization+0x366>
 800e776:	bf00      	nop
 800e778:	20008000 	.word	0x20008000
 800e77c:	20003560 	.word	0x20003560
 800e780:	01000300 	.word	0x01000300
 800e784:	0800d7c9 	.word	0x0800d7c9
 800e788:	0800da49 	.word	0x0800da49
 800e78c:	0800d9f9 	.word	0x0800d9f9
 800e790:	0800c47d 	.word	0x0800c47d
 800e794:	0800dcfd 	.word	0x0800dcfd
 800e798:	0800dcb5 	.word	0x0800dcb5
 800e79c:	0800c269 	.word	0x0800c269
 800e7a0:	0800dc8d 	.word	0x0800dc8d
 800e7a4:	0800dc65 	.word	0x0800dc65
 800e7a8:	080172ac 	.word	0x080172ac
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800e7ac:	2411      	movs	r4, #17
 800e7ae:	e7d8      	b.n	800e762 <LoRaMacInitialization+0x366>

0800e7b0 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 800e7b0:	b510      	push	{r4, lr}
    MacCtx.MacState = LORAMAC_IDLE;
 800e7b2:	2400      	movs	r4, #0
 800e7b4:	4b03      	ldr	r3, [pc, #12]	@ (800e7c4 <LoRaMacStart+0x14>)
 800e7b6:	f8c3 4340 	str.w	r4, [r3, #832]	@ 0x340
    UpdateRxSlotIdleState();
 800e7ba:	f7fd fc39 	bl	800c030 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
}
 800e7be:	4620      	mov	r0, r4
 800e7c0:	bd10      	pop	{r4, pc}
 800e7c2:	bf00      	nop
 800e7c4:	20003560 	.word	0x20003560

0800e7c8 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 800e7c8:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == false )
 800e7ca:	f7ff fdad 	bl	800e328 <LoRaMacIsBusy>
 800e7ce:	b130      	cbz	r0, 800e7de <LoRaMacStop+0x16>
            Radio.Sleep( );
        }
        MacCtx.MacState = LORAMAC_STOPPED;
        return LORAMAC_STATUS_OK;
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 800e7d0:	4b0b      	ldr	r3, [pc, #44]	@ (800e800 <LoRaMacStop+0x38>)
 800e7d2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e7d6:	2b01      	cmp	r3, #1
 800e7d8:	d010      	beq.n	800e7fc <LoRaMacStop+0x34>
    {
        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_BUSY;
 800e7da:	2001      	movs	r0, #1
}
 800e7dc:	bd08      	pop	{r3, pc}
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e7de:	4b09      	ldr	r3, [pc, #36]	@ (800e804 <LoRaMacStop+0x3c>)
 800e7e0:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e7e4:	2b02      	cmp	r3, #2
 800e7e6:	d005      	beq.n	800e7f4 <LoRaMacStop+0x2c>
        MacCtx.MacState = LORAMAC_STOPPED;
 800e7e8:	4b05      	ldr	r3, [pc, #20]	@ (800e800 <LoRaMacStop+0x38>)
 800e7ea:	2201      	movs	r2, #1
 800e7ec:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
        return LORAMAC_STATUS_OK;
 800e7f0:	2000      	movs	r0, #0
 800e7f2:	e7f3      	b.n	800e7dc <LoRaMacStop+0x14>
            Radio.Sleep( );
 800e7f4:	4b04      	ldr	r3, [pc, #16]	@ (800e808 <LoRaMacStop+0x40>)
 800e7f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7f8:	4798      	blx	r3
 800e7fa:	e7f5      	b.n	800e7e8 <LoRaMacStop+0x20>
        return LORAMAC_STATUS_OK;
 800e7fc:	2000      	movs	r0, #0
 800e7fe:	e7ed      	b.n	800e7dc <LoRaMacStop+0x14>
 800e800:	20003560 	.word	0x20003560
 800e804:	20008000 	.word	0x20008000
 800e808:	080172ac 	.word	0x080172ac

0800e80c <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 800e80c:	b570      	push	{r4, r5, r6, lr}
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 800e80e:	4c13      	ldr	r4, [pc, #76]	@ (800e85c <LoRaMacHalt+0x50>)
 800e810:	4620      	mov	r0, r4
 800e812:	f007 fa11 	bl	8015c38 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 800e816:	f104 0018 	add.w	r0, r4, #24
 800e81a:	f007 fa0d 	bl	8015c38 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 800e81e:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 800e822:	f007 fa09 	bl	8015c38 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 800e826:	f104 008c 	add.w	r0, r4, #140	@ 0x8c
 800e82a:	f007 fa05 	bl	8015c38 <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 800e82e:	f000 ff0b 	bl	800f648 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 800e832:	4b0b      	ldr	r3, [pc, #44]	@ (800e860 <LoRaMacHalt+0x54>)
 800e834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e836:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 800e838:	2500      	movs	r5, #0
 800e83a:	f844 5c28 	str.w	r5, [r4, #-40]

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 800e83e:	4e09      	ldr	r6, [pc, #36]	@ (800e864 <LoRaMacHalt+0x58>)
 800e840:	4630      	mov	r0, r6
 800e842:	f7ff f925 	bl	800da90 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 800e846:	f44f 62ef 	mov.w	r2, #1912	@ 0x778
 800e84a:	4631      	mov	r1, r6
 800e84c:	4806      	ldr	r0, [pc, #24]	@ (800e868 <LoRaMacHalt+0x5c>)
 800e84e:	f005 f89a 	bl	8013986 <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 800e852:	2301      	movs	r3, #1
 800e854:	f844 3c28 	str.w	r3, [r4, #-40]

    return LORAMAC_STATUS_OK;
}
 800e858:	4628      	mov	r0, r5
 800e85a:	bd70      	pop	{r4, r5, r6, pc}
 800e85c:	200038c8 	.word	0x200038c8
 800e860:	080172ac 	.word	0x080172ac
 800e864:	20008000 	.word	0x20008000
 800e868:	20008778 	.word	0x20008778

0800e86c <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800e86c:	b530      	push	{r4, r5, lr}
 800e86e:	b089      	sub	sp, #36	@ 0x24
 800e870:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800e872:	4b2e      	ldr	r3, [pc, #184]	@ (800e92c <LoRaMacQueryTxPossible+0xc0>)
 800e874:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e876:	9202      	str	r2, [sp, #8]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800e878:	f993 00dd 	ldrsb.w	r0, [r3, #221]	@ 0xdd
 800e87c:	f88d 0007 	strb.w	r0, [sp, #7]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800e880:	f993 30dc 	ldrsb.w	r3, [r3, #220]	@ 0xdc
 800e884:	f88d 3006 	strb.w	r3, [sp, #6]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800e888:	2300      	movs	r3, #0
 800e88a:	9300      	str	r3, [sp, #0]

    if( txInfo == NULL )
 800e88c:	2900      	cmp	r1, #0
 800e88e:	d047      	beq.n	800e920 <LoRaMacQueryTxPossible+0xb4>
 800e890:	460d      	mov	r5, r1
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 800e892:	4b26      	ldr	r3, [pc, #152]	@ (800e92c <LoRaMacQueryTxPossible+0xc0>)
 800e894:	f8d3 1128 	ldr.w	r1, [r3, #296]	@ 0x128
 800e898:	9103      	str	r1, [sp, #12]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800e89a:	2100      	movs	r1, #0
 800e89c:	f88d 1010 	strb.w	r1, [sp, #16]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800e8a0:	f893 111a 	ldrb.w	r1, [r3, #282]	@ 0x11a
 800e8a4:	f88d 1011 	strb.w	r1, [sp, #17]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800e8a8:	9205      	str	r2, [sp, #20]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800e8aa:	f8b3 2088 	ldrh.w	r2, [r3, #136]	@ 0x88
 800e8ae:	f8ad 2018 	strh.w	r2, [sp, #24]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800e8b2:	f8b3 208a 	ldrh.w	r2, [r3, #138]	@ 0x8a
 800e8b6:	f8ad 201a 	strh.w	r2, [sp, #26]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e8ba:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 800e8be:	f88d 201c 	strb.w	r2, [sp, #28]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800e8c2:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 800e8c6:	f88d 201d 	strb.w	r2, [sp, #29]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e8ca:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 800e8ce:	f88d 201e 	strb.w	r2, [sp, #30]
    adrNext.Region = Nvm.MacGroup2.Region;
 800e8d2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e8d6:	f88d 301f 	strb.w	r3, [sp, #31]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800e8da:	ab02      	add	r3, sp, #8
 800e8dc:	f10d 0206 	add.w	r2, sp, #6
 800e8e0:	f10d 0107 	add.w	r1, sp, #7
 800e8e4:	a803      	add	r0, sp, #12
 800e8e6:	f000 fe93 	bl	800f610 <LoRaMacAdrCalcNext>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800e8ea:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 800e8ee:	f7fd fd0b 	bl	800c308 <GetMaxAppPayloadWithoutFOptsLength>
 800e8f2:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800e8f4:	4668      	mov	r0, sp
 800e8f6:	f000 ffdb 	bl	800f8b0 <LoRaMacCommandsGetSizeSerializedCmds>
 800e8fa:	b998      	cbnz	r0, 800e924 <LoRaMacQueryTxPossible+0xb8>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800e8fc:	9b00      	ldr	r3, [sp, #0]
 800e8fe:	2b0f      	cmp	r3, #15
 800e900:	d80a      	bhi.n	800e918 <LoRaMacQueryTxPossible+0xac>
 800e902:	786a      	ldrb	r2, [r5, #1]
 800e904:	4293      	cmp	r3, r2
 800e906:	d807      	bhi.n	800e918 <LoRaMacQueryTxPossible+0xac>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800e908:	1ad3      	subs	r3, r2, r3
 800e90a:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800e90c:	9b00      	ldr	r3, [sp, #0]
 800e90e:	441c      	add	r4, r3
 800e910:	42a2      	cmp	r2, r4
 800e912:	d309      	bcc.n	800e928 <LoRaMacQueryTxPossible+0xbc>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800e914:	b009      	add	sp, #36	@ 0x24
 800e916:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800e918:	2300      	movs	r3, #0
 800e91a:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800e91c:	2008      	movs	r0, #8
 800e91e:	e7f9      	b.n	800e914 <LoRaMacQueryTxPossible+0xa8>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e920:	2003      	movs	r0, #3
 800e922:	e7f7      	b.n	800e914 <LoRaMacQueryTxPossible+0xa8>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e924:	2013      	movs	r0, #19
 800e926:	e7f5      	b.n	800e914 <LoRaMacQueryTxPossible+0xa8>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800e928:	2008      	movs	r0, #8
 800e92a:	e7f3      	b.n	800e914 <LoRaMacQueryTxPossible+0xa8>
 800e92c:	20008000 	.word	0x20008000

0800e930 <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800e930:	2800      	cmp	r0, #0
 800e932:	f000 8146 	beq.w	800ebc2 <LoRaMacMibGetRequestConfirm+0x292>
{
 800e936:	b510      	push	{r4, lr}
 800e938:	b084      	sub	sp, #16
 800e93a:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800e93c:	7800      	ldrb	r0, [r0, #0]
 800e93e:	283f      	cmp	r0, #63	@ 0x3f
 800e940:	f200 813b 	bhi.w	800ebba <LoRaMacMibGetRequestConfirm+0x28a>
 800e944:	e8df f010 	tbh	[pc, r0, lsl #1]
 800e948:	00450040 	.word	0x00450040
 800e94c:	0050004b 	.word	0x0050004b
 800e950:	005b0055 	.word	0x005b0055
 800e954:	01390061 	.word	0x01390061
 800e958:	01390139 	.word	0x01390139
 800e95c:	01390139 	.word	0x01390139
 800e960:	01390139 	.word	0x01390139
 800e964:	00690139 	.word	0x00690139
 800e968:	0075006f 	.word	0x0075006f
 800e96c:	008a0082 	.word	0x008a0082
 800e970:	009a0092 	.word	0x009a0092
 800e974:	00a200af 	.word	0x00a200af
 800e978:	00c200bc 	.word	0x00c200bc
 800e97c:	00cc00c7 	.word	0x00cc00c7
 800e980:	00d600d1 	.word	0x00d600d1
 800e984:	00e100db 	.word	0x00e100db
 800e988:	00e700ed 	.word	0x00e700ed
 800e98c:	00f800f3 	.word	0x00f800f3
 800e990:	010c00fe 	.word	0x010c00fe
 800e994:	01080104 	.word	0x01080104
 800e998:	01120139 	.word	0x01120139
 800e99c:	01390139 	.word	0x01390139
 800e9a0:	01390139 	.word	0x01390139
 800e9a4:	01390139 	.word	0x01390139
 800e9a8:	01390139 	.word	0x01390139
 800e9ac:	01390139 	.word	0x01390139
 800e9b0:	01390139 	.word	0x01390139
 800e9b4:	01390139 	.word	0x01390139
 800e9b8:	011b0139 	.word	0x011b0139
 800e9bc:	01270121 	.word	0x01270121
 800e9c0:	0133012d 	.word	0x0133012d
 800e9c4:	013f013f 	.word	0x013f013f
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800e9c8:	4b80      	ldr	r3, [pc, #512]	@ (800ebcc <LoRaMacMibGetRequestConfirm+0x29c>)
 800e9ca:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e9ce:	7123      	strb	r3, [r4, #4]
            break;
 800e9d0:	e0fa      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800e9d2:	4b7e      	ldr	r3, [pc, #504]	@ (800ebcc <LoRaMacMibGetRequestConfirm+0x29c>)
 800e9d4:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800e9d8:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e9da:	2000      	movs	r0, #0
            break;
 800e9dc:	e0f4      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 800e9de:	6860      	ldr	r0, [r4, #4]
 800e9e0:	f004 fe96 	bl	8013710 <SecureElementGetDevEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e9e4:	2000      	movs	r0, #0
            break;
 800e9e6:	e0ef      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 800e9e8:	6860      	ldr	r0, [r4, #4]
 800e9ea:	f004 feaf 	bl	801374c <SecureElementGetJoinEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e9ee:	2000      	movs	r0, #0
            break;
 800e9f0:	e0ea      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800e9f2:	4b76      	ldr	r3, [pc, #472]	@ (800ebcc <LoRaMacMibGetRequestConfirm+0x29c>)
 800e9f4:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800e9f8:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e9fa:	2000      	movs	r0, #0
            break;
 800e9fc:	e0e4      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800e9fe:	4b73      	ldr	r3, [pc, #460]	@ (800ebcc <LoRaMacMibGetRequestConfirm+0x29c>)
 800ea00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ea04:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ea06:	2000      	movs	r0, #0
            break;
 800ea08:	e0de      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 800ea0a:	1d21      	adds	r1, r4, #4
 800ea0c:	4b6f      	ldr	r3, [pc, #444]	@ (800ebcc <LoRaMacMibGetRequestConfirm+0x29c>)
 800ea0e:	f893 012c 	ldrb.w	r0, [r3, #300]	@ 0x12c
 800ea12:	f004 feb7 	bl	8013784 <SecureElementGetDevAddr>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ea16:	2000      	movs	r0, #0
            break;
 800ea18:	e0d6      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800ea1a:	4b6c      	ldr	r3, [pc, #432]	@ (800ebcc <LoRaMacMibGetRequestConfirm+0x29c>)
 800ea1c:	f893 3119 	ldrb.w	r3, [r3, #281]	@ 0x119
 800ea20:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ea22:	2000      	movs	r0, #0
            break;
 800ea24:	e0d0      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800ea26:	4b69      	ldr	r3, [pc, #420]	@ (800ebcc <LoRaMacMibGetRequestConfirm+0x29c>)
 800ea28:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800ea2c:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ea2e:	2000      	movs	r0, #0
            break;
 800ea30:	e0ca      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 800ea32:	231d      	movs	r3, #29
 800ea34:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ea38:	a902      	add	r1, sp, #8
 800ea3a:	4b64      	ldr	r3, [pc, #400]	@ (800ebcc <LoRaMacMibGetRequestConfirm+0x29c>)
 800ea3c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800ea40:	f001 fe04 	bl	801064c <RegionGetPhyParam>
 800ea44:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelList = phyParam.Channels;
 800ea46:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ea48:	2000      	movs	r0, #0
            break;
 800ea4a:	e0bd      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800ea4c:	3404      	adds	r4, #4
 800ea4e:	4b60      	ldr	r3, [pc, #384]	@ (800ebd0 <LoRaMacMibGetRequestConfirm+0x2a0>)
 800ea50:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ea54:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ea58:	2000      	movs	r0, #0
            break;
 800ea5a:	e0b5      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800ea5c:	3404      	adds	r4, #4
 800ea5e:	4b5d      	ldr	r3, [pc, #372]	@ (800ebd4 <LoRaMacMibGetRequestConfirm+0x2a4>)
 800ea60:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ea64:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ea68:	2000      	movs	r0, #0
            break;
 800ea6a:	e0ad      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800ea6c:	3404      	adds	r4, #4
 800ea6e:	4b5a      	ldr	r3, [pc, #360]	@ (800ebd8 <LoRaMacMibGetRequestConfirm+0x2a8>)
 800ea70:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ea74:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ea78:	2000      	movs	r0, #0
            break;
 800ea7a:	e0a5      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800ea7c:	3404      	adds	r4, #4
 800ea7e:	4b57      	ldr	r3, [pc, #348]	@ (800ebdc <LoRaMacMibGetRequestConfirm+0x2ac>)
 800ea80:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ea84:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ea88:	2000      	movs	r0, #0
            break;
 800ea8a:	e09d      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800ea8c:	231b      	movs	r3, #27
 800ea8e:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ea92:	a902      	add	r1, sp, #8
 800ea94:	4b4d      	ldr	r3, [pc, #308]	@ (800ebcc <LoRaMacMibGetRequestConfirm+0x29c>)
 800ea96:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800ea9a:	f001 fdd7 	bl	801064c <RegionGetPhyParam>
 800ea9e:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800eaa0:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eaa2:	2000      	movs	r0, #0
            break;
 800eaa4:	e090      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800eaa6:	231a      	movs	r3, #26
 800eaa8:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800eaac:	a902      	add	r1, sp, #8
 800eaae:	4b47      	ldr	r3, [pc, #284]	@ (800ebcc <LoRaMacMibGetRequestConfirm+0x29c>)
 800eab0:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800eab4:	f001 fdca 	bl	801064c <RegionGetPhyParam>
 800eab8:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800eaba:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eabc:	2000      	movs	r0, #0
            break;
 800eabe:	e083      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800eac0:	4b42      	ldr	r3, [pc, #264]	@ (800ebcc <LoRaMacMibGetRequestConfirm+0x29c>)
 800eac2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800eac6:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eac8:	2000      	movs	r0, #0
            break;
 800eaca:	e07d      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800eacc:	4b3f      	ldr	r3, [pc, #252]	@ (800ebcc <LoRaMacMibGetRequestConfirm+0x29c>)
 800eace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ead0:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ead2:	2000      	movs	r0, #0
            break;
 800ead4:	e078      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800ead6:	4b3d      	ldr	r3, [pc, #244]	@ (800ebcc <LoRaMacMibGetRequestConfirm+0x29c>)
 800ead8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eada:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eadc:	2000      	movs	r0, #0
            break;
 800eade:	e073      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800eae0:	4b3a      	ldr	r3, [pc, #232]	@ (800ebcc <LoRaMacMibGetRequestConfirm+0x29c>)
 800eae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800eae4:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eae6:	2000      	movs	r0, #0
            break;
 800eae8:	e06e      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800eaea:	4b38      	ldr	r3, [pc, #224]	@ (800ebcc <LoRaMacMibGetRequestConfirm+0x29c>)
 800eaec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eaee:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eaf0:	2000      	movs	r0, #0
            break;
 800eaf2:	e069      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800eaf4:	4b35      	ldr	r3, [pc, #212]	@ (800ebcc <LoRaMacMibGetRequestConfirm+0x29c>)
 800eaf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800eaf8:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eafa:	2000      	movs	r0, #0
            break;
 800eafc:	e064      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800eafe:	4b33      	ldr	r3, [pc, #204]	@ (800ebcc <LoRaMacMibGetRequestConfirm+0x29c>)
 800eb00:	f993 30dd 	ldrsb.w	r3, [r3, #221]	@ 0xdd
 800eb04:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eb06:	2000      	movs	r0, #0
            break;
 800eb08:	e05e      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800eb0a:	4b30      	ldr	r3, [pc, #192]	@ (800ebcc <LoRaMacMibGetRequestConfirm+0x29c>)
 800eb0c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800eb10:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eb12:	2000      	movs	r0, #0
            break;
 800eb14:	e058      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800eb16:	4b2d      	ldr	r3, [pc, #180]	@ (800ebcc <LoRaMacMibGetRequestConfirm+0x29c>)
 800eb18:	f993 30dc 	ldrsb.w	r3, [r3, #220]	@ 0xdc
 800eb1c:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eb1e:	2000      	movs	r0, #0
            break;
 800eb20:	e052      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800eb22:	4b2a      	ldr	r3, [pc, #168]	@ (800ebcc <LoRaMacMibGetRequestConfirm+0x29c>)
 800eb24:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800eb28:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eb2a:	2000      	movs	r0, #0
            break;
 800eb2c:	e04c      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800eb2e:	4b27      	ldr	r3, [pc, #156]	@ (800ebcc <LoRaMacMibGetRequestConfirm+0x29c>)
 800eb30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb32:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eb34:	2000      	movs	r0, #0
            break;
 800eb36:	e047      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800eb38:	4b24      	ldr	r3, [pc, #144]	@ (800ebcc <LoRaMacMibGetRequestConfirm+0x29c>)
 800eb3a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800eb3e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eb40:	2000      	movs	r0, #0
            break;
 800eb42:	e041      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800eb44:	4b21      	ldr	r3, [pc, #132]	@ (800ebcc <LoRaMacMibGetRequestConfirm+0x29c>)
 800eb46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eb4a:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eb4c:	2000      	movs	r0, #0
            break;
 800eb4e:	e03b      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 800eb50:	4b1e      	ldr	r3, [pc, #120]	@ (800ebcc <LoRaMacMibGetRequestConfirm+0x29c>)
 800eb52:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eb54:	2000      	movs	r0, #0
            break;
 800eb56:	e037      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 800eb58:	4b21      	ldr	r3, [pc, #132]	@ (800ebe0 <LoRaMacMibGetRequestConfirm+0x2b0>)
 800eb5a:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eb5c:	2000      	movs	r0, #0
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 800eb5e:	e033      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800eb60:	4b1a      	ldr	r3, [pc, #104]	@ (800ebcc <LoRaMacMibGetRequestConfirm+0x29c>)
 800eb62:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800eb66:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eb68:	2000      	movs	r0, #0
            break;
 800eb6a:	e02d      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800eb6c:	4b17      	ldr	r3, [pc, #92]	@ (800ebcc <LoRaMacMibGetRequestConfirm+0x29c>)
 800eb6e:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 800eb72:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800eb74:	f001 fea0 	bl	80108b8 <RegionGetVersion>
 800eb78:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eb7a:	2000      	movs	r0, #0
            break;
 800eb7c:	e024      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800eb7e:	4b13      	ldr	r3, [pc, #76]	@ (800ebcc <LoRaMacMibGetRequestConfirm+0x29c>)
 800eb80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb84:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eb86:	2000      	movs	r0, #0
            break;
 800eb88:	e01e      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800eb8a:	4b10      	ldr	r3, [pc, #64]	@ (800ebcc <LoRaMacMibGetRequestConfirm+0x29c>)
 800eb8c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800eb90:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eb92:	2000      	movs	r0, #0
            break;
 800eb94:	e018      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800eb96:	4b0d      	ldr	r3, [pc, #52]	@ (800ebcc <LoRaMacMibGetRequestConfirm+0x29c>)
 800eb98:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 800eb9c:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eb9e:	2000      	movs	r0, #0
            break;
 800eba0:	e012      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800eba2:	4b0a      	ldr	r3, [pc, #40]	@ (800ebcc <LoRaMacMibGetRequestConfirm+0x29c>)
 800eba4:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 800eba8:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ebaa:	2000      	movs	r0, #0
            break;
 800ebac:	e00c      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800ebae:	4b07      	ldr	r3, [pc, #28]	@ (800ebcc <LoRaMacMibGetRequestConfirm+0x29c>)
 800ebb0:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	@ 0xd2
 800ebb4:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ebb6:	2000      	movs	r0, #0
            break;
 800ebb8:	e006      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
#endif
            break;
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800ebba:	4620      	mov	r0, r4
 800ebbc:	f000 fd48 	bl	800f650 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800ebc0:	e002      	b.n	800ebc8 <LoRaMacMibGetRequestConfirm+0x298>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ebc2:	2003      	movs	r0, #3
        }
    }
    return status;
}
 800ebc4:	4770      	bx	lr
    switch( mibGet->Type )
 800ebc6:	2018      	movs	r0, #24
}
 800ebc8:	b004      	add	sp, #16
 800ebca:	bd10      	pop	{r4, pc}
 800ebcc:	20008000 	.word	0x20008000
 800ebd0:	2000806c 	.word	0x2000806c
 800ebd4:	200080b4 	.word	0x200080b4
 800ebd8:	20008074 	.word	0x20008074
 800ebdc:	200080bc 	.word	0x200080bc
 800ebe0:	20008778 	.word	0x20008778

0800ebe4 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800ebe4:	b530      	push	{r4, r5, lr}
 800ebe6:	b085      	sub	sp, #20
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800ebe8:	2800      	cmp	r0, #0
 800ebea:	f000 8280 	beq.w	800f0ee <LoRaMacMibSetRequestConfirm+0x50a>
 800ebee:	4605      	mov	r5, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800ebf0:	4b9f      	ldr	r3, [pc, #636]	@ (800ee70 <LoRaMacMibSetRequestConfirm+0x28c>)
 800ebf2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ebf6:	f013 0f02 	tst.w	r3, #2
 800ebfa:	f040 827a 	bne.w	800f0f2 <LoRaMacMibSetRequestConfirm+0x50e>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800ebfe:	7804      	ldrb	r4, [r0, #0]
 800ec00:	2c3f      	cmp	r4, #63	@ 0x3f
 800ec02:	f200 8270 	bhi.w	800f0e6 <LoRaMacMibSetRequestConfirm+0x502>
 800ec06:	e8df f014 	tbh	[pc, r4, lsl #1]
 800ec0a:	0040      	.short	0x0040
 800ec0c:	004e0045 	.word	0x004e0045
 800ec10:	005f0057 	.word	0x005f0057
 800ec14:	006b0065 	.word	0x006b0065
 800ec18:	0087007a 	.word	0x0087007a
 800ec1c:	00a10094 	.word	0x00a10094
 800ec20:	00bb00ae 	.word	0x00bb00ae
 800ec24:	00d500c8 	.word	0x00d500c8
 800ec28:	00ed00e2 	.word	0x00ed00e2
 800ec2c:	00f3026e 	.word	0x00f3026e
 800ec30:	013d0119 	.word	0x013d0119
 800ec34:	0195016b 	.word	0x0195016b
 800ec38:	01a50185 	.word	0x01a50185
 800ec3c:	01b501b0 	.word	0x01b501b0
 800ec40:	01bf01ba 	.word	0x01bf01ba
 800ec44:	01c901c4 	.word	0x01c901c4
 800ec48:	020c01de 	.word	0x020c01de
 800ec4c:	022101f7 	.word	0x022101f7
 800ec50:	02300228 	.word	0x02300228
 800ec54:	023c0236 	.word	0x023c0236
 800ec58:	0240026e 	.word	0x0240026e
 800ec5c:	026e026e 	.word	0x026e026e
 800ec60:	026e026e 	.word	0x026e026e
 800ec64:	026e026e 	.word	0x026e026e
 800ec68:	026e026e 	.word	0x026e026e
 800ec6c:	026e026e 	.word	0x026e026e
 800ec70:	026e026e 	.word	0x026e026e
 800ec74:	026e026e 	.word	0x026e026e
 800ec78:	026e026e 	.word	0x026e026e
 800ec7c:	02560250 	.word	0x02560250
 800ec80:	0262025c 	.word	0x0262025c
 800ec84:	02780268 	.word	0x02780268
 800ec88:	0278      	.short	0x0278
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800ec8a:	7900      	ldrb	r0, [r0, #4]
 800ec8c:	f7ff f918 	bl	800dec0 <SwitchClass>
 800ec90:	4604      	mov	r4, r0
            break;
 800ec92:	e22f      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800ec94:	7903      	ldrb	r3, [r0, #4]
 800ec96:	2b02      	cmp	r3, #2
 800ec98:	f000 8231 	beq.w	800f0fe <LoRaMacMibSetRequestConfirm+0x51a>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800ec9c:	4a75      	ldr	r2, [pc, #468]	@ (800ee74 <LoRaMacMibSetRequestConfirm+0x290>)
 800ec9e:	f882 312c 	strb.w	r3, [r2, #300]	@ 0x12c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eca2:	2400      	movs	r4, #0
 800eca4:	e226      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800eca6:	6840      	ldr	r0, [r0, #4]
 800eca8:	f004 fd24 	bl	80136f4 <SecureElementSetDevEui>
 800ecac:	4604      	mov	r4, r0
 800ecae:	2800      	cmp	r0, #0
 800ecb0:	f000 8220 	beq.w	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ecb4:	2403      	movs	r4, #3
 800ecb6:	e21d      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800ecb8:	6840      	ldr	r0, [r0, #4]
 800ecba:	f004 fd37 	bl	801372c <SecureElementSetJoinEui>
 800ecbe:	2800      	cmp	r0, #0
 800ecc0:	f040 8218 	bne.w	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ecc4:	4604      	mov	r4, r0
 800ecc6:	e215      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800ecc8:	7902      	ldrb	r2, [r0, #4]
 800ecca:	4b6a      	ldr	r3, [pc, #424]	@ (800ee74 <LoRaMacMibSetRequestConfirm+0x290>)
 800eccc:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ecd0:	2400      	movs	r4, #0
            break;
 800ecd2:	e20f      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800ecd4:	6842      	ldr	r2, [r0, #4]
 800ecd6:	4b67      	ldr	r3, [pc, #412]	@ (800ee74 <LoRaMacMibSetRequestConfirm+0x290>)
 800ecd8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ecdc:	2400      	movs	r4, #0
            break;
 800ecde:	e209      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 800ece0:	6841      	ldr	r1, [r0, #4]
 800ece2:	4b64      	ldr	r3, [pc, #400]	@ (800ee74 <LoRaMacMibSetRequestConfirm+0x290>)
 800ece4:	f893 012c 	ldrb.w	r0, [r3, #300]	@ 0x12c
 800ece8:	f004 fd3e 	bl	8013768 <SecureElementSetDevAddr>
 800ecec:	4604      	mov	r4, r0
 800ecee:	2800      	cmp	r0, #0
 800ecf0:	f040 8207 	bne.w	800f102 <LoRaMacMibSetRequestConfirm+0x51e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800ecf4:	686a      	ldr	r2, [r5, #4]
 800ecf6:	4b5f      	ldr	r3, [pc, #380]	@ (800ee74 <LoRaMacMibSetRequestConfirm+0x290>)
 800ecf8:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 800ecfc:	e1fa      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 800ecfe:	6841      	ldr	r1, [r0, #4]
 800ed00:	2900      	cmp	r1, #0
 800ed02:	f000 8200 	beq.w	800f106 <LoRaMacMibSetRequestConfirm+0x522>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800ed06:	2000      	movs	r0, #0
 800ed08:	f001 fa80 	bl	801020c <LoRaMacCryptoSetKey>
 800ed0c:	4604      	mov	r4, r0
 800ed0e:	2800      	cmp	r0, #0
 800ed10:	f000 81f0 	beq.w	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ed14:	2411      	movs	r4, #17
 800ed16:	e1ed      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 800ed18:	6841      	ldr	r1, [r0, #4]
 800ed1a:	2900      	cmp	r1, #0
 800ed1c:	f000 81f5 	beq.w	800f10a <LoRaMacMibSetRequestConfirm+0x526>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800ed20:	2001      	movs	r0, #1
 800ed22:	f001 fa73 	bl	801020c <LoRaMacCryptoSetKey>
 800ed26:	4604      	mov	r4, r0
 800ed28:	2800      	cmp	r0, #0
 800ed2a:	f000 81e3 	beq.w	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ed2e:	2411      	movs	r4, #17
 800ed30:	e1e0      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 800ed32:	6841      	ldr	r1, [r0, #4]
 800ed34:	2900      	cmp	r1, #0
 800ed36:	f000 81ea 	beq.w	800f10e <LoRaMacMibSetRequestConfirm+0x52a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800ed3a:	2008      	movs	r0, #8
 800ed3c:	f001 fa66 	bl	801020c <LoRaMacCryptoSetKey>
 800ed40:	4604      	mov	r4, r0
 800ed42:	2800      	cmp	r0, #0
 800ed44:	f000 81d6 	beq.w	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ed48:	2411      	movs	r4, #17
 800ed4a:	e1d3      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 800ed4c:	6841      	ldr	r1, [r0, #4]
 800ed4e:	2900      	cmp	r1, #0
 800ed50:	f000 81df 	beq.w	800f112 <LoRaMacMibSetRequestConfirm+0x52e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800ed54:	2009      	movs	r0, #9
 800ed56:	f001 fa59 	bl	801020c <LoRaMacCryptoSetKey>
 800ed5a:	4604      	mov	r4, r0
 800ed5c:	2800      	cmp	r0, #0
 800ed5e:	f000 81c9 	beq.w	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ed62:	2411      	movs	r4, #17
 800ed64:	e1c6      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 800ed66:	6841      	ldr	r1, [r0, #4]
 800ed68:	2900      	cmp	r1, #0
 800ed6a:	f000 81d4 	beq.w	800f116 <LoRaMacMibSetRequestConfirm+0x532>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800ed6e:	200c      	movs	r0, #12
 800ed70:	f001 fa4c 	bl	801020c <LoRaMacCryptoSetKey>
 800ed74:	4604      	mov	r4, r0
 800ed76:	2800      	cmp	r0, #0
 800ed78:	f000 81bc 	beq.w	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ed7c:	2411      	movs	r4, #17
 800ed7e:	e1b9      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
            break;
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 800ed80:	6841      	ldr	r1, [r0, #4]
 800ed82:	2900      	cmp	r1, #0
 800ed84:	f000 81c9 	beq.w	800f11a <LoRaMacMibSetRequestConfirm+0x536>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800ed88:	200d      	movs	r0, #13
 800ed8a:	f001 fa3f 	bl	801020c <LoRaMacCryptoSetKey>
 800ed8e:	4604      	mov	r4, r0
 800ed90:	2800      	cmp	r0, #0
 800ed92:	f000 81af 	beq.w	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ed96:	2411      	movs	r4, #17
 800ed98:	e1ac      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 800ed9a:	6841      	ldr	r1, [r0, #4]
 800ed9c:	2900      	cmp	r1, #0
 800ed9e:	f000 81be 	beq.w	800f11e <LoRaMacMibSetRequestConfirm+0x53a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800eda2:	200e      	movs	r0, #14
 800eda4:	f001 fa32 	bl	801020c <LoRaMacCryptoSetKey>
 800eda8:	4604      	mov	r4, r0
 800edaa:	2800      	cmp	r0, #0
 800edac:	f000 81a2 	beq.w	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800edb0:	2411      	movs	r4, #17
 800edb2:	e19f      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 800edb4:	6841      	ldr	r1, [r0, #4]
 800edb6:	2900      	cmp	r1, #0
 800edb8:	f000 81b3 	beq.w	800f122 <LoRaMacMibSetRequestConfirm+0x53e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800edbc:	200f      	movs	r0, #15
 800edbe:	f001 fa25 	bl	801020c <LoRaMacCryptoSetKey>
 800edc2:	4604      	mov	r4, r0
 800edc4:	2800      	cmp	r0, #0
 800edc6:	f000 8195 	beq.w	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800edca:	2411      	movs	r4, #17
 800edcc:	e192      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800edce:	7900      	ldrb	r0, [r0, #4]
 800edd0:	4b28      	ldr	r3, [pc, #160]	@ (800ee74 <LoRaMacMibSetRequestConfirm+0x290>)
 800edd2:	f883 0119 	strb.w	r0, [r3, #281]	@ 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800edd6:	4c28      	ldr	r4, [pc, #160]	@ (800ee78 <LoRaMacMibSetRequestConfirm+0x294>)
 800edd8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800edda:	4798      	blx	r3
            Radio.Sleep( );
 800eddc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800edde:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ede0:	2400      	movs	r4, #0
            break;
 800ede2:	e187      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800ede4:	7902      	ldrb	r2, [r0, #4]
 800ede6:	4b23      	ldr	r3, [pc, #140]	@ (800ee74 <LoRaMacMibSetRequestConfirm+0x290>)
 800ede8:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800edec:	2400      	movs	r4, #0
            break;
 800edee:	e181      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800edf0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800edf4:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800edf8:	4b1e      	ldr	r3, [pc, #120]	@ (800ee74 <LoRaMacMibSetRequestConfirm+0x290>)
 800edfa:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800edfe:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800ee02:	2207      	movs	r2, #7
 800ee04:	a901      	add	r1, sp, #4
 800ee06:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800ee0a:	f001 fc53 	bl	80106b4 <RegionVerify>
 800ee0e:	b908      	cbnz	r0, 800ee14 <LoRaMacMibSetRequestConfirm+0x230>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ee10:	2403      	movs	r4, #3
 800ee12:	e16f      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            else
            {
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800ee14:	686b      	ldr	r3, [r5, #4]
 800ee16:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800ee18:	2200      	movs	r2, #0
 800ee1a:	a901      	add	r1, sp, #4
 800ee1c:	4b15      	ldr	r3, [pc, #84]	@ (800ee74 <LoRaMacMibSetRequestConfirm+0x290>)
 800ee1e:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800ee22:	f001 fc47 	bl	80106b4 <RegionVerify>
 800ee26:	2800      	cmp	r0, #0
 800ee28:	f000 817d 	beq.w	800f126 <LoRaMacMibSetRequestConfirm+0x542>
                {
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
                }
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800ee2c:	4b13      	ldr	r3, [pc, #76]	@ (800ee7c <LoRaMacMibSetRequestConfirm+0x298>)
 800ee2e:	3504      	adds	r5, #4
 800ee30:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ee34:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ee38:	2400      	movs	r4, #0
 800ee3a:	e15b      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800ee3c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800ee40:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ee44:	4b0b      	ldr	r3, [pc, #44]	@ (800ee74 <LoRaMacMibSetRequestConfirm+0x290>)
 800ee46:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800ee4a:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800ee4e:	2207      	movs	r2, #7
 800ee50:	a901      	add	r1, sp, #4
 800ee52:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800ee56:	f001 fc2d 	bl	80106b4 <RegionVerify>
 800ee5a:	2800      	cmp	r0, #0
 800ee5c:	f000 8165 	beq.w	800f12a <LoRaMacMibSetRequestConfirm+0x546>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800ee60:	4b07      	ldr	r3, [pc, #28]	@ (800ee80 <LoRaMacMibSetRequestConfirm+0x29c>)
 800ee62:	3504      	adds	r5, #4
 800ee64:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ee68:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ee6c:	2400      	movs	r4, #0
 800ee6e:	e141      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
 800ee70:	20003560 	.word	0x20003560
 800ee74:	20008000 	.word	0x20008000
 800ee78:	080172ac 	.word	0x080172ac
 800ee7c:	2000806c 	.word	0x2000806c
 800ee80:	200080b4 	.word	0x200080b4
            }
            break;
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800ee84:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800ee88:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ee8c:	4bb1      	ldr	r3, [pc, #708]	@ (800f154 <LoRaMacMibSetRequestConfirm+0x570>)
 800ee8e:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800ee92:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800ee96:	2207      	movs	r2, #7
 800ee98:	a901      	add	r1, sp, #4
 800ee9a:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800ee9e:	f001 fc09 	bl	80106b4 <RegionVerify>
 800eea2:	2800      	cmp	r0, #0
 800eea4:	f000 8143 	beq.w	800f12e <LoRaMacMibSetRequestConfirm+0x54a>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800eea8:	4baa      	ldr	r3, [pc, #680]	@ (800f154 <LoRaMacMibSetRequestConfirm+0x570>)
 800eeaa:	f103 0274 	add.w	r2, r3, #116	@ 0x74
 800eeae:	3504      	adds	r5, #4
 800eeb0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800eeb4:	e882 0003 	stmia.w	r2, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800eeb8:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800eebc:	2b02      	cmp	r3, #2
 800eebe:	d001      	beq.n	800eec4 <LoRaMacMibSetRequestConfirm+0x2e0>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eec0:	2400      	movs	r4, #0
 800eec2:	e117      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800eec4:	f1a2 0374 	sub.w	r3, r2, #116	@ 0x74
 800eec8:	f893 412c 	ldrb.w	r4, [r3, #300]	@ 0x12c
 800eecc:	2c00      	cmp	r4, #0
 800eece:	f000 8111 	beq.w	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 800eed2:	4ba1      	ldr	r3, [pc, #644]	@ (800f158 <LoRaMacMibSetRequestConfirm+0x574>)
 800eed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eed6:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 800eed8:	f7fe fd38 	bl	800d94c <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eedc:	2400      	movs	r4, #0
 800eede:	e109      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800eee0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800eee4:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800eee8:	4b9a      	ldr	r3, [pc, #616]	@ (800f154 <LoRaMacMibSetRequestConfirm+0x570>)
 800eeea:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800eeee:	f88d 2005 	strb.w	r2, [sp, #5]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800eef2:	2207      	movs	r2, #7
 800eef4:	a901      	add	r1, sp, #4
 800eef6:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800eefa:	f001 fbdb 	bl	80106b4 <RegionVerify>
 800eefe:	2800      	cmp	r0, #0
 800ef00:	f000 8117 	beq.w	800f132 <LoRaMacMibSetRequestConfirm+0x54e>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800ef04:	4b95      	ldr	r3, [pc, #596]	@ (800f15c <LoRaMacMibSetRequestConfirm+0x578>)
 800ef06:	3504      	adds	r5, #4
 800ef08:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ef0c:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ef10:	2400      	movs	r4, #0
 800ef12:	e0ef      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800ef14:	6843      	ldr	r3, [r0, #4]
 800ef16:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800ef18:	2301      	movs	r3, #1
 800ef1a:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800ef1e:	a902      	add	r1, sp, #8
 800ef20:	4b8c      	ldr	r3, [pc, #560]	@ (800f154 <LoRaMacMibSetRequestConfirm+0x570>)
 800ef22:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800ef26:	f001 fbe3 	bl	80106f0 <RegionChanMaskSet>
 800ef2a:	2800      	cmp	r0, #0
 800ef2c:	f000 8103 	beq.w	800f136 <LoRaMacMibSetRequestConfirm+0x552>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ef30:	2400      	movs	r4, #0
 800ef32:	e0df      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800ef34:	6843      	ldr	r3, [r0, #4]
 800ef36:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800ef38:	2300      	movs	r3, #0
 800ef3a:	f88d 300c 	strb.w	r3, [sp, #12]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800ef3e:	a902      	add	r1, sp, #8
 800ef40:	4b84      	ldr	r3, [pc, #528]	@ (800f154 <LoRaMacMibSetRequestConfirm+0x570>)
 800ef42:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800ef46:	f001 fbd3 	bl	80106f0 <RegionChanMaskSet>
 800ef4a:	2800      	cmp	r0, #0
 800ef4c:	f000 80f5 	beq.w	800f13a <LoRaMacMibSetRequestConfirm+0x556>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ef50:	2400      	movs	r4, #0
 800ef52:	e0cf      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800ef54:	7902      	ldrb	r2, [r0, #4]
 800ef56:	1e53      	subs	r3, r2, #1
 800ef58:	b2db      	uxtb	r3, r3
 800ef5a:	2b0e      	cmp	r3, #14
 800ef5c:	f200 80ef 	bhi.w	800f13e <LoRaMacMibSetRequestConfirm+0x55a>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800ef60:	4b7c      	ldr	r3, [pc, #496]	@ (800f154 <LoRaMacMibSetRequestConfirm+0x570>)
 800ef62:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ef66:	2400      	movs	r4, #0
 800ef68:	e0c4      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800ef6a:	6842      	ldr	r2, [r0, #4]
 800ef6c:	4b79      	ldr	r3, [pc, #484]	@ (800f154 <LoRaMacMibSetRequestConfirm+0x570>)
 800ef6e:	655a      	str	r2, [r3, #84]	@ 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ef70:	2400      	movs	r4, #0
            break;
 800ef72:	e0bf      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800ef74:	6842      	ldr	r2, [r0, #4]
 800ef76:	4b77      	ldr	r3, [pc, #476]	@ (800f154 <LoRaMacMibSetRequestConfirm+0x570>)
 800ef78:	659a      	str	r2, [r3, #88]	@ 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ef7a:	2400      	movs	r4, #0
            break;
 800ef7c:	e0ba      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800ef7e:	6842      	ldr	r2, [r0, #4]
 800ef80:	4b74      	ldr	r3, [pc, #464]	@ (800f154 <LoRaMacMibSetRequestConfirm+0x570>)
 800ef82:	65da      	str	r2, [r3, #92]	@ 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ef84:	2400      	movs	r4, #0
            break;
 800ef86:	e0b5      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800ef88:	6842      	ldr	r2, [r0, #4]
 800ef8a:	4b72      	ldr	r3, [pc, #456]	@ (800f154 <LoRaMacMibSetRequestConfirm+0x570>)
 800ef8c:	661a      	str	r2, [r3, #96]	@ 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ef8e:	2400      	movs	r4, #0
            break;
 800ef90:	e0b0      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800ef92:	6842      	ldr	r2, [r0, #4]
 800ef94:	4b6f      	ldr	r3, [pc, #444]	@ (800f154 <LoRaMacMibSetRequestConfirm+0x570>)
 800ef96:	665a      	str	r2, [r3, #100]	@ 0x64
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ef98:	2400      	movs	r4, #0
            break;
 800ef9a:	e0ab      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800ef9c:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800efa0:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800efa4:	2206      	movs	r2, #6
 800efa6:	a901      	add	r1, sp, #4
 800efa8:	4b6a      	ldr	r3, [pc, #424]	@ (800f154 <LoRaMacMibSetRequestConfirm+0x570>)
 800efaa:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800efae:	f001 fb81 	bl	80106b4 <RegionVerify>
 800efb2:	2800      	cmp	r0, #0
 800efb4:	f000 80c5 	beq.w	800f142 <LoRaMacMibSetRequestConfirm+0x55e>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800efb8:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800efbc:	4b65      	ldr	r3, [pc, #404]	@ (800f154 <LoRaMacMibSetRequestConfirm+0x570>)
 800efbe:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800efc2:	2400      	movs	r4, #0
 800efc4:	e096      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800efc6:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800efca:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800efce:	4b61      	ldr	r3, [pc, #388]	@ (800f154 <LoRaMacMibSetRequestConfirm+0x570>)
 800efd0:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 800efd4:	f88d 2006 	strb.w	r2, [sp, #6]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800efd8:	2205      	movs	r2, #5
 800efda:	a901      	add	r1, sp, #4
 800efdc:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800efe0:	f001 fb68 	bl	80106b4 <RegionVerify>
 800efe4:	2800      	cmp	r0, #0
 800efe6:	f000 80ae 	beq.w	800f146 <LoRaMacMibSetRequestConfirm+0x562>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800efea:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800efee:	4b59      	ldr	r3, [pc, #356]	@ (800f154 <LoRaMacMibSetRequestConfirm+0x570>)
 800eff0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eff4:	2400      	movs	r4, #0
 800eff6:	e07d      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800eff8:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800effc:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800f000:	220a      	movs	r2, #10
 800f002:	a901      	add	r1, sp, #4
 800f004:	4b53      	ldr	r3, [pc, #332]	@ (800f154 <LoRaMacMibSetRequestConfirm+0x570>)
 800f006:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800f00a:	f001 fb53 	bl	80106b4 <RegionVerify>
 800f00e:	2800      	cmp	r0, #0
 800f010:	f000 809b 	beq.w	800f14a <LoRaMacMibSetRequestConfirm+0x566>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800f014:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800f018:	4b4e      	ldr	r3, [pc, #312]	@ (800f154 <LoRaMacMibSetRequestConfirm+0x570>)
 800f01a:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f01e:	2400      	movs	r4, #0
 800f020:	e068      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800f022:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800f026:	f88d 3004 	strb.w	r3, [sp, #4]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800f02a:	2209      	movs	r2, #9
 800f02c:	a901      	add	r1, sp, #4
 800f02e:	4b49      	ldr	r3, [pc, #292]	@ (800f154 <LoRaMacMibSetRequestConfirm+0x570>)
 800f030:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800f034:	f001 fb3e 	bl	80106b4 <RegionVerify>
 800f038:	2800      	cmp	r0, #0
 800f03a:	f000 8088 	beq.w	800f14e <LoRaMacMibSetRequestConfirm+0x56a>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800f03e:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800f042:	4b44      	ldr	r3, [pc, #272]	@ (800f154 <LoRaMacMibSetRequestConfirm+0x570>)
 800f044:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f048:	2400      	movs	r4, #0
 800f04a:	e053      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800f04c:	6842      	ldr	r2, [r0, #4]
 800f04e:	4b41      	ldr	r3, [pc, #260]	@ (800f154 <LoRaMacMibSetRequestConfirm+0x570>)
 800f050:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800f054:	64da      	str	r2, [r3, #76]	@ 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f056:	2400      	movs	r4, #0
            break;
 800f058:	e04c      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800f05a:	7902      	ldrb	r2, [r0, #4]
 800f05c:	4b3d      	ldr	r3, [pc, #244]	@ (800f154 <LoRaMacMibSetRequestConfirm+0x570>)
 800f05e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
 800f062:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f066:	2400      	movs	r4, #0
            break;
 800f068:	e044      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800f06a:	6842      	ldr	r2, [r0, #4]
 800f06c:	4b39      	ldr	r3, [pc, #228]	@ (800f154 <LoRaMacMibSetRequestConfirm+0x570>)
 800f06e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f072:	2400      	movs	r4, #0
            break;
 800f074:	e03e      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800f076:	6842      	ldr	r2, [r0, #4]
 800f078:	4b36      	ldr	r3, [pc, #216]	@ (800f154 <LoRaMacMibSetRequestConfirm+0x570>)
 800f07a:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f07e:	2400      	movs	r4, #0
            break;
 800f080:	e038      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 800f082:	f7fe fd69 	bl	800db58 <RestoreNvmData>
 800f086:	4604      	mov	r4, r0
            break;
 800f088:	e034      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800f08a:	7983      	ldrb	r3, [r0, #6]
 800f08c:	2b01      	cmp	r3, #1
 800f08e:	d901      	bls.n	800f094 <LoRaMacMibSetRequestConfirm+0x4b0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f090:	2403      	movs	r4, #3
 800f092:	e02f      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800f094:	6842      	ldr	r2, [r0, #4]
 800f096:	4b2f      	ldr	r3, [pc, #188]	@ (800f154 <LoRaMacMibSetRequestConfirm+0x570>)
 800f098:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800f09c:	6840      	ldr	r0, [r0, #4]
 800f09e:	f000 ff57 	bl	800ff50 <LoRaMacCryptoSetLrWanVersion>
 800f0a2:	4604      	mov	r4, r0
 800f0a4:	b330      	cbz	r0, 800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f0a6:	2411      	movs	r4, #17
 800f0a8:	e024      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
            }
            break;
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800f0aa:	6842      	ldr	r2, [r0, #4]
 800f0ac:	4b29      	ldr	r3, [pc, #164]	@ (800f154 <LoRaMacMibSetRequestConfirm+0x570>)
 800f0ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f0b2:	2400      	movs	r4, #0
            break;
 800f0b4:	e01e      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800f0b6:	8882      	ldrh	r2, [r0, #4]
 800f0b8:	4b26      	ldr	r3, [pc, #152]	@ (800f154 <LoRaMacMibSetRequestConfirm+0x570>)
 800f0ba:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f0be:	2400      	movs	r4, #0
            break;
 800f0c0:	e018      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800f0c2:	8882      	ldrh	r2, [r0, #4]
 800f0c4:	4b23      	ldr	r3, [pc, #140]	@ (800f154 <LoRaMacMibSetRequestConfirm+0x570>)
 800f0c6:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f0ca:	2400      	movs	r4, #0
            break;
 800f0cc:	e012      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800f0ce:	8882      	ldrh	r2, [r0, #4]
 800f0d0:	4b20      	ldr	r3, [pc, #128]	@ (800f154 <LoRaMacMibSetRequestConfirm+0x570>)
 800f0d2:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f0d6:	2400      	movs	r4, #0
            break;
 800f0d8:	e00c      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800f0da:	8882      	ldrh	r2, [r0, #4]
 800f0dc:	4b1d      	ldr	r3, [pc, #116]	@ (800f154 <LoRaMacMibSetRequestConfirm+0x570>)
 800f0de:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f0e2:	2400      	movs	r4, #0
            break;
 800f0e4:	e006      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
#endif
            break;
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800f0e6:	f000 fab5 	bl	800f654 <LoRaMacMibClassBSetRequestConfirm>
 800f0ea:	4604      	mov	r4, r0
            break;
 800f0ec:	e002      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f0ee:	2403      	movs	r4, #3
 800f0f0:	e000      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
        return LORAMAC_STATUS_BUSY;
 800f0f2:	2401      	movs	r4, #1
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
}
 800f0f4:	4620      	mov	r0, r4
 800f0f6:	b005      	add	sp, #20
 800f0f8:	bd30      	pop	{r4, r5, pc}
    switch( mibSet->Type )
 800f0fa:	2418      	movs	r4, #24
 800f0fc:	e7fa      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f0fe:	2403      	movs	r4, #3
 800f100:	e7f8      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f102:	2403      	movs	r4, #3
 800f104:	e7f6      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f106:	2403      	movs	r4, #3
 800f108:	e7f4      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f10a:	2403      	movs	r4, #3
 800f10c:	e7f2      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f10e:	2403      	movs	r4, #3
 800f110:	e7f0      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f112:	2403      	movs	r4, #3
 800f114:	e7ee      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f116:	2403      	movs	r4, #3
 800f118:	e7ec      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f11a:	2403      	movs	r4, #3
 800f11c:	e7ea      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f11e:	2403      	movs	r4, #3
 800f120:	e7e8      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f122:	2403      	movs	r4, #3
 800f124:	e7e6      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f126:	2403      	movs	r4, #3
 800f128:	e7e4      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f12a:	2403      	movs	r4, #3
 800f12c:	e7e2      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f12e:	2403      	movs	r4, #3
 800f130:	e7e0      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f132:	2403      	movs	r4, #3
 800f134:	e7de      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f136:	2403      	movs	r4, #3
 800f138:	e7dc      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f13a:	2403      	movs	r4, #3
 800f13c:	e7da      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f13e:	2403      	movs	r4, #3
 800f140:	e7d8      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f142:	2403      	movs	r4, #3
 800f144:	e7d6      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f146:	2403      	movs	r4, #3
 800f148:	e7d4      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f14a:	2403      	movs	r4, #3
 800f14c:	e7d2      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f14e:	2403      	movs	r4, #3
 800f150:	e7d0      	b.n	800f0f4 <LoRaMacMibSetRequestConfirm+0x510>
 800f152:	bf00      	nop
 800f154:	20008000 	.word	0x20008000
 800f158:	080172ac 	.word	0x080172ac
 800f15c:	200080bc 	.word	0x200080bc

0800f160 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800f160:	b570      	push	{r4, r5, r6, lr}
 800f162:	b084      	sub	sp, #16
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800f164:	2300      	movs	r3, #0
 800f166:	f8ad 3008 	strh.w	r3, [sp, #8]

    if( mlmeRequest == NULL )
 800f16a:	2800      	cmp	r0, #0
 800f16c:	f000 80d0 	beq.w	800f310 <LoRaMacMlmeRequest+0x1b0>
 800f170:	4605      	mov	r5, r0
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800f172:	f7ff f8d9 	bl	800e328 <LoRaMacIsBusy>
 800f176:	b118      	cbz	r0, 800f180 <LoRaMacMlmeRequest+0x20>
    {
        return LORAMAC_STATUS_BUSY;
 800f178:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800f17a:	4620      	mov	r0, r4
 800f17c:	b004      	add	sp, #16
 800f17e:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800f180:	f000 fd1a 	bl	800fbb8 <LoRaMacConfirmQueueIsFull>
 800f184:	b108      	cbz	r0, 800f18a <LoRaMacMlmeRequest+0x2a>
        return LORAMAC_STATUS_BUSY;
 800f186:	2401      	movs	r4, #1
 800f188:	e7f7      	b.n	800f17a <LoRaMacMlmeRequest+0x1a>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800f18a:	f000 fd0f 	bl	800fbac <LoRaMacConfirmQueueGetCnt>
 800f18e:	b1f8      	cbz	r0, 800f1d0 <LoRaMacMlmeRequest+0x70>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f190:	4b60      	ldr	r3, [pc, #384]	@ (800f314 <LoRaMacMlmeRequest+0x1b4>)
 800f192:	2101      	movs	r1, #1
 800f194:	f883 1449 	strb.w	r1, [r3, #1097]	@ 0x449
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800f198:	f893 2481 	ldrb.w	r2, [r3, #1153]	@ 0x481
 800f19c:	f042 0204 	orr.w	r2, r2, #4
 800f1a0:	f883 2481 	strb.w	r2, [r3, #1153]	@ 0x481
    queueElement.Request = mlmeRequest->Type;
 800f1a4:	782b      	ldrb	r3, [r5, #0]
 800f1a6:	f88d 300c 	strb.w	r3, [sp, #12]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f1aa:	f88d 100d 	strb.w	r1, [sp, #13]
    queueElement.RestrictCommonReadyToHandle = false;
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	f88d 200f 	strb.w	r2, [sp, #15]
    switch( mlmeRequest->Type )
 800f1b4:	461c      	mov	r4, r3
 800f1b6:	3b01      	subs	r3, #1
 800f1b8:	2b0d      	cmp	r3, #13
 800f1ba:	f200 808f 	bhi.w	800f2dc <LoRaMacMlmeRequest+0x17c>
 800f1be:	e8df f003 	tbb	[pc, r3]
 800f1c2:	8d0d      	.short	0x8d0d
 800f1c4:	42388d8d 	.word	0x42388d8d
 800f1c8:	508d8d47 	.word	0x508d8d47
 800f1cc:	755f7e8d 	.word	0x755f7e8d
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800f1d0:	2214      	movs	r2, #20
 800f1d2:	2100      	movs	r1, #0
 800f1d4:	4850      	ldr	r0, [pc, #320]	@ (800f318 <LoRaMacMlmeRequest+0x1b8>)
 800f1d6:	f004 fbee 	bl	80139b6 <memset1>
 800f1da:	e7d9      	b.n	800f190 <LoRaMacMlmeRequest+0x30>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800f1dc:	4b4d      	ldr	r3, [pc, #308]	@ (800f314 <LoRaMacMlmeRequest+0x1b4>)
 800f1de:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f1e2:	f013 0f20 	tst.w	r3, #32
 800f1e6:	d1c8      	bne.n	800f17a <LoRaMacMlmeRequest+0x1a>
            ResetMacParameters( false );
 800f1e8:	2000      	movs	r0, #0
 800f1ea:	f7fe fdad 	bl	800dd48 <ResetMacParameters>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800f1ee:	4c4b      	ldr	r4, [pc, #300]	@ (800f31c <LoRaMacMlmeRequest+0x1bc>)
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800f1f6:	f894 0048 	ldrb.w	r0, [r4, #72]	@ 0x48
 800f1fa:	f001 fb17 	bl	801082c <RegionAlternateDr>
 800f1fe:	f884 0039 	strb.w	r0, [r4, #57]	@ 0x39
            Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 800f202:	f995 3006 	ldrsb.w	r3, [r5, #6]
 800f206:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800f20a:	2307      	movs	r3, #7
 800f20c:	f88d 300d 	strb.w	r3, [sp, #13]
            status = SendReJoinReq( JOIN_REQ );
 800f210:	20ff      	movs	r0, #255	@ 0xff
 800f212:	f7fe fee7 	bl	800dfe4 <SendReJoinReq>
            if( status != LORAMAC_STATUS_OK )
 800f216:	4604      	mov	r4, r0
 800f218:	2800      	cmp	r0, #0
 800f21a:	d060      	beq.n	800f2de <LoRaMacMlmeRequest+0x17e>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800f21c:	4e3f      	ldr	r6, [pc, #252]	@ (800f31c <LoRaMacMlmeRequest+0x1bc>)
 800f21e:	2201      	movs	r2, #1
 800f220:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800f224:	f896 0048 	ldrb.w	r0, [r6, #72]	@ 0x48
 800f228:	f001 fb00 	bl	801082c <RegionAlternateDr>
 800f22c:	f886 0039 	strb.w	r0, [r6, #57]	@ 0x39
 800f230:	e055      	b.n	800f2de <LoRaMacMlmeRequest+0x17e>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800f232:	2200      	movs	r2, #0
 800f234:	a902      	add	r1, sp, #8
 800f236:	2002      	movs	r0, #2
 800f238:	f000 faac 	bl	800f794 <LoRaMacCommandsAddCmd>
 800f23c:	4604      	mov	r4, r0
 800f23e:	2800      	cmp	r0, #0
 800f240:	d04d      	beq.n	800f2de <LoRaMacMlmeRequest+0x17e>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f242:	2413      	movs	r4, #19
 800f244:	e04b      	b.n	800f2de <LoRaMacMlmeRequest+0x17e>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800f246:	88a8      	ldrh	r0, [r5, #4]
 800f248:	f7fe feee 	bl	800e028 <SetTxContinuousWave>
 800f24c:	4604      	mov	r4, r0
            break;
 800f24e:	e046      	b.n	800f2de <LoRaMacMlmeRequest+0x17e>
            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800f250:	f995 200c 	ldrsb.w	r2, [r5, #12]
 800f254:	b2d2      	uxtb	r2, r2
 800f256:	68a9      	ldr	r1, [r5, #8]
 800f258:	88a8      	ldrh	r0, [r5, #4]
 800f25a:	f7fc ff55 	bl	800c108 <SetTxContinuousWave1>
 800f25e:	4604      	mov	r4, r0
            break;
 800f260:	e03d      	b.n	800f2de <LoRaMacMlmeRequest+0x17e>
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 800f262:	a901      	add	r1, sp, #4
 800f264:	200d      	movs	r0, #13
 800f266:	f000 fae1 	bl	800f82c <LoRaMacCommandsGetCmd>
 800f26a:	4604      	mov	r4, r0
 800f26c:	b3b8      	cbz	r0, 800f2de <LoRaMacMlmeRequest+0x17e>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800f26e:	2200      	movs	r2, #0
 800f270:	a902      	add	r1, sp, #8
 800f272:	200d      	movs	r0, #13
 800f274:	f000 fa8e 	bl	800f794 <LoRaMacCommandsAddCmd>
 800f278:	4604      	mov	r4, r0
 800f27a:	b380      	cbz	r0, 800f2de <LoRaMacMlmeRequest+0x17e>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f27c:	2413      	movs	r4, #19
            break;
 800f27e:	e02e      	b.n	800f2de <LoRaMacMlmeRequest+0x17e>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800f280:	4b26      	ldr	r3, [pc, #152]	@ (800f31c <LoRaMacMlmeRequest+0x1bc>)
 800f282:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f286:	b10b      	cbz	r3, 800f28c <LoRaMacMlmeRequest+0x12c>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f288:	2402      	movs	r4, #2
 800f28a:	e028      	b.n	800f2de <LoRaMacMlmeRequest+0x17e>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800f28c:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800f28e:	f004 0007 	and.w	r0, r4, #7
 800f292:	f000 f9d8 	bl	800f646 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800f296:	f88d 4008 	strb.w	r4, [sp, #8]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800f29a:	2201      	movs	r2, #1
 800f29c:	a902      	add	r1, sp, #8
 800f29e:	2010      	movs	r0, #16
 800f2a0:	f000 fa78 	bl	800f794 <LoRaMacCommandsAddCmd>
 800f2a4:	4604      	mov	r4, r0
 800f2a6:	b1d0      	cbz	r0, 800f2de <LoRaMacMlmeRequest+0x17e>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f2a8:	2413      	movs	r4, #19
 800f2aa:	e018      	b.n	800f2de <LoRaMacMlmeRequest+0x17e>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	a902      	add	r1, sp, #8
 800f2b0:	2012      	movs	r0, #18
 800f2b2:	f000 fa6f 	bl	800f794 <LoRaMacCommandsAddCmd>
 800f2b6:	4604      	mov	r4, r0
 800f2b8:	b188      	cbz	r0, 800f2de <LoRaMacMlmeRequest+0x17e>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f2ba:	2413      	movs	r4, #19
 800f2bc:	e00f      	b.n	800f2de <LoRaMacMlmeRequest+0x17e>
            queueElement.RestrictCommonReadyToHandle = true;
 800f2be:	2301      	movs	r3, #1
 800f2c0:	f88d 300f 	strb.w	r3, [sp, #15]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800f2c4:	f000 f9b0 	bl	800f628 <LoRaMacClassBIsAcquisitionInProgress>
 800f2c8:	b108      	cbz	r0, 800f2ce <LoRaMacMlmeRequest+0x16e>
                status = LORAMAC_STATUS_BUSY;
 800f2ca:	2401      	movs	r4, #1
 800f2cc:	e007      	b.n	800f2de <LoRaMacMlmeRequest+0x17e>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800f2ce:	f000 f9a8 	bl	800f622 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800f2d2:	2000      	movs	r0, #0
 800f2d4:	f000 f9aa 	bl	800f62c <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800f2d8:	2400      	movs	r4, #0
 800f2da:	e000      	b.n	800f2de <LoRaMacMlmeRequest+0x17e>
    switch( mlmeRequest->Type )
 800f2dc:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800f2de:	4b0d      	ldr	r3, [pc, #52]	@ (800f314 <LoRaMacMlmeRequest+0x1b4>)
 800f2e0:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 800f2e4:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800f2e6:	b17c      	cbz	r4, 800f308 <LoRaMacMlmeRequest+0x1a8>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800f2e8:	f000 fc60 	bl	800fbac <LoRaMacConfirmQueueGetCnt>
 800f2ec:	2800      	cmp	r0, #0
 800f2ee:	f47f af44 	bne.w	800f17a <LoRaMacMlmeRequest+0x1a>
            MacCtx.NodeAckRequested = false;
 800f2f2:	4b08      	ldr	r3, [pc, #32]	@ (800f314 <LoRaMacMlmeRequest+0x1b4>)
 800f2f4:	2100      	movs	r1, #0
 800f2f6:	f883 1410 	strb.w	r1, [r3, #1040]	@ 0x410
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800f2fa:	f893 2481 	ldrb.w	r2, [r3, #1153]	@ 0x481
 800f2fe:	f361 0282 	bfi	r2, r1, #2, #1
 800f302:	f883 2481 	strb.w	r2, [r3, #1153]	@ 0x481
 800f306:	e738      	b.n	800f17a <LoRaMacMlmeRequest+0x1a>
        LoRaMacConfirmQueueAdd( &queueElement );
 800f308:	a803      	add	r0, sp, #12
 800f30a:	f000 fb85 	bl	800fa18 <LoRaMacConfirmQueueAdd>
 800f30e:	e734      	b.n	800f17a <LoRaMacMlmeRequest+0x1a>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f310:	2403      	movs	r4, #3
 800f312:	e732      	b.n	800f17a <LoRaMacMlmeRequest+0x1a>
 800f314:	20003560 	.word	0x20003560
 800f318:	200039a8 	.word	0x200039a8
 800f31c:	20008000 	.word	0x20008000

0800f320 <LoRaMacMcpsRequest>:
    void* fBuffer = NULL;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800f320:	2800      	cmp	r0, #0
 800f322:	f000 80b0 	beq.w	800f486 <LoRaMacMcpsRequest+0x166>
{
 800f326:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f32a:	b088      	sub	sp, #32
 800f32c:	460d      	mov	r5, r1
 800f32e:	f04f 0800 	mov.w	r8, #0
 800f332:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 800f334:	f7fe fff8 	bl	800e328 <LoRaMacIsBusy>
 800f338:	4606      	mov	r6, r0
 800f33a:	b118      	cbz	r0, 800f344 <LoRaMacMcpsRequest+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 800f33c:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800f33e:	b008      	add	sp, #32
 800f340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    macHdr.Value = 0;
 800f344:	4641      	mov	r1, r8
 800f346:	f88d 8010 	strb.w	r8, [sp, #16]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800f34a:	4f51      	ldr	r7, [pc, #324]	@ (800f490 <LoRaMacMcpsRequest+0x170>)
 800f34c:	2214      	movs	r2, #20
 800f34e:	4638      	mov	r0, r7
 800f350:	f004 fb31 	bl	80139b6 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f354:	2301      	movs	r3, #1
 800f356:	707b      	strb	r3, [r7, #1]
    MacCtx.AckTimeoutRetriesCounter = 1;
 800f358:	f807 3c26 	strb.w	r3, [r7, #-38]
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f35c:	f2a7 4734 	subw	r7, r7, #1076	@ 0x434
    switch( mcpsRequest->Type )
 800f360:	7823      	ldrb	r3, [r4, #0]
 800f362:	2b01      	cmp	r3, #1
 800f364:	d059      	beq.n	800f41a <LoRaMacMcpsRequest+0xfa>
 800f366:	2b03      	cmp	r3, #3
 800f368:	d06f      	beq.n	800f44a <LoRaMacMcpsRequest+0x12a>
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d042      	beq.n	800f3f4 <LoRaMacMcpsRequest+0xd4>
 800f36e:	2700      	movs	r7, #0
 800f370:	46ba      	mov	sl, r7
 800f372:	46b9      	mov	r9, r7
    getPhy.Attribute = PHY_MIN_TX_DR;
 800f374:	2302      	movs	r3, #2
 800f376:	f88d 3018 	strb.w	r3, [sp, #24]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f37a:	4b46      	ldr	r3, [pc, #280]	@ (800f494 <LoRaMacMcpsRequest+0x174>)
 800f37c:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 800f380:	f88d 201a 	strb.w	r2, [sp, #26]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f384:	a906      	add	r1, sp, #24
 800f386:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800f38a:	f001 f95f 	bl	801064c <RegionGetPhyParam>
 800f38e:	9005      	str	r0, [sp, #20]
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800f390:	b240      	sxtb	r0, r0
 800f392:	42b8      	cmp	r0, r7
 800f394:	bfb8      	it	lt
 800f396:	4638      	movlt	r0, r7
    if( readyToSend == true )
 800f398:	2e00      	cmp	r6, #0
 800f39a:	d06e      	beq.n	800f47a <LoRaMacMcpsRequest+0x15a>
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 800f39c:	4b3d      	ldr	r3, [pc, #244]	@ (800f494 <LoRaMacMcpsRequest+0x174>)
 800f39e:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800f3a2:	b99b      	cbnz	r3, 800f3cc <LoRaMacMcpsRequest+0xac>
            verify.DatarateParams.Datarate = datarate;
 800f3a4:	f88d 000c 	strb.w	r0, [sp, #12]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f3a8:	4b3a      	ldr	r3, [pc, #232]	@ (800f494 <LoRaMacMcpsRequest+0x174>)
 800f3aa:	f893 207c 	ldrb.w	r2, [r3, #124]	@ 0x7c
 800f3ae:	f88d 200e 	strb.w	r2, [sp, #14]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800f3b2:	2205      	movs	r2, #5
 800f3b4:	a903      	add	r1, sp, #12
 800f3b6:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800f3ba:	f001 f97b 	bl	80106b4 <RegionVerify>
 800f3be:	2800      	cmp	r0, #0
 800f3c0:	d063      	beq.n	800f48a <LoRaMacMcpsRequest+0x16a>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800f3c2:	f99d 200c 	ldrsb.w	r2, [sp, #12]
 800f3c6:	4b33      	ldr	r3, [pc, #204]	@ (800f494 <LoRaMacMcpsRequest+0x174>)
 800f3c8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 800f3cc:	9500      	str	r5, [sp, #0]
 800f3ce:	4643      	mov	r3, r8
 800f3d0:	4652      	mov	r2, sl
 800f3d2:	4649      	mov	r1, r9
 800f3d4:	a804      	add	r0, sp, #16
 800f3d6:	f7fe ff1b 	bl	800e210 <Send>
        if( status == LORAMAC_STATUS_OK )
 800f3da:	2800      	cmp	r0, #0
 800f3dc:	d148      	bne.n	800f470 <LoRaMacMcpsRequest+0x150>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800f3de:	7822      	ldrb	r2, [r4, #0]
 800f3e0:	4b2d      	ldr	r3, [pc, #180]	@ (800f498 <LoRaMacMcpsRequest+0x178>)
 800f3e2:	f883 2434 	strb.w	r2, [r3, #1076]	@ 0x434
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800f3e6:	f893 2481 	ldrb.w	r2, [r3, #1153]	@ 0x481
 800f3ea:	f042 0201 	orr.w	r2, r2, #1
 800f3ee:	f883 2481 	strb.w	r2, [r3, #1153]	@ 0x481
 800f3f2:	e043      	b.n	800f47c <LoRaMacMcpsRequest+0x15c>
            MacCtx.AckTimeoutRetries = 1;
 800f3f4:	2601      	movs	r6, #1
 800f3f6:	f887 640d 	strb.w	r6, [r7, #1037]	@ 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800f3fa:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800f3fe:	2202      	movs	r2, #2
 800f400:	f362 1347 	bfi	r3, r2, #5, #3
 800f404:	f88d 3010 	strb.w	r3, [sp, #16]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 800f408:	f894 9004 	ldrb.w	r9, [r4, #4]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 800f40c:	f8d4 a008 	ldr.w	sl, [r4, #8]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 800f410:	f8b4 800c 	ldrh.w	r8, [r4, #12]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 800f414:	f994 700e 	ldrsb.w	r7, [r4, #14]
            break;
 800f418:	e7ac      	b.n	800f374 <LoRaMacMcpsRequest+0x54>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 800f41a:	7be3      	ldrb	r3, [r4, #15]
 800f41c:	2b08      	cmp	r3, #8
 800f41e:	bf28      	it	cs
 800f420:	2308      	movcs	r3, #8
 800f422:	4a1d      	ldr	r2, [pc, #116]	@ (800f498 <LoRaMacMcpsRequest+0x178>)
 800f424:	f882 340d 	strb.w	r3, [r2, #1037]	@ 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800f428:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800f42c:	2204      	movs	r2, #4
 800f42e:	f362 1347 	bfi	r3, r2, #5, #3
 800f432:	f88d 3010 	strb.w	r3, [sp, #16]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800f436:	f894 9004 	ldrb.w	r9, [r4, #4]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800f43a:	f8d4 a008 	ldr.w	sl, [r4, #8]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800f43e:	f8b4 800c 	ldrh.w	r8, [r4, #12]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800f442:	f994 700e 	ldrsb.w	r7, [r4, #14]
            readyToSend = true;
 800f446:	2601      	movs	r6, #1
            break;
 800f448:	e794      	b.n	800f374 <LoRaMacMcpsRequest+0x54>
            MacCtx.AckTimeoutRetries = 1;
 800f44a:	2601      	movs	r6, #1
 800f44c:	4b12      	ldr	r3, [pc, #72]	@ (800f498 <LoRaMacMcpsRequest+0x178>)
 800f44e:	f883 640d 	strb.w	r6, [r3, #1037]	@ 0x40d
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800f452:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800f456:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 800f45a:	f88d 3010 	strb.w	r3, [sp, #16]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800f45e:	f8d4 a004 	ldr.w	sl, [r4, #4]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800f462:	f8b4 8008 	ldrh.w	r8, [r4, #8]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800f466:	f994 700a 	ldrsb.w	r7, [r4, #10]
    uint8_t fPort = 0;
 800f46a:	f04f 0900 	mov.w	r9, #0
            break;
 800f46e:	e781      	b.n	800f374 <LoRaMacMcpsRequest+0x54>
            MacCtx.NodeAckRequested = false;
 800f470:	4b09      	ldr	r3, [pc, #36]	@ (800f498 <LoRaMacMcpsRequest+0x178>)
 800f472:	2200      	movs	r2, #0
 800f474:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
 800f478:	e000      	b.n	800f47c <LoRaMacMcpsRequest+0x15c>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f47a:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800f47c:	4b06      	ldr	r3, [pc, #24]	@ (800f498 <LoRaMacMcpsRequest+0x178>)
 800f47e:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 800f482:	6123      	str	r3, [r4, #16]
    return status;
 800f484:	e75b      	b.n	800f33e <LoRaMacMcpsRequest+0x1e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f486:	2003      	movs	r0, #3
}
 800f488:	4770      	bx	lr
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800f48a:	2003      	movs	r0, #3
 800f48c:	e757      	b.n	800f33e <LoRaMacMcpsRequest+0x1e>
 800f48e:	bf00      	nop
 800f490:	20003994 	.word	0x20003994
 800f494:	20008000 	.word	0x20008000
 800f498:	20003560 	.word	0x20003560

0800f49c <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800f49c:	b510      	push	{r4, lr}
 800f49e:	b082      	sub	sp, #8
 800f4a0:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800f4a2:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800f4a6:	220f      	movs	r2, #15
 800f4a8:	a901      	add	r1, sp, #4
 800f4aa:	4b09      	ldr	r3, [pc, #36]	@ (800f4d0 <LoRaMacTestSetDutyCycleOn+0x34>)
 800f4ac:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800f4b0:	f001 f900 	bl	80106b4 <RegionVerify>
 800f4b4:	b148      	cbz	r0, 800f4ca <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800f4b6:	4b06      	ldr	r3, [pc, #24]	@ (800f4d0 <LoRaMacTestSetDutyCycleOn+0x34>)
 800f4b8:	f883 411c 	strb.w	r4, [r3, #284]	@ 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800f4bc:	4a05      	ldr	r2, [pc, #20]	@ (800f4d4 <LoRaMacTestSetDutyCycleOn+0x38>)
 800f4be:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800f4c2:	f043 0320 	orr.w	r3, r3, #32
 800f4c6:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    }
}
 800f4ca:	b002      	add	sp, #8
 800f4cc:	bd10      	pop	{r4, pc}
 800f4ce:	bf00      	nop
 800f4d0:	20008000 	.word	0x20008000
 800f4d4:	20003560 	.word	0x20003560

0800f4d8 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 800f4d8:	b538      	push	{r3, r4, r5, lr}
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 800f4da:	f7ff f975 	bl	800e7c8 <LoRaMacStop>
 800f4de:	b110      	cbz	r0, 800f4e6 <LoRaMacDeInitialization+0xe>
        // Return success
        return LORAMAC_STATUS_OK;
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 800f4e0:	2401      	movs	r4, #1
    }
}
 800f4e2:	4620      	mov	r0, r4
 800f4e4:	bd38      	pop	{r3, r4, r5, pc}
 800f4e6:	4604      	mov	r4, r0
        TimerStop( &MacCtx.TxDelayedTimer );
 800f4e8:	4d0c      	ldr	r5, [pc, #48]	@ (800f51c <LoRaMacDeInitialization+0x44>)
 800f4ea:	4628      	mov	r0, r5
 800f4ec:	f006 fba4 	bl	8015c38 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 800f4f0:	f105 0018 	add.w	r0, r5, #24
 800f4f4:	f006 fba0 	bl	8015c38 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 800f4f8:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 800f4fc:	f006 fb9c 	bl	8015c38 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.AckTimeoutTimer );
 800f500:	f105 008c 	add.w	r0, r5, #140	@ 0x8c
 800f504:	f006 fb98 	bl	8015c38 <UTIL_TIMER_Stop>
        LoRaMacClassBHaltBeaconing( );
 800f508:	f000 f89e 	bl	800f648 <LoRaMacClassBHaltBeaconing>
        ResetMacParameters( false );
 800f50c:	2000      	movs	r0, #0
 800f50e:	f7fe fc1b 	bl	800dd48 <ResetMacParameters>
        Radio.Sleep( );
 800f512:	4b03      	ldr	r3, [pc, #12]	@ (800f520 <LoRaMacDeInitialization+0x48>)
 800f514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f516:	4798      	blx	r3
        return LORAMAC_STATUS_OK;
 800f518:	e7e3      	b.n	800f4e2 <LoRaMacDeInitialization+0xa>
 800f51a:	bf00      	nop
 800f51c:	200038c8 	.word	0x200038c8
 800f520:	080172ac 	.word	0x080172ac

0800f524 <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800f524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f528:	b089      	sub	sp, #36	@ 0x24
 800f52a:	460f      	mov	r7, r1
 800f52c:	4616      	mov	r6, r2
 800f52e:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800f530:	f990 9010 	ldrsb.w	r9, [r0, #16]
    int8_t txPower = adrNext->TxPower;
 800f534:	f990 b011 	ldrsb.w	fp, [r0, #17]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800f538:	6883      	ldr	r3, [r0, #8]
 800f53a:	602b      	str	r3, [r5, #0]

    if( adrNext->AdrEnabled == true )
 800f53c:	f890 8005 	ldrb.w	r8, [r0, #5]
 800f540:	f1b8 0f00 	cmp.w	r8, #0
 800f544:	d107      	bne.n	800f556 <CalcNextV10X+0x32>
                }
            }
        }
    }

    *drOut = datarate;
 800f546:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800f54a:	f886 b000 	strb.w	fp, [r6]
    return adrAckReq;
}
 800f54e:	4640      	mov	r0, r8
 800f550:	b009      	add	sp, #36	@ 0x24
 800f552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f556:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800f558:	2302      	movs	r3, #2
 800f55a:	f88d 3018 	strb.w	r3, [sp, #24]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800f55e:	7c83      	ldrb	r3, [r0, #18]
 800f560:	f88d 301a 	strb.w	r3, [sp, #26]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800f564:	a906      	add	r1, sp, #24
 800f566:	7cc0      	ldrb	r0, [r0, #19]
 800f568:	f001 f870 	bl	801064c <RegionGetPhyParam>
 800f56c:	9005      	str	r0, [sp, #20]
        minTxDatarate = phyParam.Value;
 800f56e:	fa4f fa80 	sxtb.w	sl, r0
        datarate = MAX( datarate, minTxDatarate );
 800f572:	464a      	mov	r2, r9
 800f574:	45d1      	cmp	r9, sl
 800f576:	bfb8      	it	lt
 800f578:	4652      	movlt	r2, sl
 800f57a:	9201      	str	r2, [sp, #4]
        if( datarate == minTxDatarate )
 800f57c:	45d1      	cmp	r9, sl
 800f57e:	dc04      	bgt.n	800f58a <CalcNextV10X+0x66>
            *adrAckCounter = 0;
 800f580:	2300      	movs	r3, #0
 800f582:	602b      	str	r3, [r5, #0]
        datarate = MAX( datarate, minTxDatarate );
 800f584:	4691      	mov	r9, r2
            adrAckReq = false;
 800f586:	4698      	mov	r8, r3
 800f588:	e7dd      	b.n	800f546 <CalcNextV10X+0x22>
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800f58a:	68a2      	ldr	r2, [r4, #8]
 800f58c:	89a3      	ldrh	r3, [r4, #12]
 800f58e:	429a      	cmp	r2, r3
 800f590:	d201      	bcs.n	800f596 <CalcNextV10X+0x72>
                adrAckReq = false;
 800f592:	f04f 0800 	mov.w	r8, #0
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800f596:	89e1      	ldrh	r1, [r4, #14]
 800f598:	440b      	add	r3, r1
 800f59a:	429a      	cmp	r2, r3
 800f59c:	d202      	bcs.n	800f5a4 <CalcNextV10X+0x80>
        datarate = MAX( datarate, minTxDatarate );
 800f59e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f5a2:	e7d0      	b.n	800f546 <CalcNextV10X+0x22>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800f5a4:	2308      	movs	r3, #8
 800f5a6:	f88d 3018 	strb.w	r3, [sp, #24]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800f5aa:	a906      	add	r1, sp, #24
 800f5ac:	7ce0      	ldrb	r0, [r4, #19]
 800f5ae:	f001 f84d 	bl	801064c <RegionGetPhyParam>
 800f5b2:	9005      	str	r0, [sp, #20]
                txPower = phyParam.Value;
 800f5b4:	fa4f fb80 	sxtb.w	fp, r0
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800f5b8:	68a3      	ldr	r3, [r4, #8]
 800f5ba:	89e2      	ldrh	r2, [r4, #14]
 800f5bc:	fbb3 f1f2 	udiv	r1, r3, r2
 800f5c0:	fb02 3311 	mls	r3, r2, r1, r3
 800f5c4:	2b01      	cmp	r3, #1
 800f5c6:	d002      	beq.n	800f5ce <CalcNextV10X+0xaa>
        datarate = MAX( datarate, minTxDatarate );
 800f5c8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f5cc:	e7bb      	b.n	800f546 <CalcNextV10X+0x22>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800f5ce:	2322      	movs	r3, #34	@ 0x22
 800f5d0:	f88d 3018 	strb.w	r3, [sp, #24]
                    getPhy.Datarate = datarate;
 800f5d4:	9b01      	ldr	r3, [sp, #4]
 800f5d6:	f88d 3019 	strb.w	r3, [sp, #25]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800f5da:	7ca3      	ldrb	r3, [r4, #18]
 800f5dc:	f88d 301a 	strb.w	r3, [sp, #26]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800f5e0:	a906      	add	r1, sp, #24
 800f5e2:	7ce0      	ldrb	r0, [r4, #19]
 800f5e4:	f001 f832 	bl	801064c <RegionGetPhyParam>
 800f5e8:	9005      	str	r0, [sp, #20]
                    datarate = phyParam.Value;
 800f5ea:	fa4f f980 	sxtb.w	r9, r0
                    if( datarate == minTxDatarate )
 800f5ee:	45ca      	cmp	sl, r9
 800f5f0:	d1a9      	bne.n	800f546 <CalcNextV10X+0x22>
                        if( adrNext->UpdateChanMask == true )
 800f5f2:	f894 8004 	ldrb.w	r8, [r4, #4]
 800f5f6:	f1b8 0f00 	cmp.w	r8, #0
 800f5fa:	d0a4      	beq.n	800f546 <CalcNextV10X+0x22>
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800f5fc:	2302      	movs	r3, #2
 800f5fe:	f88d 3010 	strb.w	r3, [sp, #16]
                            RegionInitDefaults( adrNext->Region, &params );
 800f602:	a902      	add	r1, sp, #8
 800f604:	7ce0      	ldrb	r0, [r4, #19]
 800f606:	f001 f847 	bl	8010698 <RegionInitDefaults>
                        adrAckReq = false;
 800f60a:	f04f 0800 	mov.w	r8, #0
 800f60e:	e79a      	b.n	800f546 <CalcNextV10X+0x22>

0800f610 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800f610:	b510      	push	{r4, lr}
    if( adrNext->Version.Fields.Minor == 0 )
 800f612:	7884      	ldrb	r4, [r0, #2]
 800f614:	b10c      	cbz	r4, 800f61a <LoRaMacAdrCalcNext+0xa>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
 800f616:	2000      	movs	r0, #0
}
 800f618:	bd10      	pop	{r4, pc}
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 800f61a:	f7ff ff83 	bl	800f524 <CalcNextV10X>
 800f61e:	e7fb      	b.n	800f618 <LoRaMacAdrCalcNext+0x8>

0800f620 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f620:	4770      	bx	lr

0800f622 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f622:	4770      	bx	lr

0800f624 <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f624:	4770      	bx	lr

0800f626 <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f626:	4770      	bx	lr

0800f628 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f628:	2000      	movs	r0, #0
 800f62a:	4770      	bx	lr

0800f62c <LoRaMacClassBBeaconTimerEvent>:
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f62c:	4770      	bx	lr

0800f62e <LoRaMacClassBPingSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f62e:	4770      	bx	lr

0800f630 <LoRaMacClassBMulticastSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f630:	4770      	bx	lr

0800f632 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f632:	2000      	movs	r0, #0
 800f634:	4770      	bx	lr

0800f636 <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f636:	2000      	movs	r0, #0
 800f638:	4770      	bx	lr

0800f63a <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f63a:	2000      	movs	r0, #0
 800f63c:	4770      	bx	lr

0800f63e <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f63e:	2000      	movs	r0, #0
 800f640:	4770      	bx	lr

0800f642 <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f642:	2000      	movs	r0, #0
 800f644:	4770      	bx	lr

0800f646 <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f646:	4770      	bx	lr

0800f648 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f648:	4770      	bx	lr

0800f64a <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f64a:	4770      	bx	lr

0800f64c <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f64c:	2002      	movs	r0, #2
 800f64e:	4770      	bx	lr

0800f650 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f650:	2002      	movs	r0, #2
 800f652:	4770      	bx	lr

0800f654 <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f654:	2002      	movs	r0, #2
 800f656:	4770      	bx	lr

0800f658 <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f658:	4770      	bx	lr

0800f65a <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f65a:	2000      	movs	r0, #0
 800f65c:	4770      	bx	lr

0800f65e <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f65e:	4770      	bx	lr

0800f660 <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f660:	4770      	bx	lr

0800f662 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f662:	2000      	movs	r0, #0
 800f664:	4770      	bx	lr

0800f666 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f666:	2000      	movs	r0, #0
 800f668:	4770      	bx	lr

0800f66a <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f66a:	4770      	bx	lr

0800f66c <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f66c:	4770      	bx	lr

0800f66e <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800f66e:	2300      	movs	r3, #0
 800f670:	2b0f      	cmp	r3, #15
 800f672:	d804      	bhi.n	800f67e <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800f674:	5cc2      	ldrb	r2, [r0, r3]
 800f676:	b922      	cbnz	r2, 800f682 <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800f678:	3301      	adds	r3, #1
 800f67a:	b29b      	uxth	r3, r3
 800f67c:	e7f8      	b.n	800f670 <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800f67e:	2001      	movs	r0, #1
 800f680:	4770      	bx	lr
            return false;
 800f682:	2000      	movs	r0, #0
}
 800f684:	4770      	bx	lr
	...

0800f688 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800f688:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800f68a:	2500      	movs	r5, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800f68c:	012c      	lsls	r4, r5, #4
 800f68e:	3408      	adds	r4, #8
 800f690:	4b06      	ldr	r3, [pc, #24]	@ (800f6ac <MallocNewMacCommandSlot+0x24>)
 800f692:	441c      	add	r4, r3
 800f694:	4620      	mov	r0, r4
 800f696:	f7ff ffea 	bl	800f66e <IsSlotFree>
 800f69a:	b920      	cbnz	r0, 800f6a6 <MallocNewMacCommandSlot+0x1e>
    {
        itr++;
 800f69c:	3501      	adds	r5, #1
 800f69e:	b2ed      	uxtb	r5, r5
        if( itr == NUM_OF_MAC_COMMANDS )
 800f6a0:	2d0f      	cmp	r5, #15
 800f6a2:	d1f3      	bne.n	800f68c <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800f6a4:	2400      	movs	r4, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800f6a6:	4620      	mov	r0, r4
 800f6a8:	bd38      	pop	{r3, r4, r5, pc}
 800f6aa:	bf00      	nop
 800f6ac:	20003a68 	.word	0x20003a68

0800f6b0 <LinkedListInit>:
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800f6b0:	b120      	cbz	r0, 800f6bc <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800f6b6:	6042      	str	r2, [r0, #4]

    return true;
 800f6b8:	2001      	movs	r0, #1
 800f6ba:	4770      	bx	lr
        return false;
 800f6bc:	2000      	movs	r0, #0
}
 800f6be:	4770      	bx	lr

0800f6c0 <LinkedListAdd>:
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	b160      	cbz	r0, 800f6de <LinkedListAdd+0x1e>
 800f6c4:	b169      	cbz	r1, 800f6e2 <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800f6c6:	6802      	ldr	r2, [r0, #0]
 800f6c8:	b13a      	cbz	r2, 800f6da <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800f6ca:	685a      	ldr	r2, [r3, #4]
 800f6cc:	b102      	cbz	r2, 800f6d0 <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800f6ce:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800f6d4:	6059      	str	r1, [r3, #4]

    return true;
 800f6d6:	2001      	movs	r0, #1
 800f6d8:	4770      	bx	lr
        list->First = element;
 800f6da:	6001      	str	r1, [r0, #0]
 800f6dc:	e7f5      	b.n	800f6ca <LinkedListAdd+0xa>
        return false;
 800f6de:	2000      	movs	r0, #0
 800f6e0:	4770      	bx	lr
 800f6e2:	2000      	movs	r0, #0
}
 800f6e4:	4770      	bx	lr

0800f6e6 <LinkedListGetPrevious>:
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800f6e6:	b160      	cbz	r0, 800f702 <LinkedListGetPrevious+0x1c>
 800f6e8:	b161      	cbz	r1, 800f704 <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800f6ea:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800f6ec:	4281      	cmp	r1, r0
 800f6ee:	d102      	bne.n	800f6f6 <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800f6f0:	2000      	movs	r0, #0
    }

    return curElement;
}
 800f6f2:	4770      	bx	lr
            curElement = curElement->Next;
 800f6f4:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800f6f6:	2800      	cmp	r0, #0
 800f6f8:	d0fb      	beq.n	800f6f2 <LinkedListGetPrevious+0xc>
 800f6fa:	6803      	ldr	r3, [r0, #0]
 800f6fc:	428b      	cmp	r3, r1
 800f6fe:	d1f9      	bne.n	800f6f4 <LinkedListGetPrevious+0xe>
 800f700:	4770      	bx	lr
 800f702:	4770      	bx	lr
        return NULL;
 800f704:	4608      	mov	r0, r1
 800f706:	4770      	bx	lr

0800f708 <LinkedListRemove>:
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800f708:	b1b8      	cbz	r0, 800f73a <LinkedListRemove+0x32>
{
 800f70a:	b538      	push	{r3, r4, r5, lr}
 800f70c:	460c      	mov	r4, r1
 800f70e:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800f710:	b1a9      	cbz	r1, 800f73e <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800f712:	f7ff ffe8 	bl	800f6e6 <LinkedListGetPrevious>

    if( list->First == element )
 800f716:	682b      	ldr	r3, [r5, #0]
 800f718:	42a3      	cmp	r3, r4
 800f71a:	d009      	beq.n	800f730 <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800f71c:	686b      	ldr	r3, [r5, #4]
 800f71e:	42a3      	cmp	r3, r4
 800f720:	d009      	beq.n	800f736 <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800f722:	b108      	cbz	r0, 800f728 <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800f724:	6823      	ldr	r3, [r4, #0]
 800f726:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800f728:	2300      	movs	r3, #0
 800f72a:	6023      	str	r3, [r4, #0]

    return true;
 800f72c:	2001      	movs	r0, #1
}
 800f72e:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800f730:	6823      	ldr	r3, [r4, #0]
 800f732:	602b      	str	r3, [r5, #0]
 800f734:	e7f2      	b.n	800f71c <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800f736:	6068      	str	r0, [r5, #4]
 800f738:	e7f3      	b.n	800f722 <LinkedListRemove+0x1a>
        return false;
 800f73a:	2000      	movs	r0, #0
}
 800f73c:	4770      	bx	lr
        return false;
 800f73e:	2000      	movs	r0, #0
 800f740:	e7f5      	b.n	800f72e <LinkedListRemove+0x26>

0800f742 <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800f742:	2805      	cmp	r0, #5
 800f744:	d006      	beq.n	800f754 <IsSticky+0x12>
 800f746:	d307      	bcc.n	800f758 <IsSticky+0x16>
 800f748:	3808      	subs	r0, #8
 800f74a:	b2c0      	uxtb	r0, r0
 800f74c:	2802      	cmp	r0, #2
 800f74e:	d905      	bls.n	800f75c <IsSticky+0x1a>
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
        default:
            return false;
 800f750:	2000      	movs	r0, #0
 800f752:	4770      	bx	lr
    switch( cid )
 800f754:	2001      	movs	r0, #1
 800f756:	4770      	bx	lr
            return false;
 800f758:	2000      	movs	r0, #0
 800f75a:	4770      	bx	lr
    switch( cid )
 800f75c:	2001      	movs	r0, #1
    }
}
 800f75e:	4770      	bx	lr

0800f760 <IsConfirmationRequired>:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
    }
}
 800f760:	2000      	movs	r0, #0
 800f762:	4770      	bx	lr

0800f764 <FreeMacCommandSlot>:
    if( slot == NULL )
 800f764:	b130      	cbz	r0, 800f774 <FreeMacCommandSlot+0x10>
{
 800f766:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800f768:	2210      	movs	r2, #16
 800f76a:	2100      	movs	r1, #0
 800f76c:	f004 f923 	bl	80139b6 <memset1>
    return true;
 800f770:	2001      	movs	r0, #1
}
 800f772:	bd08      	pop	{r3, pc}
        return false;
 800f774:	2000      	movs	r0, #0
}
 800f776:	4770      	bx	lr

0800f778 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800f778:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800f77a:	4c05      	ldr	r4, [pc, #20]	@ (800f790 <LoRaMacCommandsInit+0x18>)
 800f77c:	22fc      	movs	r2, #252	@ 0xfc
 800f77e:	2100      	movs	r1, #0
 800f780:	4620      	mov	r0, r4
 800f782:	f004 f918 	bl	80139b6 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800f786:	4620      	mov	r0, r4
 800f788:	f7ff ff92 	bl	800f6b0 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800f78c:	2000      	movs	r0, #0
 800f78e:	bd10      	pop	{r4, pc}
 800f790:	20003a68 	.word	0x20003a68

0800f794 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800f794:	b321      	cbz	r1, 800f7e0 <LoRaMacCommandsAddCmd+0x4c>
{
 800f796:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f798:	4605      	mov	r5, r0
 800f79a:	4614      	mov	r4, r2
 800f79c:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800f79e:	f7ff ff73 	bl	800f688 <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800f7a2:	4606      	mov	r6, r0
 800f7a4:	b1f0      	cbz	r0, 800f7e4 <LoRaMacCommandsAddCmd+0x50>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800f7a6:	4601      	mov	r1, r0
 800f7a8:	4810      	ldr	r0, [pc, #64]	@ (800f7ec <LoRaMacCommandsAddCmd+0x58>)
 800f7aa:	f7ff ff89 	bl	800f6c0 <LinkedListAdd>
 800f7ae:	b1d8      	cbz	r0, 800f7e8 <LoRaMacCommandsAddCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800f7b0:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800f7b2:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800f7b4:	b2a2      	uxth	r2, r4
 800f7b6:	4639      	mov	r1, r7
 800f7b8:	1d70      	adds	r0, r6, #5
 800f7ba:	f004 f8e4 	bl	8013986 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800f7be:	4628      	mov	r0, r5
 800f7c0:	f7ff ffbf 	bl	800f742 <IsSticky>
 800f7c4:	7330      	strb	r0, [r6, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 800f7c6:	4628      	mov	r0, r5
 800f7c8:	f7ff ffca 	bl	800f760 <IsConfirmationRequired>
 800f7cc:	7370      	strb	r0, [r6, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800f7ce:	4a07      	ldr	r2, [pc, #28]	@ (800f7ec <LoRaMacCommandsAddCmd+0x58>)
 800f7d0:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
 800f7d4:	4423      	add	r3, r4
 800f7d6:	3301      	adds	r3, #1
 800f7d8:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 800f7dc:	2000      	movs	r0, #0
}
 800f7de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800f7e0:	2001      	movs	r0, #1
}
 800f7e2:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800f7e4:	2002      	movs	r0, #2
 800f7e6:	e7fa      	b.n	800f7de <LoRaMacCommandsAddCmd+0x4a>
        return LORAMAC_COMMANDS_ERROR;
 800f7e8:	2005      	movs	r0, #5
 800f7ea:	e7f8      	b.n	800f7de <LoRaMacCommandsAddCmd+0x4a>
 800f7ec:	20003a68 	.word	0x20003a68

0800f7f0 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800f7f0:	b1a0      	cbz	r0, 800f81c <LoRaMacCommandsRemoveCmd+0x2c>
{
 800f7f2:	b510      	push	{r4, lr}
 800f7f4:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800f7f6:	4601      	mov	r1, r0
 800f7f8:	480b      	ldr	r0, [pc, #44]	@ (800f828 <LoRaMacCommandsRemoveCmd+0x38>)
 800f7fa:	f7ff ff85 	bl	800f708 <LinkedListRemove>
 800f7fe:	b178      	cbz	r0, 800f820 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800f800:	4a09      	ldr	r2, [pc, #36]	@ (800f828 <LoRaMacCommandsRemoveCmd+0x38>)
 800f802:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
 800f806:	68a1      	ldr	r1, [r4, #8]
 800f808:	1a5b      	subs	r3, r3, r1
 800f80a:	3b01      	subs	r3, #1
 800f80c:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800f810:	4620      	mov	r0, r4
 800f812:	f7ff ffa7 	bl	800f764 <FreeMacCommandSlot>
 800f816:	b128      	cbz	r0, 800f824 <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800f818:	2000      	movs	r0, #0
}
 800f81a:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800f81c:	2001      	movs	r0, #1
}
 800f81e:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800f820:	2003      	movs	r0, #3
 800f822:	e7fa      	b.n	800f81a <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800f824:	2005      	movs	r0, #5
 800f826:	e7f8      	b.n	800f81a <LoRaMacCommandsRemoveCmd+0x2a>
 800f828:	20003a68 	.word	0x20003a68

0800f82c <LoRaMacCommandsGetCmd>:
LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800f82c:	4b06      	ldr	r3, [pc, #24]	@ (800f848 <LoRaMacCommandsGetCmd+0x1c>)
 800f82e:	681b      	ldr	r3, [r3, #0]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800f830:	e000      	b.n	800f834 <LoRaMacCommandsGetCmd+0x8>
    {
        curElement = curElement->Next;
 800f832:	681b      	ldr	r3, [r3, #0]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800f834:	b113      	cbz	r3, 800f83c <LoRaMacCommandsGetCmd+0x10>
 800f836:	791a      	ldrb	r2, [r3, #4]
 800f838:	4282      	cmp	r2, r0
 800f83a:	d1fa      	bne.n	800f832 <LoRaMacCommandsGetCmd+0x6>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 800f83c:	600b      	str	r3, [r1, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 800f83e:	b10b      	cbz	r3, 800f844 <LoRaMacCommandsGetCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }
    return LORAMAC_COMMANDS_SUCCESS;
 800f840:	2000      	movs	r0, #0
 800f842:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800f844:	2003      	movs	r0, #3
}
 800f846:	4770      	bx	lr
 800f848:	20003a68 	.word	0x20003a68

0800f84c <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800f84c:	4b0a      	ldr	r3, [pc, #40]	@ (800f878 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800f84e:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800f850:	b120      	cbz	r0, 800f85c <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800f852:	7b03      	ldrb	r3, [r0, #12]
 800f854:	b11b      	cbz	r3, 800f85e <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800f856:	6800      	ldr	r0, [r0, #0]
 800f858:	e7fa      	b.n	800f850 <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800f85a:	bd10      	pop	{r4, pc}
 800f85c:	4770      	bx	lr
{
 800f85e:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800f860:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800f862:	f7ff ffc5 	bl	800f7f0 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800f866:	4620      	mov	r0, r4
    while( curElement != NULL )
 800f868:	2800      	cmp	r0, #0
 800f86a:	d0f6      	beq.n	800f85a <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800f86c:	7b03      	ldrb	r3, [r0, #12]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d0f6      	beq.n	800f860 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800f872:	6800      	ldr	r0, [r0, #0]
 800f874:	e7f8      	b.n	800f868 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800f876:	bf00      	nop
 800f878:	20003a68 	.word	0x20003a68

0800f87c <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800f87c:	b570      	push	{r4, r5, r6, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800f87e:	4b0b      	ldr	r3, [pc, #44]	@ (800f8ac <LoRaMacCommandsRemoveStickyAnsCmds+0x30>)
 800f880:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800f882:	e000      	b.n	800f886 <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
{
 800f884:	4634      	mov	r4, r6
    while( curElement != NULL )
 800f886:	b17c      	cbz	r4, 800f8a8 <LoRaMacCommandsRemoveStickyAnsCmds+0x2c>
    {
        nexElement = curElement->Next;
 800f888:	6826      	ldr	r6, [r4, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 800f88a:	7925      	ldrb	r5, [r4, #4]
 800f88c:	4628      	mov	r0, r5
 800f88e:	f7ff ff58 	bl	800f742 <IsSticky>
 800f892:	2800      	cmp	r0, #0
 800f894:	d0f6      	beq.n	800f884 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 800f896:	4628      	mov	r0, r5
 800f898:	f7ff ff62 	bl	800f760 <IsConfirmationRequired>
        if( ( IsSticky( curElement->CID ) == true ) &&
 800f89c:	2800      	cmp	r0, #0
 800f89e:	d1f1      	bne.n	800f884 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800f8a0:	4620      	mov	r0, r4
 800f8a2:	f7ff ffa5 	bl	800f7f0 <LoRaMacCommandsRemoveCmd>
 800f8a6:	e7ed      	b.n	800f884 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800f8a8:	2000      	movs	r0, #0
 800f8aa:	bd70      	pop	{r4, r5, r6, pc}
 800f8ac:	20003a68 	.word	0x20003a68

0800f8b0 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800f8b0:	b128      	cbz	r0, 800f8be <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800f8b2:	4a04      	ldr	r2, [pc, #16]	@ (800f8c4 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800f8b4:	f8d2 20f8 	ldr.w	r2, [r2, #248]	@ 0xf8
 800f8b8:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800f8ba:	2000      	movs	r0, #0
 800f8bc:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800f8be:	2001      	movs	r0, #1
}
 800f8c0:	4770      	bx	lr
 800f8c2:	bf00      	nop
 800f8c4:	20003a68 	.word	0x20003a68

0800f8c8 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800f8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800f8cc:	4b16      	ldr	r3, [pc, #88]	@ (800f928 <LoRaMacCommandsSerializeCmds+0x60>)
 800f8ce:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800f8d0:	b32a      	cbz	r2, 800f91e <LoRaMacCommandsSerializeCmds+0x56>
 800f8d2:	4607      	mov	r7, r0
 800f8d4:	4688      	mov	r8, r1
 800f8d6:	4616      	mov	r6, r2
 800f8d8:	b319      	cbz	r1, 800f922 <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800f8da:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800f8dc:	b194      	cbz	r4, 800f904 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800f8de:	1a7a      	subs	r2, r7, r1
 800f8e0:	68a3      	ldr	r3, [r4, #8]
 800f8e2:	3301      	adds	r3, #1
 800f8e4:	429a      	cmp	r2, r3
 800f8e6:	d30d      	bcc.n	800f904 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800f8e8:	1c4d      	adds	r5, r1, #1
 800f8ea:	b2ed      	uxtb	r5, r5
 800f8ec:	7923      	ldrb	r3, [r4, #4]
 800f8ee:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800f8f0:	8922      	ldrh	r2, [r4, #8]
 800f8f2:	1d61      	adds	r1, r4, #5
 800f8f4:	1970      	adds	r0, r6, r5
 800f8f6:	f004 f846 	bl	8013986 <memcpy1>
            itr += curElement->PayloadSize;
 800f8fa:	68a3      	ldr	r3, [r4, #8]
 800f8fc:	441d      	add	r5, r3
 800f8fe:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800f900:	6824      	ldr	r4, [r4, #0]
 800f902:	e7eb      	b.n	800f8dc <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800f904:	b12c      	cbz	r4, 800f912 <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800f906:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800f908:	4620      	mov	r0, r4
 800f90a:	f7ff ff71 	bl	800f7f0 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800f90e:	462c      	mov	r4, r5
 800f910:	e7f8      	b.n	800f904 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800f912:	4640      	mov	r0, r8
 800f914:	f7ff ffcc 	bl	800f8b0 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800f918:	2000      	movs	r0, #0
}
 800f91a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800f91e:	2001      	movs	r0, #1
 800f920:	e7fb      	b.n	800f91a <LoRaMacCommandsSerializeCmds+0x52>
 800f922:	2001      	movs	r0, #1
 800f924:	e7f9      	b.n	800f91a <LoRaMacCommandsSerializeCmds+0x52>
 800f926:	bf00      	nop
 800f928:	20003a68 	.word	0x20003a68

0800f92c <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800f92c:	1e83      	subs	r3, r0, #2
 800f92e:	2b11      	cmp	r3, #17
 800f930:	d80a      	bhi.n	800f948 <LoRaMacCommandsGetCmdSize+0x1c>
 800f932:	e8df f003 	tbb	[pc, r3]
 800f936:	0b23      	.short	0x0b23
 800f938:	110f240d 	.word	0x110f240d
 800f93c:	09171513 	.word	0x09171513
 800f940:	09091909 	.word	0x09091909
 800f944:	211f1d1b 	.word	0x211f1d1b
 800f948:	2000      	movs	r0, #0
 800f94a:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800f94c:	2005      	movs	r0, #5
            break;
 800f94e:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800f950:	2002      	movs	r0, #2
            break;
 800f952:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800f954:	2001      	movs	r0, #1
            break;
 800f956:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800f958:	2006      	movs	r0, #6
            break;
 800f95a:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800f95c:	2002      	movs	r0, #2
            break;
 800f95e:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800f960:	2002      	movs	r0, #2
            break;
 800f962:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800f964:	2005      	movs	r0, #5
            break;
 800f966:	4770      	bx	lr
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800f968:	2006      	movs	r0, #6
            break;
 800f96a:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800f96c:	2001      	movs	r0, #1
            break;
 800f96e:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800f970:	2005      	movs	r0, #5
            break;
 800f972:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800f974:	2004      	movs	r0, #4
            break;
 800f976:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800f978:	2004      	movs	r0, #4
            break;
 800f97a:	4770      	bx	lr
            cidSize = 3;
 800f97c:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800f97e:	4770      	bx	lr

0800f980 <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800f980:	4b03      	ldr	r3, [pc, #12]	@ (800f990 <IncreaseBufferPointer+0x10>)
 800f982:	4298      	cmp	r0, r3
 800f984:	d001      	beq.n	800f98a <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800f986:	3004      	adds	r0, #4
 800f988:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800f98a:	4802      	ldr	r0, [pc, #8]	@ (800f994 <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800f98c:	4770      	bx	lr
 800f98e:	bf00      	nop
 800f990:	20003b80 	.word	0x20003b80
 800f994:	20003b70 	.word	0x20003b70

0800f998 <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800f998:	b108      	cbz	r0, 800f99e <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800f99a:	2000      	movs	r0, #0
 800f99c:	4770      	bx	lr
        return true;
 800f99e:	2001      	movs	r0, #1
}
 800f9a0:	4770      	bx	lr

0800f9a2 <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800f9a2:	2804      	cmp	r0, #4
 800f9a4:	d801      	bhi.n	800f9aa <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800f9a6:	2000      	movs	r0, #0
 800f9a8:	4770      	bx	lr
        return true;
 800f9aa:	2001      	movs	r0, #1
}
 800f9ac:	4770      	bx	lr
	...

0800f9b0 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800f9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9b2:	4606      	mov	r6, r0
 800f9b4:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800f9b6:	4b0d      	ldr	r3, [pc, #52]	@ (800f9ec <GetElement+0x3c>)
 800f9b8:	f893 7020 	ldrb.w	r7, [r3, #32]
 800f9bc:	4638      	mov	r0, r7
 800f9be:	f7ff ffeb 	bl	800f998 <IsListEmpty>
 800f9c2:	b970      	cbnz	r0, 800f9e2 <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800f9c4:	2500      	movs	r5, #0
 800f9c6:	42af      	cmp	r7, r5
 800f9c8:	d909      	bls.n	800f9de <GetElement+0x2e>
    {
        if( element->Request == request )
 800f9ca:	7823      	ldrb	r3, [r4, #0]
 800f9cc:	42b3      	cmp	r3, r6
 800f9ce:	d00a      	beq.n	800f9e6 <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800f9d0:	4620      	mov	r0, r4
 800f9d2:	f7ff ffd5 	bl	800f980 <IncreaseBufferPointer>
 800f9d6:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800f9d8:	3501      	adds	r5, #1
 800f9da:	b2ed      	uxtb	r5, r5
 800f9dc:	e7f3      	b.n	800f9c6 <GetElement+0x16>
    }

    return NULL;
 800f9de:	2000      	movs	r0, #0
}
 800f9e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800f9e2:	2000      	movs	r0, #0
 800f9e4:	e7fc      	b.n	800f9e0 <GetElement+0x30>
            return element;
 800f9e6:	4620      	mov	r0, r4
 800f9e8:	e7fa      	b.n	800f9e0 <GetElement+0x30>
 800f9ea:	bf00      	nop
 800f9ec:	20003b64 	.word	0x20003b64

0800f9f0 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800f9f0:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800f9f2:	4c08      	ldr	r4, [pc, #32]	@ (800fa14 <LoRaMacConfirmQueueInit+0x24>)
 800f9f4:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800f9fc:	f104 000c 	add.w	r0, r4, #12
 800fa00:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800fa02:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800fa04:	2214      	movs	r2, #20
 800fa06:	21ff      	movs	r1, #255	@ 0xff
 800fa08:	f003 ffd5 	bl	80139b6 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fa0c:	2301      	movs	r3, #1
 800fa0e:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
}
 800fa12:	bd10      	pop	{r4, pc}
 800fa14:	20003b64 	.word	0x20003b64

0800fa18 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800fa18:	b538      	push	{r3, r4, r5, lr}
 800fa1a:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800fa1c:	4b0f      	ldr	r3, [pc, #60]	@ (800fa5c <LoRaMacConfirmQueueAdd+0x44>)
 800fa1e:	f893 0020 	ldrb.w	r0, [r3, #32]
 800fa22:	f7ff ffbe 	bl	800f9a2 <IsListFull>
 800fa26:	b9b8      	cbnz	r0, 800fa58 <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800fa28:	4c0c      	ldr	r4, [pc, #48]	@ (800fa5c <LoRaMacConfirmQueueAdd+0x44>)
 800fa2a:	68a3      	ldr	r3, [r4, #8]
 800fa2c:	782a      	ldrb	r2, [r5, #0]
 800fa2e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800fa30:	68a3      	ldr	r3, [r4, #8]
 800fa32:	786a      	ldrb	r2, [r5, #1]
 800fa34:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800fa36:	68a3      	ldr	r3, [r4, #8]
 800fa38:	78ea      	ldrb	r2, [r5, #3]
 800fa3a:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800fa3c:	68a3      	ldr	r3, [r4, #8]
 800fa3e:	2200      	movs	r2, #0
 800fa40:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800fa42:	f894 3020 	ldrb.w	r3, [r4, #32]
 800fa46:	3301      	adds	r3, #1
 800fa48:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800fa4c:	68a0      	ldr	r0, [r4, #8]
 800fa4e:	f7ff ff97 	bl	800f980 <IncreaseBufferPointer>
 800fa52:	60a0      	str	r0, [r4, #8]

    return true;
 800fa54:	2001      	movs	r0, #1
}
 800fa56:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800fa58:	2000      	movs	r0, #0
 800fa5a:	e7fc      	b.n	800fa56 <LoRaMacConfirmQueueAdd+0x3e>
 800fa5c:	20003b64 	.word	0x20003b64

0800fa60 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800fa60:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800fa62:	4b09      	ldr	r3, [pc, #36]	@ (800fa88 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800fa64:	f893 4020 	ldrb.w	r4, [r3, #32]
 800fa68:	4620      	mov	r0, r4
 800fa6a:	f7ff ff95 	bl	800f998 <IsListEmpty>
 800fa6e:	b948      	cbnz	r0, 800fa84 <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800fa70:	4d05      	ldr	r5, [pc, #20]	@ (800fa88 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800fa72:	3c01      	subs	r4, #1
 800fa74:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800fa78:	6868      	ldr	r0, [r5, #4]
 800fa7a:	f7ff ff81 	bl	800f980 <IncreaseBufferPointer>
 800fa7e:	6068      	str	r0, [r5, #4]

    return true;
 800fa80:	2001      	movs	r0, #1
}
 800fa82:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800fa84:	2000      	movs	r0, #0
 800fa86:	e7fc      	b.n	800fa82 <LoRaMacConfirmQueueRemoveFirst+0x22>
 800fa88:	20003b64 	.word	0x20003b64

0800fa8c <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800fa8c:	b538      	push	{r3, r4, r5, lr}
 800fa8e:	4605      	mov	r5, r0
 800fa90:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800fa92:	4b08      	ldr	r3, [pc, #32]	@ (800fab4 <LoRaMacConfirmQueueSetStatus+0x28>)
 800fa94:	f893 0020 	ldrb.w	r0, [r3, #32]
 800fa98:	f7ff ff7e 	bl	800f998 <IsListEmpty>
 800fa9c:	b948      	cbnz	r0, 800fab2 <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800fa9e:	4b05      	ldr	r3, [pc, #20]	@ (800fab4 <LoRaMacConfirmQueueSetStatus+0x28>)
 800faa0:	689a      	ldr	r2, [r3, #8]
 800faa2:	6859      	ldr	r1, [r3, #4]
 800faa4:	4620      	mov	r0, r4
 800faa6:	f7ff ff83 	bl	800f9b0 <GetElement>
        if( element != NULL )
 800faaa:	b110      	cbz	r0, 800fab2 <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800faac:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800faae:	2201      	movs	r2, #1
 800fab0:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800fab2:	bd38      	pop	{r3, r4, r5, pc}
 800fab4:	20003b64 	.word	0x20003b64

0800fab8 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800fab8:	b510      	push	{r4, lr}
 800faba:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800fabc:	4b09      	ldr	r3, [pc, #36]	@ (800fae4 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800fabe:	f893 0020 	ldrb.w	r0, [r3, #32]
 800fac2:	f7ff ff69 	bl	800f998 <IsListEmpty>
 800fac6:	b940      	cbnz	r0, 800fada <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800fac8:	4b06      	ldr	r3, [pc, #24]	@ (800fae4 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800faca:	689a      	ldr	r2, [r3, #8]
 800facc:	6859      	ldr	r1, [r3, #4]
 800face:	4620      	mov	r0, r4
 800fad0:	f7ff ff6e 	bl	800f9b0 <GetElement>
        if( element != NULL )
 800fad4:	b118      	cbz	r0, 800fade <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800fad6:	7840      	ldrb	r0, [r0, #1]
 800fad8:	e000      	b.n	800fadc <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fada:	2001      	movs	r0, #1
}
 800fadc:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fade:	2001      	movs	r0, #1
 800fae0:	e7fc      	b.n	800fadc <LoRaMacConfirmQueueGetStatus+0x24>
 800fae2:	bf00      	nop
 800fae4:	20003b64 	.word	0x20003b64

0800fae8 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800fae8:	b538      	push	{r3, r4, r5, lr}
 800faea:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800faec:	4b0c      	ldr	r3, [pc, #48]	@ (800fb20 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800faee:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800faf0:	f883 0021 	strb.w	r0, [r3, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800faf4:	f893 0020 	ldrb.w	r0, [r3, #32]
 800faf8:	f7ff ff4e 	bl	800f998 <IsListEmpty>
 800fafc:	b150      	cbz	r0, 800fb14 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800fafe:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800fb00:	2301      	movs	r3, #1
 800fb02:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800fb04:	4620      	mov	r0, r4
 800fb06:	f7ff ff3b 	bl	800f980 <IncreaseBufferPointer>
 800fb0a:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800fb0c:	4b04      	ldr	r3, [pc, #16]	@ (800fb20 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800fb0e:	689b      	ldr	r3, [r3, #8]
 800fb10:	4283      	cmp	r3, r0
 800fb12:	d0f4      	beq.n	800fafe <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800fb14:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800fb16:	78e3      	ldrb	r3, [r4, #3]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d1f3      	bne.n	800fb04 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800fb1c:	e7f0      	b.n	800fb00 <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800fb1e:	bf00      	nop
 800fb20:	20003b64 	.word	0x20003b64

0800fb24 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800fb24:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800fb26:	4b04      	ldr	r3, [pc, #16]	@ (800fb38 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800fb28:	689a      	ldr	r2, [r3, #8]
 800fb2a:	6859      	ldr	r1, [r3, #4]
 800fb2c:	f7ff ff40 	bl	800f9b0 <GetElement>
 800fb30:	b100      	cbz	r0, 800fb34 <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800fb32:	2001      	movs	r0, #1
    }
    return false;
}
 800fb34:	bd08      	pop	{r3, pc}
 800fb36:	bf00      	nop
 800fb38:	20003b64 	.word	0x20003b64

0800fb3c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800fb3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb3e:	b083      	sub	sp, #12
 800fb40:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800fb42:	4b19      	ldr	r3, [pc, #100]	@ (800fba8 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800fb44:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 800fb48:	2204      	movs	r2, #4
 800fb4a:	2100      	movs	r1, #0
 800fb4c:	eb0d 0002 	add.w	r0, sp, r2
 800fb50:	f003 ff31 	bl	80139b6 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 800fb54:	2400      	movs	r4, #0
 800fb56:	e00d      	b.n	800fb74 <LoRaMacConfirmQueueHandleCb+0x38>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800fb58:	781a      	ldrb	r2, [r3, #0]
 800fb5a:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800fb5e:	785a      	ldrb	r2, [r3, #1]
 800fb60:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800fb64:	78db      	ldrb	r3, [r3, #3]
 800fb66:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800fb6a:	f7ff ff79 	bl	800fa60 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800fb6e:	b1a5      	cbz	r5, 800fb9a <LoRaMacConfirmQueueHandleCb+0x5e>
    for( uint8_t i = 0; i < nbElements; i++ )
 800fb70:	3401      	adds	r4, #1
 800fb72:	b2e4      	uxtb	r4, r4
 800fb74:	42bc      	cmp	r4, r7
 800fb76:	d214      	bcs.n	800fba2 <LoRaMacConfirmQueueHandleCb+0x66>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800fb78:	4b0b      	ldr	r3, [pc, #44]	@ (800fba8 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800fb7a:	685a      	ldr	r2, [r3, #4]
 800fb7c:	7812      	ldrb	r2, [r2, #0]
 800fb7e:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800fb80:	685a      	ldr	r2, [r3, #4]
 800fb82:	7852      	ldrb	r2, [r2, #1]
 800fb84:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800fb86:	685b      	ldr	r3, [r3, #4]
 800fb88:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800fb8a:	2d00      	cmp	r5, #0
 800fb8c:	d0e4      	beq.n	800fb58 <LoRaMacConfirmQueueHandleCb+0x1c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800fb8e:	4b06      	ldr	r3, [pc, #24]	@ (800fba8 <LoRaMacConfirmQueueHandleCb+0x6c>)
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	689b      	ldr	r3, [r3, #8]
 800fb94:	4630      	mov	r0, r6
 800fb96:	4798      	blx	r3
 800fb98:	e7e7      	b.n	800fb6a <LoRaMacConfirmQueueHandleCb+0x2e>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800fb9a:	a801      	add	r0, sp, #4
 800fb9c:	f7ff ff3c 	bl	800fa18 <LoRaMacConfirmQueueAdd>
 800fba0:	e7e6      	b.n	800fb70 <LoRaMacConfirmQueueHandleCb+0x34>
        }
    }
}
 800fba2:	b003      	add	sp, #12
 800fba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fba6:	bf00      	nop
 800fba8:	20003b64 	.word	0x20003b64

0800fbac <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800fbac:	4b01      	ldr	r3, [pc, #4]	@ (800fbb4 <LoRaMacConfirmQueueGetCnt+0x8>)
 800fbae:	f893 0020 	ldrb.w	r0, [r3, #32]
 800fbb2:	4770      	bx	lr
 800fbb4:	20003b64 	.word	0x20003b64

0800fbb8 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800fbb8:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800fbba:	4b03      	ldr	r3, [pc, #12]	@ (800fbc8 <LoRaMacConfirmQueueIsFull+0x10>)
 800fbbc:	f893 0020 	ldrb.w	r0, [r3, #32]
 800fbc0:	f7ff feef 	bl	800f9a2 <IsListFull>
    }
    else
    {
        return false;
    }
}
 800fbc4:	bd08      	pop	{r3, pc}
 800fbc6:	bf00      	nop
 800fbc8:	20003b64 	.word	0x20003b64

0800fbcc <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800fbcc:	b410      	push	{r4}
 800fbce:	9c01      	ldr	r4, [sp, #4]
 800fbd0:	9902      	ldr	r1, [sp, #8]
 800fbd2:	9a03      	ldr	r2, [sp, #12]
    if( b0 == 0 )
 800fbd4:	b1da      	cbz	r2, 800fc0e <PrepareB0+0x42>
 800fbd6:	4684      	mov	ip, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800fbd8:	2049      	movs	r0, #73	@ 0x49
 800fbda:	7010      	strb	r0, [r2, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 800fbdc:	2000      	movs	r0, #0
 800fbde:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800fbe0:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800fbe2:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800fbe4:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800fbe6:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800fbe8:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800fbea:	0a23      	lsrs	r3, r4, #8
 800fbec:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800fbee:	0c23      	lsrs	r3, r4, #16
 800fbf0:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800fbf2:	0e24      	lsrs	r4, r4, #24
 800fbf4:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800fbf6:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800fbf8:	0a0b      	lsrs	r3, r1, #8
 800fbfa:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800fbfc:	0c0b      	lsrs	r3, r1, #16
 800fbfe:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800fc00:	0e09      	lsrs	r1, r1, #24
 800fc02:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800fc04:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800fc06:	f882 c00f 	strb.w	ip, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800fc0a:	bc10      	pop	{r4}
 800fc0c:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fc0e:	200a      	movs	r0, #10
 800fc10:	e7fb      	b.n	800fc0a <PrepareB0+0x3e>
	...

0800fc14 <GetKeyAddrItem>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800fc14:	2300      	movs	r3, #0
 800fc16:	2b01      	cmp	r3, #1
 800fc18:	d80d      	bhi.n	800fc36 <GetKeyAddrItem+0x22>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800fc1a:	4a08      	ldr	r2, [pc, #32]	@ (800fc3c <GetKeyAddrItem+0x28>)
 800fc1c:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800fc20:	4282      	cmp	r2, r0
 800fc22:	d002      	beq.n	800fc2a <GetKeyAddrItem+0x16>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800fc24:	3301      	adds	r3, #1
 800fc26:	b2db      	uxtb	r3, r3
 800fc28:	e7f5      	b.n	800fc16 <GetKeyAddrItem+0x2>
        {
            *item = &( KeyAddrList[i] );
 800fc2a:	4a04      	ldr	r2, [pc, #16]	@ (800fc3c <GetKeyAddrItem+0x28>)
 800fc2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fc30:	600b      	str	r3, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800fc32:	2000      	movs	r0, #0
 800fc34:	4770      	bx	lr
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800fc36:	200c      	movs	r0, #12
}
 800fc38:	4770      	bx	lr
 800fc3a:	bf00      	nop
 800fc3c:	20000104 	.word	0x20000104

0800fc40 <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800fc40:	b1f1      	cbz	r1, 800fc80 <GetLastFcntDown+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800fc42:	3801      	subs	r0, #1
 800fc44:	2803      	cmp	r0, #3
 800fc46:	d81d      	bhi.n	800fc84 <GetLastFcntDown+0x44>
 800fc48:	e8df f000 	tbb	[pc, r0]
 800fc4c:	140e0802 	.word	0x140e0802
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800fc50:	4a0d      	ldr	r2, [pc, #52]	@ (800fc88 <GetLastFcntDown+0x48>)
 800fc52:	6812      	ldr	r2, [r2, #0]
 800fc54:	6912      	ldr	r2, [r2, #16]
 800fc56:	600a      	str	r2, [r1, #0]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800fc58:	2000      	movs	r0, #0
            break;
 800fc5a:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800fc5c:	4a0a      	ldr	r2, [pc, #40]	@ (800fc88 <GetLastFcntDown+0x48>)
 800fc5e:	6812      	ldr	r2, [r2, #0]
 800fc60:	6952      	ldr	r2, [r2, #20]
 800fc62:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800fc64:	2000      	movs	r0, #0
            break;
 800fc66:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800fc68:	4a07      	ldr	r2, [pc, #28]	@ (800fc88 <GetLastFcntDown+0x48>)
 800fc6a:	6812      	ldr	r2, [r2, #0]
 800fc6c:	6992      	ldr	r2, [r2, #24]
 800fc6e:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800fc70:	2000      	movs	r0, #0
            break;
 800fc72:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800fc74:	4a04      	ldr	r2, [pc, #16]	@ (800fc88 <GetLastFcntDown+0x48>)
 800fc76:	6812      	ldr	r2, [r2, #0]
 800fc78:	69d2      	ldr	r2, [r2, #28]
 800fc7a:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800fc7c:	2000      	movs	r0, #0
            break;
 800fc7e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fc80:	200a      	movs	r0, #10
 800fc82:	4770      	bx	lr
    switch( fCntID )
 800fc84:	2005      	movs	r0, #5
}
 800fc86:	4770      	bx	lr
 800fc88:	20003b88 	.word	0x20003b88

0800fc8c <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800fc8c:	b510      	push	{r4, lr}
 800fc8e:	b082      	sub	sp, #8
 800fc90:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800fc92:	2300      	movs	r3, #0
 800fc94:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800fc96:	a901      	add	r1, sp, #4
 800fc98:	f7ff ffd2 	bl	800fc40 <GetLastFcntDown>
 800fc9c:	b948      	cbnz	r0, 800fcb2 <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800fc9e:	9b01      	ldr	r3, [sp, #4]
 800fca0:	42a3      	cmp	r3, r4
 800fca2:	d309      	bcc.n	800fcb8 <CheckFCntDown+0x2c>
 800fca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fca8:	d001      	beq.n	800fcae <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800fcaa:	2000      	movs	r0, #0
 800fcac:	e002      	b.n	800fcb4 <CheckFCntDown+0x28>
        return true;
 800fcae:	2001      	movs	r0, #1
 800fcb0:	e000      	b.n	800fcb4 <CheckFCntDown+0x28>
        return false;
 800fcb2:	2000      	movs	r0, #0
    }
}
 800fcb4:	b002      	add	sp, #8
 800fcb6:	bd10      	pop	{r4, pc}
        return true;
 800fcb8:	2001      	movs	r0, #1
 800fcba:	e7fb      	b.n	800fcb4 <CheckFCntDown+0x28>

0800fcbc <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800fcbc:	3801      	subs	r0, #1
 800fcbe:	2803      	cmp	r0, #3
 800fcc0:	d815      	bhi.n	800fcee <UpdateFCntDown+0x32>
 800fcc2:	e8df f000 	tbb	[pc, r0]
 800fcc6:	0702      	.short	0x0702
 800fcc8:	110c      	.short	0x110c
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800fcca:	4b09      	ldr	r3, [pc, #36]	@ (800fcf0 <UpdateFCntDown+0x34>)
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	6119      	str	r1, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 800fcd0:	6219      	str	r1, [r3, #32]
            break;
 800fcd2:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800fcd4:	4b06      	ldr	r3, [pc, #24]	@ (800fcf0 <UpdateFCntDown+0x34>)
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	6159      	str	r1, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 800fcda:	6219      	str	r1, [r3, #32]
            break;
 800fcdc:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800fcde:	4b04      	ldr	r3, [pc, #16]	@ (800fcf0 <UpdateFCntDown+0x34>)
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	6199      	str	r1, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 800fce4:	6219      	str	r1, [r3, #32]
            break;
 800fce6:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800fce8:	4b01      	ldr	r3, [pc, #4]	@ (800fcf0 <UpdateFCntDown+0x34>)
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800fcee:	4770      	bx	lr
 800fcf0:	20003b88 	.word	0x20003b88

0800fcf4 <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800fcf4:	4b0a      	ldr	r3, [pc, #40]	@ (800fd20 <ResetFCnts+0x2c>)
 800fcf6:	681a      	ldr	r2, [r3, #0]
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800fcfc:	f04f 31ff 	mov.w	r1, #4294967295
 800fd00:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800fd02:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 800fd04:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800fd06:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	dd00      	ble.n	800fd0e <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
    }
}
 800fd0c:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 800fd0e:	1d99      	adds	r1, r3, #6
 800fd10:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800fd14:	f04f 30ff 	mov.w	r0, #4294967295
 800fd18:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fd1a:	3301      	adds	r3, #1
 800fd1c:	e7f4      	b.n	800fd08 <ResetFCnts+0x14>
 800fd1e:	bf00      	nop
 800fd20:	20003b88 	.word	0x20003b88

0800fd24 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 800fd24:	4b03      	ldr	r3, [pc, #12]	@ (800fd34 <IsJoinNonce10xOk+0x10>)
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	689b      	ldr	r3, [r3, #8]
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 800fd2a:	4283      	cmp	r3, r0
 800fd2c:	bf2c      	ite	cs
 800fd2e:	2000      	movcs	r0, #0
 800fd30:	2001      	movcc	r0, #1
 800fd32:	4770      	bx	lr
 800fd34:	20003b88 	.word	0x20003b88

0800fd38 <ComputeCmacB0>:
{
 800fd38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd3c:	b088      	sub	sp, #32
 800fd3e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800fd40:	b1f0      	cbz	r0, 800fd80 <ComputeCmacB0+0x48>
 800fd42:	460c      	mov	r4, r1
 800fd44:	4615      	mov	r5, r2
 800fd46:	461a      	mov	r2, r3
 800fd48:	4680      	mov	r8, r0
 800fd4a:	b1de      	cbz	r6, 800fd84 <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800fd4c:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800fd50:	d81a      	bhi.n	800fd88 <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800fd52:	af04      	add	r7, sp, #16
 800fd54:	9702      	str	r7, [sp, #8]
 800fd56:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fd58:	9301      	str	r3, [sp, #4]
 800fd5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd5c:	9300      	str	r3, [sp, #0]
 800fd5e:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
 800fd62:	4629      	mov	r1, r5
 800fd64:	4620      	mov	r0, r4
 800fd66:	f7ff ff31 	bl	800fbcc <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800fd6a:	9600      	str	r6, [sp, #0]
 800fd6c:	462b      	mov	r3, r5
 800fd6e:	4622      	mov	r2, r4
 800fd70:	4641      	mov	r1, r8
 800fd72:	4638      	mov	r0, r7
 800fd74:	f003 fbb4 	bl	80134e0 <SecureElementComputeAesCmac>
 800fd78:	b940      	cbnz	r0, 800fd8c <ComputeCmacB0+0x54>
}
 800fd7a:	b008      	add	sp, #32
 800fd7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fd80:	200a      	movs	r0, #10
 800fd82:	e7fa      	b.n	800fd7a <ComputeCmacB0+0x42>
 800fd84:	200a      	movs	r0, #10
 800fd86:	e7f8      	b.n	800fd7a <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800fd88:	200e      	movs	r0, #14
 800fd8a:	e7f6      	b.n	800fd7a <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800fd8c:	200f      	movs	r0, #15
 800fd8e:	e7f4      	b.n	800fd7a <ComputeCmacB0+0x42>

0800fd90 <DeriveSessionKey10x>:
{
 800fd90:	b510      	push	{r4, lr}
 800fd92:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800fd94:	2400      	movs	r4, #0
 800fd96:	9400      	str	r4, [sp, #0]
 800fd98:	9401      	str	r4, [sp, #4]
 800fd9a:	9402      	str	r4, [sp, #8]
 800fd9c:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800fd9e:	2808      	cmp	r0, #8
 800fda0:	d003      	beq.n	800fdaa <DeriveSessionKey10x+0x1a>
 800fda2:	2809      	cmp	r0, #9
 800fda4:	d025      	beq.n	800fdf2 <DeriveSessionKey10x+0x62>
 800fda6:	200b      	movs	r0, #11
 800fda8:	e021      	b.n	800fdee <DeriveSessionKey10x+0x5e>
            compBase[0] = 0x01;
 800fdaa:	2401      	movs	r4, #1
 800fdac:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800fdb0:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800fdb4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800fdb8:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800fdbc:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800fdc0:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800fdc4:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800fdc8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800fdcc:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800fdd0:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800fdd4:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800fdd8:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800fddc:	0a1b      	lsrs	r3, r3, #8
 800fdde:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800fde2:	4602      	mov	r2, r0
 800fde4:	2101      	movs	r1, #1
 800fde6:	4668      	mov	r0, sp
 800fde8:	f003 fc18 	bl	801361c <SecureElementDeriveAndStoreKey>
 800fdec:	b928      	cbnz	r0, 800fdfa <DeriveSessionKey10x+0x6a>
}
 800fdee:	b004      	add	sp, #16
 800fdf0:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800fdf2:	2402      	movs	r4, #2
 800fdf4:	f88d 4000 	strb.w	r4, [sp]
            break;
 800fdf8:	e7da      	b.n	800fdb0 <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800fdfa:	200f      	movs	r0, #15
 800fdfc:	e7f7      	b.n	800fdee <DeriveSessionKey10x+0x5e>

0800fdfe <PayloadEncrypt>:
{
 800fdfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe02:	b088      	sub	sp, #32
 800fe04:	4690      	mov	r8, r2
 800fe06:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
    if( buffer == 0 )
 800fe08:	2800      	cmp	r0, #0
 800fe0a:	d052      	beq.n	800feb2 <PayloadEncrypt+0xb4>
 800fe0c:	460d      	mov	r5, r1
 800fe0e:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800fe10:	2600      	movs	r6, #0
 800fe12:	9604      	str	r6, [sp, #16]
 800fe14:	9605      	str	r6, [sp, #20]
 800fe16:	9606      	str	r6, [sp, #24]
 800fe18:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800fe1a:	9600      	str	r6, [sp, #0]
 800fe1c:	9601      	str	r6, [sp, #4]
 800fe1e:	9602      	str	r6, [sp, #8]
 800fe20:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800fe22:	2701      	movs	r7, #1
 800fe24:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800fe28:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800fe2c:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800fe30:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800fe34:	0a19      	lsrs	r1, r3, #8
 800fe36:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800fe3a:	0c19      	lsrs	r1, r3, #16
 800fe3c:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800fe40:	0e1b      	lsrs	r3, r3, #24
 800fe42:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800fe46:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800fe4a:	0a13      	lsrs	r3, r2, #8
 800fe4c:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800fe50:	0c13      	lsrs	r3, r2, #16
 800fe52:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800fe56:	0e12      	lsrs	r2, r2, #24
 800fe58:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800fe5c:	e014      	b.n	800fe88 <PayloadEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800fe5e:	18f2      	adds	r2, r6, r3
 800fe60:	5ca0      	ldrb	r0, [r4, r2]
 800fe62:	f103 0120 	add.w	r1, r3, #32
 800fe66:	4469      	add	r1, sp
 800fe68:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800fe6c:	4048      	eors	r0, r1
 800fe6e:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800fe70:	3301      	adds	r3, #1
 800fe72:	b2db      	uxtb	r3, r3
 800fe74:	462a      	mov	r2, r5
 800fe76:	2d10      	cmp	r5, #16
 800fe78:	bfa8      	it	ge
 800fe7a:	2210      	movge	r2, #16
 800fe7c:	4293      	cmp	r3, r2
 800fe7e:	dbee      	blt.n	800fe5e <PayloadEncrypt+0x60>
        size -= 16;
 800fe80:	3d10      	subs	r5, #16
 800fe82:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800fe84:	3610      	adds	r6, #16
 800fe86:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800fe88:	2d00      	cmp	r5, #0
 800fe8a:	dd0e      	ble.n	800feaa <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
 800fe8c:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800fe90:	3701      	adds	r7, #1
 800fe92:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800fe94:	ab04      	add	r3, sp, #16
 800fe96:	4642      	mov	r2, r8
 800fe98:	2110      	movs	r1, #16
 800fe9a:	4668      	mov	r0, sp
 800fe9c:	f003 fb45 	bl	801352a <SecureElementAesEncrypt>
 800fea0:	4603      	mov	r3, r0
 800fea2:	2800      	cmp	r0, #0
 800fea4:	d0e6      	beq.n	800fe74 <PayloadEncrypt+0x76>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800fea6:	200f      	movs	r0, #15
 800fea8:	e000      	b.n	800feac <PayloadEncrypt+0xae>
    return LORAMAC_CRYPTO_SUCCESS;
 800feaa:	2000      	movs	r0, #0
}
 800feac:	b008      	add	sp, #32
 800feae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800feb2:	200a      	movs	r0, #10
 800feb4:	e7fa      	b.n	800feac <PayloadEncrypt+0xae>

0800feb6 <VerifyCmacB0>:
    if( msg == 0 )
 800feb6:	b368      	cbz	r0, 800ff14 <VerifyCmacB0+0x5e>
{
 800feb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800febc:	b0c8      	sub	sp, #288	@ 0x120
 800febe:	460c      	mov	r4, r1
 800fec0:	4615      	mov	r5, r2
 800fec2:	461e      	mov	r6, r3
 800fec4:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800fec6:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800feca:	d825      	bhi.n	800ff18 <VerifyCmacB0+0x62>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800fecc:	af04      	add	r7, sp, #16
 800fece:	f44f 7288 	mov.w	r2, #272	@ 0x110
 800fed2:	2100      	movs	r1, #0
 800fed4:	4638      	mov	r0, r7
 800fed6:	f003 fd6e 	bl	80139b6 <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800feda:	9702      	str	r7, [sp, #8]
 800fedc:	9b50      	ldr	r3, [sp, #320]	@ 0x140
 800fede:	9301      	str	r3, [sp, #4]
 800fee0:	9b4f      	ldr	r3, [sp, #316]	@ 0x13c
 800fee2:	9300      	str	r3, [sp, #0]
 800fee4:	f89d 3138 	ldrb.w	r3, [sp, #312]	@ 0x138
 800fee8:	4632      	mov	r2, r6
 800feea:	4629      	mov	r1, r5
 800feec:	4620      	mov	r0, r4
 800feee:	f7ff fe6d 	bl	800fbcc <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800fef2:	4622      	mov	r2, r4
 800fef4:	4641      	mov	r1, r8
 800fef6:	a808      	add	r0, sp, #32
 800fef8:	f003 fd45 	bl	8013986 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800fefc:	462b      	mov	r3, r5
 800fefe:	9a51      	ldr	r2, [sp, #324]	@ 0x144
 800ff00:	f104 0110 	add.w	r1, r4, #16
 800ff04:	4638      	mov	r0, r7
 800ff06:	f003 fafa 	bl	80134fe <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800ff0a:	b130      	cbz	r0, 800ff1a <VerifyCmacB0+0x64>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800ff0c:	2801      	cmp	r0, #1
 800ff0e:	d004      	beq.n	800ff1a <VerifyCmacB0+0x64>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ff10:	200f      	movs	r0, #15
 800ff12:	e002      	b.n	800ff1a <VerifyCmacB0+0x64>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ff14:	200a      	movs	r0, #10
}
 800ff16:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800ff18:	200e      	movs	r0, #14
}
 800ff1a:	b048      	add	sp, #288	@ 0x120
 800ff1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ff20 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800ff20:	b188      	cbz	r0, 800ff46 <LoRaMacCryptoInit+0x26>
{
 800ff22:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800ff24:	4c09      	ldr	r4, [pc, #36]	@ (800ff4c <LoRaMacCryptoInit+0x2c>)
 800ff26:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800ff28:	2228      	movs	r2, #40	@ 0x28
 800ff2a:	2100      	movs	r1, #0
 800ff2c:	f003 fd43 	bl	80139b6 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800ff30:	6823      	ldr	r3, [r4, #0]
 800ff32:	2201      	movs	r2, #1
 800ff34:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800ff36:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800ff38:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800ff3a:	2400      	movs	r4, #0
 800ff3c:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800ff3e:	f7ff fed9 	bl	800fcf4 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800ff42:	4620      	mov	r0, r4
}
 800ff44:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800ff46:	2009      	movs	r0, #9
}
 800ff48:	4770      	bx	lr
 800ff4a:	bf00      	nop
 800ff4c:	20003b88 	.word	0x20003b88

0800ff50 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800ff50:	4b02      	ldr	r3, [pc, #8]	@ (800ff5c <LoRaMacCryptoSetLrWanVersion+0xc>)
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800ff56:	2000      	movs	r0, #0
 800ff58:	4770      	bx	lr
 800ff5a:	bf00      	nop
 800ff5c:	20003b88 	.word	0x20003b88

0800ff60 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800ff60:	b130      	cbz	r0, 800ff70 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800ff62:	4b04      	ldr	r3, [pc, #16]	@ (800ff74 <LoRaMacCryptoGetFCntUp+0x14>)
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	68db      	ldr	r3, [r3, #12]
 800ff68:	3301      	adds	r3, #1
 800ff6a:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800ff6c:	2000      	movs	r0, #0
 800ff6e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ff70:	200a      	movs	r0, #10
}
 800ff72:	4770      	bx	lr
 800ff74:	20003b88 	.word	0x20003b88

0800ff78 <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 800ff78:	b570      	push	{r4, r5, r6, lr}
 800ff7a:	b082      	sub	sp, #8
 800ff7c:	4614      	mov	r4, r2
    uint32_t lastDown = 0;
 800ff7e:	2200      	movs	r2, #0
 800ff80:	9201      	str	r2, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800ff82:	b363      	cbz	r3, 800ffde <LoRaMacCryptoGetFCntDown+0x66>
 800ff84:	460d      	mov	r5, r1
 800ff86:	461e      	mov	r6, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800ff88:	a901      	add	r1, sp, #4
 800ff8a:	f7ff fe59 	bl	800fc40 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ff8e:	b9b8      	cbnz	r0, 800ffc0 <LoRaMacCryptoGetFCntDown+0x48>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 800ff90:	9b01      	ldr	r3, [sp, #4]
 800ff92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff96:	d015      	beq.n	800ffc4 <LoRaMacCryptoGetFCntDown+0x4c>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800ff98:	b29a      	uxth	r2, r3
 800ff9a:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 800ff9c:	2a00      	cmp	r2, #0
 800ff9e:	dd13      	ble.n	800ffc8 <LoRaMacCryptoGetFCntDown+0x50>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800ffa0:	4413      	add	r3, r2
 800ffa2:	6033      	str	r3, [r6, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800ffa4:	4b10      	ldr	r3, [pc, #64]	@ (800ffe8 <LoRaMacCryptoGetFCntDown+0x70>)
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	789a      	ldrb	r2, [r3, #2]
 800ffaa:	b94a      	cbnz	r2, 800ffc0 <LoRaMacCryptoGetFCntDown+0x48>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 800ffac:	6833      	ldr	r3, [r6, #0]
 800ffae:	9901      	ldr	r1, [sp, #4]
 800ffb0:	1a5b      	subs	r3, r3, r1
 800ffb2:	eb61 0101 	sbc.w	r1, r1, r1
 800ffb6:	42ab      	cmp	r3, r5
 800ffb8:	f171 0100 	sbcs.w	r1, r1, #0
 800ffbc:	da11      	bge.n	800ffe2 <LoRaMacCryptoGetFCntDown+0x6a>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 800ffbe:	4610      	mov	r0, r2
}
 800ffc0:	b002      	add	sp, #8
 800ffc2:	bd70      	pop	{r4, r5, r6, pc}
        *currentDown = frameFcnt;
 800ffc4:	6034      	str	r4, [r6, #0]
 800ffc6:	e7ed      	b.n	800ffa4 <LoRaMacCryptoGetFCntDown+0x2c>
        else if( fCntDiff == 0 )
 800ffc8:	b132      	cbz	r2, 800ffd8 <LoRaMacCryptoGetFCntDown+0x60>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800ffca:	0c1b      	lsrs	r3, r3, #16
 800ffcc:	041b      	lsls	r3, r3, #16
 800ffce:	4423      	add	r3, r4
 800ffd0:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800ffd4:	6033      	str	r3, [r6, #0]
 800ffd6:	e7e5      	b.n	800ffa4 <LoRaMacCryptoGetFCntDown+0x2c>
            *currentDown = lastDown;
 800ffd8:	6033      	str	r3, [r6, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800ffda:	2007      	movs	r0, #7
 800ffdc:	e7f0      	b.n	800ffc0 <LoRaMacCryptoGetFCntDown+0x48>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ffde:	200a      	movs	r0, #10
 800ffe0:	e7ee      	b.n	800ffc0 <LoRaMacCryptoGetFCntDown+0x48>
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 800ffe2:	2008      	movs	r0, #8
 800ffe4:	e7ec      	b.n	800ffc0 <LoRaMacCryptoGetFCntDown+0x48>
 800ffe6:	bf00      	nop
 800ffe8:	20003b88 	.word	0x20003b88

0800ffec <LoRaMacCryptoSetMulticastReference>:
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800ffec:	4601      	mov	r1, r0
 800ffee:	b908      	cbnz	r0, 800fff4 <LoRaMacCryptoSetMulticastReference+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fff0:	200a      	movs	r0, #10
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800fff2:	4770      	bx	lr
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fff4:	2300      	movs	r3, #0
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	dd01      	ble.n	800fffe <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800fffa:	2000      	movs	r0, #0
 800fffc:	4770      	bx	lr
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800fffe:	4a07      	ldr	r2, [pc, #28]	@ (801001c <LoRaMacCryptoSetMulticastReference+0x30>)
 8010000:	6812      	ldr	r2, [r2, #0]
 8010002:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8010006:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 801000a:	f103 0c06 	add.w	ip, r3, #6
 801000e:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 8010012:	3204      	adds	r2, #4
 8010014:	6242      	str	r2, [r0, #36]	@ 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010016:	3301      	adds	r3, #1
 8010018:	e7ed      	b.n	800fff6 <LoRaMacCryptoSetMulticastReference+0xa>
 801001a:	bf00      	nop
 801001c:	20003b88 	.word	0x20003b88

08010020 <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 8010020:	b300      	cbz	r0, 8010064 <LoRaMacCryptoPrepareJoinRequest+0x44>
{
 8010022:	b510      	push	{r4, lr}
 8010024:	b084      	sub	sp, #16
 8010026:	4604      	mov	r4, r0
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8010028:	2300      	movs	r3, #0
 801002a:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 801002c:	a803      	add	r0, sp, #12
 801002e:	f003 fb53 	bl	80136d8 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8010032:	4b10      	ldr	r3, [pc, #64]	@ (8010074 <LoRaMacCryptoPrepareJoinRequest+0x54>)
 8010034:	681a      	ldr	r2, [r3, #0]
 8010036:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801003a:	8093      	strh	r3, [r2, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 801003c:	82e3      	strh	r3, [r4, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801003e:	4620      	mov	r0, r4
 8010040:	f000 fa33 	bl	80104aa <LoRaMacSerializerJoinRequest>
 8010044:	b980      	cbnz	r0, 8010068 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8010046:	4623      	mov	r3, r4
 8010048:	f853 1b18 	ldr.w	r1, [r3], #24
 801004c:	9300      	str	r3, [sp, #0]
 801004e:	2301      	movs	r3, #1
 8010050:	2213      	movs	r2, #19
 8010052:	f003 fa45 	bl	80134e0 <SecureElementComputeAesCmac>
 8010056:	b950      	cbnz	r0, 801006e <LoRaMacCryptoPrepareJoinRequest+0x4e>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8010058:	4620      	mov	r0, r4
 801005a:	f000 fa26 	bl	80104aa <LoRaMacSerializerJoinRequest>
 801005e:	b120      	cbz	r0, 801006a <LoRaMacCryptoPrepareJoinRequest+0x4a>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8010060:	2011      	movs	r0, #17
 8010062:	e002      	b.n	801006a <LoRaMacCryptoPrepareJoinRequest+0x4a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010064:	200a      	movs	r0, #10
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 8010066:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8010068:	2011      	movs	r0, #17
}
 801006a:	b004      	add	sp, #16
 801006c:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801006e:	200f      	movs	r0, #15
 8010070:	e7fb      	b.n	801006a <LoRaMacCryptoPrepareJoinRequest+0x4a>
 8010072:	bf00      	nop
 8010074:	20003b88 	.word	0x20003b88

08010078 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 8010078:	2b00      	cmp	r3, #0
 801007a:	d036      	beq.n	80100ea <LoRaMacCryptoSecureMessage+0x72>
{
 801007c:	b530      	push	{r4, r5, lr}
 801007e:	b085      	sub	sp, #20
 8010080:	4604      	mov	r4, r0
 8010082:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8010084:	4b1d      	ldr	r3, [pc, #116]	@ (80100fc <LoRaMacCryptoSecureMessage+0x84>)
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	68db      	ldr	r3, [r3, #12]
 801008a:	4283      	cmp	r3, r0
 801008c:	d82f      	bhi.n	80100ee <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 801008e:	f895 2020 	ldrb.w	r2, [r5, #32]
 8010092:	b342      	cbz	r2, 80100e6 <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8010094:	2209      	movs	r2, #9
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8010096:	42a3      	cmp	r3, r4
 8010098:	d209      	bcs.n	80100ae <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 801009a:	9401      	str	r4, [sp, #4]
 801009c:	2300      	movs	r3, #0
 801009e:	9300      	str	r3, [sp, #0]
 80100a0:	68ab      	ldr	r3, [r5, #8]
 80100a2:	f895 1028 	ldrb.w	r1, [r5, #40]	@ 0x28
 80100a6:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 80100a8:	f7ff fea9 	bl	800fdfe <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80100ac:	bb10      	cbnz	r0, 80100f4 <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80100ae:	4628      	mov	r0, r5
 80100b0:	f000 fa31 	bl	8010516 <LoRaMacSerializerData>
 80100b4:	b9e8      	cbnz	r0, 80100f2 <LoRaMacCryptoSecureMessage+0x7a>
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80100b6:	7929      	ldrb	r1, [r5, #4]
 80100b8:	3904      	subs	r1, #4
 80100ba:	462b      	mov	r3, r5
 80100bc:	f853 0b2c 	ldr.w	r0, [r3], #44
 80100c0:	9303      	str	r3, [sp, #12]
 80100c2:	9402      	str	r4, [sp, #8]
 80100c4:	68ab      	ldr	r3, [r5, #8]
 80100c6:	9301      	str	r3, [sp, #4]
 80100c8:	2300      	movs	r3, #0
 80100ca:	9300      	str	r3, [sp, #0]
 80100cc:	2208      	movs	r2, #8
 80100ce:	b289      	uxth	r1, r1
 80100d0:	f7ff fe32 	bl	800fd38 <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80100d4:	b970      	cbnz	r0, 80100f4 <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80100d6:	4628      	mov	r0, r5
 80100d8:	f000 fa1d 	bl	8010516 <LoRaMacSerializerData>
 80100dc:	b960      	cbnz	r0, 80100f8 <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 80100de:	4b07      	ldr	r3, [pc, #28]	@ (80100fc <LoRaMacCryptoSecureMessage+0x84>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 80100e4:	e006      	b.n	80100f4 <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 80100e6:	2208      	movs	r2, #8
 80100e8:	e7d5      	b.n	8010096 <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 80100ea:	200a      	movs	r0, #10
}
 80100ec:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80100ee:	2006      	movs	r0, #6
 80100f0:	e000      	b.n	80100f4 <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80100f2:	2011      	movs	r0, #17
}
 80100f4:	b005      	add	sp, #20
 80100f6:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80100f8:	2011      	movs	r0, #17
 80100fa:	e7fb      	b.n	80100f4 <LoRaMacCryptoSecureMessage+0x7c>
 80100fc:	20003b88 	.word	0x20003b88

08010100 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8010100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010104:	b087      	sub	sp, #28
 8010106:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
    if( macMsg == 0 )
 8010108:	2e00      	cmp	r6, #0
 801010a:	d049      	beq.n	80101a0 <LoRaMacCryptoUnsecureMessage+0xa0>
 801010c:	4605      	mov	r5, r0
 801010e:	4688      	mov	r8, r1
 8010110:	4617      	mov	r7, r2
 8010112:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8010114:	4619      	mov	r1, r3
 8010116:	4610      	mov	r0, r2
 8010118:	f7ff fdb8 	bl	800fc8c <CheckFCntDown>
 801011c:	2800      	cmp	r0, #0
 801011e:	d041      	beq.n	80101a4 <LoRaMacCryptoUnsecureMessage+0xa4>
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8010120:	4630      	mov	r0, r6
 8010122:	f000 f963 	bl	80103ec <LoRaMacParserData>
 8010126:	2800      	cmp	r0, #0
 8010128:	d141      	bne.n	80101ae <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 801012a:	a905      	add	r1, sp, #20
 801012c:	4628      	mov	r0, r5
 801012e:	f7ff fd71 	bl	800fc14 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010132:	4605      	mov	r5, r0
 8010134:	2800      	cmp	r0, #0
 8010136:	d136      	bne.n	80101a6 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8010138:	9b05      	ldr	r3, [sp, #20]
 801013a:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 801013e:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8010140:	68b3      	ldr	r3, [r6, #8]
 8010142:	4543      	cmp	r3, r8
 8010144:	d135      	bne.n	80101b2 <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8010146:	7b33      	ldrb	r3, [r6, #12]
 8010148:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 801014c:	491a      	ldr	r1, [pc, #104]	@ (80101b8 <LoRaMacCryptoUnsecureMessage+0xb8>)
 801014e:	6809      	ldr	r1, [r1, #0]
 8010150:	7889      	ldrb	r1, [r1, #2]
 8010152:	b901      	cbnz	r1, 8010156 <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8010154:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8010156:	7931      	ldrb	r1, [r6, #4]
 8010158:	3904      	subs	r1, #4
 801015a:	6af0      	ldr	r0, [r6, #44]	@ 0x2c
 801015c:	9003      	str	r0, [sp, #12]
 801015e:	9402      	str	r4, [sp, #8]
 8010160:	f8cd 8004 	str.w	r8, [sp, #4]
 8010164:	2001      	movs	r0, #1
 8010166:	9000      	str	r0, [sp, #0]
 8010168:	b289      	uxth	r1, r1
 801016a:	6830      	ldr	r0, [r6, #0]
 801016c:	f7ff fea3 	bl	800feb6 <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010170:	4605      	mov	r5, r0
 8010172:	b9c0      	cbnz	r0, 80101a6 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8010174:	f896 3020 	ldrb.w	r3, [r6, #32]
 8010178:	b90b      	cbnz	r3, 801017e <LoRaMacCryptoUnsecureMessage+0x7e>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 801017a:	f04f 0908 	mov.w	r9, #8
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 801017e:	9401      	str	r4, [sp, #4]
 8010180:	2301      	movs	r3, #1
 8010182:	9300      	str	r3, [sp, #0]
 8010184:	4643      	mov	r3, r8
 8010186:	464a      	mov	r2, r9
 8010188:	f896 1028 	ldrb.w	r1, [r6, #40]	@ 0x28
 801018c:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 801018e:	f7ff fe36 	bl	800fdfe <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010192:	4605      	mov	r5, r0
 8010194:	b938      	cbnz	r0, 80101a6 <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 8010196:	4621      	mov	r1, r4
 8010198:	4638      	mov	r0, r7
 801019a:	f7ff fd8f 	bl	800fcbc <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 801019e:	e002      	b.n	80101a6 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 80101a0:	250a      	movs	r5, #10
 80101a2:	e000      	b.n	80101a6 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80101a4:	2506      	movs	r5, #6
}
 80101a6:	4628      	mov	r0, r5
 80101a8:	b007      	add	sp, #28
 80101aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80101ae:	2510      	movs	r5, #16
 80101b0:	e7f9      	b.n	80101a6 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 80101b2:	2502      	movs	r5, #2
 80101b4:	e7f7      	b.n	80101a6 <LoRaMacCryptoUnsecureMessage+0xa6>
 80101b6:	bf00      	nop
 80101b8:	20003b88 	.word	0x20003b88

080101bc <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 80101bc:	b500      	push	{lr}
 80101be:	b085      	sub	sp, #20
 80101c0:	460a      	mov	r2, r1
    uint8_t compBase[16] = { 0 };
 80101c2:	2300      	movs	r3, #0
 80101c4:	9300      	str	r3, [sp, #0]
 80101c6:	9301      	str	r3, [sp, #4]
 80101c8:	9302      	str	r3, [sp, #8]
 80101ca:	9303      	str	r3, [sp, #12]
    KeyIdentifier_t rootKeyId = APP_KEY;
    switch( keyID )
 80101cc:	290b      	cmp	r1, #11
 80101ce:	d007      	beq.n	80101e0 <LoRaMacCryptoDeriveLifeTimeKey+0x24>
 80101d0:	290c      	cmp	r1, #12
 80101d2:	d013      	beq.n	80101fc <LoRaMacCryptoDeriveLifeTimeKey+0x40>
 80101d4:	290a      	cmp	r1, #10
 80101d6:	d00c      	beq.n	80101f2 <LoRaMacCryptoDeriveLifeTimeKey+0x36>
 80101d8:	200b      	movs	r0, #11
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 80101da:	b005      	add	sp, #20
 80101dc:	f85d fb04 	ldr.w	pc, [sp], #4
            if( versionMinor == 1 )
 80101e0:	2801      	cmp	r0, #1
 80101e2:	d001      	beq.n	80101e8 <LoRaMacCryptoDeriveLifeTimeKey+0x2c>
    KeyIdentifier_t rootKeyId = APP_KEY;
 80101e4:	2100      	movs	r1, #0
 80101e6:	e00a      	b.n	80101fe <LoRaMacCryptoDeriveLifeTimeKey+0x42>
                compBase[0] = 0x20;
 80101e8:	2320      	movs	r3, #32
 80101ea:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 80101ee:	2100      	movs	r1, #0
 80101f0:	e005      	b.n	80101fe <LoRaMacCryptoDeriveLifeTimeKey+0x42>
            compBase[0] = 0x30;
 80101f2:	2330      	movs	r3, #48	@ 0x30
 80101f4:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 80101f8:	2100      	movs	r1, #0
            break;
 80101fa:	e000      	b.n	80101fe <LoRaMacCryptoDeriveLifeTimeKey+0x42>
    switch( keyID )
 80101fc:	210b      	movs	r1, #11
    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 80101fe:	4668      	mov	r0, sp
 8010200:	f003 fa0c 	bl	801361c <SecureElementDeriveAndStoreKey>
 8010204:	2800      	cmp	r0, #0
 8010206:	d0e8      	beq.n	80101da <LoRaMacCryptoDeriveLifeTimeKey+0x1e>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010208:	200f      	movs	r0, #15
 801020a:	e7e6      	b.n	80101da <LoRaMacCryptoDeriveLifeTimeKey+0x1e>

0801020c <LoRaMacCryptoSetKey>:
{
 801020c:	b510      	push	{r4, lr}
 801020e:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8010210:	f003 f9c2 	bl	8013598 <SecureElementSetKey>
 8010214:	b998      	cbnz	r0, 801023e <LoRaMacCryptoSetKey+0x32>
    if( keyID == APP_KEY )
 8010216:	b104      	cbz	r4, 801021a <LoRaMacCryptoSetKey+0xe>
}
 8010218:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801021a:	4b0c      	ldr	r3, [pc, #48]	@ (801024c <LoRaMacCryptoSetKey+0x40>)
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	210b      	movs	r1, #11
 8010220:	7898      	ldrb	r0, [r3, #2]
 8010222:	f7ff ffcb 	bl	80101bc <LoRaMacCryptoDeriveLifeTimeKey>
 8010226:	b960      	cbnz	r0, 8010242 <LoRaMacCryptoSetKey+0x36>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8010228:	210c      	movs	r1, #12
 801022a:	f7ff ffc7 	bl	80101bc <LoRaMacCryptoDeriveLifeTimeKey>
 801022e:	b950      	cbnz	r0, 8010246 <LoRaMacCryptoSetKey+0x3a>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8010230:	210a      	movs	r1, #10
 8010232:	f7ff ffc3 	bl	80101bc <LoRaMacCryptoDeriveLifeTimeKey>
 8010236:	2800      	cmp	r0, #0
 8010238:	d0ee      	beq.n	8010218 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801023a:	200f      	movs	r0, #15
 801023c:	e7ec      	b.n	8010218 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801023e:	200f      	movs	r0, #15
 8010240:	e7ea      	b.n	8010218 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010242:	200f      	movs	r0, #15
 8010244:	e7e8      	b.n	8010218 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010246:	200f      	movs	r0, #15
 8010248:	e7e6      	b.n	8010218 <LoRaMacCryptoSetKey+0xc>
 801024a:	bf00      	nop
 801024c:	20003b88 	.word	0x20003b88

08010250 <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8010250:	2a00      	cmp	r2, #0
 8010252:	d06c      	beq.n	801032e <LoRaMacCryptoHandleJoinAccept+0xde>
{
 8010254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010256:	b08f      	sub	sp, #60	@ 0x3c
 8010258:	4607      	mov	r7, r0
 801025a:	460d      	mov	r5, r1
 801025c:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 801025e:	2900      	cmp	r1, #0
 8010260:	d067      	beq.n	8010332 <LoRaMacCryptoHandleJoinAccept+0xe2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8010262:	2600      	movs	r6, #0
 8010264:	9605      	str	r6, [sp, #20]
 8010266:	221d      	movs	r2, #29
 8010268:	4631      	mov	r1, r6
 801026a:	a806      	add	r0, sp, #24
 801026c:	f005 ff46 	bl	80160fc <memset>
    uint8_t versionMinor         = 0;
 8010270:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8010274:	4b33      	ldr	r3, [pc, #204]	@ (8010344 <LoRaMacCryptoHandleJoinAccept+0xf4>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 801027a:	f10d 0313 	add.w	r3, sp, #19
 801027e:	9302      	str	r3, [sp, #8]
 8010280:	ab05      	add	r3, sp, #20
 8010282:	9301      	str	r3, [sp, #4]
 8010284:	7923      	ldrb	r3, [r4, #4]
 8010286:	9300      	str	r3, [sp, #0]
 8010288:	6823      	ldr	r3, [r4, #0]
 801028a:	4632      	mov	r2, r6
 801028c:	4629      	mov	r1, r5
 801028e:	4638      	mov	r0, r7
 8010290:	f003 f9e4 	bl	801365c <SecureElementProcessJoinAccept>
 8010294:	2800      	cmp	r0, #0
 8010296:	d14e      	bne.n	8010336 <LoRaMacCryptoHandleJoinAccept+0xe6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8010298:	7922      	ldrb	r2, [r4, #4]
 801029a:	a905      	add	r1, sp, #20
 801029c:	6820      	ldr	r0, [r4, #0]
 801029e:	f003 fb72 	bl	8013986 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80102a2:	4620      	mov	r0, r4
 80102a4:	f000 f850 	bl	8010348 <LoRaMacParserJoinAccept>
 80102a8:	2800      	cmp	r0, #0
 80102aa:	d147      	bne.n	801033c <LoRaMacCryptoHandleJoinAccept+0xec>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 80102ac:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 80102ae:	79e3      	ldrb	r3, [r4, #7]
 80102b0:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 80102b4:	7a23      	ldrb	r3, [r4, #8]
 80102b6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 80102ba:	4628      	mov	r0, r5
 80102bc:	f7ff fd32 	bl	800fd24 <IsJoinNonce10xOk>
    if( isJoinNonceOk == true )
 80102c0:	2800      	cmp	r0, #0
 80102c2:	d03d      	beq.n	8010340 <LoRaMacCryptoHandleJoinAccept+0xf0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 80102c4:	4b1f      	ldr	r3, [pc, #124]	@ (8010344 <LoRaMacCryptoHandleJoinAccept+0xf4>)
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 80102ca:	210b      	movs	r1, #11
 80102cc:	f89d 0013 	ldrb.w	r0, [sp, #19]
 80102d0:	f7ff ff74 	bl	80101bc <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80102d4:	bb80      	cbnz	r0, 8010338 <LoRaMacCryptoHandleJoinAccept+0xe8>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 80102d6:	210c      	movs	r1, #12
 80102d8:	2000      	movs	r0, #0
 80102da:	f7ff ff6f 	bl	80101bc <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80102de:	bb58      	cbnz	r0, 8010338 <LoRaMacCryptoHandleJoinAccept+0xe8>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 80102e0:	210a      	movs	r1, #10
 80102e2:	2000      	movs	r0, #0
 80102e4:	f7ff ff6a 	bl	80101bc <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80102e8:	bb30      	cbnz	r0, 8010338 <LoRaMacCryptoHandleJoinAccept+0xe8>
        netID = ( uint32_t )macMsg->NetID[0];
 80102ea:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 80102ec:	7aa2      	ldrb	r2, [r4, #10]
 80102ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 80102f2:	7ae2      	ldrb	r2, [r4, #11]
 80102f4:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 80102f8:	4633      	mov	r3, r6
 80102fa:	4622      	mov	r2, r4
 80102fc:	4629      	mov	r1, r5
 80102fe:	2009      	movs	r0, #9
 8010300:	f7ff fd46 	bl	800fd90 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010304:	b9c0      	cbnz	r0, 8010338 <LoRaMacCryptoHandleJoinAccept+0xe8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8010306:	4633      	mov	r3, r6
 8010308:	4622      	mov	r2, r4
 801030a:	4629      	mov	r1, r5
 801030c:	2008      	movs	r0, #8
 801030e:	f7ff fd3f 	bl	800fd90 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010312:	b988      	cbnz	r0, 8010338 <LoRaMacCryptoHandleJoinAccept+0xe8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8010314:	4b0b      	ldr	r3, [pc, #44]	@ (8010344 <LoRaMacCryptoHandleJoinAccept+0xf4>)
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	f89d 2013 	ldrb.w	r2, [sp, #19]
 801031c:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 801031e:	2200      	movs	r2, #0
 8010320:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8010322:	f04f 32ff 	mov.w	r2, #4294967295
 8010326:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8010328:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 801032a:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 801032c:	e004      	b.n	8010338 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 801032e:	200a      	movs	r0, #10
}
 8010330:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010332:	200a      	movs	r0, #10
 8010334:	e000      	b.n	8010338 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010336:	200f      	movs	r0, #15
}
 8010338:	b00f      	add	sp, #60	@ 0x3c
 801033a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801033c:	2010      	movs	r0, #16
 801033e:	e7fb      	b.n	8010338 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8010340:	2003      	movs	r0, #3
 8010342:	e7f9      	b.n	8010338 <LoRaMacCryptoHandleJoinAccept+0xe8>
 8010344:	20003b88 	.word	0x20003b88

08010348 <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8010348:	2800      	cmp	r0, #0
 801034a:	d049      	beq.n	80103e0 <LoRaMacParserJoinAccept+0x98>
{
 801034c:	b510      	push	{r4, lr}
 801034e:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8010350:	6801      	ldr	r1, [r0, #0]
 8010352:	2900      	cmp	r1, #0
 8010354:	d046      	beq.n	80103e4 <LoRaMacParserJoinAccept+0x9c>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8010356:	f811 3b01 	ldrb.w	r3, [r1], #1
 801035a:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 801035c:	2203      	movs	r2, #3
 801035e:	3006      	adds	r0, #6
 8010360:	f003 fb11 	bl	8013986 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8010364:	4620      	mov	r0, r4
 8010366:	f850 1b09 	ldr.w	r1, [r0], #9
 801036a:	2203      	movs	r2, #3
 801036c:	3104      	adds	r1, #4
 801036e:	f003 fb0a 	bl	8013986 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8010372:	6821      	ldr	r1, [r4, #0]
 8010374:	79cb      	ldrb	r3, [r1, #7]
 8010376:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8010378:	7a0a      	ldrb	r2, [r1, #8]
 801037a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801037e:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8010380:	7a4a      	ldrb	r2, [r1, #9]
 8010382:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010386:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8010388:	7a8a      	ldrb	r2, [r1, #10]
 801038a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801038e:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8010390:	7acb      	ldrb	r3, [r1, #11]
 8010392:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8010394:	7b0b      	ldrb	r3, [r1, #12]
 8010396:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8010398:	7923      	ldrb	r3, [r4, #4]
 801039a:	2b21      	cmp	r3, #33	@ 0x21
 801039c:	d018      	beq.n	80103d0 <LoRaMacParserJoinAccept+0x88>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 801039e:	2b11      	cmp	r3, #17
 80103a0:	dc22      	bgt.n	80103e8 <LoRaMacParserJoinAccept+0xa0>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80103a2:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80103a4:	6821      	ldr	r1, [r4, #0]
 80103a6:	f102 0c01 	add.w	ip, r2, #1
 80103aa:	5c8b      	ldrb	r3, [r1, r2]
 80103ac:	6263      	str	r3, [r4, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80103ae:	1c90      	adds	r0, r2, #2
 80103b0:	f811 c00c 	ldrb.w	ip, [r1, ip]
 80103b4:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80103b8:	6263      	str	r3, [r4, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80103ba:	3203      	adds	r2, #3
 80103bc:	5c08      	ldrb	r0, [r1, r0]
 80103be:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80103c2:	6263      	str	r3, [r4, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80103c4:	5c8a      	ldrb	r2, [r1, r2]
 80103c6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80103ca:	6263      	str	r3, [r4, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 80103cc:	2000      	movs	r0, #0
}
 80103ce:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 80103d0:	2210      	movs	r2, #16
 80103d2:	310d      	adds	r1, #13
 80103d4:	f104 0012 	add.w	r0, r4, #18
 80103d8:	f003 fad5 	bl	8013986 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 80103dc:	221d      	movs	r2, #29
 80103de:	e7e1      	b.n	80103a4 <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 80103e0:	2002      	movs	r0, #2
}
 80103e2:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 80103e4:	2002      	movs	r0, #2
 80103e6:	e7f2      	b.n	80103ce <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_FAIL;
 80103e8:	2001      	movs	r0, #1
 80103ea:	e7f0      	b.n	80103ce <LoRaMacParserJoinAccept+0x86>

080103ec <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80103ec:	2800      	cmp	r0, #0
 80103ee:	d058      	beq.n	80104a2 <LoRaMacParserData+0xb6>
{
 80103f0:	b510      	push	{r4, lr}
 80103f2:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80103f4:	6801      	ldr	r1, [r0, #0]
 80103f6:	2900      	cmp	r1, #0
 80103f8:	d055      	beq.n	80104a6 <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80103fa:	780b      	ldrb	r3, [r1, #0]
 80103fc:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 80103fe:	784b      	ldrb	r3, [r1, #1]
 8010400:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8010402:	788a      	ldrb	r2, [r1, #2]
 8010404:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010408:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801040a:	78ca      	ldrb	r2, [r1, #3]
 801040c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010410:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8010412:	790a      	ldrb	r2, [r1, #4]
 8010414:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010418:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 801041a:	794b      	ldrb	r3, [r1, #5]
 801041c:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 801041e:	798b      	ldrb	r3, [r1, #6]
 8010420:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8010422:	79ca      	ldrb	r2, [r1, #7]
 8010424:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010428:	81c3      	strh	r3, [r0, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801042a:	7b02      	ldrb	r2, [r0, #12]
 801042c:	f002 020f 	and.w	r2, r2, #15
 8010430:	3108      	adds	r1, #8
 8010432:	3010      	adds	r0, #16
 8010434:	f003 faa7 	bl	8013986 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8010438:	7b23      	ldrb	r3, [r4, #12]
 801043a:	f003 030f 	and.w	r3, r3, #15
 801043e:	f103 0008 	add.w	r0, r3, #8

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8010442:	2200      	movs	r2, #0
 8010444:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 8010448:	f884 2028 	strb.w	r2, [r4, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 801044c:	7922      	ldrb	r2, [r4, #4]
 801044e:	1a11      	subs	r1, r2, r0
 8010450:	2904      	cmp	r1, #4
 8010452:	dc16      	bgt.n	8010482 <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8010454:	6822      	ldr	r2, [r4, #0]
 8010456:	7923      	ldrb	r3, [r4, #4]
 8010458:	441a      	add	r2, r3
 801045a:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 801045e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8010460:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8010464:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8010468:	62e3      	str	r3, [r4, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 801046a:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 801046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010472:	62e3      	str	r3, [r4, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8010474:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8010478:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801047c:	62e3      	str	r3, [r4, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 801047e:	2000      	movs	r0, #0
}
 8010480:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8010482:	6821      	ldr	r1, [r4, #0]
 8010484:	3309      	adds	r3, #9
 8010486:	5c08      	ldrb	r0, [r1, r0]
 8010488:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 801048c:	1ad2      	subs	r2, r2, r3
 801048e:	b2d2      	uxtb	r2, r2
 8010490:	3a04      	subs	r2, #4
 8010492:	b2d2      	uxtb	r2, r2
 8010494:	f884 2028 	strb.w	r2, [r4, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8010498:	4419      	add	r1, r3
 801049a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 801049c:	f003 fa73 	bl	8013986 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 80104a0:	e7d8      	b.n	8010454 <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 80104a2:	2002      	movs	r0, #2
}
 80104a4:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 80104a6:	2002      	movs	r0, #2
 80104a8:	e7ea      	b.n	8010480 <LoRaMacParserData+0x94>

080104aa <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80104aa:	b370      	cbz	r0, 801050a <LoRaMacSerializerJoinRequest+0x60>
{
 80104ac:	b510      	push	{r4, lr}
 80104ae:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80104b0:	6803      	ldr	r3, [r0, #0]
 80104b2:	b363      	cbz	r3, 801050e <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 80104b4:	7902      	ldrb	r2, [r0, #4]
 80104b6:	2a16      	cmp	r2, #22
 80104b8:	d92b      	bls.n	8010512 <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80104ba:	7942      	ldrb	r2, [r0, #5]
 80104bc:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 80104be:	4601      	mov	r1, r0
 80104c0:	f851 0b06 	ldr.w	r0, [r1], #6
 80104c4:	2208      	movs	r2, #8
 80104c6:	3001      	adds	r0, #1
 80104c8:	f003 fa68 	bl	801399c <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80104cc:	4621      	mov	r1, r4
 80104ce:	f851 0b0e 	ldr.w	r0, [r1], #14
 80104d2:	2208      	movs	r2, #8
 80104d4:	3009      	adds	r0, #9
 80104d6:	f003 fa61 	bl	801399c <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 80104da:	8ae2      	ldrh	r2, [r4, #22]
 80104dc:	6823      	ldr	r3, [r4, #0]
 80104de:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 80104e0:	8ae3      	ldrh	r3, [r4, #22]
 80104e2:	6822      	ldr	r2, [r4, #0]
 80104e4:	0a1b      	lsrs	r3, r3, #8
 80104e6:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80104e8:	69a2      	ldr	r2, [r4, #24]
 80104ea:	6823      	ldr	r3, [r4, #0]
 80104ec:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80104ee:	69a3      	ldr	r3, [r4, #24]
 80104f0:	0a1b      	lsrs	r3, r3, #8
 80104f2:	6822      	ldr	r2, [r4, #0]
 80104f4:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80104f6:	8b62      	ldrh	r2, [r4, #26]
 80104f8:	6823      	ldr	r3, [r4, #0]
 80104fa:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80104fc:	7ee2      	ldrb	r2, [r4, #27]
 80104fe:	6823      	ldr	r3, [r4, #0]
 8010500:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 8010502:	2317      	movs	r3, #23
 8010504:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8010506:	2000      	movs	r0, #0
}
 8010508:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801050a:	2001      	movs	r0, #1
}
 801050c:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801050e:	2001      	movs	r0, #1
 8010510:	e7fa      	b.n	8010508 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8010512:	2002      	movs	r0, #2
 8010514:	e7f8      	b.n	8010508 <LoRaMacSerializerJoinRequest+0x5e>

08010516 <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8010516:	2800      	cmp	r0, #0
 8010518:	d066      	beq.n	80105e8 <LoRaMacSerializerData+0xd2>
{
 801051a:	b538      	push	{r3, r4, r5, lr}
 801051c:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801051e:	6801      	ldr	r1, [r0, #0]
 8010520:	2900      	cmp	r1, #0
 8010522:	d063      	beq.n	80105ec <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8010524:	7b02      	ldrb	r2, [r0, #12]
 8010526:	f002 020f 	and.w	r2, r2, #15
 801052a:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 801052e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8010532:	b10b      	cbz	r3, 8010538 <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8010534:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8010538:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 801053a:	3304      	adds	r3, #4
 801053c:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 801053e:	7922      	ldrb	r2, [r4, #4]
 8010540:	429a      	cmp	r2, r3
 8010542:	d355      	bcc.n	80105f0 <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8010544:	7963      	ldrb	r3, [r4, #5]
 8010546:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8010548:	68a2      	ldr	r2, [r4, #8]
 801054a:	6823      	ldr	r3, [r4, #0]
 801054c:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 801054e:	68a3      	ldr	r3, [r4, #8]
 8010550:	0a1b      	lsrs	r3, r3, #8
 8010552:	6822      	ldr	r2, [r4, #0]
 8010554:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8010556:	8962      	ldrh	r2, [r4, #10]
 8010558:	6823      	ldr	r3, [r4, #0]
 801055a:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 801055c:	7ae2      	ldrb	r2, [r4, #11]
 801055e:	6823      	ldr	r3, [r4, #0]
 8010560:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8010562:	6823      	ldr	r3, [r4, #0]
 8010564:	7b22      	ldrb	r2, [r4, #12]
 8010566:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8010568:	89e2      	ldrh	r2, [r4, #14]
 801056a:	6823      	ldr	r3, [r4, #0]
 801056c:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 801056e:	89e3      	ldrh	r3, [r4, #14]
 8010570:	6822      	ldr	r2, [r4, #0]
 8010572:	0a1b      	lsrs	r3, r3, #8
 8010574:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8010576:	4621      	mov	r1, r4
 8010578:	f851 0b10 	ldr.w	r0, [r1], #16
 801057c:	7b22      	ldrb	r2, [r4, #12]
 801057e:	f002 020f 	and.w	r2, r2, #15
 8010582:	3008      	adds	r0, #8
 8010584:	f003 f9ff 	bl	8013986 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8010588:	7b23      	ldrb	r3, [r4, #12]
 801058a:	f003 030f 	and.w	r3, r3, #15
 801058e:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 8010592:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 8010596:	b12a      	cbz	r2, 80105a4 <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8010598:	6822      	ldr	r2, [r4, #0]
 801059a:	f894 1020 	ldrb.w	r1, [r4, #32]
 801059e:	5551      	strb	r1, [r2, r5]
 80105a0:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 80105a4:	6820      	ldr	r0, [r4, #0]
 80105a6:	f894 2028 	ldrb.w	r2, [r4, #40]	@ 0x28
 80105aa:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80105ac:	4428      	add	r0, r5
 80105ae:	f003 f9ea 	bl	8013986 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 80105b2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80105b6:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80105b8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80105ba:	6821      	ldr	r1, [r4, #0]
 80105bc:	1c5a      	adds	r2, r3, #1
 80105be:	b292      	uxth	r2, r2
 80105c0:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80105c2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80105c4:	0a08      	lsrs	r0, r1, #8
 80105c6:	6825      	ldr	r5, [r4, #0]
 80105c8:	1c99      	adds	r1, r3, #2
 80105ca:	b289      	uxth	r1, r1
 80105cc:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80105ce:	8de5      	ldrh	r5, [r4, #46]	@ 0x2e
 80105d0:	6820      	ldr	r0, [r4, #0]
 80105d2:	1cda      	adds	r2, r3, #3
 80105d4:	b292      	uxth	r2, r2
 80105d6:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80105d8:	f894 002f 	ldrb.w	r0, [r4, #47]	@ 0x2f
 80105dc:	6821      	ldr	r1, [r4, #0]
 80105de:	3304      	adds	r3, #4
 80105e0:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 80105e2:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80105e4:	2000      	movs	r0, #0
}
 80105e6:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80105e8:	2001      	movs	r0, #1
}
 80105ea:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80105ec:	2001      	movs	r0, #1
 80105ee:	e7fa      	b.n	80105e6 <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80105f0:	2002      	movs	r0, #2
 80105f2:	e7f8      	b.n	80105e6 <LoRaMacSerializerData+0xd0>

080105f4 <NvmDataMgmtEvent>:
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 80105f4:	4b02      	ldr	r3, [pc, #8]	@ (8010600 <NvmDataMgmtEvent+0xc>)
 80105f6:	881a      	ldrh	r2, [r3, #0]
 80105f8:	4310      	orrs	r0, r2
 80105fa:	8018      	strh	r0, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 80105fc:	4770      	bx	lr
 80105fe:	bf00      	nop
 8010600:	20003b8c 	.word	0x20003b8c

08010604 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 8010604:	b508      	push	{r3, lr}
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 8010606:	4b06      	ldr	r3, [pc, #24]	@ (8010620 <NvmDataMgmtStoreBegin+0x1c>)
 8010608:	881b      	ldrh	r3, [r3, #0]
 801060a:	b11b      	cbz	r3, 8010614 <NvmDataMgmtStoreBegin+0x10>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 801060c:	f7fe f8dc 	bl	800e7c8 <LoRaMacStop>
 8010610:	b918      	cbnz	r0, 801061a <NvmDataMgmtStoreBegin+0x16>
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8010612:	bd08      	pop	{r3, pc}
        return NVM_DATA_NO_UPDATED_DATA;
 8010614:	f06f 0001 	mvn.w	r0, #1
 8010618:	e7fb      	b.n	8010612 <NvmDataMgmtStoreBegin+0xe>
        return NVM_DATA_NOT_AVAILABLE;
 801061a:	f06f 0002 	mvn.w	r0, #2
 801061e:	e7f8      	b.n	8010612 <NvmDataMgmtStoreBegin+0xe>
 8010620:	20003b8c 	.word	0x20003b8c

08010624 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 8010624:	b510      	push	{r4, lr}
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8010626:	2400      	movs	r4, #0
 8010628:	4b02      	ldr	r3, [pc, #8]	@ (8010634 <NvmDataMgmtStoreEnd+0x10>)
 801062a:	801c      	strh	r4, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 801062c:	f7fe f8c0 	bl	800e7b0 <LoRaMacStart>
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8010630:	4620      	mov	r0, r4
 8010632:	bd10      	pop	{r4, pc}
 8010634:	20003b8c 	.word	0x20003b8c

08010638 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 8010638:	2801      	cmp	r0, #1
 801063a:	d005      	beq.n	8010648 <RegionIsActive+0x10>
 801063c:	2808      	cmp	r0, #8
 801063e:	d001      	beq.n	8010644 <RegionIsActive+0xc>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8010640:	2000      	movs	r0, #0
        }
    }
}
 8010642:	4770      	bx	lr
    switch( region )
 8010644:	2001      	movs	r0, #1
 8010646:	4770      	bx	lr
 8010648:	2001      	movs	r0, #1
 801064a:	4770      	bx	lr

0801064c <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 801064c:	b500      	push	{lr}
 801064e:	b083      	sub	sp, #12
 8010650:	4603      	mov	r3, r0
 8010652:	4608      	mov	r0, r1
    PhyParam_t phyParam = { 0 };
 8010654:	2200      	movs	r2, #0
 8010656:	9200      	str	r2, [sp, #0]
    switch( region )
 8010658:	2b01      	cmp	r3, #1
 801065a:	d004      	beq.n	8010666 <RegionGetPhyParam+0x1a>
 801065c:	2b08      	cmp	r3, #8
 801065e:	d009      	beq.n	8010674 <RegionGetPhyParam+0x28>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8010660:	9b00      	ldr	r3, [sp, #0]
 8010662:	9301      	str	r3, [sp, #4]
 8010664:	e002      	b.n	801066c <RegionGetPhyParam+0x20>
        AU915_GET_PHY_PARAM( );
 8010666:	f000 f979 	bl	801095c <RegionAU915GetPhyParam>
 801066a:	9001      	str	r0, [sp, #4]
        }
    }
}
 801066c:	9801      	ldr	r0, [sp, #4]
 801066e:	b003      	add	sp, #12
 8010670:	f85d fb04 	ldr.w	pc, [sp], #4
        US915_GET_PHY_PARAM( );
 8010674:	f001 fc5a 	bl	8011f2c <RegionUS915GetPhyParam>
 8010678:	9001      	str	r0, [sp, #4]
 801067a:	e7f7      	b.n	801066c <RegionGetPhyParam+0x20>

0801067c <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 801067c:	b508      	push	{r3, lr}
 801067e:	4603      	mov	r3, r0
 8010680:	4608      	mov	r0, r1
    switch( region )
 8010682:	2b01      	cmp	r3, #1
 8010684:	d002      	beq.n	801068c <RegionSetBandTxDone+0x10>
 8010686:	2b08      	cmp	r3, #8
 8010688:	d003      	beq.n	8010692 <RegionSetBandTxDone+0x16>
        default:
        {
            return;
        }
    }
}
 801068a:	bd08      	pop	{r3, pc}
        AU915_SET_BAND_TX_DONE( );
 801068c:	f000 fa86 	bl	8010b9c <RegionAU915SetBandTxDone>
 8010690:	e7fb      	b.n	801068a <RegionSetBandTxDone+0xe>
        US915_SET_BAND_TX_DONE( );
 8010692:	f001 fd27 	bl	80120e4 <RegionUS915SetBandTxDone>
 8010696:	e7f8      	b.n	801068a <RegionSetBandTxDone+0xe>

08010698 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8010698:	b508      	push	{r3, lr}
 801069a:	4603      	mov	r3, r0
 801069c:	4608      	mov	r0, r1
    switch( region )
 801069e:	2b01      	cmp	r3, #1
 80106a0:	d002      	beq.n	80106a8 <RegionInitDefaults+0x10>
 80106a2:	2b08      	cmp	r3, #8
 80106a4:	d003      	beq.n	80106ae <RegionInitDefaults+0x16>
        default:
        {
            break;
        }
    }
}
 80106a6:	bd08      	pop	{r3, pc}
        AU915_INIT_DEFAULTS( );
 80106a8:	f000 fa96 	bl	8010bd8 <RegionAU915InitDefaults>
 80106ac:	e7fb      	b.n	80106a6 <RegionInitDefaults+0xe>
        US915_INIT_DEFAULTS( );
 80106ae:	f001 fd37 	bl	8012120 <RegionUS915InitDefaults>
}
 80106b2:	e7f8      	b.n	80106a6 <RegionInitDefaults+0xe>

080106b4 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80106b4:	b508      	push	{r3, lr}
 80106b6:	4603      	mov	r3, r0
 80106b8:	4608      	mov	r0, r1
 80106ba:	4611      	mov	r1, r2
    switch( region )
 80106bc:	2b01      	cmp	r3, #1
 80106be:	d003      	beq.n	80106c8 <RegionVerify+0x14>
 80106c0:	2b08      	cmp	r3, #8
 80106c2:	d004      	beq.n	80106ce <RegionVerify+0x1a>
 80106c4:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 80106c6:	bd08      	pop	{r3, pc}
        AU915_VERIFY( );
 80106c8:	f000 fb2c 	bl	8010d24 <RegionAU915Verify>
 80106cc:	e7fb      	b.n	80106c6 <RegionVerify+0x12>
        US915_VERIFY( );
 80106ce:	f001 fdcd 	bl	801226c <RegionUS915Verify>
 80106d2:	e7f8      	b.n	80106c6 <RegionVerify+0x12>

080106d4 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 80106d4:	b508      	push	{r3, lr}
 80106d6:	4603      	mov	r3, r0
 80106d8:	4608      	mov	r0, r1
    switch( region )
 80106da:	2b01      	cmp	r3, #1
 80106dc:	d002      	beq.n	80106e4 <RegionApplyCFList+0x10>
 80106de:	2b08      	cmp	r3, #8
 80106e0:	d003      	beq.n	80106ea <RegionApplyCFList+0x16>
        default:
        {
            break;
        }
    }
}
 80106e2:	bd08      	pop	{r3, pc}
        AU915_APPLY_CF_LIST( );
 80106e4:	f000 fb66 	bl	8010db4 <RegionAU915ApplyCFList>
 80106e8:	e7fb      	b.n	80106e2 <RegionApplyCFList+0xe>
        US915_APPLY_CF_LIST( );
 80106ea:	f001 fdef 	bl	80122cc <RegionUS915ApplyCFList>
}
 80106ee:	e7f8      	b.n	80106e2 <RegionApplyCFList+0xe>

080106f0 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 80106f0:	b508      	push	{r3, lr}
 80106f2:	4603      	mov	r3, r0
 80106f4:	4608      	mov	r0, r1
    switch( region )
 80106f6:	2b01      	cmp	r3, #1
 80106f8:	d003      	beq.n	8010702 <RegionChanMaskSet+0x12>
 80106fa:	2b08      	cmp	r3, #8
 80106fc:	d004      	beq.n	8010708 <RegionChanMaskSet+0x18>
 80106fe:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 8010700:	bd08      	pop	{r3, pc}
        AU915_CHAN_MASK_SET( );
 8010702:	f000 fb97 	bl	8010e34 <RegionAU915ChanMaskSet>
 8010706:	e7fb      	b.n	8010700 <RegionChanMaskSet+0x10>
        US915_CHAN_MASK_SET( );
 8010708:	f001 fe20 	bl	801234c <RegionUS915ChanMaskSet>
 801070c:	e7f8      	b.n	8010700 <RegionChanMaskSet+0x10>

0801070e <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801070e:	b508      	push	{r3, lr}
 8010710:	4684      	mov	ip, r0
 8010712:	4608      	mov	r0, r1
 8010714:	4611      	mov	r1, r2
 8010716:	461a      	mov	r2, r3
    switch( region )
 8010718:	f1bc 0f01 	cmp.w	ip, #1
 801071c:	d003      	beq.n	8010726 <RegionComputeRxWindowParameters+0x18>
 801071e:	f1bc 0f08 	cmp.w	ip, #8
 8010722:	d004      	beq.n	801072e <RegionComputeRxWindowParameters+0x20>
        default:
        {
            break;
        }
    }
}
 8010724:	bd08      	pop	{r3, pc}
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
 8010726:	9b02      	ldr	r3, [sp, #8]
 8010728:	f000 fbbe 	bl	8010ea8 <RegionAU915ComputeRxWindowParameters>
 801072c:	e7fa      	b.n	8010724 <RegionComputeRxWindowParameters+0x16>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 801072e:	9b02      	ldr	r3, [sp, #8]
 8010730:	f001 fe50 	bl	80123d4 <RegionUS915ComputeRxWindowParameters>
}
 8010734:	e7f6      	b.n	8010724 <RegionComputeRxWindowParameters+0x16>

08010736 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8010736:	b508      	push	{r3, lr}
 8010738:	4603      	mov	r3, r0
 801073a:	4608      	mov	r0, r1
 801073c:	4611      	mov	r1, r2
    switch( region )
 801073e:	2b01      	cmp	r3, #1
 8010740:	d003      	beq.n	801074a <RegionRxConfig+0x14>
 8010742:	2b08      	cmp	r3, #8
 8010744:	d004      	beq.n	8010750 <RegionRxConfig+0x1a>
 8010746:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 8010748:	bd08      	pop	{r3, pc}
        AU915_RX_CONFIG( );
 801074a:	f000 fbdb 	bl	8010f04 <RegionAU915RxConfig>
 801074e:	e7fb      	b.n	8010748 <RegionRxConfig+0x12>
        US915_RX_CONFIG( );
 8010750:	f001 fe6e 	bl	8012430 <RegionUS915RxConfig>
 8010754:	e7f8      	b.n	8010748 <RegionRxConfig+0x12>

08010756 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8010756:	b508      	push	{r3, lr}
 8010758:	4684      	mov	ip, r0
 801075a:	4608      	mov	r0, r1
 801075c:	4611      	mov	r1, r2
 801075e:	461a      	mov	r2, r3
    switch( region )
 8010760:	f1bc 0f01 	cmp.w	ip, #1
 8010764:	d004      	beq.n	8010770 <RegionTxConfig+0x1a>
 8010766:	f1bc 0f08 	cmp.w	ip, #8
 801076a:	d004      	beq.n	8010776 <RegionTxConfig+0x20>
 801076c:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 801076e:	bd08      	pop	{r3, pc}
        AU915_TX_CONFIG( );
 8010770:	f000 fc22 	bl	8010fb8 <RegionAU915TxConfig>
 8010774:	e7fb      	b.n	801076e <RegionTxConfig+0x18>
        US915_TX_CONFIG( );
 8010776:	f001 feb5 	bl	80124e4 <RegionUS915TxConfig>
 801077a:	e7f8      	b.n	801076e <RegionTxConfig+0x18>

0801077c <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801077c:	b500      	push	{lr}
 801077e:	b083      	sub	sp, #12
 8010780:	4684      	mov	ip, r0
 8010782:	4608      	mov	r0, r1
 8010784:	4611      	mov	r1, r2
 8010786:	461a      	mov	r2, r3
    switch( region )
 8010788:	f1bc 0f01 	cmp.w	ip, #1
 801078c:	d006      	beq.n	801079c <RegionLinkAdrReq+0x20>
 801078e:	f1bc 0f08 	cmp.w	ip, #8
 8010792:	d009      	beq.n	80107a8 <RegionLinkAdrReq+0x2c>
 8010794:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 8010796:	b003      	add	sp, #12
 8010798:	f85d fb04 	ldr.w	pc, [sp], #4
        AU915_LINK_ADR_REQ( );
 801079c:	9b05      	ldr	r3, [sp, #20]
 801079e:	9300      	str	r3, [sp, #0]
 80107a0:	9b04      	ldr	r3, [sp, #16]
 80107a2:	f000 fc7f 	bl	80110a4 <RegionAU915LinkAdrReq>
 80107a6:	e7f6      	b.n	8010796 <RegionLinkAdrReq+0x1a>
        US915_LINK_ADR_REQ( );
 80107a8:	9b05      	ldr	r3, [sp, #20]
 80107aa:	9300      	str	r3, [sp, #0]
 80107ac:	9b04      	ldr	r3, [sp, #16]
 80107ae:	f001 ff13 	bl	80125d8 <RegionUS915LinkAdrReq>
 80107b2:	e7f0      	b.n	8010796 <RegionLinkAdrReq+0x1a>

080107b4 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 80107b4:	b508      	push	{r3, lr}
 80107b6:	4603      	mov	r3, r0
 80107b8:	4608      	mov	r0, r1
    switch( region )
 80107ba:	2b01      	cmp	r3, #1
 80107bc:	d003      	beq.n	80107c6 <RegionRxParamSetupReq+0x12>
 80107be:	2b08      	cmp	r3, #8
 80107c0:	d004      	beq.n	80107cc <RegionRxParamSetupReq+0x18>
 80107c2:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 80107c4:	bd08      	pop	{r3, pc}
        AU915_RX_PARAM_SETUP_REQ( );
 80107c6:	f000 fdbb 	bl	8011340 <RegionAU915RxParamSetupReq>
 80107ca:	e7fb      	b.n	80107c4 <RegionRxParamSetupReq+0x10>
        US915_RX_PARAM_SETUP_REQ( );
 80107cc:	f002 f852 	bl	8012874 <RegionUS915RxParamSetupReq>
 80107d0:	e7f8      	b.n	80107c4 <RegionRxParamSetupReq+0x10>

080107d2 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80107d2:	b508      	push	{r3, lr}
 80107d4:	4603      	mov	r3, r0
 80107d6:	4608      	mov	r0, r1
    switch( region )
 80107d8:	2b01      	cmp	r3, #1
 80107da:	d003      	beq.n	80107e4 <RegionNewChannelReq+0x12>
 80107dc:	2b08      	cmp	r3, #8
 80107de:	d004      	beq.n	80107ea <RegionNewChannelReq+0x18>
 80107e0:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 80107e2:	bd08      	pop	{r3, pc}
        AU915_NEW_CHANNEL_REQ( );
 80107e4:	f000 fdd1 	bl	801138a <RegionAU915NewChannelReq>
 80107e8:	e7fb      	b.n	80107e2 <RegionNewChannelReq+0x10>
        US915_NEW_CHANNEL_REQ( );
 80107ea:	f002 f86e 	bl	80128ca <RegionUS915NewChannelReq>
 80107ee:	e7f8      	b.n	80107e2 <RegionNewChannelReq+0x10>

080107f0 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80107f0:	b508      	push	{r3, lr}
 80107f2:	4603      	mov	r3, r0
 80107f4:	4608      	mov	r0, r1
    switch( region )
 80107f6:	2b01      	cmp	r3, #1
 80107f8:	d003      	beq.n	8010802 <RegionTxParamSetupReq+0x12>
 80107fa:	2b08      	cmp	r3, #8
 80107fc:	d004      	beq.n	8010808 <RegionTxParamSetupReq+0x18>
 80107fe:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 8010800:	bd08      	pop	{r3, pc}
        AU915_TX_PARAM_SETUP_REQ( );
 8010802:	f000 fdc5 	bl	8011390 <RegionAU915TxParamSetupReq>
 8010806:	e7fb      	b.n	8010800 <RegionTxParamSetupReq+0x10>
        US915_TX_PARAM_SETUP_REQ( );
 8010808:	f002 f862 	bl	80128d0 <RegionUS915TxParamSetupReq>
 801080c:	e7f8      	b.n	8010800 <RegionTxParamSetupReq+0x10>

0801080e <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 801080e:	b508      	push	{r3, lr}
 8010810:	4603      	mov	r3, r0
 8010812:	4608      	mov	r0, r1
    switch( region )
 8010814:	2b01      	cmp	r3, #1
 8010816:	d003      	beq.n	8010820 <RegionDlChannelReq+0x12>
 8010818:	2b08      	cmp	r3, #8
 801081a:	d004      	beq.n	8010826 <RegionDlChannelReq+0x18>
 801081c:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 801081e:	bd08      	pop	{r3, pc}
        AU915_DL_CHANNEL_REQ( );
 8010820:	f000 fdb8 	bl	8011394 <RegionAU915DlChannelReq>
 8010824:	e7fb      	b.n	801081e <RegionDlChannelReq+0x10>
        US915_DL_CHANNEL_REQ( );
 8010826:	f002 f856 	bl	80128d6 <RegionUS915DlChannelReq>
 801082a:	e7f8      	b.n	801081e <RegionDlChannelReq+0x10>

0801082c <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 801082c:	b508      	push	{r3, lr}
 801082e:	4603      	mov	r3, r0
 8010830:	4608      	mov	r0, r1
 8010832:	4611      	mov	r1, r2
    switch( region )
 8010834:	2b01      	cmp	r3, #1
 8010836:	d003      	beq.n	8010840 <RegionAlternateDr+0x14>
 8010838:	2b08      	cmp	r3, #8
 801083a:	d004      	beq.n	8010846 <RegionAlternateDr+0x1a>
 801083c:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 801083e:	bd08      	pop	{r3, pc}
        AU915_ALTERNATE_DR( );
 8010840:	f000 fdac 	bl	801139c <RegionAU915AlternateDr>
 8010844:	e7fb      	b.n	801083e <RegionAlternateDr+0x12>
        US915_ALTERNATE_DR( );
 8010846:	f002 f849 	bl	80128dc <RegionUS915AlternateDr>
 801084a:	e7f8      	b.n	801083e <RegionAlternateDr+0x12>

0801084c <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801084c:	b508      	push	{r3, lr}
 801084e:	4684      	mov	ip, r0
 8010850:	4608      	mov	r0, r1
 8010852:	4611      	mov	r1, r2
 8010854:	461a      	mov	r2, r3
    switch( region )
 8010856:	f1bc 0f01 	cmp.w	ip, #1
 801085a:	d004      	beq.n	8010866 <RegionNextChannel+0x1a>
 801085c:	f1bc 0f08 	cmp.w	ip, #8
 8010860:	d005      	beq.n	801086e <RegionNextChannel+0x22>
 8010862:	2009      	movs	r0, #9
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 8010864:	bd08      	pop	{r3, pc}
        AU915_NEXT_CHANNEL( );
 8010866:	9b02      	ldr	r3, [sp, #8]
 8010868:	f000 fdbe 	bl	80113e8 <RegionAU915NextChannel>
 801086c:	e7fa      	b.n	8010864 <RegionNextChannel+0x18>
        US915_NEXT_CHANNEL( );
 801086e:	9b02      	ldr	r3, [sp, #8]
 8010870:	f002 f85a 	bl	8012928 <RegionUS915NextChannel>
 8010874:	e7f6      	b.n	8010864 <RegionNextChannel+0x18>

08010876 <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8010876:	b508      	push	{r3, lr}
 8010878:	4603      	mov	r3, r0
 801087a:	4608      	mov	r0, r1
    switch( region )
 801087c:	2b01      	cmp	r3, #1
 801087e:	d002      	beq.n	8010886 <RegionSetContinuousWave+0x10>
 8010880:	2b08      	cmp	r3, #8
 8010882:	d003      	beq.n	801088c <RegionSetContinuousWave+0x16>
        default:
        {
            break;
        }
    }
}
 8010884:	bd08      	pop	{r3, pc}
        AU915_SET_CONTINUOUS_WAVE( );
 8010886:	f000 fe63 	bl	8011550 <RegionAU915SetContinuousWave>
 801088a:	e7fb      	b.n	8010884 <RegionSetContinuousWave+0xe>
        US915_SET_CONTINUOUS_WAVE( );
 801088c:	f002 f900 	bl	8012a90 <RegionUS915SetContinuousWave>
}
 8010890:	e7f8      	b.n	8010884 <RegionSetContinuousWave+0xe>

08010892 <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8010892:	b508      	push	{r3, lr}
 8010894:	4684      	mov	ip, r0
 8010896:	4608      	mov	r0, r1
 8010898:	4611      	mov	r1, r2
 801089a:	461a      	mov	r2, r3
    switch( region )
 801089c:	f1bc 0f01 	cmp.w	ip, #1
 80108a0:	d004      	beq.n	80108ac <RegionApplyDrOffset+0x1a>
 80108a2:	f1bc 0f08 	cmp.w	ip, #8
 80108a6:	d004      	beq.n	80108b2 <RegionApplyDrOffset+0x20>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 80108a8:	b2c8      	uxtb	r0, r1
 80108aa:	e001      	b.n	80108b0 <RegionApplyDrOffset+0x1e>
        AU915_APPLY_DR_OFFSET( );
 80108ac:	f000 fe7e 	bl	80115ac <RegionAU915ApplyDrOffset>
        }
    }
}
 80108b0:	bd08      	pop	{r3, pc}
        US915_APPLY_DR_OFFSET( );
 80108b2:	f002 f921 	bl	8012af8 <RegionUS915ApplyDrOffset>
 80108b6:	e7fb      	b.n	80108b0 <RegionApplyDrOffset+0x1e>

080108b8 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 80108b8:	4800      	ldr	r0, [pc, #0]	@ (80108bc <RegionGetVersion+0x4>)
 80108ba:	4770      	bx	lr
 80108bc:	01010003 	.word	0x01010003

080108c0 <VerifyRfFreq>:
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
static Band_t* RegionBands;
#endif /* REGION_VERSION */

static bool VerifyRfFreq( uint32_t freq )
{
 80108c0:	b510      	push	{r4, lr}
 80108c2:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 80108c4:	4b10      	ldr	r3, [pc, #64]	@ (8010908 <VerifyRfFreq+0x48>)
 80108c6:	6a1b      	ldr	r3, [r3, #32]
 80108c8:	4798      	blx	r3
 80108ca:	b1c8      	cbz	r0, 8010900 <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < AU915_FIRST_RX1_CHANNEL ) ||
 80108cc:	4b0f      	ldr	r3, [pc, #60]	@ (801090c <VerifyRfFreq+0x4c>)
 80108ce:	4423      	add	r3, r4
 80108d0:	4a0f      	ldr	r2, [pc, #60]	@ (8010910 <VerifyRfFreq+0x50>)
 80108d2:	4293      	cmp	r3, r2
 80108d4:	d813      	bhi.n	80108fe <VerifyRfFreq+0x3e>
        ( freq > AU915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) AU915_FIRST_RX1_CHANNEL ) % ( uint32_t ) AU915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 80108d6:	f102 42df 	add.w	r2, r2, #1870659584	@ 0x6f800000
 80108da:	f502 12c8 	add.w	r2, r2, #1638400	@ 0x190000
 80108de:	f202 7245 	addw	r2, r2, #1861	@ 0x745
 80108e2:	fba2 1203 	umull	r1, r2, r2, r3
 80108e6:	0c92      	lsrs	r2, r2, #18
 80108e8:	490a      	ldr	r1, [pc, #40]	@ (8010914 <VerifyRfFreq+0x54>)
 80108ea:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > AU915_LAST_RX1_CHANNEL ) ||
 80108ee:	b942      	cbnz	r2, 8010902 <VerifyRfFreq+0x42>
        return false;
    }

    // Tx frequencies for 125kHz
    // Also includes the range for 500kHz channels
    if( ( freq < 915200000 ) ||  ( freq > 927800000 ) )
 80108f0:	4b09      	ldr	r3, [pc, #36]	@ (8010918 <VerifyRfFreq+0x58>)
 80108f2:	4423      	add	r3, r4
 80108f4:	4a09      	ldr	r2, [pc, #36]	@ (801091c <VerifyRfFreq+0x5c>)
 80108f6:	4293      	cmp	r3, r2
 80108f8:	d902      	bls.n	8010900 <VerifyRfFreq+0x40>
    {
        return false;
 80108fa:	2000      	movs	r0, #0
 80108fc:	e000      	b.n	8010900 <VerifyRfFreq+0x40>
        return false;
 80108fe:	2000      	movs	r0, #0
    }
    return true;
}
 8010900:	bd10      	pop	{r4, pc}
        return false;
 8010902:	2000      	movs	r0, #0
 8010904:	e7fc      	b.n	8010900 <VerifyRfFreq+0x40>
 8010906:	bf00      	nop
 8010908:	080172ac 	.word	0x080172ac
 801090c:	c8f78f60 	.word	0xc8f78f60
 8010910:	00401640 	.word	0x00401640
 8010914:	000927c0 	.word	0x000927c0
 8010918:	c9732800 	.word	0xc9732800
 801091c:	00c042c0 	.word	0x00c042c0

08010920 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8010920:	b570      	push	{r4, r5, r6, lr}
 8010922:	b084      	sub	sp, #16
 8010924:	460c      	mov	r4, r1
    int8_t phyDr = DataratesAU915[datarate];
 8010926:	4b0a      	ldr	r3, [pc, #40]	@ (8010950 <GetTimeOnAir+0x30>)
 8010928:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsAU915 );
 801092a:	490a      	ldr	r1, [pc, #40]	@ (8010954 <GetTimeOnAir+0x34>)
 801092c:	f001 fa50 	bl	8011dd0 <RegionCommonGetBandwidth>
 8010930:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8010932:	4b09      	ldr	r3, [pc, #36]	@ (8010958 <GetTimeOnAir+0x38>)
 8010934:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8010936:	2001      	movs	r0, #1
 8010938:	9003      	str	r0, [sp, #12]
 801093a:	b2e4      	uxtb	r4, r4
 801093c:	9402      	str	r4, [sp, #8]
 801093e:	2200      	movs	r2, #0
 8010940:	9201      	str	r2, [sp, #4]
 8010942:	2208      	movs	r2, #8
 8010944:	9200      	str	r2, [sp, #0]
 8010946:	4603      	mov	r3, r0
 8010948:	4632      	mov	r2, r6
 801094a:	47a8      	blx	r5
}
 801094c:	b004      	add	sp, #16
 801094e:	bd70      	pop	{r4, r5, r6, pc}
 8010950:	08016c0c 	.word	0x08016c0c
 8010954:	08016bcc 	.word	0x08016bcc
 8010958:	080172ac 	.word	0x080172ac

0801095c <RegionAU915GetPhyParam>:
#endif /* REGION_AU915 */

PhyParam_t RegionAU915GetPhyParam( GetPhyParams_t* getPhy )
{
 801095c:	b500      	push	{lr}
 801095e:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 8010960:	2300      	movs	r3, #0
 8010962:	9304      	str	r3, [sp, #16]

#if defined( REGION_AU915 )
    switch( getPhy->Attribute )
 8010964:	7803      	ldrb	r3, [r0, #0]
 8010966:	3b01      	subs	r3, #1
 8010968:	2b38      	cmp	r3, #56	@ 0x38
 801096a:	d849      	bhi.n	8010a00 <RegionAU915GetPhyParam+0xa4>
 801096c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010970:	00410039 	.word	0x00410039
 8010974:	00480048 	.word	0x00480048
 8010978:	00460048 	.word	0x00460048
 801097c:	00480048 	.word	0x00480048
 8010980:	00480048 	.word	0x00480048
 8010984:	006a0067 	.word	0x006a0067
 8010988:	007b006d 	.word	0x007b006d
 801098c:	00890048 	.word	0x00890048
 8010990:	0091008d 	.word	0x0091008d
 8010994:	00990095 	.word	0x00990095
 8010998:	00a1009d 	.word	0x00a1009d
 801099c:	00aa0048 	.word	0x00aa0048
 80109a0:	00b000ad 	.word	0x00b000ad
 80109a4:	00bc00b6 	.word	0x00bc00b6
 80109a8:	00c300bf 	.word	0x00c300bf
 80109ac:	00c60048 	.word	0x00c60048
 80109b0:	004d00c9 	.word	0x004d00c9
 80109b4:	00480048 	.word	0x00480048
 80109b8:	00480048 	.word	0x00480048
 80109bc:	00480048 	.word	0x00480048
 80109c0:	00480048 	.word	0x00480048
 80109c4:	00480048 	.word	0x00480048
 80109c8:	00480048 	.word	0x00480048
 80109cc:	00cc0048 	.word	0x00cc0048
 80109d0:	00dd00d3 	.word	0x00dd00d3
 80109d4:	004800e0 	.word	0x004800e0
 80109d8:	00ea00e3 	.word	0x00ea00e3
 80109dc:	00f000ed 	.word	0x00f000ed
 80109e0:	00f6      	.short	0x00f6
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0)
 80109e2:	78c3      	ldrb	r3, [r0, #3]
 80109e4:	b913      	cbnz	r3, 80109ec <RegionAU915GetPhyParam+0x90>
            {
                phyParam.Value = AU915_RX_MIN_DATARATE;
 80109e6:	2308      	movs	r3, #8
 80109e8:	9304      	str	r3, [sp, #16]
 80109ea:	e009      	b.n	8010a00 <RegionAU915GetPhyParam+0xa4>
            }
            else
            {
                phyParam.Value = AU915_DWELL_LIMIT_DATARATE;
 80109ec:	2302      	movs	r3, #2
 80109ee:	9304      	str	r3, [sp, #16]
 80109f0:	e006      	b.n	8010a00 <RegionAU915GetPhyParam+0xa4>
            }
            break;
        }
        case PHY_MIN_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0)
 80109f2:	7883      	ldrb	r3, [r0, #2]
 80109f4:	b123      	cbz	r3, 8010a00 <RegionAU915GetPhyParam+0xa4>
            {
                phyParam.Value = AU915_TX_MIN_DATARATE;
            }
            else
            {
                phyParam.Value = AU915_DWELL_LIMIT_DATARATE;
 80109f6:	2302      	movs	r3, #2
 80109f8:	9304      	str	r3, [sp, #16]
 80109fa:	e001      	b.n	8010a00 <RegionAU915GetPhyParam+0xa4>
            }
            break;
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = AU915_DEFAULT_DATARATE;
 80109fc:	2302      	movs	r3, #2
 80109fe:	9304      	str	r3, [sp, #16]
            break;
        }
    }

#endif /* REGION_AU915 */
    return phyParam;
 8010a00:	9804      	ldr	r0, [sp, #16]
 8010a02:	9005      	str	r0, [sp, #20]
}
 8010a04:	b007      	add	sp, #28
 8010a06:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 8010a0a:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8010a0e:	f88d 3004 	strb.w	r3, [sp, #4]
 8010a12:	2306      	movs	r3, #6
 8010a14:	f88d 3005 	strb.w	r3, [sp, #5]
                .MinDr = ( int8_t )( ( getPhy->UplinkDwellTime == 0 ) ? AU915_TX_MIN_DATARATE : AU915_DWELL_LIMIT_DATARATE ),
 8010a18:	7883      	ldrb	r3, [r0, #2]
 8010a1a:	b103      	cbz	r3, 8010a1e <RegionAU915GetPhyParam+0xc2>
 8010a1c:	2302      	movs	r3, #2
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8010a1e:	f88d 3006 	strb.w	r3, [sp, #6]
 8010a22:	2348      	movs	r3, #72	@ 0x48
 8010a24:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8010a28:	4b50      	ldr	r3, [pc, #320]	@ (8010b6c <RegionAU915GetPhyParam+0x210>)
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	f503 6290 	add.w	r2, r3, #1152	@ 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8010a30:	9202      	str	r2, [sp, #8]
 8010a32:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8010a34:	a801      	add	r0, sp, #4
 8010a36:	f001 f9a8 	bl	8011d8a <RegionCommonGetNextLowerTxDr>
 8010a3a:	9004      	str	r0, [sp, #16]
            break;
 8010a3c:	e7e0      	b.n	8010a00 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8010a3e:	2340      	movs	r3, #64	@ 0x40
 8010a40:	9304      	str	r3, [sp, #16]
            break;
 8010a42:	e7dd      	b.n	8010a00 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8010a44:	2320      	movs	r3, #32
 8010a46:	9304      	str	r3, [sp, #16]
            break;
 8010a48:	e7da      	b.n	8010a00 <RegionAU915GetPhyParam+0xa4>
            if( getPhy->UplinkDwellTime == 0 )
 8010a4a:	7883      	ldrb	r3, [r0, #2]
 8010a4c:	b92b      	cbnz	r3, 8010a5a <RegionAU915GetPhyParam+0xfe>
                phyParam.Value = MaxPayloadOfDatarateDwell0AU915[getPhy->Datarate];
 8010a4e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010a52:	4a47      	ldr	r2, [pc, #284]	@ (8010b70 <RegionAU915GetPhyParam+0x214>)
 8010a54:	5cd3      	ldrb	r3, [r2, r3]
 8010a56:	9304      	str	r3, [sp, #16]
 8010a58:	e7d2      	b.n	8010a00 <RegionAU915GetPhyParam+0xa4>
                phyParam.Value = MaxPayloadOfDatarateDwell1AU915[getPhy->Datarate];
 8010a5a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010a5e:	4a45      	ldr	r2, [pc, #276]	@ (8010b74 <RegionAU915GetPhyParam+0x218>)
 8010a60:	5cd3      	ldrb	r3, [r2, r3]
 8010a62:	9304      	str	r3, [sp, #16]
 8010a64:	e7cc      	b.n	8010a00 <RegionAU915GetPhyParam+0xa4>
            if( getPhy->UplinkDwellTime == 0)
 8010a66:	7883      	ldrb	r3, [r0, #2]
 8010a68:	b92b      	cbnz	r3, 8010a76 <RegionAU915GetPhyParam+0x11a>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AU915[getPhy->Datarate];
 8010a6a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010a6e:	4a42      	ldr	r2, [pc, #264]	@ (8010b78 <RegionAU915GetPhyParam+0x21c>)
 8010a70:	5cd3      	ldrb	r3, [r2, r3]
 8010a72:	9304      	str	r3, [sp, #16]
 8010a74:	e7c4      	b.n	8010a00 <RegionAU915GetPhyParam+0xa4>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell1AU915[getPhy->Datarate];
 8010a76:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010a7a:	4a40      	ldr	r2, [pc, #256]	@ (8010b7c <RegionAU915GetPhyParam+0x220>)
 8010a7c:	5cd3      	ldrb	r3, [r2, r3]
 8010a7e:	9304      	str	r3, [sp, #16]
 8010a80:	e7be      	b.n	8010a00 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = AU915_MAX_RX_WINDOW;
 8010a82:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8010a86:	9304      	str	r3, [sp, #16]
            break;
 8010a88:	e7ba      	b.n	8010a00 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8010a8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010a8e:	9304      	str	r3, [sp, #16]
            break;
 8010a90:	e7b6      	b.n	8010a00 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8010a92:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8010a96:	9304      	str	r3, [sp, #16]
            break;
 8010a98:	e7b2      	b.n	8010a00 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8010a9a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8010a9e:	9304      	str	r3, [sp, #16]
            break;
 8010aa0:	e7ae      	b.n	8010a00 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8010aa2:	f241 7370 	movw	r3, #6000	@ 0x1770
 8010aa6:	9304      	str	r3, [sp, #16]
            break;
 8010aa8:	e7aa      	b.n	8010a00 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8010aaa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8010aae:	9304      	str	r3, [sp, #16]
            break;
 8010ab0:	e7a6      	b.n	8010a00 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8010ab2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8010ab6:	4832      	ldr	r0, [pc, #200]	@ (8010b80 <RegionAU915GetPhyParam+0x224>)
 8010ab8:	f002 ff58 	bl	801396c <randr>
 8010abc:	f500 60fa 	add.w	r0, r0, #2000	@ 0x7d0
 8010ac0:	9004      	str	r0, [sp, #16]
            break;
 8010ac2:	e79d      	b.n	8010a00 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = AU915_RX_WND_2_FREQ;
 8010ac4:	4b2f      	ldr	r3, [pc, #188]	@ (8010b84 <RegionAU915GetPhyParam+0x228>)
 8010ac6:	9304      	str	r3, [sp, #16]
            break;
 8010ac8:	e79a      	b.n	8010a00 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = AU915_RX_WND_2_DR;
 8010aca:	2308      	movs	r3, #8
 8010acc:	9304      	str	r3, [sp, #16]
            break;
 8010ace:	e797      	b.n	8010a00 <RegionAU915GetPhyParam+0xa4>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8010ad0:	4b26      	ldr	r3, [pc, #152]	@ (8010b6c <RegionAU915GetPhyParam+0x210>)
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8010ad8:	9304      	str	r3, [sp, #16]
            break;
 8010ada:	e791      	b.n	8010a00 <RegionAU915GetPhyParam+0xa4>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8010adc:	4b23      	ldr	r3, [pc, #140]	@ (8010b6c <RegionAU915GetPhyParam+0x210>)
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 8010ae4:	9304      	str	r3, [sp, #16]
            break;
 8010ae6:	e78b      	b.n	8010a00 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = AU915_MAX_NB_CHANNELS;
 8010ae8:	2348      	movs	r3, #72	@ 0x48
 8010aea:	9304      	str	r3, [sp, #16]
            break;
 8010aec:	e788      	b.n	8010a00 <RegionAU915GetPhyParam+0xa4>
            phyParam.Channels = RegionNvmGroup2->Channels;
 8010aee:	4b1f      	ldr	r3, [pc, #124]	@ (8010b6c <RegionAU915GetPhyParam+0x210>)
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	9304      	str	r3, [sp, #16]
            break;
 8010af4:	e784      	b.n	8010a00 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = AU915_DEFAULT_UPLINK_DWELL_TIME;
 8010af6:	2301      	movs	r3, #1
 8010af8:	9304      	str	r3, [sp, #16]
            break;
 8010afa:	e781      	b.n	8010a00 <RegionAU915GetPhyParam+0xa4>
            phyParam.fValue = AU915_DEFAULT_MAX_EIRP;
 8010afc:	4b22      	ldr	r3, [pc, #136]	@ (8010b88 <RegionAU915GetPhyParam+0x22c>)
 8010afe:	9304      	str	r3, [sp, #16]
            break;
 8010b00:	e77e      	b.n	8010a00 <RegionAU915GetPhyParam+0xa4>
            phyParam.fValue = AU915_DEFAULT_ANTENNA_GAIN;
 8010b02:	4b22      	ldr	r3, [pc, #136]	@ (8010b8c <RegionAU915GetPhyParam+0x230>)
 8010b04:	9304      	str	r3, [sp, #16]
            break;
 8010b06:	e77b      	b.n	8010a00 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8010b08:	4a21      	ldr	r2, [pc, #132]	@ (8010b90 <RegionAU915GetPhyParam+0x234>)
 8010b0a:	491e      	ldr	r1, [pc, #120]	@ (8010b84 <RegionAU915GetPhyParam+0x228>)
 8010b0c:	7900      	ldrb	r0, [r0, #4]
 8010b0e:	f000 fdc9 	bl	80116a4 <RegionBaseUSCalcDownlinkFrequency>
 8010b12:	9004      	str	r0, [sp, #16]
            break;
 8010b14:	e774      	b.n	8010a00 <RegionAU915GetPhyParam+0xa4>
            phyParam.BeaconFormat.BeaconSize = AU915_BEACON_SIZE;
 8010b16:	2313      	movs	r3, #19
 8010b18:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = AU915_RFU1_SIZE;
 8010b1c:	2303      	movs	r3, #3
 8010b1e:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = AU915_RFU2_SIZE;
 8010b22:	2301      	movs	r3, #1
 8010b24:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 8010b28:	e76a      	b.n	8010a00 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = AU915_BEACON_CHANNEL_DR;
 8010b2a:	2308      	movs	r3, #8
 8010b2c:	9304      	str	r3, [sp, #16]
            break;
 8010b2e:	e767      	b.n	8010a00 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = AU915_BEACON_NB_CHANNELS;
 8010b30:	2308      	movs	r3, #8
 8010b32:	9304      	str	r3, [sp, #16]
            break;
 8010b34:	e764      	b.n	8010a00 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8010b36:	4a16      	ldr	r2, [pc, #88]	@ (8010b90 <RegionAU915GetPhyParam+0x234>)
 8010b38:	4912      	ldr	r1, [pc, #72]	@ (8010b84 <RegionAU915GetPhyParam+0x228>)
 8010b3a:	7900      	ldrb	r0, [r0, #4]
 8010b3c:	f000 fdb2 	bl	80116a4 <RegionBaseUSCalcDownlinkFrequency>
 8010b40:	9004      	str	r0, [sp, #16]
            break;
 8010b42:	e75d      	b.n	8010a00 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = AU915_PING_SLOT_CHANNEL_DR;
 8010b44:	2308      	movs	r3, #8
 8010b46:	9304      	str	r3, [sp, #16]
            break;
 8010b48:	e75a      	b.n	8010a00 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = AU915_BEACON_NB_CHANNELS;
 8010b4a:	2308      	movs	r3, #8
 8010b4c:	9304      	str	r3, [sp, #16]
            break;
 8010b4e:	e757      	b.n	8010a00 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = DataratesAU915[getPhy->Datarate];
 8010b50:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010b54:	4a0f      	ldr	r2, [pc, #60]	@ (8010b94 <RegionAU915GetPhyParam+0x238>)
 8010b56:	5cd3      	ldrb	r3, [r2, r3]
 8010b58:	9304      	str	r3, [sp, #16]
            break;
 8010b5a:	e751      	b.n	8010a00 <RegionAU915GetPhyParam+0xa4>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsAU915 );
 8010b5c:	490e      	ldr	r1, [pc, #56]	@ (8010b98 <RegionAU915GetPhyParam+0x23c>)
 8010b5e:	f990 0001 	ldrsb.w	r0, [r0, #1]
 8010b62:	f001 f935 	bl	8011dd0 <RegionCommonGetBandwidth>
 8010b66:	9004      	str	r0, [sp, #16]
            break;
 8010b68:	e74a      	b.n	8010a00 <RegionAU915GetPhyParam+0xa4>
 8010b6a:	bf00      	nop
 8010b6c:	20003b90 	.word	0x20003b90
 8010b70:	08016b90 	.word	0x08016b90
 8010b74:	08016b70 	.word	0x08016b70
 8010b78:	08016b80 	.word	0x08016b80
 8010b7c:	08016b60 	.word	0x08016b60
 8010b80:	fffffc18 	.word	0xfffffc18
 8010b84:	370870a0 	.word	0x370870a0
 8010b88:	41f00000 	.word	0x41f00000
 8010b8c:	4009999a 	.word	0x4009999a
 8010b90:	000927c0 	.word	0x000927c0
 8010b94:	08016c0c 	.word	0x08016c0c
 8010b98:	08016bcc 	.word	0x08016bcc

08010b9c <RegionAU915SetBandTxDone>:

void RegionAU915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8010b9c:	b510      	push	{r4, lr}
 8010b9e:	b082      	sub	sp, #8
#if defined( REGION_AU915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8010ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8010bd0 <RegionAU915SetBandTxDone+0x34>)
 8010ba2:	681c      	ldr	r4, [r3, #0]
 8010ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8010bd4 <RegionAU915SetBandTxDone+0x38>)
 8010ba6:	681a      	ldr	r2, [r3, #0]
 8010ba8:	7803      	ldrb	r3, [r0, #0]
 8010baa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010bae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010bb2:	7a5b      	ldrb	r3, [r3, #9]
 8010bb4:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 8010bb8:	6903      	ldr	r3, [r0, #16]
 8010bba:	9300      	str	r3, [sp, #0]
 8010bbc:	68c3      	ldr	r3, [r0, #12]
 8010bbe:	7842      	ldrb	r2, [r0, #1]
 8010bc0:	6881      	ldr	r1, [r0, #8]
 8010bc2:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 8010bc6:	f000 fec1 	bl	801194c <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_AU915 */
}
 8010bca:	b002      	add	sp, #8
 8010bcc:	bd10      	pop	{r4, pc}
 8010bce:	bf00      	nop
 8010bd0:	20003b94 	.word	0x20003b94
 8010bd4:	20003b90 	.word	0x20003b90

08010bd8 <RegionAU915InitDefaults>:

void RegionAU915InitDefaults( InitDefaultsParams_t* params )
{
 8010bd8:	b510      	push	{r4, lr}
 8010bda:	b086      	sub	sp, #24
#if defined( REGION_AU915 )
    Band_t bands[AU915_MAX_NB_BANDS] =
 8010bdc:	2301      	movs	r3, #1
 8010bde:	f8ad 3000 	strh.w	r3, [sp]
 8010be2:	2300      	movs	r3, #0
 8010be4:	f88d 3002 	strb.w	r3, [sp, #2]
 8010be8:	9301      	str	r3, [sp, #4]
 8010bea:	9302      	str	r3, [sp, #8]
 8010bec:	9303      	str	r3, [sp, #12]
 8010bee:	9304      	str	r3, [sp, #16]
 8010bf0:	f88d 3014 	strb.w	r3, [sp, #20]
    {
        AU915_BAND0
    };

    switch( params->Type )
 8010bf4:	7a04      	ldrb	r4, [r0, #8]
 8010bf6:	b17c      	cbz	r4, 8010c18 <RegionAU915InitDefaults+0x40>
 8010bf8:	3c01      	subs	r4, #1
 8010bfa:	b2e4      	uxtb	r4, r4
 8010bfc:	2c01      	cmp	r4, #1
 8010bfe:	f200 8082 	bhi.w	8010d06 <RegionAU915InitDefaults+0x12e>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8010c02:	4b42      	ldr	r3, [pc, #264]	@ (8010d0c <RegionAU915InitDefaults+0x134>)
 8010c04:	6818      	ldr	r0, [r3, #0]
 8010c06:	2206      	movs	r2, #6
 8010c08:	f200 418c 	addw	r1, r0, #1164	@ 0x48c
 8010c0c:	f500 6090 	add.w	r0, r0, #1152	@ 0x480
 8010c10:	f000 fe8d 	bl	801192e <RegionCommonChanMaskCopy>

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8010c14:	2300      	movs	r3, #0
 8010c16:	e074      	b.n	8010d02 <RegionAU915InitDefaults+0x12a>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8010c18:	6803      	ldr	r3, [r0, #0]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d073      	beq.n	8010d06 <RegionAU915InitDefaults+0x12e>
 8010c1e:	6842      	ldr	r2, [r0, #4]
 8010c20:	2a00      	cmp	r2, #0
 8010c22:	d070      	beq.n	8010d06 <RegionAU915InitDefaults+0x12e>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8010c24:	493a      	ldr	r1, [pc, #232]	@ (8010d10 <RegionAU915InitDefaults+0x138>)
 8010c26:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8010c28:	4938      	ldr	r1, [pc, #224]	@ (8010d0c <RegionAU915InitDefaults+0x134>)
 8010c2a:	600a      	str	r2, [r1, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
            RegionNvmGroup1->JoinTrialsCounter = 0;
 8010c32:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * AU915_MAX_NB_BANDS );
 8010c36:	2218      	movs	r2, #24
 8010c38:	4669      	mov	r1, sp
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	f002 fea3 	bl	8013986 <memcpy1>
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 8010c40:	e011      	b.n	8010c66 <RegionAU915InitDefaults+0x8e>
                RegionNvmGroup2->Channels[i].Frequency = 915200000 + i * 200000;
 8010c42:	4b32      	ldr	r3, [pc, #200]	@ (8010d0c <RegionAU915InitDefaults+0x134>)
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	4933      	ldr	r1, [pc, #204]	@ (8010d14 <RegionAU915InitDefaults+0x13c>)
 8010c48:	4a33      	ldr	r2, [pc, #204]	@ (8010d18 <RegionAU915InitDefaults+0x140>)
 8010c4a:	fb01 2204 	mla	r2, r1, r4, r2
 8010c4e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8010c52:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8010c56:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8010c5a:	2250      	movs	r2, #80	@ 0x50
 8010c5c:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 8010c5e:	2200      	movs	r2, #0
 8010c60:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 8010c62:	3401      	adds	r4, #1
 8010c64:	b2e4      	uxtb	r4, r4
 8010c66:	2c3f      	cmp	r4, #63	@ 0x3f
 8010c68:	d9eb      	bls.n	8010c42 <RegionAU915InitDefaults+0x6a>
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 8010c6a:	2340      	movs	r3, #64	@ 0x40
 8010c6c:	2b47      	cmp	r3, #71	@ 0x47
 8010c6e:	d814      	bhi.n	8010c9a <RegionAU915InitDefaults+0xc2>
                RegionNvmGroup2->Channels[i].Frequency = 915900000 + ( i - ( AU915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 8010c70:	f1a3 0040 	sub.w	r0, r3, #64	@ 0x40
 8010c74:	4a25      	ldr	r2, [pc, #148]	@ (8010d0c <RegionAU915InitDefaults+0x134>)
 8010c76:	6812      	ldr	r2, [r2, #0]
 8010c78:	4c28      	ldr	r4, [pc, #160]	@ (8010d1c <RegionAU915InitDefaults+0x144>)
 8010c7a:	4929      	ldr	r1, [pc, #164]	@ (8010d20 <RegionAU915InitDefaults+0x148>)
 8010c7c:	fb04 1100 	mla	r1, r4, r0, r1
 8010c80:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8010c84:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 8010c88:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_6 << 4 ) | DR_6;
 8010c8c:	2166      	movs	r1, #102	@ 0x66
 8010c8e:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 8010c90:	2100      	movs	r1, #0
 8010c92:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 8010c94:	3301      	adds	r3, #1
 8010c96:	b2db      	uxtb	r3, r3
 8010c98:	e7e8      	b.n	8010c6c <RegionAU915InitDefaults+0x94>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 8010c9a:	4c1c      	ldr	r4, [pc, #112]	@ (8010d0c <RegionAU915InitDefaults+0x134>)
 8010c9c:	6820      	ldr	r0, [r4, #0]
 8010c9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010ca2:	f8a0 348c 	strh.w	r3, [r0, #1164]	@ 0x48c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 8010ca6:	f8a0 348e 	strh.w	r3, [r0, #1166]	@ 0x48e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 8010caa:	f8a0 3490 	strh.w	r3, [r0, #1168]	@ 0x490
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 8010cae:	f8a0 3492 	strh.w	r3, [r0, #1170]	@ 0x492
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 8010cb2:	23ff      	movs	r3, #255	@ 0xff
 8010cb4:	f8a0 3494 	strh.w	r3, [r0, #1172]	@ 0x494
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8010cb8:	2300      	movs	r3, #0
 8010cba:	f8a0 3496 	strh.w	r3, [r0, #1174]	@ 0x496
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8010cbe:	2206      	movs	r2, #6
 8010cc0:	f200 418c 	addw	r1, r0, #1164	@ 0x48c
 8010cc4:	f500 6090 	add.w	r0, r0, #1152	@ 0x480
 8010cc8:	f000 fe31 	bl	801192e <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8010ccc:	4b10      	ldr	r3, [pc, #64]	@ (8010d10 <RegionAU915InitDefaults+0x138>)
 8010cce:	6818      	ldr	r0, [r3, #0]
 8010cd0:	6821      	ldr	r1, [r4, #0]
 8010cd2:	2206      	movs	r2, #6
 8010cd4:	f501 6190 	add.w	r1, r1, #1152	@ 0x480
 8010cd8:	3090      	adds	r0, #144	@ 0x90
 8010cda:	f000 fe28 	bl	801192e <RegionCommonChanMaskCopy>
            break;
 8010cde:	e012      	b.n	8010d06 <RegionAU915InitDefaults+0x12e>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8010ce0:	4a0b      	ldr	r2, [pc, #44]	@ (8010d10 <RegionAU915InitDefaults+0x138>)
 8010ce2:	6811      	ldr	r1, [r2, #0]
 8010ce4:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8010ce8:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
 8010cec:	4c07      	ldr	r4, [pc, #28]	@ (8010d0c <RegionAU915InitDefaults+0x134>)
 8010cee:	6824      	ldr	r4, [r4, #0]
 8010cf0:	f503 7c10 	add.w	ip, r3, #576	@ 0x240
 8010cf4:	f834 401c 	ldrh.w	r4, [r4, ip, lsl #1]
 8010cf8:	4022      	ands	r2, r4
 8010cfa:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8010cfe:	3301      	adds	r3, #1
 8010d00:	b2db      	uxtb	r3, r3
 8010d02:	2b05      	cmp	r3, #5
 8010d04:	d9ec      	bls.n	8010ce0 <RegionAU915InitDefaults+0x108>
        {
            break;
        }
    }
#endif /* REGION_AU915 */
}
 8010d06:	b006      	add	sp, #24
 8010d08:	bd10      	pop	{r4, pc}
 8010d0a:	bf00      	nop
 8010d0c:	20003b90 	.word	0x20003b90
 8010d10:	20003b94 	.word	0x20003b94
 8010d14:	00030d40 	.word	0x00030d40
 8010d18:	368cd800 	.word	0x368cd800
 8010d1c:	00186a00 	.word	0x00186a00
 8010d20:	36978660 	.word	0x36978660

08010d24 <RegionAU915Verify>:

bool RegionAU915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8010d24:	b508      	push	{r3, lr}
#if defined( REGION_AU915 )
    switch( phyAttribute )
 8010d26:	290a      	cmp	r1, #10
 8010d28:	d841      	bhi.n	8010dae <RegionAU915Verify+0x8a>
 8010d2a:	e8df f001 	tbb	[pc, r1]
 8010d2e:	4006      	.short	0x4006
 8010d30:	0a404040 	.word	0x0a404040
 8010d34:	3640200a 	.word	0x3640200a
 8010d38:	36          	.byte	0x36
 8010d39:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8010d3a:	6800      	ldr	r0, [r0, #0]
 8010d3c:	f7ff fdc0 	bl	80108c0 <VerifyRfFreq>
 8010d40:	e036      	b.n	8010db0 <RegionAU915Verify+0x8c>
        }
        case PHY_TX_DR:
        case PHY_DEF_TX_DR:
        {
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 8010d42:	7883      	ldrb	r3, [r0, #2]
 8010d44:	b94b      	cbnz	r3, 8010d5a <RegionAU915Verify+0x36>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_TX_MIN_DATARATE, AU915_TX_MAX_DATARATE );
 8010d46:	2206      	movs	r2, #6
 8010d48:	2100      	movs	r1, #0
 8010d4a:	f990 0000 	ldrsb.w	r0, [r0]
 8010d4e:	f000 fd7a 	bl	8011846 <RegionCommonValueInRange>
 8010d52:	3800      	subs	r0, #0
 8010d54:	bf18      	it	ne
 8010d56:	2001      	movne	r0, #1
 8010d58:	e02a      	b.n	8010db0 <RegionAU915Verify+0x8c>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_DWELL_LIMIT_DATARATE, AU915_TX_MAX_DATARATE );
 8010d5a:	2206      	movs	r2, #6
 8010d5c:	2102      	movs	r1, #2
 8010d5e:	f990 0000 	ldrsb.w	r0, [r0]
 8010d62:	f000 fd70 	bl	8011846 <RegionCommonValueInRange>
 8010d66:	3800      	subs	r0, #0
 8010d68:	bf18      	it	ne
 8010d6a:	2001      	movne	r0, #1
 8010d6c:	e020      	b.n	8010db0 <RegionAU915Verify+0x8c>
            }
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 8010d6e:	7883      	ldrb	r3, [r0, #2]
 8010d70:	b94b      	cbnz	r3, 8010d86 <RegionAU915Verify+0x62>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE );
 8010d72:	220d      	movs	r2, #13
 8010d74:	2108      	movs	r1, #8
 8010d76:	f990 0000 	ldrsb.w	r0, [r0]
 8010d7a:	f000 fd64 	bl	8011846 <RegionCommonValueInRange>
 8010d7e:	3800      	subs	r0, #0
 8010d80:	bf18      	it	ne
 8010d82:	2001      	movne	r0, #1
 8010d84:	e014      	b.n	8010db0 <RegionAU915Verify+0x8c>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_DWELL_LIMIT_DATARATE, AU915_RX_MAX_DATARATE );
 8010d86:	220d      	movs	r2, #13
 8010d88:	2102      	movs	r1, #2
 8010d8a:	f990 0000 	ldrsb.w	r0, [r0]
 8010d8e:	f000 fd5a 	bl	8011846 <RegionCommonValueInRange>
 8010d92:	3800      	subs	r0, #0
 8010d94:	bf18      	it	ne
 8010d96:	2001      	movne	r0, #1
 8010d98:	e00a      	b.n	8010db0 <RegionAU915Verify+0x8c>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, AU915_MAX_TX_POWER, AU915_MIN_TX_POWER );
 8010d9a:	220e      	movs	r2, #14
 8010d9c:	2100      	movs	r1, #0
 8010d9e:	f990 0000 	ldrsb.w	r0, [r0]
 8010da2:	f000 fd50 	bl	8011846 <RegionCommonValueInRange>
 8010da6:	3800      	subs	r0, #0
 8010da8:	bf18      	it	ne
 8010daa:	2001      	movne	r0, #1
 8010dac:	e000      	b.n	8010db0 <RegionAU915Verify+0x8c>
    switch( phyAttribute )
 8010dae:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_AU915 */
}
 8010db0:	bd08      	pop	{r3, pc}
	...

08010db4 <RegionAU915ApplyCFList>:

void RegionAU915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_AU915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 8010db4:	7903      	ldrb	r3, [r0, #4]
 8010db6:	2b10      	cmp	r3, #16
 8010db8:	d136      	bne.n	8010e28 <RegionAU915ApplyCFList+0x74>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 8010dba:	6803      	ldr	r3, [r0, #0]
 8010dbc:	7bdb      	ldrb	r3, [r3, #15]
 8010dbe:	2b01      	cmp	r3, #1
 8010dc0:	d132      	bne.n	8010e28 <RegionAU915ApplyCFList+0x74>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	4613      	mov	r3, r2
 8010dc6:	2a04      	cmp	r2, #4
 8010dc8:	d82d      	bhi.n	8010e26 <RegionAU915ApplyCFList+0x72>
{
 8010dca:	b530      	push	{r4, r5, lr}
 8010dcc:	e012      	b.n	8010df4 <RegionAU915ApplyCFList+0x40>
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 8010dce:	4917      	ldr	r1, [pc, #92]	@ (8010e2c <RegionAU915ApplyCFList+0x78>)
 8010dd0:	680d      	ldr	r5, [r1, #0]
 8010dd2:	f10c 0e48 	add.w	lr, ip, #72	@ 0x48
 8010dd6:	f835 101e 	ldrh.w	r1, [r5, lr, lsl #1]
 8010dda:	f50c 7c10 	add.w	ip, ip, #576	@ 0x240
 8010dde:	f834 401c 	ldrh.w	r4, [r4, ip, lsl #1]
 8010de2:	4021      	ands	r1, r4
 8010de4:	f825 101e 	strh.w	r1, [r5, lr, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8010de8:	3301      	adds	r3, #1
 8010dea:	b2db      	uxtb	r3, r3
 8010dec:	3202      	adds	r2, #2
 8010dee:	b2d2      	uxtb	r2, r2
 8010df0:	2b04      	cmp	r3, #4
 8010df2:	d817      	bhi.n	8010e24 <RegionAU915ApplyCFList+0x70>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 8010df4:	6801      	ldr	r1, [r0, #0]
 8010df6:	5c89      	ldrb	r1, [r1, r2]
 8010df8:	4c0d      	ldr	r4, [pc, #52]	@ (8010e30 <RegionAU915ApplyCFList+0x7c>)
 8010dfa:	6824      	ldr	r4, [r4, #0]
 8010dfc:	469c      	mov	ip, r3
 8010dfe:	f503 7510 	add.w	r5, r3, #576	@ 0x240
 8010e02:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 8010e06:	f8d0 e000 	ldr.w	lr, [r0]
 8010e0a:	4496      	add	lr, r2
 8010e0c:	f89e e001 	ldrb.w	lr, [lr, #1]
 8010e10:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
 8010e14:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        if( chMaskItr == 4 )
 8010e18:	2b04      	cmp	r3, #4
 8010e1a:	d1d8      	bne.n	8010dce <RegionAU915ApplyCFList+0x1a>
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 8010e1c:	b2c9      	uxtb	r1, r1
 8010e1e:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
 8010e22:	e7d4      	b.n	8010dce <RegionAU915ApplyCFList+0x1a>
    }
#endif /* REGION_AU915 */
}
 8010e24:	bd30      	pop	{r4, r5, pc}
 8010e26:	4770      	bx	lr
 8010e28:	4770      	bx	lr
 8010e2a:	bf00      	nop
 8010e2c:	20003b94 	.word	0x20003b94
 8010e30:	20003b90 	.word	0x20003b90

08010e34 <RegionAU915ChanMaskSet>:

bool RegionAU915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8010e34:	b538      	push	{r3, r4, r5, lr}
#if defined( REGION_AU915 )
    switch( chanMaskSet->ChannelsMaskType )
 8010e36:	7904      	ldrb	r4, [r0, #4]
 8010e38:	b11c      	cbz	r4, 8010e42 <RegionAU915ChanMaskSet+0xe>
 8010e3a:	2c01      	cmp	r4, #1
 8010e3c:	d025      	beq.n	8010e8a <RegionAU915ChanMaskSet+0x56>
 8010e3e:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_AU915 */
}
 8010e40:	bd38      	pop	{r3, r4, r5, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8010e42:	4d17      	ldr	r5, [pc, #92]	@ (8010ea0 <RegionAU915ChanMaskSet+0x6c>)
 8010e44:	682b      	ldr	r3, [r5, #0]
 8010e46:	2206      	movs	r2, #6
 8010e48:	6801      	ldr	r1, [r0, #0]
 8010e4a:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 8010e4e:	f000 fd6e 	bl	801192e <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 8010e52:	682d      	ldr	r5, [r5, #0]
 8010e54:	f895 3494 	ldrb.w	r3, [r5, #1172]	@ 0x494
 8010e58:	f8a5 3494 	strh.w	r3, [r5, #1172]	@ 0x494
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	f8a5 3496 	strh.w	r3, [r5, #1174]	@ 0x496
            for( uint8_t i = 0; i < 6; i++ )
 8010e62:	e00e      	b.n	8010e82 <RegionAU915ChanMaskSet+0x4e>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8010e64:	4b0f      	ldr	r3, [pc, #60]	@ (8010ea4 <RegionAU915ChanMaskSet+0x70>)
 8010e66:	681a      	ldr	r2, [r3, #0]
 8010e68:	f104 0148 	add.w	r1, r4, #72	@ 0x48
 8010e6c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 8010e70:	f504 7010 	add.w	r0, r4, #576	@ 0x240
 8010e74:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8010e78:	4003      	ands	r3, r0
 8010e7a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 8010e7e:	3401      	adds	r4, #1
 8010e80:	b2e4      	uxtb	r4, r4
 8010e82:	2c05      	cmp	r4, #5
 8010e84:	d9ee      	bls.n	8010e64 <RegionAU915ChanMaskSet+0x30>
    return true;
 8010e86:	2001      	movs	r0, #1
 8010e88:	e7da      	b.n	8010e40 <RegionAU915ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8010e8a:	4b05      	ldr	r3, [pc, #20]	@ (8010ea0 <RegionAU915ChanMaskSet+0x6c>)
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	2206      	movs	r2, #6
 8010e90:	6801      	ldr	r1, [r0, #0]
 8010e92:	f203 408c 	addw	r0, r3, #1164	@ 0x48c
 8010e96:	f000 fd4a 	bl	801192e <RegionCommonChanMaskCopy>
    return true;
 8010e9a:	2001      	movs	r0, #1
            break;
 8010e9c:	e7d0      	b.n	8010e40 <RegionAU915ChanMaskSet+0xc>
 8010e9e:	bf00      	nop
 8010ea0:	20003b90 	.word	0x20003b90
 8010ea4:	20003b94 	.word	0x20003b94

08010ea8 <RegionAU915ComputeRxWindowParameters>:

void RegionAU915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8010ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010eaa:	b083      	sub	sp, #12
 8010eac:	460e      	mov	r6, r1
 8010eae:	4617      	mov	r7, r2
 8010eb0:	461c      	mov	r4, r3
#if defined( REGION_AU915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AU915_RX_MAX_DATARATE );
 8010eb2:	280d      	cmp	r0, #13
 8010eb4:	bfa8      	it	ge
 8010eb6:	200d      	movge	r0, #13
 8010eb8:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsAU915 );
 8010eba:	4d0f      	ldr	r5, [pc, #60]	@ (8010ef8 <RegionAU915ComputeRxWindowParameters+0x50>)
 8010ebc:	4629      	mov	r1, r5
 8010ebe:	f000 ff87 	bl	8011dd0 <RegionCommonGetBandwidth>
 8010ec2:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesAU915[rxConfigParams->Datarate], BandwidthsAU915[rxConfigParams->Datarate] );
 8010ec4:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8010ec8:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8010ecc:	4a0b      	ldr	r2, [pc, #44]	@ (8010efc <RegionAU915ComputeRxWindowParameters+0x54>)
 8010ece:	5cd0      	ldrb	r0, [r2, r3]
 8010ed0:	f000 fe54 	bl	8011b7c <RegionCommonComputeSymbolTimeLoRa>
 8010ed4:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8010ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8010f00 <RegionAU915ComputeRxWindowParameters+0x58>)
 8010ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010eda:	4798      	blx	r3
 8010edc:	4603      	mov	r3, r0
 8010ede:	f104 020c 	add.w	r2, r4, #12
 8010ee2:	9201      	str	r2, [sp, #4]
 8010ee4:	3408      	adds	r4, #8
 8010ee6:	9400      	str	r4, [sp, #0]
 8010ee8:	463a      	mov	r2, r7
 8010eea:	4631      	mov	r1, r6
 8010eec:	4628      	mov	r0, r5
 8010eee:	f000 fe4d 	bl	8011b8c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_AU915 */
}
 8010ef2:	b003      	add	sp, #12
 8010ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ef6:	bf00      	nop
 8010ef8:	08016bcc 	.word	0x08016bcc
 8010efc:	08016c0c 	.word	0x08016c0c
 8010f00:	080172ac 	.word	0x080172ac

08010f04 <RegionAU915RxConfig>:

bool RegionAU915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8010f04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010f08:	b08b      	sub	sp, #44	@ 0x2c
 8010f0a:	4604      	mov	r4, r0
 8010f0c:	460d      	mov	r5, r1
#if defined( REGION_AU915 )
    int8_t dr = rxConfig->Datarate;
 8010f0e:	f990 6001 	ldrsb.w	r6, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 8010f12:	6847      	ldr	r7, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 8010f14:	4b22      	ldr	r3, [pc, #136]	@ (8010fa0 <RegionAU915RxConfig+0x9c>)
 8010f16:	685b      	ldr	r3, [r3, #4]
 8010f18:	4798      	blx	r3
 8010f1a:	2800      	cmp	r0, #0
 8010f1c:	d13d      	bne.n	8010f9a <RegionAU915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8010f1e:	7ce3      	ldrb	r3, [r4, #19]
 8010f20:	b933      	cbnz	r3, 8010f30 <RegionAU915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = AU915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * AU915_STEPWIDTH_RX1_CHANNEL;
 8010f22:	7823      	ldrb	r3, [r4, #0]
 8010f24:	f003 0307 	and.w	r3, r3, #7
 8010f28:	4a1e      	ldr	r2, [pc, #120]	@ (8010fa4 <RegionAU915RxConfig+0xa0>)
 8010f2a:	4f1f      	ldr	r7, [pc, #124]	@ (8010fa8 <RegionAU915RxConfig+0xa4>)
 8010f2c:	fb02 7703 	mla	r7, r2, r3, r7
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAU915[dr];
 8010f30:	4b1e      	ldr	r3, [pc, #120]	@ (8010fac <RegionAU915RxConfig+0xa8>)
 8010f32:	f913 9006 	ldrsb.w	r9, [r3, r6]

    Radio.SetChannel( frequency );
 8010f36:	f8df 8068 	ldr.w	r8, [pc, #104]	@ 8010fa0 <RegionAU915RxConfig+0x9c>
 8010f3a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010f3e:	4638      	mov	r0, r7
 8010f40:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8010f42:	f8d8 8018 	ldr.w	r8, [r8, #24]
 8010f46:	7ca3      	ldrb	r3, [r4, #18]
 8010f48:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f4a:	2001      	movs	r0, #1
 8010f4c:	9008      	str	r0, [sp, #32]
 8010f4e:	2200      	movs	r2, #0
 8010f50:	9207      	str	r2, [sp, #28]
 8010f52:	9206      	str	r2, [sp, #24]
 8010f54:	9205      	str	r2, [sp, #20]
 8010f56:	9204      	str	r2, [sp, #16]
 8010f58:	9203      	str	r2, [sp, #12]
 8010f5a:	8923      	ldrh	r3, [r4, #8]
 8010f5c:	9302      	str	r3, [sp, #8]
 8010f5e:	2308      	movs	r3, #8
 8010f60:	9301      	str	r3, [sp, #4]
 8010f62:	9200      	str	r2, [sp, #0]
 8010f64:	4603      	mov	r3, r0
 8010f66:	464a      	mov	r2, r9
 8010f68:	78a1      	ldrb	r1, [r4, #2]
 8010f6a:	47c0      	blx	r8

    if( rxConfig->RepeaterSupport == true )
 8010f6c:	7c63      	ldrb	r3, [r4, #17]
 8010f6e:	b18b      	cbz	r3, 8010f94 <RegionAU915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AU915[dr];
 8010f70:	4b0f      	ldr	r3, [pc, #60]	@ (8010fb0 <RegionAU915RxConfig+0xac>)
 8010f72:	5d99      	ldrb	r1, [r3, r6]
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AU915[dr];
    }
    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8010f74:	4b0a      	ldr	r3, [pc, #40]	@ (8010fa0 <RegionAU915RxConfig+0x9c>)
 8010f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010f78:	310d      	adds	r1, #13
 8010f7a:	b2c9      	uxtb	r1, r1
 8010f7c:	2001      	movs	r0, #1
 8010f7e:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8010f80:	4632      	mov	r2, r6
 8010f82:	4639      	mov	r1, r7
 8010f84:	7ce0      	ldrb	r0, [r4, #19]
 8010f86:	f000 ff35 	bl	8011df4 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8010f8a:	702e      	strb	r6, [r5, #0]
    return true;
 8010f8c:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_AU915 */
}
 8010f8e:	b00b      	add	sp, #44	@ 0x2c
 8010f90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateDwell0AU915[dr];
 8010f94:	4b07      	ldr	r3, [pc, #28]	@ (8010fb4 <RegionAU915RxConfig+0xb0>)
 8010f96:	5d99      	ldrb	r1, [r3, r6]
 8010f98:	e7ec      	b.n	8010f74 <RegionAU915RxConfig+0x70>
        return false;
 8010f9a:	2000      	movs	r0, #0
 8010f9c:	e7f7      	b.n	8010f8e <RegionAU915RxConfig+0x8a>
 8010f9e:	bf00      	nop
 8010fa0:	080172ac 	.word	0x080172ac
 8010fa4:	000927c0 	.word	0x000927c0
 8010fa8:	370870a0 	.word	0x370870a0
 8010fac:	08016c0c 	.word	0x08016c0c
 8010fb0:	08016b80 	.word	0x08016b80
 8010fb4:	08016b90 	.word	0x08016b90

08010fb8 <RegionAU915TxConfig>:

bool RegionAU915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8010fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fbc:	b08d      	sub	sp, #52	@ 0x34
 8010fbe:	4604      	mov	r4, r0
 8010fc0:	468b      	mov	fp, r1
 8010fc2:	4617      	mov	r7, r2
#if defined( REGION_AU915 )
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 8010fc4:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010fc8:	4a31      	ldr	r2, [pc, #196]	@ (8011090 <RegionAU915TxConfig+0xd8>)
 8010fca:	f912 a003 	ldrsb.w	sl, [r2, r3]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8010fce:	4b31      	ldr	r3, [pc, #196]	@ (8011094 <RegionAU915TxConfig+0xdc>)
 8010fd0:	681a      	ldr	r2, [r3, #0]
 8010fd2:	f8df 90c4 	ldr.w	r9, [pc, #196]	@ 8011098 <RegionAU915TxConfig+0xe0>
 8010fd6:	f8d9 1000 	ldr.w	r1, [r9]
 8010fda:	7803      	ldrb	r3, [r0, #0]
 8010fdc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010fe0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8010fe4:	7a4b      	ldrb	r3, [r1, #9]
 8010fe6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010fea:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010fee:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8010ff2:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8010ff6:	f000 fee7 	bl	8011dc8 <RegionCommonLimitTxPower>
 8010ffa:	4606      	mov	r6, r0
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsAU915 );
 8010ffc:	4927      	ldr	r1, [pc, #156]	@ (801109c <RegionAU915TxConfig+0xe4>)
 8010ffe:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8011002:	f000 fee5 	bl	8011dd0 <RegionCommonGetBandwidth>
 8011006:	900a      	str	r0, [sp, #40]	@ 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8011008:	68a2      	ldr	r2, [r4, #8]
 801100a:	6861      	ldr	r1, [r4, #4]
 801100c:	4630      	mov	r0, r6
 801100e:	f000 fdf9 	bl	8011c04 <RegionCommonComputeTxPower>
 8011012:	900b      	str	r0, [sp, #44]	@ 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8011014:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 80110a0 <RegionAU915TxConfig+0xe8>
 8011018:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801101c:	f8d9 1000 	ldr.w	r1, [r9]
 8011020:	7823      	ldrb	r3, [r4, #0]
 8011022:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011026:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 801102a:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801102c:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8011030:	9308      	str	r3, [sp, #32]
 8011032:	2200      	movs	r2, #0
 8011034:	9207      	str	r2, [sp, #28]
 8011036:	9206      	str	r2, [sp, #24]
 8011038:	9205      	str	r2, [sp, #20]
 801103a:	2501      	movs	r5, #1
 801103c:	9504      	str	r5, [sp, #16]
 801103e:	9203      	str	r2, [sp, #12]
 8011040:	2308      	movs	r3, #8
 8011042:	9302      	str	r3, [sp, #8]
 8011044:	9501      	str	r5, [sp, #4]
 8011046:	f8cd a000 	str.w	sl, [sp]
 801104a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801104c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801104e:	4628      	mov	r0, r5
 8011050:	f8d8 c01c 	ldr.w	ip, [r8, #28]
 8011054:	47e0      	blx	ip
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8011056:	f8d9 2000 	ldr.w	r2, [r9]
 801105a:	7823      	ldrb	r3, [r4, #0]
 801105c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011060:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8011064:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011068:	f000 fee6 	bl	8011e38 <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 801106c:	f8d8 3054 	ldr.w	r3, [r8, #84]	@ 0x54
 8011070:	7b21      	ldrb	r1, [r4, #12]
 8011072:	4628      	mov	r0, r5
 8011074:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8011076:	89a1      	ldrh	r1, [r4, #12]
 8011078:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801107c:	f7ff fc50 	bl	8010920 <GetTimeOnAir>
 8011080:	6038      	str	r0, [r7, #0]

    *txPower = txPowerLimited;
 8011082:	f88b 6000 	strb.w	r6, [fp]
    return true;
#else
    return false;
#endif /* REGION_AU915 */
}
 8011086:	4628      	mov	r0, r5
 8011088:	b00d      	add	sp, #52	@ 0x34
 801108a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801108e:	bf00      	nop
 8011090:	08016c0c 	.word	0x08016c0c
 8011094:	20003b94 	.word	0x20003b94
 8011098:	20003b90 	.word	0x20003b90
 801109c:	08016bcc 	.word	0x08016bcc
 80110a0:	080172ac 	.word	0x080172ac

080110a4 <RegionAU915LinkAdrReq>:

uint8_t RegionAU915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80110a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80110a8:	b091      	sub	sp, #68	@ 0x44
 80110aa:	4605      	mov	r5, r0
 80110ac:	4688      	mov	r8, r1
 80110ae:	4617      	mov	r7, r2
 80110b0:	461e      	mov	r6, r3
    uint8_t status = 0x07;
#if defined( REGION_AU915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 80110b2:	2400      	movs	r4, #0
 80110b4:	940e      	str	r4, [sp, #56]	@ 0x38
 80110b6:	f8ad 403c 	strh.w	r4, [sp, #60]	@ 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 80110ba:	940b      	str	r4, [sp, #44]	@ 0x2c
 80110bc:	940c      	str	r4, [sp, #48]	@ 0x30
 80110be:	940d      	str	r4, [sp, #52]	@ 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, 6 );
 80110c0:	4b9d      	ldr	r3, [pc, #628]	@ (8011338 <RegionAU915LinkAdrReq+0x294>)
 80110c2:	6819      	ldr	r1, [r3, #0]
 80110c4:	2206      	movs	r2, #6
 80110c6:	f501 6190 	add.w	r1, r1, #1152	@ 0x480
 80110ca:	a80b      	add	r0, sp, #44	@ 0x2c
 80110cc:	f000 fc2f 	bl	801192e <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80110d0:	e00d      	b.n	80110ee <RegionAU915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 80110d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80110d6:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
            channelsMask[1] = 0xFFFF;
 80110da:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
            channelsMask[2] = 0xFFFF;
 80110de:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
            channelsMask[3] = 0xFFFF;
 80110e2:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 80110e6:	f89d 303c 	ldrb.w	r3, [sp, #60]	@ 0x3c
 80110ea:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80110ee:	7a2b      	ldrb	r3, [r5, #8]
 80110f0:	42a3      	cmp	r3, r4
 80110f2:	f240 8084 	bls.w	80111fe <RegionAU915LinkAdrReq+0x15a>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80110f6:	6868      	ldr	r0, [r5, #4]
 80110f8:	a90e      	add	r1, sp, #56	@ 0x38
 80110fa:	4420      	add	r0, r4
 80110fc:	f000 fcc8 	bl	8011a90 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 8011100:	4603      	mov	r3, r0
 8011102:	2800      	cmp	r0, #0
 8011104:	d07b      	beq.n	80111fe <RegionAU915LinkAdrReq+0x15a>
        bytesProcessed += nextIndex;
 8011106:	4423      	add	r3, r4
 8011108:	b2dc      	uxtb	r4, r3
        if( linkAdrParams.ChMaskCtrl == 6 )
 801110a:	f89d c03b 	ldrb.w	ip, [sp, #59]	@ 0x3b
 801110e:	f1bc 0f06 	cmp.w	ip, #6
 8011112:	d0de      	beq.n	80110d2 <RegionAU915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 8011114:	f1bc 0f07 	cmp.w	ip, #7
 8011118:	d00a      	beq.n	8011130 <RegionAU915LinkAdrReq+0x8c>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 801111a:	f1bc 0f05 	cmp.w	ip, #5
 801111e:	d06a      	beq.n	80111f6 <RegionAU915LinkAdrReq+0x152>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 8011120:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8011124:	aa10      	add	r2, sp, #64	@ 0x40
 8011126:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801112a:	f82c 3c14 	strh.w	r3, [ip, #-20]
 801112e:	e7de      	b.n	80110ee <RegionAU915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 8011130:	2300      	movs	r3, #0
 8011132:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
            channelsMask[1] = 0x0000;
 8011136:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
            channelsMask[2] = 0x0000;
 801113a:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
            channelsMask[3] = 0x0000;
 801113e:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8011142:	f89d 303c 	ldrb.w	r3, [sp, #60]	@ 0x3c
 8011146:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801114a:	e7d0      	b.n	80110ee <RegionAU915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 801114c:	aa10      	add	r2, sp, #64	@ 0x40
 801114e:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 8011152:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 8011156:	f062 02ff 	orn	r2, r2, #255	@ 0xff
 801115a:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 801115e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 8011162:	4313      	orrs	r3, r2
 8011164:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
                        cntChannelMask++;
 8011168:	3101      	adds	r1, #1
 801116a:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 801116c:	f10c 0c01 	add.w	ip, ip, #1
 8011170:	fa5f fc8c 	uxtb.w	ip, ip
 8011174:	f1bc 0f07 	cmp.w	ip, #7
 8011178:	d8b9      	bhi.n	80110ee <RegionAU915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 801117a:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 801117e:	2301      	movs	r3, #1
 8011180:	fa03 f30c 	lsl.w	r3, r3, ip
 8011184:	421a      	tst	r2, r3
 8011186:	d011      	beq.n	80111ac <RegionAU915LinkAdrReq+0x108>
                    if( ( i % 2 ) == 0 )
 8011188:	f01c 0f01 	tst.w	ip, #1
 801118c:	d1de      	bne.n	801114c <RegionAU915LinkAdrReq+0xa8>
                        channelsMask[cntChannelMask] |= 0x00FF;
 801118e:	aa10      	add	r2, sp, #64	@ 0x40
 8011190:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 8011194:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 8011198:	f042 02ff 	orr.w	r2, r2, #255	@ 0xff
 801119c:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 80111a0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 80111a4:	4313      	orrs	r3, r2
 80111a6:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 80111aa:	e7df      	b.n	801116c <RegionAU915LinkAdrReq+0xc8>
                    if( ( i % 2 ) == 0 )
 80111ac:	f01c 0f01 	tst.w	ip, #1
 80111b0:	d110      	bne.n	80111d4 <RegionAU915LinkAdrReq+0x130>
                        channelsMask[cntChannelMask] &= 0xFF00;
 80111b2:	aa10      	add	r2, sp, #64	@ 0x40
 80111b4:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 80111b8:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 80111bc:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80111c0:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 80111c4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 80111c8:	43db      	mvns	r3, r3
 80111ca:	b21b      	sxth	r3, r3
 80111cc:	4013      	ands	r3, r2
 80111ce:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 80111d2:	e7cb      	b.n	801116c <RegionAU915LinkAdrReq+0xc8>
                        channelsMask[cntChannelMask] &= 0x00FF;
 80111d4:	aa10      	add	r2, sp, #64	@ 0x40
 80111d6:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 80111da:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 80111de:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 80111e2:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 80111e6:	43db      	mvns	r3, r3
 80111e8:	b21b      	sxth	r3, r3
 80111ea:	4013      	ands	r3, r2
 80111ec:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
                        cntChannelMask++;
 80111f0:	3101      	adds	r1, #1
 80111f2:	b2c9      	uxtb	r1, r1
 80111f4:	e7ba      	b.n	801116c <RegionAU915LinkAdrReq+0xc8>
            for( uint8_t i = 0; i <= 7; i++ )
 80111f6:	f04f 0c00 	mov.w	ip, #0
            uint8_t cntChannelMask = 0;
 80111fa:	4661      	mov	r1, ip
 80111fc:	e7ba      	b.n	8011174 <RegionAU915LinkAdrReq+0xd0>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_6 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 80111fe:	f99d 3039 	ldrsb.w	r3, [sp, #57]	@ 0x39
 8011202:	2b05      	cmp	r3, #5
 8011204:	dd58      	ble.n	80112b8 <RegionAU915LinkAdrReq+0x214>
 8011206:	f04f 0907 	mov.w	r9, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801120a:	2302      	movs	r3, #2
 801120c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8011210:	7a6b      	ldrb	r3, [r5, #9]
 8011212:	f88d 3026 	strb.w	r3, [sp, #38]	@ 0x26
    phyParam = RegionAU915GetPhyParam( &getPhy );
 8011216:	a809      	add	r0, sp, #36	@ 0x24
 8011218:	f7ff fba0 	bl	801095c <RegionAU915GetPhyParam>
 801121c:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 801121e:	f88d 9004 	strb.w	r9, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8011222:	7aab      	ldrb	r3, [r5, #10]
 8011224:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8011228:	f99d 3039 	ldrsb.w	r3, [sp, #57]	@ 0x39
 801122c:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8011230:	f99d 303a 	ldrsb.w	r3, [sp, #58]	@ 0x3a
 8011234:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8011238:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
 801123c:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8011240:	f995 300b 	ldrsb.w	r3, [r5, #11]
 8011244:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8011248:	f995 300c 	ldrsb.w	r3, [r5, #12]
 801124c:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8011250:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8011254:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = AU915_MAX_NB_CHANNELS;
 8011258:	2348      	movs	r3, #72	@ 0x48
 801125a:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 801125e:	ab0b      	add	r3, sp, #44	@ 0x2c
 8011260:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8011262:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = AU915_TX_MAX_DATARATE;
 8011266:	2306      	movs	r3, #6
 8011268:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801126c:	4b32      	ldr	r3, [pc, #200]	@ (8011338 <RegionAU915LinkAdrReq+0x294>)
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = AU915_MIN_TX_POWER;
 8011272:	230e      	movs	r3, #14
 8011274:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = AU915_MAX_TX_POWER;
 8011278:	2300      	movs	r3, #0
 801127a:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801127e:	682b      	ldr	r3, [r5, #0]
 8011280:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8011282:	ab0e      	add	r3, sp, #56	@ 0x38
 8011284:	f10d 023a 	add.w	r2, sp, #58	@ 0x3a
 8011288:	f10d 0139 	add.w	r1, sp, #57	@ 0x39
 801128c:	4668      	mov	r0, sp
 801128e:	f000 fc1d 	bl	8011acc <RegionCommonLinkAdrReqVerifyParams>
 8011292:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8011294:	2807      	cmp	r0, #7
 8011296:	d01c      	beq.n	80112d2 <RegionAU915LinkAdrReq+0x22e>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8011298:	f99d 3039 	ldrsb.w	r3, [sp, #57]	@ 0x39
 801129c:	f888 3000 	strb.w	r3, [r8]
    *txPowOut = linkAdrParams.TxPower;
 80112a0:	f99d 303a 	ldrsb.w	r3, [sp, #58]	@ 0x3a
 80112a4:	703b      	strb	r3, [r7, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80112a6:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
 80112aa:	7033      	strb	r3, [r6, #0]
    *nbBytesParsed = bytesProcessed;
 80112ac:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80112ae:	701c      	strb	r4, [r3, #0]

#endif /* REGION_AU915 */
    return status;
}
 80112b0:	4628      	mov	r0, r5
 80112b2:	b011      	add	sp, #68	@ 0x44
 80112b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_6 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 80112b8:	2204      	movs	r2, #4
 80112ba:	2100      	movs	r1, #0
 80112bc:	a80b      	add	r0, sp, #44	@ 0x2c
 80112be:	f000 fb20 	bl	8011902 <RegionCommonCountChannels>
 80112c2:	2801      	cmp	r0, #1
 80112c4:	d902      	bls.n	80112cc <RegionAU915LinkAdrReq+0x228>
 80112c6:	f04f 0907 	mov.w	r9, #7
 80112ca:	e79e      	b.n	801120a <RegionAU915LinkAdrReq+0x166>
        status &= 0xFE; // Channel mask KO
 80112cc:	f04f 0906 	mov.w	r9, #6
 80112d0:	e79b      	b.n	801120a <RegionAU915LinkAdrReq+0x166>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 80112d2:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 8011338 <RegionAU915LinkAdrReq+0x294>
 80112d6:	f8d9 0000 	ldr.w	r0, [r9]
 80112da:	2206      	movs	r2, #6
 80112dc:	a90b      	add	r1, sp, #44	@ 0x2c
 80112de:	f500 6090 	add.w	r0, r0, #1152	@ 0x480
 80112e2:	f000 fb24 	bl	801192e <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 80112e6:	4b15      	ldr	r3, [pc, #84]	@ (801133c <RegionAU915LinkAdrReq+0x298>)
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	f8b3 1090 	ldrh.w	r1, [r3, #144]	@ 0x90
 80112ee:	f8d9 2000 	ldr.w	r2, [r9]
 80112f2:	f8b2 0480 	ldrh.w	r0, [r2, #1152]	@ 0x480
 80112f6:	4001      	ands	r1, r0
 80112f8:	f8a3 1090 	strh.w	r1, [r3, #144]	@ 0x90
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 80112fc:	f8b3 1092 	ldrh.w	r1, [r3, #146]	@ 0x92
 8011300:	f8b2 0482 	ldrh.w	r0, [r2, #1154]	@ 0x482
 8011304:	4001      	ands	r1, r0
 8011306:	f8a3 1092 	strh.w	r1, [r3, #146]	@ 0x92
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 801130a:	f8b3 1094 	ldrh.w	r1, [r3, #148]	@ 0x94
 801130e:	f8b2 0484 	ldrh.w	r0, [r2, #1156]	@ 0x484
 8011312:	4001      	ands	r1, r0
 8011314:	f8a3 1094 	strh.w	r1, [r3, #148]	@ 0x94
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 8011318:	f8b3 1096 	ldrh.w	r1, [r3, #150]	@ 0x96
 801131c:	f8b2 0486 	ldrh.w	r0, [r2, #1158]	@ 0x486
 8011320:	4001      	ands	r1, r0
 8011322:	f8a3 1096 	strh.w	r1, [r3, #150]	@ 0x96
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8011326:	f8b2 1488 	ldrh.w	r1, [r2, #1160]	@ 0x488
 801132a:	f8a3 1098 	strh.w	r1, [r3, #152]	@ 0x98
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 801132e:	f8b2 248a 	ldrh.w	r2, [r2, #1162]	@ 0x48a
 8011332:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
 8011336:	e7af      	b.n	8011298 <RegionAU915LinkAdrReq+0x1f4>
 8011338:	20003b90 	.word	0x20003b90
 801133c:	20003b94 	.word	0x20003b94

08011340 <RegionAU915RxParamSetupReq>:

uint8_t RegionAU915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8011340:	b538      	push	{r3, r4, r5, lr}
 8011342:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_AU915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8011344:	6840      	ldr	r0, [r0, #4]
 8011346:	f7ff fabb 	bl	80108c0 <VerifyRfFreq>
 801134a:	b1e0      	cbz	r0, 8011386 <RegionAU915RxParamSetupReq+0x46>
    uint8_t status = 0x07;
 801134c:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE ) == false )
 801134e:	220d      	movs	r2, #13
 8011350:	2108      	movs	r1, #8
 8011352:	f994 0000 	ldrsb.w	r0, [r4]
 8011356:	f000 fa76 	bl	8011846 <RegionCommonValueInRange>
 801135a:	b908      	cbnz	r0, 8011360 <RegionAU915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 801135c:	f005 05fd 	and.w	r5, r5, #253	@ 0xfd
    }
    if( ( rxParamSetupReq->Datarate == DR_7 ) ||
 8011360:	f994 3000 	ldrsb.w	r3, [r4]
 8011364:	2b07      	cmp	r3, #7
 8011366:	d001      	beq.n	801136c <RegionAU915RxParamSetupReq+0x2c>
 8011368:	2b0d      	cmp	r3, #13
 801136a:	dd01      	ble.n	8011370 <RegionAU915RxParamSetupReq+0x30>
        ( rxParamSetupReq->Datarate > DR_13 ) )
    {
        status &= 0xFD; // Datarate KO
 801136c:	f005 05fd 	and.w	r5, r5, #253	@ 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AU915_MIN_RX1_DR_OFFSET, AU915_MAX_RX1_DR_OFFSET ) == false )
 8011370:	2205      	movs	r2, #5
 8011372:	2100      	movs	r1, #0
 8011374:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8011378:	f000 fa65 	bl	8011846 <RegionCommonValueInRange>
 801137c:	b908      	cbnz	r0, 8011382 <RegionAU915RxParamSetupReq+0x42>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801137e:	f005 05fb 	and.w	r5, r5, #251	@ 0xfb
    }

#endif /* REGION_AU915 */
    return status;
}
 8011382:	4628      	mov	r0, r5
 8011384:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 8011386:	2506      	movs	r5, #6
 8011388:	e7e1      	b.n	801134e <RegionAU915RxParamSetupReq+0xe>

0801138a <RegionAU915NewChannelReq>:

int8_t RegionAU915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 801138a:	f04f 30ff 	mov.w	r0, #4294967295
 801138e:	4770      	bx	lr

08011390 <RegionAU915TxParamSetupReq>:

int8_t RegionAU915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Accept the request
    return 0;
}
 8011390:	2000      	movs	r0, #0
 8011392:	4770      	bx	lr

08011394 <RegionAU915DlChannelReq>:

int8_t RegionAU915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 8011394:	f04f 30ff 	mov.w	r0, #4294967295
 8011398:	4770      	bx	lr
	...

0801139c <RegionAU915AlternateDr>:
int8_t RegionAU915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_AU915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_2 and then one 500kHz DR_6 channel
    if( type == ALTERNATE_DR )
 801139c:	b9b1      	cbnz	r1, 80113cc <RegionAU915AlternateDr+0x30>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 801139e:	4b10      	ldr	r3, [pc, #64]	@ (80113e0 <RegionAU915AlternateDr+0x44>)
 80113a0:	681a      	ldr	r2, [r3, #0]
 80113a2:	f892 309d 	ldrb.w	r3, [r2, #157]	@ 0x9d
 80113a6:	3301      	adds	r3, #1
 80113a8:	f882 309d 	strb.w	r3, [r2, #157]	@ 0x9d
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 80113ac:	4b0c      	ldr	r3, [pc, #48]	@ (80113e0 <RegionAU915AlternateDr+0x44>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	f893 209d 	ldrb.w	r2, [r3, #157]	@ 0x9d
 80113b4:	4b0b      	ldr	r3, [pc, #44]	@ (80113e4 <RegionAU915AlternateDr+0x48>)
 80113b6:	fba3 1302 	umull	r1, r3, r3, r2
 80113ba:	085b      	lsrs	r3, r3, #1
 80113bc:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80113c0:	1ad2      	subs	r2, r2, r3
 80113c2:	f012 0fff 	tst.w	r2, #255	@ 0xff
 80113c6:	d109      	bne.n	80113dc <RegionAU915AlternateDr+0x40>
    {
        // Use DR_6 every 9th times.
        currentDr = DR_6;
 80113c8:	2006      	movs	r0, #6
 80113ca:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 80113cc:	4b04      	ldr	r3, [pc, #16]	@ (80113e0 <RegionAU915AlternateDr+0x44>)
 80113ce:	681a      	ldr	r2, [r3, #0]
 80113d0:	f892 309d 	ldrb.w	r3, [r2, #157]	@ 0x9d
 80113d4:	3b01      	subs	r3, #1
 80113d6:	f882 309d 	strb.w	r3, [r2, #157]	@ 0x9d
 80113da:	e7e7      	b.n	80113ac <RegionAU915AlternateDr+0x10>
    }
    else
    {
        currentDr = DR_2;
 80113dc:	2002      	movs	r0, #2
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_AU915 */
}
 80113de:	4770      	bx	lr
 80113e0:	20003b94 	.word	0x20003b94
 80113e4:	38e38e39 	.word	0x38e38e39

080113e8 <RegionAU915NextChannel>:

LoRaMacStatus_t RegionAU915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80113e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113ec:	b0a4      	sub	sp, #144	@ 0x90
 80113ee:	4604      	mov	r4, r0
 80113f0:	460e      	mov	r6, r1
 80113f2:	4690      	mov	r8, r2
 80113f4:	461f      	mov	r7, r3
#if defined( REGION_AU915 )
    uint8_t nbEnabledChannels = 0;
 80113f6:	2500      	movs	r5, #0
 80113f8:	f88d 508f 	strb.w	r5, [sp, #143]	@ 0x8f
    uint8_t nbRestrictedChannels = 0;
 80113fc:	f88d 508e 	strb.w	r5, [sp, #142]	@ 0x8e
    uint8_t enabledChannels[AU915_MAX_NB_CHANNELS] = { 0 };
 8011400:	9511      	str	r5, [sp, #68]	@ 0x44
 8011402:	2244      	movs	r2, #68	@ 0x44
 8011404:	4629      	mov	r1, r5
 8011406:	a812      	add	r0, sp, #72	@ 0x48
 8011408:	f004 fe78 	bl	80160fc <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 801140c:	4b4e      	ldr	r3, [pc, #312]	@ (8011548 <RegionAU915NextChannel+0x160>)
 801140e:	6818      	ldr	r0, [r3, #0]
 8011410:	2204      	movs	r2, #4
 8011412:	4629      	mov	r1, r5
 8011414:	3090      	adds	r0, #144	@ 0x90
 8011416:	f000 fa74 	bl	8011902 <RegionCommonCountChannels>
 801141a:	2800      	cmp	r0, #0
 801141c:	d055      	beq.n	80114ca <RegionAU915NextChannel+0xe2>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_6 )
 801141e:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8011422:	2b05      	cmp	r3, #5
 8011424:	dd0a      	ble.n	801143c <RegionAU915NextChannel+0x54>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8011426:	4b48      	ldr	r3, [pc, #288]	@ (8011548 <RegionAU915NextChannel+0x160>)
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 801142e:	b92a      	cbnz	r2, 801143c <RegionAU915NextChannel+0x54>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8011430:	4a46      	ldr	r2, [pc, #280]	@ (801154c <RegionAU915NextChannel+0x164>)
 8011432:	6812      	ldr	r2, [r2, #0]
 8011434:	f8b2 2488 	ldrh.w	r2, [r2, #1160]	@ 0x488
 8011438:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801143c:	7a63      	ldrb	r3, [r4, #9]
 801143e:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8011442:	7a23      	ldrb	r3, [r4, #8]
 8011444:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 8011448:	4b3f      	ldr	r3, [pc, #252]	@ (8011548 <RegionAU915NextChannel+0x160>)
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8011450:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8011452:	4a3e      	ldr	r2, [pc, #248]	@ (801154c <RegionAU915NextChannel+0x164>)
 8011454:	6812      	ldr	r2, [r2, #0]
 8011456:	9205      	str	r2, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8011458:	9306      	str	r3, [sp, #24]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = AU915_MAX_NB_CHANNELS;
 801145a:	2348      	movs	r3, #72	@ 0x48
 801145c:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 8011460:	2300      	movs	r3, #0
 8011462:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8011464:	6823      	ldr	r3, [r4, #0]
 8011466:	9309      	str	r3, [sp, #36]	@ 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8011468:	6863      	ldr	r3, [r4, #4]
 801146a:	930a      	str	r3, [sp, #40]	@ 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801146c:	7aa3      	ldrb	r3, [r4, #10]
 801146e:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
    identifyChannelsParam.MaxBands = AU915_MAX_NB_BANDS;
 8011472:	2301      	movs	r3, #1
 8011474:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8011478:	ab0c      	add	r3, sp, #48	@ 0x30
 801147a:	f104 020c 	add.w	r2, r4, #12
 801147e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011482:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8011486:	7d23      	ldrb	r3, [r4, #20]
 8011488:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801148c:	8ae1      	ldrh	r1, [r4, #22]
 801148e:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8011492:	f7ff fa45 	bl	8010920 <GetTimeOnAir>
 8011496:	900f      	str	r0, [sp, #60]	@ 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8011498:	ab03      	add	r3, sp, #12
 801149a:	9310      	str	r3, [sp, #64]	@ 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801149c:	f8cd 8004 	str.w	r8, [sp, #4]
 80114a0:	f10d 038e 	add.w	r3, sp, #142	@ 0x8e
 80114a4:	9300      	str	r3, [sp, #0]
 80114a6:	f10d 038f 	add.w	r3, sp, #143	@ 0x8f
 80114aa:	aa11      	add	r2, sp, #68	@ 0x44
 80114ac:	4639      	mov	r1, r7
 80114ae:	a809      	add	r0, sp, #36	@ 0x24
 80114b0:	f000 fc21 	bl	8011cf6 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80114b4:	4605      	mov	r5, r0
 80114b6:	2800      	cmp	r0, #0
 80114b8:	d142      	bne.n	8011540 <RegionAU915NextChannel+0x158>
    {
        if( nextChanParams->Joined == true )
 80114ba:	7a63      	ldrb	r3, [r4, #9]
 80114bc:	b9a3      	cbnz	r3, 80114e8 <RegionAU915NextChannel+0x100>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR2
            if( nextChanParams->Datarate == DR_2 )
 80114be:	f994 3008 	ldrsb.w	r3, [r4, #8]
 80114c2:	2b02      	cmp	r3, #2
 80114c4:	d01d      	beq.n	8011502 <RegionAU915NextChannel+0x11a>
            }
            // 500kHz Channels (64 - 71) DR6
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 80114c6:	4603      	mov	r3, r0
 80114c8:	e029      	b.n	801151e <RegionAU915NextChannel+0x136>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 80114ca:	4d1f      	ldr	r5, [pc, #124]	@ (8011548 <RegionAU915NextChannel+0x160>)
 80114cc:	6828      	ldr	r0, [r5, #0]
 80114ce:	4b1f      	ldr	r3, [pc, #124]	@ (801154c <RegionAU915NextChannel+0x164>)
 80114d0:	6819      	ldr	r1, [r3, #0]
 80114d2:	2204      	movs	r2, #4
 80114d4:	f501 6190 	add.w	r1, r1, #1152	@ 0x480
 80114d8:	3090      	adds	r0, #144	@ 0x90
 80114da:	f000 fa28 	bl	801192e <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 80114de:	682b      	ldr	r3, [r5, #0]
 80114e0:	2200      	movs	r2, #0
 80114e2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
 80114e6:	e79a      	b.n	801141e <RegionAU915NextChannel+0x36>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80114e8:	f89d 108f 	ldrb.w	r1, [sp, #143]	@ 0x8f
 80114ec:	3901      	subs	r1, #1
 80114ee:	f002 fa3d 	bl	801396c <randr>
 80114f2:	f100 0390 	add.w	r3, r0, #144	@ 0x90
 80114f6:	eb0d 0003 	add.w	r0, sp, r3
 80114fa:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 80114fe:	7033      	strb	r3, [r6, #0]
 8011500:	e017      	b.n	8011532 <RegionAU915NextChannel+0x14a>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8011502:	4b11      	ldr	r3, [pc, #68]	@ (8011548 <RegionAU915NextChannel+0x160>)
 8011504:	6818      	ldr	r0, [r3, #0]
 8011506:	4632      	mov	r2, r6
 8011508:	f100 019c 	add.w	r1, r0, #156	@ 0x9c
 801150c:	3090      	adds	r0, #144	@ 0x90
 801150e:	f000 f87b 	bl	8011608 <RegionBaseUSComputeNext125kHzJoinChannel>
 8011512:	2803      	cmp	r0, #3
 8011514:	d10d      	bne.n	8011532 <RegionAU915NextChannel+0x14a>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 8011516:	4605      	mov	r5, r0
 8011518:	e012      	b.n	8011540 <RegionAU915NextChannel+0x158>
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
 801151a:	3301      	adds	r3, #1
 801151c:	b2db      	uxtb	r3, r3
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 801151e:	4a0a      	ldr	r2, [pc, #40]	@ (8011548 <RegionAU915NextChannel+0x160>)
 8011520:	6812      	ldr	r2, [r2, #0]
 8011522:	f892 0098 	ldrb.w	r0, [r2, #152]	@ 0x98
 8011526:	4118      	asrs	r0, r3
 8011528:	f010 0f01 	tst.w	r0, #1
 801152c:	d0f5      	beq.n	801151a <RegionAU915NextChannel+0x132>
                }
                *channel = 64 + i;
 801152e:	3340      	adds	r3, #64	@ 0x40
 8011530:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, AU915_MAX_NB_CHANNELS );
 8011532:	4b05      	ldr	r3, [pc, #20]	@ (8011548 <RegionAU915NextChannel+0x160>)
 8011534:	6818      	ldr	r0, [r3, #0]
 8011536:	2248      	movs	r2, #72	@ 0x48
 8011538:	7831      	ldrb	r1, [r6, #0]
 801153a:	3090      	adds	r0, #144	@ 0x90
 801153c:	f000 f9c5 	bl	80118ca <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AU915 */
}
 8011540:	4628      	mov	r0, r5
 8011542:	b024      	add	sp, #144	@ 0x90
 8011544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011548:	20003b94 	.word	0x20003b94
 801154c:	20003b90 	.word	0x20003b90

08011550 <RegionAU915SetContinuousWave>:
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionAU915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8011550:	b538      	push	{r3, r4, r5, lr}
 8011552:	4604      	mov	r4, r0
#if defined( REGION_AU915 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8011554:	4b12      	ldr	r3, [pc, #72]	@ (80115a0 <RegionAU915SetContinuousWave+0x50>)
 8011556:	681a      	ldr	r2, [r3, #0]
 8011558:	4d12      	ldr	r5, [pc, #72]	@ (80115a4 <RegionAU915SetContinuousWave+0x54>)
 801155a:	6829      	ldr	r1, [r5, #0]
 801155c:	7803      	ldrb	r3, [r0, #0]
 801155e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011562:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8011566:	7a4b      	ldrb	r3, [r1, #9]
 8011568:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801156c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011570:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8011574:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8011578:	f000 fc26 	bl	8011dc8 <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 801157c:	682a      	ldr	r2, [r5, #0]
 801157e:	7823      	ldrb	r3, [r4, #0]
 8011580:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011584:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8011588:	68a2      	ldr	r2, [r4, #8]
 801158a:	6861      	ldr	r1, [r4, #4]
 801158c:	f000 fb3a 	bl	8011c04 <RegionCommonComputeTxPower>
 8011590:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8011592:	4b05      	ldr	r3, [pc, #20]	@ (80115a8 <RegionAU915SetContinuousWave+0x58>)
 8011594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011596:	89a2      	ldrh	r2, [r4, #12]
 8011598:	4628      	mov	r0, r5
 801159a:	4798      	blx	r3
#endif /* REGION_AU915 */
}
 801159c:	bd38      	pop	{r3, r4, r5, pc}
 801159e:	bf00      	nop
 80115a0:	20003b94 	.word	0x20003b94
 80115a4:	20003b90 	.word	0x20003b90
 80115a8:	080172ac 	.word	0x080172ac

080115ac <RegionAU915ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionAU915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_AU915 )
    int8_t datarate = DatarateOffsetsAU915[dr][drOffset];
 80115ac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80115b0:	4b06      	ldr	r3, [pc, #24]	@ (80115cc <RegionAU915ApplyDrOffset+0x20>)
 80115b2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80115b6:	569b      	ldrsb	r3, [r3, r2]

    if( datarate < 0 )
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	db01      	blt.n	80115c0 <RegionAU915ApplyDrOffset+0x14>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_AU915 */
}
 80115bc:	b2d8      	uxtb	r0, r3
 80115be:	4770      	bx	lr
        if( downlinkDwellTime == 0 )
 80115c0:	b908      	cbnz	r0, 80115c6 <RegionAU915ApplyDrOffset+0x1a>
            datarate = AU915_TX_MIN_DATARATE;
 80115c2:	2300      	movs	r3, #0
 80115c4:	e7fa      	b.n	80115bc <RegionAU915ApplyDrOffset+0x10>
            datarate = AU915_DWELL_LIMIT_DATARATE;
 80115c6:	2302      	movs	r3, #2
 80115c8:	e7f8      	b.n	80115bc <RegionAU915ApplyDrOffset+0x10>
 80115ca:	bf00      	nop
 80115cc:	08016ba0 	.word	0x08016ba0

080115d0 <FindAvailable125kHzChannels>:
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 80115d0:	468c      	mov	ip, r1
 80115d2:	b1a9      	cbz	r1, 8011600 <FindAvailable125kHzChannels+0x30>
 80115d4:	b1b2      	cbz	r2, 8011604 <FindAvailable125kHzChannels+0x34>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Initialize counter
    *availableChannels = 0;
 80115d6:	2300      	movs	r3, #0
 80115d8:	7013      	strb	r3, [r2, #0]
    for( uint8_t i = 0; i < 8; i++ )
 80115da:	e001      	b.n	80115e0 <FindAvailable125kHzChannels+0x10>
 80115dc:	3301      	adds	r3, #1
 80115de:	b2db      	uxtb	r3, r3
 80115e0:	2b07      	cmp	r3, #7
 80115e2:	d80b      	bhi.n	80115fc <FindAvailable125kHzChannels+0x2c>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 80115e4:	fa40 f103 	asr.w	r1, r0, r3
 80115e8:	f011 0f01 	tst.w	r1, #1
 80115ec:	d0f6      	beq.n	80115dc <FindAvailable125kHzChannels+0xc>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 80115ee:	7811      	ldrb	r1, [r2, #0]
 80115f0:	f80c 3001 	strb.w	r3, [ip, r1]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 80115f4:	7811      	ldrb	r1, [r2, #0]
 80115f6:	3101      	adds	r1, #1
 80115f8:	7011      	strb	r1, [r2, #0]
 80115fa:	e7ef      	b.n	80115dc <FindAvailable125kHzChannels+0xc>
        }
    }

    return LORAMAC_STATUS_OK;
 80115fc:	2000      	movs	r0, #0
 80115fe:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011600:	2003      	movs	r0, #3
 8011602:	4770      	bx	lr
 8011604:	2003      	movs	r0, #3
}
 8011606:	4770      	bx	lr

08011608 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 8011608:	b5f0      	push	{r4, r5, r6, r7, lr}
 801160a:	b085      	sub	sp, #20
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 801160c:	2300      	movs	r3, #0
 801160e:	9302      	str	r3, [sp, #8]
 8011610:	9303      	str	r3, [sp, #12]
    uint8_t availableChannels = 0;
 8011612:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8011616:	2800      	cmp	r0, #0
 8011618:	d03e      	beq.n	8011698 <RegionBaseUSComputeNext125kHzJoinChannel+0x90>
 801161a:	460d      	mov	r5, r1
 801161c:	4617      	mov	r7, r2
 801161e:	4606      	mov	r6, r0
 8011620:	2900      	cmp	r1, #0
 8011622:	d03b      	beq.n	801169c <RegionBaseUSComputeNext125kHzJoinChannel+0x94>
 8011624:	2a00      	cmp	r2, #0
 8011626:	d03b      	beq.n	80116a0 <RegionBaseUSComputeNext125kHzJoinChannel+0x98>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 8011628:	780c      	ldrb	r4, [r1, #0]
 801162a:	e017      	b.n	801165c <RegionBaseUSComputeNext125kHzJoinChannel+0x54>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 801162c:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 8011630:	0a00      	lsrs	r0, r0, #8
 8011632:	e019      	b.n	8011668 <RegionBaseUSComputeNext125kHzJoinChannel+0x60>
        }

        if ( availableChannels > 0 )
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 8011634:	3901      	subs	r1, #1
 8011636:	2000      	movs	r0, #0
 8011638:	f002 f998 	bl	801396c <randr>
 801163c:	f100 0310 	add.w	r3, r0, #16
 8011640:	eb0d 0003 	add.w	r0, sp, r3
 8011644:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 8011648:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801164c:	703b      	strb	r3, [r7, #0]
 801164e:	e016      	b.n	801167e <RegionBaseUSComputeNext125kHzJoinChannel+0x76>
        startIndex++;
        if ( startIndex > 7 )
        {
            startIndex = 0;
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 8011650:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011654:	b9cb      	cbnz	r3, 801168a <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 8011656:	782a      	ldrb	r2, [r5, #0]
 8011658:	42a2      	cmp	r2, r4
 801165a:	d016      	beq.n	801168a <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 801165c:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 801165e:	f014 0f01 	tst.w	r4, #1
 8011662:	d1e3      	bne.n	801162c <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8011664:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8011668:	f10d 0207 	add.w	r2, sp, #7
 801166c:	a902      	add	r1, sp, #8
 801166e:	f7ff ffaf 	bl	80115d0 <FindAvailable125kHzChannels>
 8011672:	2803      	cmp	r0, #3
 8011674:	d00b      	beq.n	801168e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        if ( availableChannels > 0 )
 8011676:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801167a:	2900      	cmp	r1, #0
 801167c:	d1da      	bne.n	8011634 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
        startIndex++;
 801167e:	3401      	adds	r4, #1
 8011680:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 8011682:	2c07      	cmp	r4, #7
 8011684:	d9e4      	bls.n	8011650 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>
            startIndex = 0;
 8011686:	2400      	movs	r4, #0
 8011688:	e7e2      	b.n	8011650 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>

    if ( availableChannels > 0 )
 801168a:	b913      	cbnz	r3, 8011692 <RegionBaseUSComputeNext125kHzJoinChannel+0x8a>
    {
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 801168c:	2003      	movs	r0, #3
}
 801168e:	b005      	add	sp, #20
 8011690:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *groupsCurrentIndex = startIndex;
 8011692:	702c      	strb	r4, [r5, #0]
        return LORAMAC_STATUS_OK;
 8011694:	2000      	movs	r0, #0
 8011696:	e7fa      	b.n	801168e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011698:	2003      	movs	r0, #3
 801169a:	e7f8      	b.n	801168e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 801169c:	2003      	movs	r0, #3
 801169e:	e7f6      	b.n	801168e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 80116a0:	2003      	movs	r0, #3
 80116a2:	e7f4      	b.n	801168e <RegionBaseUSComputeNext125kHzJoinChannel+0x86>

080116a4 <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 80116a4:	fb02 1000 	mla	r0, r2, r0, r1
 80116a8:	4770      	bx	lr

080116aa <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80116aa:	b082      	sub	sp, #8
 80116ac:	f10d 0c08 	add.w	ip, sp, #8
 80116b0:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 80116b4:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 80116b6:	b999      	cbnz	r1, 80116e0 <GetDutyCycle+0x36>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 80116b8:	4613      	mov	r3, r2
 80116ba:	f5b2 6f61 	cmp.w	r2, #3600	@ 0xe10
 80116be:	d306      	bcc.n	80116ce <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 80116c0:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 80116c4:	4293      	cmp	r3, r2
 80116c6:	d808      	bhi.n	80116da <GetDutyCycle+0x30>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 80116c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80116cc:	e000      	b.n	80116d0 <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 80116ce:	2364      	movs	r3, #100	@ 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80116d0:	4298      	cmp	r0, r3
 80116d2:	bf38      	it	cc
 80116d4:	4618      	movcc	r0, r3
    {
        dutyCycle = 1;
    }

    return dutyCycle;
}
 80116d6:	b002      	add	sp, #8
 80116d8:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 80116da:	f242 7310 	movw	r3, #10000	@ 0x2710
 80116de:	e7f7      	b.n	80116d0 <GetDutyCycle+0x26>
    if( dutyCycle == 0 )
 80116e0:	2800      	cmp	r0, #0
 80116e2:	d1f8      	bne.n	80116d6 <GetDutyCycle+0x2c>
        dutyCycle = 1;
 80116e4:	2001      	movs	r0, #1
 80116e6:	e7f6      	b.n	80116d6 <GetDutyCycle+0x2c>

080116e8 <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 80116e8:	4684      	mov	ip, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 80116ea:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 80116ec:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 80116ee:	e001      	b.n	80116f4 <CountChannels+0xc>
 80116f0:	3301      	adds	r3, #1
 80116f2:	b2db      	uxtb	r3, r3
 80116f4:	428b      	cmp	r3, r1
 80116f6:	d207      	bcs.n	8011708 <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 80116f8:	2201      	movs	r2, #1
 80116fa:	409a      	lsls	r2, r3
 80116fc:	ea32 020c 	bics.w	r2, r2, ip
 8011700:	d1f6      	bne.n	80116f0 <CountChannels+0x8>
        {
            nbActiveBits++;
 8011702:	3001      	adds	r0, #1
 8011704:	b2c0      	uxtb	r0, r0
 8011706:	e7f3      	b.n	80116f0 <CountChannels+0x8>
        }
    }
    return nbActiveBits;
}
 8011708:	4770      	bx	lr
	...

0801170c <SetMaxTimeCredits>:
{
 801170c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011710:	b089      	sub	sp, #36	@ 0x24
 8011712:	4604      	mov	r4, r0
 8011714:	460e      	mov	r6, r1
 8011716:	ad02      	add	r5, sp, #8
 8011718:	e885 000c 	stmia.w	r5, {r2, r3}
 801171c:	f89d 8040 	ldrb.w	r8, [sp, #64]	@ 0x40
 8011720:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8011724:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011728:	f004 f9ca 	bl	8015ac0 <SysTimeToMs>
 801172c:	4607      	mov	r7, r0
    SysTime_t timeDiff = { 0 };
 801172e:	2300      	movs	r3, #0
 8011730:	9304      	str	r3, [sp, #16]
 8011732:	9305      	str	r3, [sp, #20]
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8011734:	e895 000c 	ldmia.w	r5, {r2, r3}
 8011738:	4631      	mov	r1, r6
 801173a:	4620      	mov	r0, r4
 801173c:	f7ff ffb5 	bl	80116aa <GetDutyCycle>
 8011740:	4605      	mov	r5, r0
    if( joined == false )
 8011742:	2e00      	cmp	r6, #0
 8011744:	d14c      	bne.n	80117e0 <SetMaxTimeCredits+0xd4>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8011746:	2864      	cmp	r0, #100	@ 0x64
 8011748:	d025      	beq.n	8011796 <SetMaxTimeCredits+0x8a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801174a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 801174e:	d025      	beq.n	801179c <SetMaxTimeCredits+0x90>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8011750:	4e27      	ldr	r6, [pc, #156]	@ (80117f0 <SetMaxTimeCredits+0xe4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8011752:	68a1      	ldr	r1, [r4, #8]
 8011754:	a806      	add	r0, sp, #24
 8011756:	f004 f9d3 	bl	8015b00 <SysTimeFromMs>
 801175a:	9b07      	ldr	r3, [sp, #28]
 801175c:	9300      	str	r3, [sp, #0]
 801175e:	9b06      	ldr	r3, [sp, #24]
 8011760:	aa02      	add	r2, sp, #8
 8011762:	ca06      	ldmia	r2, {r1, r2}
 8011764:	a804      	add	r0, sp, #16
 8011766:	f004 f932 	bl	80159ce <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801176a:	f1b8 0f00 	cmp.w	r8, #0
 801176e:	d102      	bne.n	8011776 <SetMaxTimeCredits+0x6a>
 8011770:	f1b9 0f00 	cmp.w	r9, #0
 8011774:	d002      	beq.n	801177c <SetMaxTimeCredits+0x70>
            ( band->MaxTimeCredits != maxCredits ) ||
 8011776:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8011778:	42b3      	cmp	r3, r6
 801177a:	d012      	beq.n	80117a2 <SetMaxTimeCredits+0x96>
            band->TimeCredits = maxCredits;
 801177c:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 801177e:	9b02      	ldr	r3, [sp, #8]
 8011780:	4a1c      	ldr	r2, [pc, #112]	@ (80117f4 <SetMaxTimeCredits+0xe8>)
 8011782:	4293      	cmp	r3, r2
 8011784:	d812      	bhi.n	80117ac <SetMaxTimeCredits+0xa0>
    if( band->LastBandUpdateTime == 0 )
 8011786:	6863      	ldr	r3, [r4, #4]
 8011788:	b903      	cbnz	r3, 801178c <SetMaxTimeCredits+0x80>
        band->TimeCredits = maxCredits;
 801178a:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 801178c:	6126      	str	r6, [r4, #16]
}
 801178e:	4628      	mov	r0, r5
 8011790:	b009      	add	sp, #36	@ 0x24
 8011792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 8011796:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8011798:	4e17      	ldr	r6, [pc, #92]	@ (80117f8 <SetMaxTimeCredits+0xec>)
 801179a:	e7da      	b.n	8011752 <SetMaxTimeCredits+0x46>
            band->LastMaxCreditAssignTime = elapsedTime;
 801179c:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 801179e:	4e17      	ldr	r6, [pc, #92]	@ (80117fc <SetMaxTimeCredits+0xf0>)
 80117a0:	e7d7      	b.n	8011752 <SetMaxTimeCredits+0x46>
            ( band->MaxTimeCredits != maxCredits ) ||
 80117a2:	9a04      	ldr	r2, [sp, #16]
 80117a4:	4b16      	ldr	r3, [pc, #88]	@ (8011800 <SetMaxTimeCredits+0xf4>)
 80117a6:	429a      	cmp	r2, r3
 80117a8:	d9ed      	bls.n	8011786 <SetMaxTimeCredits+0x7a>
 80117aa:	e7e7      	b.n	801177c <SetMaxTimeCredits+0x70>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 80117ac:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 80117b0:	3b30      	subs	r3, #48	@ 0x30
 80117b2:	4a14      	ldr	r2, [pc, #80]	@ (8011804 <SetMaxTimeCredits+0xf8>)
 80117b4:	fba2 2303 	umull	r2, r3, r2, r3
 80117b8:	0c1b      	lsrs	r3, r3, #16
 80117ba:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 80117bc:	4a12      	ldr	r2, [pc, #72]	@ (8011808 <SetMaxTimeCredits+0xfc>)
 80117be:	fb02 f303 	mul.w	r3, r2, r3
 80117c2:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80117c4:	f503 33f6 	add.w	r3, r3, #125952	@ 0x1ec00
 80117c8:	3330      	adds	r3, #48	@ 0x30
 80117ca:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 80117cc:	2300      	movs	r3, #0
 80117ce:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 80117d2:	ab04      	add	r3, sp, #16
 80117d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80117d8:	f004 f972 	bl	8015ac0 <SysTimeToMs>
 80117dc:	60a0      	str	r0, [r4, #8]
 80117de:	e7d2      	b.n	8011786 <SetMaxTimeCredits+0x7a>
        if( dutyCycleEnabled == false )
 80117e0:	f1b8 0f00 	cmp.w	r8, #0
 80117e4:	d102      	bne.n	80117ec <SetMaxTimeCredits+0xe0>
            band->TimeCredits = maxCredits;
 80117e6:	4e04      	ldr	r6, [pc, #16]	@ (80117f8 <SetMaxTimeCredits+0xec>)
 80117e8:	60e6      	str	r6, [r4, #12]
 80117ea:	e7cc      	b.n	8011786 <SetMaxTimeCredits+0x7a>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80117ec:	4e02      	ldr	r6, [pc, #8]	@ (80117f8 <SetMaxTimeCredits+0xec>)
 80117ee:	e7ca      	b.n	8011786 <SetMaxTimeCredits+0x7a>
 80117f0:	02932e00 	.word	0x02932e00
 80117f4:	0001ec2f 	.word	0x0001ec2f
 80117f8:	001b7740 	.word	0x001b7740
 80117fc:	0112a880 	.word	0x0112a880
 8011800:	0001517f 	.word	0x0001517f
 8011804:	c22e4507 	.word	0xc22e4507
 8011808:	00015180 	.word	0x00015180

0801180c <UpdateTimeCredits>:
{
 801180c:	b570      	push	{r4, r5, r6, lr}
 801180e:	b082      	sub	sp, #8
 8011810:	4604      	mov	r4, r0
 8011812:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8011814:	9301      	str	r3, [sp, #4]
 8011816:	9200      	str	r2, [sp, #0]
 8011818:	ab06      	add	r3, sp, #24
 801181a:	cb0c      	ldmia	r3, {r2, r3}
 801181c:	f7ff ff76 	bl	801170c <SetMaxTimeCredits>
 8011820:	4605      	mov	r5, r0
    if( joined == true )
 8011822:	b94e      	cbnz	r6, 8011838 <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 8011824:	68e2      	ldr	r2, [r4, #12]
 8011826:	6923      	ldr	r3, [r4, #16]
 8011828:	429a      	cmp	r2, r3
 801182a:	d900      	bls.n	801182e <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 801182c:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 801182e:	9b08      	ldr	r3, [sp, #32]
 8011830:	6063      	str	r3, [r4, #4]
}
 8011832:	4628      	mov	r0, r5
 8011834:	b002      	add	sp, #8
 8011836:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8011838:	6860      	ldr	r0, [r4, #4]
 801183a:	f004 f9c7 	bl	8015bcc <UTIL_TIMER_GetElapsedTime>
 801183e:	68e3      	ldr	r3, [r4, #12]
 8011840:	4403      	add	r3, r0
 8011842:	60e3      	str	r3, [r4, #12]
 8011844:	e7ee      	b.n	8011824 <UpdateTimeCredits+0x18>

08011846 <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 8011846:	4288      	cmp	r0, r1
 8011848:	db03      	blt.n	8011852 <RegionCommonValueInRange+0xc>
 801184a:	4290      	cmp	r0, r2
 801184c:	dd03      	ble.n	8011856 <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 801184e:	2000      	movs	r0, #0
 8011850:	4770      	bx	lr
 8011852:	2000      	movs	r0, #0
 8011854:	4770      	bx	lr
        return 1;
 8011856:	2001      	movs	r0, #1
}
 8011858:	4770      	bx	lr

0801185a <RegionCommonChanVerifyDr>:
{
 801185a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801185e:	4682      	mov	sl, r0
 8011860:	460e      	mov	r6, r1
 8011862:	4690      	mov	r8, r2
 8011864:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8011868:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 801186c:	4619      	mov	r1, r3
 801186e:	4640      	mov	r0, r8
 8011870:	f7ff ffe9 	bl	8011846 <RegionCommonValueInRange>
 8011874:	b338      	cbz	r0, 80118c6 <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8011876:	2500      	movs	r5, #0
 8011878:	462f      	mov	r7, r5
 801187a:	e01e      	b.n	80118ba <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 801187c:	3401      	adds	r4, #1
 801187e:	b2e4      	uxtb	r4, r4
 8011880:	2c0f      	cmp	r4, #15
 8011882:	d816      	bhi.n	80118b2 <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8011884:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 8011888:	4123      	asrs	r3, r4
 801188a:	f013 0f01 	tst.w	r3, #1
 801188e:	d0f5      	beq.n	801187c <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8011890:	193b      	adds	r3, r7, r4
 8011892:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011896:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801189a:	7a19      	ldrb	r1, [r3, #8]
 801189c:	090a      	lsrs	r2, r1, #4
 801189e:	f001 010f 	and.w	r1, r1, #15
 80118a2:	4640      	mov	r0, r8
 80118a4:	f7ff ffcf 	bl	8011846 <RegionCommonValueInRange>
 80118a8:	2801      	cmp	r0, #1
 80118aa:	d1e7      	bne.n	801187c <RegionCommonChanVerifyDr+0x22>
                    return true;
 80118ac:	2001      	movs	r0, #1
}
 80118ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80118b2:	3710      	adds	r7, #16
 80118b4:	b2ff      	uxtb	r7, r7
 80118b6:	3501      	adds	r5, #1
 80118b8:	b2ed      	uxtb	r5, r5
 80118ba:	4557      	cmp	r7, sl
 80118bc:	d201      	bcs.n	80118c2 <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 80118be:	2400      	movs	r4, #0
 80118c0:	e7de      	b.n	8011880 <RegionCommonChanVerifyDr+0x26>
    return false;
 80118c2:	2000      	movs	r0, #0
 80118c4:	e7f3      	b.n	80118ae <RegionCommonChanVerifyDr+0x54>
        return false;
 80118c6:	2000      	movs	r0, #0
 80118c8:	e7f1      	b.n	80118ae <RegionCommonChanVerifyDr+0x54>

080118ca <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80118ca:	0913      	lsrs	r3, r2, #4
 80118cc:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 80118d0:	d313      	bcc.n	80118fa <RegionCommonChanDisable+0x30>
{
 80118d2:	b500      	push	{lr}
 80118d4:	4684      	mov	ip, r0
 80118d6:	ea4f 1e11 	mov.w	lr, r1, lsr #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80118da:	4291      	cmp	r1, r2
 80118dc:	d20f      	bcs.n	80118fe <RegionCommonChanDisable+0x34>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 80118de:	f830 301e 	ldrh.w	r3, [r0, lr, lsl #1]
 80118e2:	f001 010f 	and.w	r1, r1, #15
 80118e6:	2001      	movs	r0, #1
 80118e8:	fa00 f101 	lsl.w	r1, r0, r1
 80118ec:	43c9      	mvns	r1, r1
 80118ee:	b209      	sxth	r1, r1
 80118f0:	400b      	ands	r3, r1
 80118f2:	f82c 301e 	strh.w	r3, [ip, lr, lsl #1]

    return true;
}
 80118f6:	f85d fb04 	ldr.w	pc, [sp], #4
        return false;
 80118fa:	2000      	movs	r0, #0
}
 80118fc:	4770      	bx	lr
        return false;
 80118fe:	2000      	movs	r0, #0
 8011900:	e7f9      	b.n	80118f6 <RegionCommonChanDisable+0x2c>

08011902 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8011902:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 8011904:	b188      	cbz	r0, 801192a <RegionCommonCountChannels+0x28>
 8011906:	460c      	mov	r4, r1
 8011908:	4616      	mov	r6, r2
 801190a:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 801190c:	2500      	movs	r5, #0
 801190e:	e008      	b.n	8011922 <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8011910:	2110      	movs	r1, #16
 8011912:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 8011916:	f7ff fee7 	bl	80116e8 <CountChannels>
 801191a:	4405      	add	r5, r0
 801191c:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801191e:	3401      	adds	r4, #1
 8011920:	b2e4      	uxtb	r4, r4
 8011922:	42b4      	cmp	r4, r6
 8011924:	d3f4      	bcc.n	8011910 <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 8011926:	4628      	mov	r0, r5
 8011928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 801192a:	2500      	movs	r5, #0
 801192c:	e7fb      	b.n	8011926 <RegionCommonCountChannels+0x24>

0801192e <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 801192e:	4684      	mov	ip, r0
 8011930:	b158      	cbz	r0, 801194a <RegionCommonChanMaskCopy+0x1c>
 8011932:	b109      	cbz	r1, 8011938 <RegionCommonChanMaskCopy+0xa>
    {
        for( uint8_t i = 0; i < len; i++ )
 8011934:	2300      	movs	r3, #0
 8011936:	e006      	b.n	8011946 <RegionCommonChanMaskCopy+0x18>
 8011938:	4770      	bx	lr
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 801193a:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 801193e:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 8011942:	3301      	adds	r3, #1
 8011944:	b2db      	uxtb	r3, r3
 8011946:	4293      	cmp	r3, r2
 8011948:	d3f7      	bcc.n	801193a <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 801194a:	4770      	bx	lr

0801194c <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801194c:	b082      	sub	sp, #8
 801194e:	b538      	push	{r3, r4, r5, lr}
 8011950:	4604      	mov	r4, r0
 8011952:	460d      	mov	r5, r1
 8011954:	4611      	mov	r1, r2
 8011956:	aa04      	add	r2, sp, #16
 8011958:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801195c:	ca0c      	ldmia	r2, {r2, r3}
 801195e:	f7ff fea4 	bl	80116aa <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8011962:	68e3      	ldr	r3, [r4, #12]
 8011964:	fb05 f100 	mul.w	r1, r5, r0
 8011968:	428b      	cmp	r3, r1
 801196a:	d905      	bls.n	8011978 <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 801196c:	1a5b      	subs	r3, r3, r1
 801196e:	60e3      	str	r3, [r4, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8011970:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011974:	b002      	add	sp, #8
 8011976:	4770      	bx	lr
        band->TimeCredits = 0;
 8011978:	2300      	movs	r3, #0
 801197a:	60e3      	str	r3, [r4, #12]
}
 801197c:	e7f8      	b.n	8011970 <RegionCommonSetBandTxDone+0x24>
	...

08011980 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8011980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011984:	b089      	sub	sp, #36	@ 0x24
 8011986:	4607      	mov	r7, r0
 8011988:	468b      	mov	fp, r1
 801198a:	4691      	mov	r9, r2
 801198c:	4698      	mov	r8, r3
 801198e:	f89d a048 	ldrb.w	sl, [sp, #72]	@ 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8011992:	f004 f911 	bl	8015bb8 <UTIL_TIMER_GetCurrentTime>
 8011996:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 8011998:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 801199a:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 801199c:	f04f 33ff 	mov.w	r3, #4294967295
 80119a0:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 80119a2:	e005      	b.n	80119b0 <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 80119a4:	2301      	movs	r3, #1
 80119a6:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 80119a8:	441e      	add	r6, r3
 80119aa:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 80119ac:	3401      	adds	r4, #1
 80119ae:	b2e4      	uxtb	r4, r4
 80119b0:	454c      	cmp	r4, r9
 80119b2:	d25d      	bcs.n	8011a70 <RegionCommonUpdateBandTimeOff+0xf0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 80119b4:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80119b8:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 80119bc:	9b04      	ldr	r3, [sp, #16]
 80119be:	9302      	str	r3, [sp, #8]
 80119c0:	ab13      	add	r3, sp, #76	@ 0x4c
 80119c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80119c6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80119ca:	4653      	mov	r3, sl
 80119cc:	4642      	mov	r2, r8
 80119ce:	4639      	mov	r1, r7
 80119d0:	4628      	mov	r0, r5
 80119d2:	f7ff ff1b 	bl	801180c <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 80119d6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80119d8:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 80119dc:	68ea      	ldr	r2, [r5, #12]
 80119de:	429a      	cmp	r2, r3
 80119e0:	d2e0      	bcs.n	80119a4 <RegionCommonUpdateBandTimeOff+0x24>
 80119e2:	f1b8 0f00 	cmp.w	r8, #0
 80119e6:	d101      	bne.n	80119ec <RegionCommonUpdateBandTimeOff+0x6c>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80119e8:	2f00      	cmp	r7, #0
 80119ea:	d1db      	bne.n	80119a4 <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 80119ec:	2100      	movs	r1, #0
 80119ee:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 80119f0:	6929      	ldr	r1, [r5, #16]
 80119f2:	4299      	cmp	r1, r3
 80119f4:	d307      	bcc.n	8011a06 <RegionCommonUpdateBandTimeOff+0x86>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 80119f6:	1a9b      	subs	r3, r3, r2
 80119f8:	9a05      	ldr	r2, [sp, #20]
 80119fa:	429a      	cmp	r2, r3
 80119fc:	bf28      	it	cs
 80119fe:	461a      	movcs	r2, r3
 8011a00:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8011a02:	3601      	adds	r6, #1
 8011a04:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8011a06:	2f00      	cmp	r7, #0
 8011a08:	d1d0      	bne.n	80119ac <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	9306      	str	r3, [sp, #24]
 8011a0e:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8011a12:	2864      	cmp	r0, #100	@ 0x64
 8011a14:	d024      	beq.n	8011a60 <RegionCommonUpdateBandTimeOff+0xe0>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8011a16:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8011a1a:	d025      	beq.n	8011a68 <RegionCommonUpdateBandTimeOff+0xe8>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8011a1c:	4b19      	ldr	r3, [pc, #100]	@ (8011a84 <RegionCommonUpdateBandTimeOff+0x104>)
 8011a1e:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8011a20:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011a22:	4a18      	ldr	r2, [pc, #96]	@ (8011a84 <RegionCommonUpdateBandTimeOff+0x104>)
 8011a24:	4293      	cmp	r3, r2
 8011a26:	d90c      	bls.n	8011a42 <RegionCommonUpdateBandTimeOff+0xc2>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8011a28:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 8011a2c:	3b30      	subs	r3, #48	@ 0x30
 8011a2e:	4a16      	ldr	r2, [pc, #88]	@ (8011a88 <RegionCommonUpdateBandTimeOff+0x108>)
 8011a30:	fba2 2303 	umull	r2, r3, r2, r3
 8011a34:	0c1b      	lsrs	r3, r3, #16
 8011a36:	4a15      	ldr	r2, [pc, #84]	@ (8011a8c <RegionCommonUpdateBandTimeOff+0x10c>)
 8011a38:	fb03 2202 	mla	r2, r3, r2, r2
 8011a3c:	9b06      	ldr	r3, [sp, #24]
 8011a3e:	4413      	add	r3, r2
 8011a40:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8011a42:	ad06      	add	r5, sp, #24
 8011a44:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011a46:	9300      	str	r3, [sp, #0]
 8011a48:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011a4a:	e895 0006 	ldmia.w	r5, {r1, r2}
 8011a4e:	4628      	mov	r0, r5
 8011a50:	f003 ffbd 	bl	80159ce <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8011a54:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011a58:	f004 f832 	bl	8015ac0 <SysTimeToMs>
 8011a5c:	9005      	str	r0, [sp, #20]
 8011a5e:	e7a5      	b.n	80119ac <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8011a60:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8011a64:	9306      	str	r3, [sp, #24]
 8011a66:	e7db      	b.n	8011a20 <RegionCommonUpdateBandTimeOff+0xa0>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8011a68:	f649 23b0 	movw	r3, #39600	@ 0x9ab0
 8011a6c:	9306      	str	r3, [sp, #24]
 8011a6e:	e7d7      	b.n	8011a20 <RegionCommonUpdateBandTimeOff+0xa0>
            }
        }
    }

    if( validBands == 0 )
 8011a70:	b11e      	cbz	r6, 8011a7a <RegionCommonUpdateBandTimeOff+0xfa>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 8011a72:	9805      	ldr	r0, [sp, #20]
 8011a74:	b009      	add	sp, #36	@ 0x24
 8011a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 8011a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8011a7e:	9305      	str	r3, [sp, #20]
 8011a80:	e7f7      	b.n	8011a72 <RegionCommonUpdateBandTimeOff+0xf2>
 8011a82:	bf00      	nop
 8011a84:	0001ec30 	.word	0x0001ec30
 8011a88:	c22e4507 	.word	0xc22e4507
 8011a8c:	00015180 	.word	0x00015180

08011a90 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8011a90:	7803      	ldrb	r3, [r0, #0]
 8011a92:	2b03      	cmp	r3, #3
 8011a94:	d001      	beq.n	8011a9a <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 8011a96:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 8011a98:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 8011a9a:	7843      	ldrb	r3, [r0, #1]
 8011a9c:	f990 2001 	ldrsb.w	r2, [r0, #1]
 8011aa0:	704a      	strb	r2, [r1, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8011aa2:	f003 020f 	and.w	r2, r3, #15
 8011aa6:	708a      	strb	r2, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8011aa8:	091b      	lsrs	r3, r3, #4
 8011aaa:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8011aac:	7883      	ldrb	r3, [r0, #2]
 8011aae:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8011ab0:	78c2      	ldrb	r2, [r0, #3]
 8011ab2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011ab6:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 8011ab8:	7903      	ldrb	r3, [r0, #4]
 8011aba:	700b      	strb	r3, [r1, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8011abc:	f3c3 1202 	ubfx	r2, r3, #4, #3
 8011ac0:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 8011ac2:	f003 030f 	and.w	r3, r3, #15
 8011ac6:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 8011ac8:	2005      	movs	r0, #5
 8011aca:	4770      	bx	lr

08011acc <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8011acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ad0:	b085      	sub	sp, #20
 8011ad2:	4604      	mov	r4, r0
 8011ad4:	4688      	mov	r8, r1
 8011ad6:	4617      	mov	r7, r2
 8011ad8:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 8011ada:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 8011adc:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 8011ae0:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 8011ae4:	f990 b008 	ldrsb.w	fp, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8011ae8:	7943      	ldrb	r3, [r0, #5]
 8011aea:	b92b      	cbnz	r3, 8011af8 <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8011aec:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 8011af0:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 8011af4:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 8011af8:	b355      	cbz	r5, 8011b50 <RegionCommonLinkAdrReqVerifyParams+0x84>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8011afa:	f1ba 0f0f 	cmp.w	sl, #15
 8011afe:	d114      	bne.n	8011b2a <RegionCommonLinkAdrReqVerifyParams+0x5e>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8011b00:	f994 a009 	ldrsb.w	sl, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 8011b04:	f1b9 0f0f 	cmp.w	r9, #15
 8011b08:	d020      	beq.n	8011b4c <RegionCommonLinkAdrReqVerifyParams+0x80>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8011b0a:	f994 301d 	ldrsb.w	r3, [r4, #29]
 8011b0e:	9303      	str	r3, [sp, #12]
 8011b10:	f994 201c 	ldrsb.w	r2, [r4, #28]
 8011b14:	461c      	mov	r4, r3
 8011b16:	4619      	mov	r1, r3
 8011b18:	4648      	mov	r0, r9
 8011b1a:	f7ff fe94 	bl	8011846 <RegionCommonValueInRange>
 8011b1e:	b9b8      	cbnz	r0, 8011b50 <RegionCommonLinkAdrReqVerifyParams+0x84>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8011b20:	454c      	cmp	r4, r9
 8011b22:	dc21      	bgt.n	8011b68 <RegionCommonLinkAdrReqVerifyParams+0x9c>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8011b24:	f005 05fb 	and.w	r5, r5, #251	@ 0xfb
 8011b28:	e012      	b.n	8011b50 <RegionCommonLinkAdrReqVerifyParams+0x84>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8011b2a:	69a3      	ldr	r3, [r4, #24]
 8011b2c:	9301      	str	r3, [sp, #4]
 8011b2e:	f994 3015 	ldrsb.w	r3, [r4, #21]
 8011b32:	9300      	str	r3, [sp, #0]
 8011b34:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8011b38:	4652      	mov	r2, sl
 8011b3a:	6921      	ldr	r1, [r4, #16]
 8011b3c:	7b20      	ldrb	r0, [r4, #12]
 8011b3e:	f7ff fe8c 	bl	801185a <RegionCommonChanVerifyDr>
 8011b42:	2800      	cmp	r0, #0
 8011b44:	d1de      	bne.n	8011b04 <RegionCommonLinkAdrReqVerifyParams+0x38>
            status &= 0xFD; // Datarate KO
 8011b46:	f005 05fd 	and.w	r5, r5, #253	@ 0xfd
 8011b4a:	e7db      	b.n	8011b04 <RegionCommonLinkAdrReqVerifyParams+0x38>
            txPower =  verifyParams->CurrentTxPower;
 8011b4c:	f994 900a 	ldrsb.w	r9, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8011b50:	2d07      	cmp	r5, #7
 8011b52:	d00c      	beq.n	8011b6e <RegionCommonLinkAdrReqVerifyParams+0xa2>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 8011b54:	f888 a000 	strb.w	sl, [r8]
    *txPow = txPower;
 8011b58:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 8011b5c:	f886 b000 	strb.w	fp, [r6]

    return status;
}
 8011b60:	4628      	mov	r0, r5
 8011b62:	b005      	add	sp, #20
 8011b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 8011b68:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8011b6c:	e7f0      	b.n	8011b50 <RegionCommonLinkAdrReqVerifyParams+0x84>
        if( nbRepetitions == 0 )
 8011b6e:	f1bb 0f00 	cmp.w	fp, #0
 8011b72:	d1ef      	bne.n	8011b54 <RegionCommonLinkAdrReqVerifyParams+0x88>
            nbRepetitions = 1;
 8011b74:	f04f 0b01 	mov.w	fp, #1
 8011b78:	e7ec      	b.n	8011b54 <RegionCommonLinkAdrReqVerifyParams+0x88>
	...

08011b7c <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8011b7c:	4b02      	ldr	r3, [pc, #8]	@ (8011b88 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 8011b7e:	fa03 f000 	lsl.w	r0, r3, r0
}
 8011b82:	fbb0 f0f1 	udiv	r0, r0, r1
 8011b86:	4770      	bx	lr
 8011b88:	000f4240 	.word	0x000f4240

08011b8c <RegionCommonComputeRxWindowParameters>:
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8011b8c:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8011b8e:	f1a1 0c04 	sub.w	ip, r1, #4
 8011b92:	f44f 7e7a 	mov.w	lr, #1000	@ 0x3e8
 8011b96:	fb0e f202 	mul.w	r2, lr, r2
 8011b9a:	fb00 220c 	mla	r2, r0, ip, r2
 8011b9e:	0052      	lsls	r2, r2, #1
 8011ba0:	d021      	beq.n	8011be6 <RegionCommonComputeRxWindowParameters+0x5a>
 8011ba2:	4402      	add	r2, r0
 8011ba4:	3a01      	subs	r2, #1
 8011ba6:	fbb2 f2f0 	udiv	r2, r2, r0
 8011baa:	4291      	cmp	r1, r2
 8011bac:	bf38      	it	cc
 8011bae:	4611      	movcc	r1, r2
 8011bb0:	9a01      	ldr	r2, [sp, #4]
 8011bb2:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8011bb4:	0082      	lsls	r2, r0, #2
 8011bb6:	fb01 f000 	mul.w	r0, r1, r0
 8011bba:	b1b8      	cbz	r0, 8011bec <RegionCommonComputeRxWindowParameters+0x60>
 8011bbc:	3001      	adds	r0, #1
 8011bbe:	0840      	lsrs	r0, r0, #1
 8011bc0:	1a12      	subs	r2, r2, r0
 8011bc2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8011bc6:	fb01 2313 	mls	r3, r1, r3, r2
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	dd10      	ble.n	8011bf0 <RegionCommonComputeRxWindowParameters+0x64>
 8011bce:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8011bd2:	4a0b      	ldr	r2, [pc, #44]	@ (8011c00 <RegionCommonComputeRxWindowParameters+0x74>)
 8011bd4:	fb82 1203 	smull	r1, r2, r2, r3
 8011bd8:	17db      	asrs	r3, r3, #31
 8011bda:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8011bde:	9a02      	ldr	r2, [sp, #8]
 8011be0:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8011be2:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8011be6:	fbb2 f2f0 	udiv	r2, r2, r0
 8011bea:	e7de      	b.n	8011baa <RegionCommonComputeRxWindowParameters+0x1e>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8011bec:	0840      	lsrs	r0, r0, #1
 8011bee:	e7e7      	b.n	8011bc0 <RegionCommonComputeRxWindowParameters+0x34>
 8011bf0:	4a03      	ldr	r2, [pc, #12]	@ (8011c00 <RegionCommonComputeRxWindowParameters+0x74>)
 8011bf2:	fb82 1203 	smull	r1, r2, r2, r3
 8011bf6:	17db      	asrs	r3, r3, #31
 8011bf8:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8011bfc:	e7ef      	b.n	8011bde <RegionCommonComputeRxWindowParameters+0x52>
 8011bfe:	bf00      	nop
 8011c00:	10624dd3 	.word	0x10624dd3

08011c04 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8011c04:	b538      	push	{r3, r4, r5, lr}
 8011c06:	460d      	mov	r5, r1
 8011c08:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8011c0a:	0040      	lsls	r0, r0, #1
 8011c0c:	f7ee fe96 	bl	800093c <__aeabi_ui2f>
 8011c10:	4601      	mov	r1, r0
 8011c12:	4628      	mov	r0, r5
 8011c14:	f7ee fde0 	bl	80007d8 <__aeabi_fsub>
 8011c18:	4621      	mov	r1, r4
 8011c1a:	f7ee fddd 	bl	80007d8 <__aeabi_fsub>
 8011c1e:	f7ee fccf 	bl	80005c0 <__aeabi_f2d>
 8011c22:	f004 faa5 	bl	8016170 <floor>
 8011c26:	f7ee fdab 	bl	8000780 <__aeabi_d2iz>

    return phyTxPower;
}
 8011c2a:	b240      	sxtb	r0, r0
 8011c2c:	bd38      	pop	{r3, r4, r5, pc}

08011c2e <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8011c2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c32:	b083      	sub	sp, #12
 8011c34:	4605      	mov	r5, r0
 8011c36:	468b      	mov	fp, r1
 8011c38:	9300      	str	r3, [sp, #0]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8011c3a:	2600      	movs	r6, #0
 8011c3c:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 8011c3e:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 8011c40:	46b1      	mov	r9, r6
 8011c42:	9201      	str	r2, [sp, #4]
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8011c44:	e049      	b.n	8011cda <RegionCommonCountNbOfEnabledChannels+0xac>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8011c46:	7a3a      	ldrb	r2, [r7, #8]
 8011c48:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8011c4c:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8011c50:	b252      	sxtb	r2, r2
 8011c52:	b249      	sxtb	r1, r1
 8011c54:	f995 0001 	ldrsb.w	r0, [r5, #1]
 8011c58:	f7ff fdf5 	bl	8011846 <RegionCommonValueInRange>
 8011c5c:	b178      	cbz	r0, 8011c7e <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8011c5e:	68ea      	ldr	r2, [r5, #12]
 8011c60:	7a7b      	ldrb	r3, [r7, #9]
 8011c62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011c66:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8011c6a:	7d13      	ldrb	r3, [r2, #20]
 8011c6c:	b353      	cbz	r3, 8011cc4 <RegionCommonCountNbOfEnabledChannels+0x96>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 8011c6e:	f109 0301 	add.w	r3, r9, #1
 8011c72:	eb08 0204 	add.w	r2, r8, r4
 8011c76:	f80b 2009 	strb.w	r2, [fp, r9]
 8011c7a:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 8011c7e:	3401      	adds	r4, #1
 8011c80:	b2e4      	uxtb	r4, r4
 8011c82:	2c0f      	cmp	r4, #15
 8011c84:	d823      	bhi.n	8011cce <RegionCommonCountNbOfEnabledChannels+0xa0>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8011c86:	686b      	ldr	r3, [r5, #4]
 8011c88:	0072      	lsls	r2, r6, #1
 8011c8a:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 8011c8e:	4123      	asrs	r3, r4
 8011c90:	f013 0f01 	tst.w	r3, #1
 8011c94:	d0f3      	beq.n	8011c7e <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8011c96:	68a8      	ldr	r0, [r5, #8]
 8011c98:	eb08 0304 	add.w	r3, r8, r4
 8011c9c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011ca0:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 8011ca4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d0e8      	beq.n	8011c7e <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8011cac:	782b      	ldrb	r3, [r5, #0]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d1c9      	bne.n	8011c46 <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8011cb2:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d0c6      	beq.n	8011c46 <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8011cb8:	5a9b      	ldrh	r3, [r3, r2]
 8011cba:	4123      	asrs	r3, r4
 8011cbc:	f013 0f01 	tst.w	r3, #1
 8011cc0:	d1c1      	bne.n	8011c46 <RegionCommonCountNbOfEnabledChannels+0x18>
 8011cc2:	e7dc      	b.n	8011c7e <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 8011cc4:	f10a 0a01 	add.w	sl, sl, #1
 8011cc8:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 8011ccc:	e7d7      	b.n	8011c7e <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8011cce:	f108 0810 	add.w	r8, r8, #16
 8011cd2:	fa5f f888 	uxtb.w	r8, r8
 8011cd6:	3601      	adds	r6, #1
 8011cd8:	b2f6      	uxtb	r6, r6
 8011cda:	8a2b      	ldrh	r3, [r5, #16]
 8011cdc:	4598      	cmp	r8, r3
 8011cde:	d201      	bcs.n	8011ce4 <RegionCommonCountNbOfEnabledChannels+0xb6>
        for( uint8_t j = 0; j < 16; j++ )
 8011ce0:	2400      	movs	r4, #0
 8011ce2:	e7ce      	b.n	8011c82 <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8011ce4:	9f01      	ldr	r7, [sp, #4]
 8011ce6:	f887 9000 	strb.w	r9, [r7]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8011cea:	9b00      	ldr	r3, [sp, #0]
 8011cec:	f883 a000 	strb.w	sl, [r3]
}
 8011cf0:	b003      	add	sp, #12
 8011cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011cf6 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8011cf6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011cfa:	b085      	sub	sp, #20
 8011cfc:	4604      	mov	r4, r0
 8011cfe:	460f      	mov	r7, r1
 8011d00:	4616      	mov	r6, r2
 8011d02:	461d      	mov	r5, r3
 8011d04:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 8011d08:	f8dd 9034 	ldr.w	r9, [sp, #52]	@ 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8011d0c:	6840      	ldr	r0, [r0, #4]
 8011d0e:	f003 ff5d 	bl	8015bcc <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8011d12:	6823      	ldr	r3, [r4, #0]
 8011d14:	1a1b      	subs	r3, r3, r0
 8011d16:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 8011d1a:	2301      	movs	r3, #1
 8011d1c:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 8011d20:	2300      	movs	r3, #0
 8011d22:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8011d24:	6863      	ldr	r3, [r4, #4]
 8011d26:	b113      	cbz	r3, 8011d2e <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8011d28:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8011d2a:	4283      	cmp	r3, r0
 8011d2c:	d81e      	bhi.n	8011d6c <RegionCommonIdentifyChannels+0x76>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8011d2e:	2300      	movs	r3, #0
 8011d30:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8011d32:	69e3      	ldr	r3, [r4, #28]
 8011d34:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8011d38:	781f      	ldrb	r7, [r3, #0]
 8011d3a:	69a3      	ldr	r3, [r4, #24]
 8011d3c:	9303      	str	r3, [sp, #12]
 8011d3e:	ab01      	add	r3, sp, #4
 8011d40:	f104 020c 	add.w	r2, r4, #12
 8011d44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011d48:	e883 0003 	stmia.w	r3, {r0, r1}
 8011d4c:	7d23      	ldrb	r3, [r4, #20]
 8011d4e:	9300      	str	r3, [sp, #0]
 8011d50:	7a23      	ldrb	r3, [r4, #8]
 8011d52:	7a62      	ldrb	r2, [r4, #9]
 8011d54:	4661      	mov	r1, ip
 8011d56:	4638      	mov	r0, r7
 8011d58:	f7ff fe12 	bl	8011980 <RegionCommonUpdateBandTimeOff>
 8011d5c:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8011d60:	4643      	mov	r3, r8
 8011d62:	462a      	mov	r2, r5
 8011d64:	4631      	mov	r1, r6
 8011d66:	69e0      	ldr	r0, [r4, #28]
 8011d68:	f7ff ff61 	bl	8011c2e <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8011d6c:	782b      	ldrb	r3, [r5, #0]
 8011d6e:	b923      	cbnz	r3, 8011d7a <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 8011d70:	f898 3000 	ldrb.w	r3, [r8]
 8011d74:	b13b      	cbz	r3, 8011d86 <RegionCommonIdentifyChannels+0x90>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8011d76:	200b      	movs	r0, #11
 8011d78:	e002      	b.n	8011d80 <RegionCommonIdentifyChannels+0x8a>
        *nextTxDelay = 0;
 8011d7a:	2000      	movs	r0, #0
 8011d7c:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 8011d80:	b005      	add	sp, #20
 8011d82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8011d86:	200c      	movs	r0, #12
 8011d88:	e7fa      	b.n	8011d80 <RegionCommonIdentifyChannels+0x8a>

08011d8a <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8011d8a:	b570      	push	{r4, r5, r6, lr}
 8011d8c:	b082      	sub	sp, #8
 8011d8e:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 8011d90:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 8011d94:	f990 6002 	ldrsb.w	r6, [r0, #2]
 8011d98:	42a6      	cmp	r6, r4
 8011d9a:	d011      	beq.n	8011dc0 <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8011d9c:	3c01      	subs	r4, #1
 8011d9e:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
 8011da0:	42a6      	cmp	r6, r4
 8011da2:	d00e      	beq.n	8011dc2 <RegionCommonGetNextLowerTxDr+0x38>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8011da4:	68ab      	ldr	r3, [r5, #8]
 8011da6:	9301      	str	r3, [sp, #4]
 8011da8:	f995 3001 	ldrsb.w	r3, [r5, #1]
 8011dac:	9300      	str	r3, [sp, #0]
 8011dae:	4633      	mov	r3, r6
 8011db0:	4622      	mov	r2, r4
 8011db2:	6869      	ldr	r1, [r5, #4]
 8011db4:	78e8      	ldrb	r0, [r5, #3]
 8011db6:	f7ff fd50 	bl	801185a <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 8011dba:	2800      	cmp	r0, #0
 8011dbc:	d0ee      	beq.n	8011d9c <RegionCommonGetNextLowerTxDr+0x12>
 8011dbe:	e000      	b.n	8011dc2 <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 8011dc0:	4634      	mov	r4, r6

        return drLocal;
    }
}
 8011dc2:	4620      	mov	r0, r4
 8011dc4:	b002      	add	sp, #8
 8011dc6:	bd70      	pop	{r4, r5, r6, pc}

08011dc8 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 8011dc8:	4288      	cmp	r0, r1
 8011dca:	bfb8      	it	lt
 8011dcc:	4608      	movlt	r0, r1
 8011dce:	4770      	bx	lr

08011dd0 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 8011dd0:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 8011dd4:	4a05      	ldr	r2, [pc, #20]	@ (8011dec <RegionCommonGetBandwidth+0x1c>)
 8011dd6:	4293      	cmp	r3, r2
 8011dd8:	d004      	beq.n	8011de4 <RegionCommonGetBandwidth+0x14>
 8011dda:	4a05      	ldr	r2, [pc, #20]	@ (8011df0 <RegionCommonGetBandwidth+0x20>)
 8011ddc:	4293      	cmp	r3, r2
 8011dde:	d103      	bne.n	8011de8 <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 8011de0:	2002      	movs	r0, #2
 8011de2:	4770      	bx	lr
            return 1;
 8011de4:	2001      	movs	r0, #1
 8011de6:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 8011de8:	2000      	movs	r0, #0
    }
}
 8011dea:	4770      	bx	lr
 8011dec:	0003d090 	.word	0x0003d090
 8011df0:	0007a120 	.word	0x0007a120

08011df4 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8011df4:	b500      	push	{lr}
 8011df6:	b085      	sub	sp, #20
    if ( rxSlot < RX_SLOT_NONE )
 8011df8:	2805      	cmp	r0, #5
 8011dfa:	d80e      	bhi.n	8011e1a <RegionCommonRxConfigPrint+0x26>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8011dfc:	9202      	str	r2, [sp, #8]
 8011dfe:	9101      	str	r1, [sp, #4]
 8011e00:	4b0a      	ldr	r3, [pc, #40]	@ (8011e2c <RegionCommonRxConfigPrint+0x38>)
 8011e02:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011e06:	9300      	str	r3, [sp, #0]
 8011e08:	4b09      	ldr	r3, [pc, #36]	@ (8011e30 <RegionCommonRxConfigPrint+0x3c>)
 8011e0a:	2201      	movs	r2, #1
 8011e0c:	2100      	movs	r1, #0
 8011e0e:	2002      	movs	r0, #2
 8011e10:	f003 fc94 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8011e14:	b005      	add	sp, #20
 8011e16:	f85d fb04 	ldr.w	pc, [sp], #4
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8011e1a:	9201      	str	r2, [sp, #4]
 8011e1c:	9100      	str	r1, [sp, #0]
 8011e1e:	4b05      	ldr	r3, [pc, #20]	@ (8011e34 <RegionCommonRxConfigPrint+0x40>)
 8011e20:	2201      	movs	r2, #1
 8011e22:	2100      	movs	r1, #0
 8011e24:	2002      	movs	r0, #2
 8011e26:	f003 fc89 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
}
 8011e2a:	e7f3      	b.n	8011e14 <RegionCommonRxConfigPrint+0x20>
 8011e2c:	08016c84 	.word	0x08016c84
 8011e30:	08016c1c 	.word	0x08016c1c
 8011e34:	08016c3c 	.word	0x08016c3c

08011e38 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8011e38:	b500      	push	{lr}
 8011e3a:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8011e3c:	9101      	str	r1, [sp, #4]
 8011e3e:	9000      	str	r0, [sp, #0]
 8011e40:	4b04      	ldr	r3, [pc, #16]	@ (8011e54 <RegionCommonTxConfigPrint+0x1c>)
 8011e42:	2201      	movs	r2, #1
 8011e44:	2100      	movs	r1, #0
 8011e46:	2002      	movs	r0, #2
 8011e48:	f003 fc78 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
}
 8011e4c:	b003      	add	sp, #12
 8011e4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011e52:	bf00      	nop
 8011e54:	08016c58 	.word	0x08016c58

08011e58 <VerifyRfFreq>:
    }
    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 8011e58:	b510      	push	{r4, lr}
 8011e5a:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8011e5c:	4b10      	ldr	r3, [pc, #64]	@ (8011ea0 <VerifyRfFreq+0x48>)
 8011e5e:	6a1b      	ldr	r3, [r3, #32]
 8011e60:	4798      	blx	r3
 8011e62:	b1c8      	cbz	r0, 8011e98 <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 8011e64:	4b0f      	ldr	r3, [pc, #60]	@ (8011ea4 <VerifyRfFreq+0x4c>)
 8011e66:	4423      	add	r3, r4
 8011e68:	4a0f      	ldr	r2, [pc, #60]	@ (8011ea8 <VerifyRfFreq+0x50>)
 8011e6a:	4293      	cmp	r3, r2
 8011e6c:	d813      	bhi.n	8011e96 <VerifyRfFreq+0x3e>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8011e6e:	f102 42df 	add.w	r2, r2, #1870659584	@ 0x6f800000
 8011e72:	f502 12c8 	add.w	r2, r2, #1638400	@ 0x190000
 8011e76:	f202 7245 	addw	r2, r2, #1861	@ 0x745
 8011e7a:	fba2 1203 	umull	r1, r2, r2, r3
 8011e7e:	0c92      	lsrs	r2, r2, #18
 8011e80:	490a      	ldr	r1, [pc, #40]	@ (8011eac <VerifyRfFreq+0x54>)
 8011e82:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 8011e86:	b942      	cbnz	r2, 8011e9a <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 8011e88:	4b09      	ldr	r3, [pc, #36]	@ (8011eb0 <VerifyRfFreq+0x58>)
 8011e8a:	4423      	add	r3, r4
 8011e8c:	4a09      	ldr	r2, [pc, #36]	@ (8011eb4 <VerifyRfFreq+0x5c>)
 8011e8e:	4293      	cmp	r3, r2
 8011e90:	d902      	bls.n	8011e98 <VerifyRfFreq+0x40>
    {
        return false;
 8011e92:	2000      	movs	r0, #0
 8011e94:	e000      	b.n	8011e98 <VerifyRfFreq+0x40>
        return false;
 8011e96:	2000      	movs	r0, #0
    }
    return true;
}
 8011e98:	bd10      	pop	{r4, pc}
        return false;
 8011e9a:	2000      	movs	r0, #0
 8011e9c:	e7fc      	b.n	8011e98 <VerifyRfFreq+0x40>
 8011e9e:	bf00      	nop
 8011ea0:	080172ac 	.word	0x080172ac
 8011ea4:	c8f78f60 	.word	0xc8f78f60
 8011ea8:	00401640 	.word	0x00401640
 8011eac:	000927c0 	.word	0x000927c0
 8011eb0:	ca37fea0 	.word	0xca37fea0
 8011eb4:	01808580 	.word	0x01808580

08011eb8 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8011eb8:	b570      	push	{r4, r5, r6, lr}
 8011eba:	b084      	sub	sp, #16
 8011ebc:	460c      	mov	r4, r1
    int8_t phyDr = DataratesUS915[datarate];
 8011ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8011ee8 <GetTimeOnAir+0x30>)
 8011ec0:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 8011ec2:	490a      	ldr	r1, [pc, #40]	@ (8011eec <GetTimeOnAir+0x34>)
 8011ec4:	f7ff ff84 	bl	8011dd0 <RegionCommonGetBandwidth>
 8011ec8:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8011eca:	4b09      	ldr	r3, [pc, #36]	@ (8011ef0 <GetTimeOnAir+0x38>)
 8011ecc:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8011ece:	2001      	movs	r0, #1
 8011ed0:	9003      	str	r0, [sp, #12]
 8011ed2:	b2e4      	uxtb	r4, r4
 8011ed4:	9402      	str	r4, [sp, #8]
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	9201      	str	r2, [sp, #4]
 8011eda:	2208      	movs	r2, #8
 8011edc:	9200      	str	r2, [sp, #0]
 8011ede:	4603      	mov	r3, r0
 8011ee0:	4632      	mov	r2, r6
 8011ee2:	47a8      	blx	r5
}
 8011ee4:	b004      	add	sp, #16
 8011ee6:	bd70      	pop	{r4, r5, r6, pc}
 8011ee8:	08016d10 	.word	0x08016d10
 8011eec:	08016cd0 	.word	0x08016cd0
 8011ef0:	080172ac 	.word	0x080172ac

08011ef4 <LimitTxPower>:
{
 8011ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ef6:	4606      	mov	r6, r0
 8011ef8:	4615      	mov	r5, r2
 8011efa:	461f      	mov	r7, r3
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 8011efc:	f7ff ff64 	bl	8011dc8 <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 8011f00:	2d04      	cmp	r5, #4
 8011f02:	d105      	bne.n	8011f10 <LimitTxPower+0x1c>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 8011f04:	4634      	mov	r4, r6
 8011f06:	2e02      	cmp	r6, #2
 8011f08:	bfb8      	it	lt
 8011f0a:	2402      	movlt	r4, #2
}
 8011f0c:	4620      	mov	r0, r4
 8011f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f10:	4604      	mov	r4, r0
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 8011f12:	2204      	movs	r2, #4
 8011f14:	2100      	movs	r1, #0
 8011f16:	4638      	mov	r0, r7
 8011f18:	f7ff fcf3 	bl	8011902 <RegionCommonCountChannels>
 8011f1c:	2831      	cmp	r0, #49	@ 0x31
 8011f1e:	d8f5      	bhi.n	8011f0c <LimitTxPower+0x18>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 8011f20:	4634      	mov	r4, r6
 8011f22:	2e05      	cmp	r6, #5
 8011f24:	bfb8      	it	lt
 8011f26:	2405      	movlt	r4, #5
 8011f28:	e7f0      	b.n	8011f0c <LimitTxPower+0x18>
	...

08011f2c <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 8011f2c:	b500      	push	{lr}
 8011f2e:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 8011f30:	2300      	movs	r3, #0
 8011f32:	9304      	str	r3, [sp, #16]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 8011f34:	7803      	ldrb	r3, [r0, #0]
 8011f36:	3b01      	subs	r3, #1
 8011f38:	2b38      	cmp	r3, #56	@ 0x38
 8011f3a:	d820      	bhi.n	8011f7e <RegionUS915GetPhyParam+0x52>
 8011f3c:	e8df f003 	tbb	[pc, r3]
 8011f40:	1f1f1f1d 	.word	0x1f1f1f1d
 8011f44:	1f1f1f1f 	.word	0x1f1f1f1f
 8011f48:	3f3c1f1f 	.word	0x3f3c1f1f
 8011f4c:	4e1f4842 	.word	0x4e1f4842
 8011f50:	5e5a5652 	.word	0x5e5a5652
 8011f54:	6f1f6662 	.word	0x6f1f6662
 8011f58:	817b7572 	.word	0x817b7572
 8011f5c:	881f1f84 	.word	0x881f1f84
 8011f60:	1f1f248b 	.word	0x1f1f248b
 8011f64:	1f1f1f1f 	.word	0x1f1f1f1f
 8011f68:	1f1f1f1f 	.word	0x1f1f1f1f
 8011f6c:	8e1f1f1f 	.word	0x8e1f1f1f
 8011f70:	1fa29f95 	.word	0x1fa29f95
 8011f74:	b2afaca5 	.word	0xb2afaca5
 8011f78:	b8          	.byte	0xb8
 8011f79:	00          	.byte	0x00
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 8011f7a:	2308      	movs	r3, #8
 8011f7c:	9304      	str	r3, [sp, #16]
            break;
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 8011f7e:	9804      	ldr	r0, [sp, #16]
 8011f80:	9005      	str	r0, [sp, #20]
}
 8011f82:	b007      	add	sp, #28
 8011f84:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 8011f88:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8011f8c:	f88d 3004 	strb.w	r3, [sp, #4]
 8011f90:	2304      	movs	r3, #4
 8011f92:	f88d 3005 	strb.w	r3, [sp, #5]
 8011f96:	2300      	movs	r3, #0
 8011f98:	f88d 3006 	strb.w	r3, [sp, #6]
 8011f9c:	2348      	movs	r3, #72	@ 0x48
 8011f9e:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8011fa2:	4b47      	ldr	r3, [pc, #284]	@ (80120c0 <RegionUS915GetPhyParam+0x194>)
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	f503 6290 	add.w	r2, r3, #1152	@ 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8011faa:	9202      	str	r2, [sp, #8]
 8011fac:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8011fae:	a801      	add	r0, sp, #4
 8011fb0:	f7ff feeb 	bl	8011d8a <RegionCommonGetNextLowerTxDr>
 8011fb4:	9004      	str	r0, [sp, #16]
            break;
 8011fb6:	e7e2      	b.n	8011f7e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8011fb8:	2340      	movs	r3, #64	@ 0x40
 8011fba:	9304      	str	r3, [sp, #16]
            break;
 8011fbc:	e7df      	b.n	8011f7e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8011fbe:	2320      	movs	r3, #32
 8011fc0:	9304      	str	r3, [sp, #16]
            break;
 8011fc2:	e7dc      	b.n	8011f7e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 8011fc4:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8011fc8:	4a3e      	ldr	r2, [pc, #248]	@ (80120c4 <RegionUS915GetPhyParam+0x198>)
 8011fca:	5cd3      	ldrb	r3, [r2, r3]
 8011fcc:	9304      	str	r3, [sp, #16]
            break;
 8011fce:	e7d6      	b.n	8011f7e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 8011fd0:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8011fd4:	4a3c      	ldr	r2, [pc, #240]	@ (80120c8 <RegionUS915GetPhyParam+0x19c>)
 8011fd6:	5cd3      	ldrb	r3, [r2, r3]
 8011fd8:	9304      	str	r3, [sp, #16]
            break;
 8011fda:	e7d0      	b.n	8011f7e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_MAX_RX_WINDOW;
 8011fdc:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8011fe0:	9304      	str	r3, [sp, #16]
            break;
 8011fe2:	e7cc      	b.n	8011f7e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8011fe4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011fe8:	9304      	str	r3, [sp, #16]
            break;
 8011fea:	e7c8      	b.n	8011f7e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8011fec:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8011ff0:	9304      	str	r3, [sp, #16]
            break;
 8011ff2:	e7c4      	b.n	8011f7e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8011ff4:	f241 3388 	movw	r3, #5000	@ 0x1388
 8011ff8:	9304      	str	r3, [sp, #16]
            break;
 8011ffa:	e7c0      	b.n	8011f7e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8011ffc:	f241 7370 	movw	r3, #6000	@ 0x1770
 8012000:	9304      	str	r3, [sp, #16]
            break;
 8012002:	e7bc      	b.n	8011f7e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8012004:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8012008:	9304      	str	r3, [sp, #16]
            break;
 801200a:	e7b8      	b.n	8011f7e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 801200c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012010:	482e      	ldr	r0, [pc, #184]	@ (80120cc <RegionUS915GetPhyParam+0x1a0>)
 8012012:	f001 fcab 	bl	801396c <randr>
 8012016:	f500 60fa 	add.w	r0, r0, #2000	@ 0x7d0
 801201a:	9004      	str	r0, [sp, #16]
            break;
 801201c:	e7af      	b.n	8011f7e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_RX_WND_2_FREQ;
 801201e:	4b2c      	ldr	r3, [pc, #176]	@ (80120d0 <RegionUS915GetPhyParam+0x1a4>)
 8012020:	9304      	str	r3, [sp, #16]
            break;
 8012022:	e7ac      	b.n	8011f7e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_RX_WND_2_DR;
 8012024:	2308      	movs	r3, #8
 8012026:	9304      	str	r3, [sp, #16]
            break;
 8012028:	e7a9      	b.n	8011f7e <RegionUS915GetPhyParam+0x52>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801202a:	4b25      	ldr	r3, [pc, #148]	@ (80120c0 <RegionUS915GetPhyParam+0x194>)
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8012032:	9304      	str	r3, [sp, #16]
            break;
 8012034:	e7a3      	b.n	8011f7e <RegionUS915GetPhyParam+0x52>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8012036:	4b22      	ldr	r3, [pc, #136]	@ (80120c0 <RegionUS915GetPhyParam+0x194>)
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 801203e:	9304      	str	r3, [sp, #16]
            break;
 8012040:	e79d      	b.n	8011f7e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8012042:	2348      	movs	r3, #72	@ 0x48
 8012044:	9304      	str	r3, [sp, #16]
            break;
 8012046:	e79a      	b.n	8011f7e <RegionUS915GetPhyParam+0x52>
            phyParam.Channels = RegionNvmGroup2->Channels;
 8012048:	4b1d      	ldr	r3, [pc, #116]	@ (80120c0 <RegionUS915GetPhyParam+0x194>)
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	9304      	str	r3, [sp, #16]
            break;
 801204e:	e796      	b.n	8011f7e <RegionUS915GetPhyParam+0x52>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 8012050:	4b20      	ldr	r3, [pc, #128]	@ (80120d4 <RegionUS915GetPhyParam+0x1a8>)
 8012052:	9304      	str	r3, [sp, #16]
            break;
 8012054:	e793      	b.n	8011f7e <RegionUS915GetPhyParam+0x52>
            phyParam.fValue = 0;
 8012056:	2300      	movs	r3, #0
 8012058:	9304      	str	r3, [sp, #16]
            break;
 801205a:	e790      	b.n	8011f7e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 801205c:	4a1e      	ldr	r2, [pc, #120]	@ (80120d8 <RegionUS915GetPhyParam+0x1ac>)
 801205e:	491c      	ldr	r1, [pc, #112]	@ (80120d0 <RegionUS915GetPhyParam+0x1a4>)
 8012060:	7900      	ldrb	r0, [r0, #4]
 8012062:	f7ff fb1f 	bl	80116a4 <RegionBaseUSCalcDownlinkFrequency>
 8012066:	9004      	str	r0, [sp, #16]
            break;
 8012068:	e789      	b.n	8011f7e <RegionUS915GetPhyParam+0x52>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 801206a:	2317      	movs	r3, #23
 801206c:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 8012070:	2305      	movs	r3, #5
 8012072:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 8012076:	2303      	movs	r3, #3
 8012078:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 801207c:	e77f      	b.n	8011f7e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 801207e:	2308      	movs	r3, #8
 8012080:	9304      	str	r3, [sp, #16]
            break;
 8012082:	e77c      	b.n	8011f7e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8012084:	2308      	movs	r3, #8
 8012086:	9304      	str	r3, [sp, #16]
            break;
 8012088:	e779      	b.n	8011f7e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 801208a:	4a13      	ldr	r2, [pc, #76]	@ (80120d8 <RegionUS915GetPhyParam+0x1ac>)
 801208c:	4910      	ldr	r1, [pc, #64]	@ (80120d0 <RegionUS915GetPhyParam+0x1a4>)
 801208e:	7900      	ldrb	r0, [r0, #4]
 8012090:	f7ff fb08 	bl	80116a4 <RegionBaseUSCalcDownlinkFrequency>
 8012094:	9004      	str	r0, [sp, #16]
            break;
 8012096:	e772      	b.n	8011f7e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 8012098:	2308      	movs	r3, #8
 801209a:	9304      	str	r3, [sp, #16]
            break;
 801209c:	e76f      	b.n	8011f7e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 801209e:	2308      	movs	r3, #8
 80120a0:	9304      	str	r3, [sp, #16]
            break;
 80120a2:	e76c      	b.n	8011f7e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 80120a4:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80120a8:	4a0c      	ldr	r2, [pc, #48]	@ (80120dc <RegionUS915GetPhyParam+0x1b0>)
 80120aa:	5cd3      	ldrb	r3, [r2, r3]
 80120ac:	9304      	str	r3, [sp, #16]
            break;
 80120ae:	e766      	b.n	8011f7e <RegionUS915GetPhyParam+0x52>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 80120b0:	490b      	ldr	r1, [pc, #44]	@ (80120e0 <RegionUS915GetPhyParam+0x1b4>)
 80120b2:	f990 0001 	ldrsb.w	r0, [r0, #1]
 80120b6:	f7ff fe8b 	bl	8011dd0 <RegionCommonGetBandwidth>
 80120ba:	9004      	str	r0, [sp, #16]
            break;
 80120bc:	e75f      	b.n	8011f7e <RegionUS915GetPhyParam+0x52>
 80120be:	bf00      	nop
 80120c0:	20003b98 	.word	0x20003b98
 80120c4:	08016cac 	.word	0x08016cac
 80120c8:	08016c9c 	.word	0x08016c9c
 80120cc:	fffffc18 	.word	0xfffffc18
 80120d0:	370870a0 	.word	0x370870a0
 80120d4:	4200999a 	.word	0x4200999a
 80120d8:	000927c0 	.word	0x000927c0
 80120dc:	08016d10 	.word	0x08016d10
 80120e0:	08016cd0 	.word	0x08016cd0

080120e4 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80120e4:	b510      	push	{r4, lr}
 80120e6:	b082      	sub	sp, #8
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80120e8:	4b0b      	ldr	r3, [pc, #44]	@ (8012118 <RegionUS915SetBandTxDone+0x34>)
 80120ea:	681c      	ldr	r4, [r3, #0]
 80120ec:	4b0b      	ldr	r3, [pc, #44]	@ (801211c <RegionUS915SetBandTxDone+0x38>)
 80120ee:	681a      	ldr	r2, [r3, #0]
 80120f0:	7803      	ldrb	r3, [r0, #0]
 80120f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80120f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80120fa:	7a5b      	ldrb	r3, [r3, #9]
 80120fc:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 8012100:	6903      	ldr	r3, [r0, #16]
 8012102:	9300      	str	r3, [sp, #0]
 8012104:	68c3      	ldr	r3, [r0, #12]
 8012106:	7842      	ldrb	r2, [r0, #1]
 8012108:	6881      	ldr	r1, [r0, #8]
 801210a:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 801210e:	f7ff fc1d 	bl	801194c <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 8012112:	b002      	add	sp, #8
 8012114:	bd10      	pop	{r4, pc}
 8012116:	bf00      	nop
 8012118:	20003b9c 	.word	0x20003b9c
 801211c:	20003b98 	.word	0x20003b98

08012120 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 8012120:	b510      	push	{r4, lr}
 8012122:	b086      	sub	sp, #24
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 8012124:	2301      	movs	r3, #1
 8012126:	f8ad 3000 	strh.w	r3, [sp]
 801212a:	2300      	movs	r3, #0
 801212c:	f88d 3002 	strb.w	r3, [sp, #2]
 8012130:	9301      	str	r3, [sp, #4]
 8012132:	9302      	str	r3, [sp, #8]
 8012134:	9303      	str	r3, [sp, #12]
 8012136:	9304      	str	r3, [sp, #16]
 8012138:	f88d 3014 	strb.w	r3, [sp, #20]
    {
       US915_BAND0
    };

    switch( params->Type )
 801213c:	7a04      	ldrb	r4, [r0, #8]
 801213e:	b17c      	cbz	r4, 8012160 <RegionUS915InitDefaults+0x40>
 8012140:	3c01      	subs	r4, #1
 8012142:	b2e4      	uxtb	r4, r4
 8012144:	2c01      	cmp	r4, #1
 8012146:	f200 8082 	bhi.w	801224e <RegionUS915InitDefaults+0x12e>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801214a:	4b42      	ldr	r3, [pc, #264]	@ (8012254 <RegionUS915InitDefaults+0x134>)
 801214c:	6818      	ldr	r0, [r3, #0]
 801214e:	2206      	movs	r2, #6
 8012150:	f200 418c 	addw	r1, r0, #1164	@ 0x48c
 8012154:	f500 6090 	add.w	r0, r0, #1152	@ 0x480
 8012158:	f7ff fbe9 	bl	801192e <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801215c:	2300      	movs	r3, #0
 801215e:	e074      	b.n	801224a <RegionUS915InitDefaults+0x12a>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8012160:	6803      	ldr	r3, [r0, #0]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d073      	beq.n	801224e <RegionUS915InitDefaults+0x12e>
 8012166:	6842      	ldr	r2, [r0, #4]
 8012168:	2a00      	cmp	r2, #0
 801216a:	d070      	beq.n	801224e <RegionUS915InitDefaults+0x12e>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801216c:	493a      	ldr	r1, [pc, #232]	@ (8012258 <RegionUS915InitDefaults+0x138>)
 801216e:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8012170:	4938      	ldr	r1, [pc, #224]	@ (8012254 <RegionUS915InitDefaults+0x134>)
 8012172:	600a      	str	r2, [r1, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8012174:	2200      	movs	r2, #0
 8012176:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
            RegionNvmGroup1->JoinTrialsCounter = 0;
 801217a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 801217e:	2218      	movs	r2, #24
 8012180:	4669      	mov	r1, sp
 8012182:	4618      	mov	r0, r3
 8012184:	f001 fbff 	bl	8013986 <memcpy1>
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8012188:	e011      	b.n	80121ae <RegionUS915InitDefaults+0x8e>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 801218a:	4b32      	ldr	r3, [pc, #200]	@ (8012254 <RegionUS915InitDefaults+0x134>)
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	4933      	ldr	r1, [pc, #204]	@ (801225c <RegionUS915InitDefaults+0x13c>)
 8012190:	4a33      	ldr	r2, [pc, #204]	@ (8012260 <RegionUS915InitDefaults+0x140>)
 8012192:	fb01 2204 	mla	r2, r1, r4, r2
 8012196:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801219a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 801219e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 80121a2:	2230      	movs	r2, #48	@ 0x30
 80121a4:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 80121a6:	2200      	movs	r2, #0
 80121a8:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 80121aa:	3401      	adds	r4, #1
 80121ac:	b2e4      	uxtb	r4, r4
 80121ae:	2c3f      	cmp	r4, #63	@ 0x3f
 80121b0:	d9eb      	bls.n	801218a <RegionUS915InitDefaults+0x6a>
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 80121b2:	2340      	movs	r3, #64	@ 0x40
 80121b4:	2b47      	cmp	r3, #71	@ 0x47
 80121b6:	d814      	bhi.n	80121e2 <RegionUS915InitDefaults+0xc2>
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 80121b8:	f1a3 0040 	sub.w	r0, r3, #64	@ 0x40
 80121bc:	4a25      	ldr	r2, [pc, #148]	@ (8012254 <RegionUS915InitDefaults+0x134>)
 80121be:	6812      	ldr	r2, [r2, #0]
 80121c0:	4c28      	ldr	r4, [pc, #160]	@ (8012264 <RegionUS915InitDefaults+0x144>)
 80121c2:	4929      	ldr	r1, [pc, #164]	@ (8012268 <RegionUS915InitDefaults+0x148>)
 80121c4:	fb04 1100 	mla	r1, r4, r0, r1
 80121c8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 80121cc:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 80121d0:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 80121d4:	2144      	movs	r1, #68	@ 0x44
 80121d6:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 80121d8:	2100      	movs	r1, #0
 80121da:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 80121dc:	3301      	adds	r3, #1
 80121de:	b2db      	uxtb	r3, r3
 80121e0:	e7e8      	b.n	80121b4 <RegionUS915InitDefaults+0x94>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 80121e2:	4c1c      	ldr	r4, [pc, #112]	@ (8012254 <RegionUS915InitDefaults+0x134>)
 80121e4:	6820      	ldr	r0, [r4, #0]
 80121e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80121ea:	f8a0 348c 	strh.w	r3, [r0, #1164]	@ 0x48c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 80121ee:	f8a0 348e 	strh.w	r3, [r0, #1166]	@ 0x48e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 80121f2:	f8a0 3490 	strh.w	r3, [r0, #1168]	@ 0x490
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 80121f6:	f8a0 3492 	strh.w	r3, [r0, #1170]	@ 0x492
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 80121fa:	23ff      	movs	r3, #255	@ 0xff
 80121fc:	f8a0 3494 	strh.w	r3, [r0, #1172]	@ 0x494
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8012200:	2300      	movs	r3, #0
 8012202:	f8a0 3496 	strh.w	r3, [r0, #1174]	@ 0x496
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8012206:	2206      	movs	r2, #6
 8012208:	f200 418c 	addw	r1, r0, #1164	@ 0x48c
 801220c:	f500 6090 	add.w	r0, r0, #1152	@ 0x480
 8012210:	f7ff fb8d 	bl	801192e <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8012214:	4b10      	ldr	r3, [pc, #64]	@ (8012258 <RegionUS915InitDefaults+0x138>)
 8012216:	6818      	ldr	r0, [r3, #0]
 8012218:	6821      	ldr	r1, [r4, #0]
 801221a:	2206      	movs	r2, #6
 801221c:	f501 6190 	add.w	r1, r1, #1152	@ 0x480
 8012220:	3090      	adds	r0, #144	@ 0x90
 8012222:	f7ff fb84 	bl	801192e <RegionCommonChanMaskCopy>
            break;
 8012226:	e012      	b.n	801224e <RegionUS915InitDefaults+0x12e>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8012228:	4a0b      	ldr	r2, [pc, #44]	@ (8012258 <RegionUS915InitDefaults+0x138>)
 801222a:	6811      	ldr	r1, [r2, #0]
 801222c:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8012230:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
 8012234:	4c07      	ldr	r4, [pc, #28]	@ (8012254 <RegionUS915InitDefaults+0x134>)
 8012236:	6824      	ldr	r4, [r4, #0]
 8012238:	f503 7c10 	add.w	ip, r3, #576	@ 0x240
 801223c:	f834 401c 	ldrh.w	r4, [r4, ip, lsl #1]
 8012240:	4022      	ands	r2, r4
 8012242:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8012246:	3301      	adds	r3, #1
 8012248:	b2db      	uxtb	r3, r3
 801224a:	2b05      	cmp	r3, #5
 801224c:	d9ec      	bls.n	8012228 <RegionUS915InitDefaults+0x108>
        {
            break;
        }
    }
#endif /* REGION_US915 */
}
 801224e:	b006      	add	sp, #24
 8012250:	bd10      	pop	{r4, pc}
 8012252:	bf00      	nop
 8012254:	20003b98 	.word	0x20003b98
 8012258:	20003b9c 	.word	0x20003b9c
 801225c:	00030d40 	.word	0x00030d40
 8012260:	35c80160 	.word	0x35c80160
 8012264:	00186a00 	.word	0x00186a00
 8012268:	35d2afc0 	.word	0x35d2afc0

0801226c <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801226c:	b508      	push	{r3, lr}
#if defined( REGION_US915 )
    switch( phyAttribute )
 801226e:	290a      	cmp	r1, #10
 8012270:	d829      	bhi.n	80122c6 <RegionUS915Verify+0x5a>
 8012272:	e8df f001 	tbb	[pc, r1]
 8012276:	2806      	.short	0x2806
 8012278:	0a282828 	.word	0x0a282828
 801227c:	1e28140a 	.word	0x1e28140a
 8012280:	1e          	.byte	0x1e
 8012281:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8012282:	6800      	ldr	r0, [r0, #0]
 8012284:	f7ff fde8 	bl	8011e58 <VerifyRfFreq>
 8012288:	e01e      	b.n	80122c8 <RegionUS915Verify+0x5c>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_TX_DR:
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 801228a:	2204      	movs	r2, #4
 801228c:	2100      	movs	r1, #0
 801228e:	f990 0000 	ldrsb.w	r0, [r0]
 8012292:	f7ff fad8 	bl	8011846 <RegionCommonValueInRange>
 8012296:	3800      	subs	r0, #0
 8012298:	bf18      	it	ne
 801229a:	2001      	movne	r0, #1
 801229c:	e014      	b.n	80122c8 <RegionUS915Verify+0x5c>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 801229e:	220d      	movs	r2, #13
 80122a0:	2108      	movs	r1, #8
 80122a2:	f990 0000 	ldrsb.w	r0, [r0]
 80122a6:	f7ff face 	bl	8011846 <RegionCommonValueInRange>
 80122aa:	3800      	subs	r0, #0
 80122ac:	bf18      	it	ne
 80122ae:	2001      	movne	r0, #1
 80122b0:	e00a      	b.n	80122c8 <RegionUS915Verify+0x5c>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 80122b2:	220e      	movs	r2, #14
 80122b4:	2100      	movs	r1, #0
 80122b6:	f990 0000 	ldrsb.w	r0, [r0]
 80122ba:	f7ff fac4 	bl	8011846 <RegionCommonValueInRange>
 80122be:	3800      	subs	r0, #0
 80122c0:	bf18      	it	ne
 80122c2:	2001      	movne	r0, #1
 80122c4:	e000      	b.n	80122c8 <RegionUS915Verify+0x5c>
    switch( phyAttribute )
 80122c6:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_US915 */
}
 80122c8:	bd08      	pop	{r3, pc}
	...

080122cc <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 80122cc:	7903      	ldrb	r3, [r0, #4]
 80122ce:	2b10      	cmp	r3, #16
 80122d0:	d136      	bne.n	8012340 <RegionUS915ApplyCFList+0x74>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 80122d2:	6803      	ldr	r3, [r0, #0]
 80122d4:	7bdb      	ldrb	r3, [r3, #15]
 80122d6:	2b01      	cmp	r3, #1
 80122d8:	d132      	bne.n	8012340 <RegionUS915ApplyCFList+0x74>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 80122da:	2200      	movs	r2, #0
 80122dc:	4613      	mov	r3, r2
 80122de:	2a04      	cmp	r2, #4
 80122e0:	d82d      	bhi.n	801233e <RegionUS915ApplyCFList+0x72>
{
 80122e2:	b530      	push	{r4, r5, lr}
 80122e4:	e012      	b.n	801230c <RegionUS915ApplyCFList+0x40>
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 80122e6:	4917      	ldr	r1, [pc, #92]	@ (8012344 <RegionUS915ApplyCFList+0x78>)
 80122e8:	680d      	ldr	r5, [r1, #0]
 80122ea:	f10c 0e48 	add.w	lr, ip, #72	@ 0x48
 80122ee:	f835 101e 	ldrh.w	r1, [r5, lr, lsl #1]
 80122f2:	f50c 7c10 	add.w	ip, ip, #576	@ 0x240
 80122f6:	f834 401c 	ldrh.w	r4, [r4, ip, lsl #1]
 80122fa:	4021      	ands	r1, r4
 80122fc:	f825 101e 	strh.w	r1, [r5, lr, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8012300:	3301      	adds	r3, #1
 8012302:	b2db      	uxtb	r3, r3
 8012304:	3202      	adds	r2, #2
 8012306:	b2d2      	uxtb	r2, r2
 8012308:	2b04      	cmp	r3, #4
 801230a:	d817      	bhi.n	801233c <RegionUS915ApplyCFList+0x70>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 801230c:	6801      	ldr	r1, [r0, #0]
 801230e:	5c89      	ldrb	r1, [r1, r2]
 8012310:	4c0d      	ldr	r4, [pc, #52]	@ (8012348 <RegionUS915ApplyCFList+0x7c>)
 8012312:	6824      	ldr	r4, [r4, #0]
 8012314:	469c      	mov	ip, r3
 8012316:	f503 7510 	add.w	r5, r3, #576	@ 0x240
 801231a:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 801231e:	f8d0 e000 	ldr.w	lr, [r0]
 8012322:	4496      	add	lr, r2
 8012324:	f89e e001 	ldrb.w	lr, [lr, #1]
 8012328:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
 801232c:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        if( chMaskItr == 4 )
 8012330:	2b04      	cmp	r3, #4
 8012332:	d1d8      	bne.n	80122e6 <RegionUS915ApplyCFList+0x1a>
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 8012334:	b2c9      	uxtb	r1, r1
 8012336:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
 801233a:	e7d4      	b.n	80122e6 <RegionUS915ApplyCFList+0x1a>
    }
#endif /* REGION_US915 */
}
 801233c:	bd30      	pop	{r4, r5, pc}
 801233e:	4770      	bx	lr
 8012340:	4770      	bx	lr
 8012342:	bf00      	nop
 8012344:	20003b9c 	.word	0x20003b9c
 8012348:	20003b98 	.word	0x20003b98

0801234c <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 801234c:	b570      	push	{r4, r5, r6, lr}
 801234e:	4605      	mov	r5, r0
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 8012350:	2204      	movs	r2, #4
 8012352:	2100      	movs	r1, #0
 8012354:	6800      	ldr	r0, [r0, #0]
 8012356:	f7ff fad4 	bl	8011902 <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 801235a:	2801      	cmp	r0, #1
 801235c:	d033      	beq.n	80123c6 <RegionUS915ChanMaskSet+0x7a>
        ( nbChannels > 0 ) )
    {
        return false;
    }

    switch( chanMaskSet->ChannelsMaskType )
 801235e:	792c      	ldrb	r4, [r5, #4]
 8012360:	b11c      	cbz	r4, 801236a <RegionUS915ChanMaskSet+0x1e>
 8012362:	2c01      	cmp	r4, #1
 8012364:	d025      	beq.n	80123b2 <RegionUS915ChanMaskSet+0x66>
 8012366:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 8012368:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801236a:	4e18      	ldr	r6, [pc, #96]	@ (80123cc <RegionUS915ChanMaskSet+0x80>)
 801236c:	6830      	ldr	r0, [r6, #0]
 801236e:	2206      	movs	r2, #6
 8012370:	6829      	ldr	r1, [r5, #0]
 8012372:	f500 6090 	add.w	r0, r0, #1152	@ 0x480
 8012376:	f7ff fada 	bl	801192e <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 801237a:	6835      	ldr	r5, [r6, #0]
 801237c:	f895 3494 	ldrb.w	r3, [r5, #1172]	@ 0x494
 8012380:	f8a5 3494 	strh.w	r3, [r5, #1172]	@ 0x494
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8012384:	2300      	movs	r3, #0
 8012386:	f8a5 3496 	strh.w	r3, [r5, #1174]	@ 0x496
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801238a:	e00e      	b.n	80123aa <RegionUS915ChanMaskSet+0x5e>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 801238c:	4b10      	ldr	r3, [pc, #64]	@ (80123d0 <RegionUS915ChanMaskSet+0x84>)
 801238e:	681a      	ldr	r2, [r3, #0]
 8012390:	f104 0148 	add.w	r1, r4, #72	@ 0x48
 8012394:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 8012398:	f504 7010 	add.w	r0, r4, #576	@ 0x240
 801239c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80123a0:	4003      	ands	r3, r0
 80123a2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 80123a6:	3401      	adds	r4, #1
 80123a8:	b2e4      	uxtb	r4, r4
 80123aa:	2c05      	cmp	r4, #5
 80123ac:	d9ee      	bls.n	801238c <RegionUS915ChanMaskSet+0x40>
    return true;
 80123ae:	2001      	movs	r0, #1
 80123b0:	e7da      	b.n	8012368 <RegionUS915ChanMaskSet+0x1c>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80123b2:	4b06      	ldr	r3, [pc, #24]	@ (80123cc <RegionUS915ChanMaskSet+0x80>)
 80123b4:	6818      	ldr	r0, [r3, #0]
 80123b6:	2206      	movs	r2, #6
 80123b8:	6829      	ldr	r1, [r5, #0]
 80123ba:	f200 408c 	addw	r0, r0, #1164	@ 0x48c
 80123be:	f7ff fab6 	bl	801192e <RegionCommonChanMaskCopy>
    return true;
 80123c2:	2001      	movs	r0, #1
            break;
 80123c4:	e7d0      	b.n	8012368 <RegionUS915ChanMaskSet+0x1c>
        return false;
 80123c6:	2000      	movs	r0, #0
 80123c8:	e7ce      	b.n	8012368 <RegionUS915ChanMaskSet+0x1c>
 80123ca:	bf00      	nop
 80123cc:	20003b98 	.word	0x20003b98
 80123d0:	20003b9c 	.word	0x20003b9c

080123d4 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80123d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123d6:	b083      	sub	sp, #12
 80123d8:	460e      	mov	r6, r1
 80123da:	4617      	mov	r7, r2
 80123dc:	461c      	mov	r4, r3
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 80123de:	280d      	cmp	r0, #13
 80123e0:	bfa8      	it	ge
 80123e2:	200d      	movge	r0, #13
 80123e4:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 80123e6:	4d0f      	ldr	r5, [pc, #60]	@ (8012424 <RegionUS915ComputeRxWindowParameters+0x50>)
 80123e8:	4629      	mov	r1, r5
 80123ea:	f7ff fcf1 	bl	8011dd0 <RegionCommonGetBandwidth>
 80123ee:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 80123f0:	f994 3001 	ldrsb.w	r3, [r4, #1]
 80123f4:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80123f8:	4a0b      	ldr	r2, [pc, #44]	@ (8012428 <RegionUS915ComputeRxWindowParameters+0x54>)
 80123fa:	5cd0      	ldrb	r0, [r2, r3]
 80123fc:	f7ff fbbe 	bl	8011b7c <RegionCommonComputeSymbolTimeLoRa>
 8012400:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8012402:	4b0a      	ldr	r3, [pc, #40]	@ (801242c <RegionUS915ComputeRxWindowParameters+0x58>)
 8012404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012406:	4798      	blx	r3
 8012408:	4603      	mov	r3, r0
 801240a:	f104 020c 	add.w	r2, r4, #12
 801240e:	9201      	str	r2, [sp, #4]
 8012410:	3408      	adds	r4, #8
 8012412:	9400      	str	r4, [sp, #0]
 8012414:	463a      	mov	r2, r7
 8012416:	4631      	mov	r1, r6
 8012418:	4628      	mov	r0, r5
 801241a:	f7ff fbb7 	bl	8011b8c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 801241e:	b003      	add	sp, #12
 8012420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012422:	bf00      	nop
 8012424:	08016cd0 	.word	0x08016cd0
 8012428:	08016d10 	.word	0x08016d10
 801242c:	080172ac 	.word	0x080172ac

08012430 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8012430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012434:	b08b      	sub	sp, #44	@ 0x2c
 8012436:	4604      	mov	r4, r0
 8012438:	460d      	mov	r5, r1
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 801243a:	f990 6001 	ldrsb.w	r6, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 801243e:	6847      	ldr	r7, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 8012440:	4b22      	ldr	r3, [pc, #136]	@ (80124cc <RegionUS915RxConfig+0x9c>)
 8012442:	685b      	ldr	r3, [r3, #4]
 8012444:	4798      	blx	r3
 8012446:	2800      	cmp	r0, #0
 8012448:	d13d      	bne.n	80124c6 <RegionUS915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801244a:	7ce3      	ldrb	r3, [r4, #19]
 801244c:	b933      	cbnz	r3, 801245c <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 801244e:	7823      	ldrb	r3, [r4, #0]
 8012450:	f003 0307 	and.w	r3, r3, #7
 8012454:	4a1e      	ldr	r2, [pc, #120]	@ (80124d0 <RegionUS915RxConfig+0xa0>)
 8012456:	4f1f      	ldr	r7, [pc, #124]	@ (80124d4 <RegionUS915RxConfig+0xa4>)
 8012458:	fb02 7703 	mla	r7, r2, r3, r7
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 801245c:	4b1e      	ldr	r3, [pc, #120]	@ (80124d8 <RegionUS915RxConfig+0xa8>)
 801245e:	f913 9006 	ldrsb.w	r9, [r3, r6]

    Radio.SetChannel( frequency );
 8012462:	f8df 8068 	ldr.w	r8, [pc, #104]	@ 80124cc <RegionUS915RxConfig+0x9c>
 8012466:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801246a:	4638      	mov	r0, r7
 801246c:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801246e:	f8d8 8018 	ldr.w	r8, [r8, #24]
 8012472:	7ca3      	ldrb	r3, [r4, #18]
 8012474:	9309      	str	r3, [sp, #36]	@ 0x24
 8012476:	2001      	movs	r0, #1
 8012478:	9008      	str	r0, [sp, #32]
 801247a:	2200      	movs	r2, #0
 801247c:	9207      	str	r2, [sp, #28]
 801247e:	9206      	str	r2, [sp, #24]
 8012480:	9205      	str	r2, [sp, #20]
 8012482:	9204      	str	r2, [sp, #16]
 8012484:	9203      	str	r2, [sp, #12]
 8012486:	8923      	ldrh	r3, [r4, #8]
 8012488:	9302      	str	r3, [sp, #8]
 801248a:	2308      	movs	r3, #8
 801248c:	9301      	str	r3, [sp, #4]
 801248e:	9200      	str	r2, [sp, #0]
 8012490:	4603      	mov	r3, r0
 8012492:	464a      	mov	r2, r9
 8012494:	78a1      	ldrb	r1, [r4, #2]
 8012496:	47c0      	blx	r8

    if( rxConfig->RepeaterSupport == true )
 8012498:	7c63      	ldrb	r3, [r4, #17]
 801249a:	b18b      	cbz	r3, 80124c0 <RegionUS915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 801249c:	4b0f      	ldr	r3, [pc, #60]	@ (80124dc <RegionUS915RxConfig+0xac>)
 801249e:	5d99      	ldrb	r1, [r3, r6]
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80124a0:	4b0a      	ldr	r3, [pc, #40]	@ (80124cc <RegionUS915RxConfig+0x9c>)
 80124a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80124a4:	310d      	adds	r1, #13
 80124a6:	b2c9      	uxtb	r1, r1
 80124a8:	2001      	movs	r0, #1
 80124aa:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80124ac:	4632      	mov	r2, r6
 80124ae:	4639      	mov	r1, r7
 80124b0:	7ce0      	ldrb	r0, [r4, #19]
 80124b2:	f7ff fc9f 	bl	8011df4 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 80124b6:	702e      	strb	r6, [r5, #0]
    return true;
 80124b8:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 80124ba:	b00b      	add	sp, #44	@ 0x2c
 80124bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 80124c0:	4b07      	ldr	r3, [pc, #28]	@ (80124e0 <RegionUS915RxConfig+0xb0>)
 80124c2:	5d99      	ldrb	r1, [r3, r6]
 80124c4:	e7ec      	b.n	80124a0 <RegionUS915RxConfig+0x70>
        return false;
 80124c6:	2000      	movs	r0, #0
 80124c8:	e7f7      	b.n	80124ba <RegionUS915RxConfig+0x8a>
 80124ca:	bf00      	nop
 80124cc:	080172ac 	.word	0x080172ac
 80124d0:	000927c0 	.word	0x000927c0
 80124d4:	370870a0 	.word	0x370870a0
 80124d8:	08016d10 	.word	0x08016d10
 80124dc:	08016c9c 	.word	0x08016c9c
 80124e0:	08016cac 	.word	0x08016cac

080124e4 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80124e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124e8:	b08d      	sub	sp, #52	@ 0x34
 80124ea:	4604      	mov	r4, r0
 80124ec:	468b      	mov	fp, r1
 80124ee:	4617      	mov	r7, r2
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 80124f0:	f990 2001 	ldrsb.w	r2, [r0, #1]
 80124f4:	4b32      	ldr	r3, [pc, #200]	@ (80125c0 <RegionUS915TxConfig+0xdc>)
 80124f6:	f913 a002 	ldrsb.w	sl, [r3, r2]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 80124fa:	4b32      	ldr	r3, [pc, #200]	@ (80125c4 <RegionUS915TxConfig+0xe0>)
 80124fc:	6818      	ldr	r0, [r3, #0]
 80124fe:	f8df 90c8 	ldr.w	r9, [pc, #200]	@ 80125c8 <RegionUS915TxConfig+0xe4>
 8012502:	f8d9 3000 	ldr.w	r3, [r9]
 8012506:	7821      	ldrb	r1, [r4, #0]
 8012508:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801250c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8012510:	7a49      	ldrb	r1, [r1, #9]
 8012512:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012516:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801251a:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 801251e:	f991 1002 	ldrsb.w	r1, [r1, #2]
 8012522:	f994 0002 	ldrsb.w	r0, [r4, #2]
 8012526:	f7ff fce5 	bl	8011ef4 <LimitTxPower>
 801252a:	4606      	mov	r6, r0
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 801252c:	4927      	ldr	r1, [pc, #156]	@ (80125cc <RegionUS915TxConfig+0xe8>)
 801252e:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8012532:	f7ff fc4d 	bl	8011dd0 <RegionCommonGetBandwidth>
 8012536:	900a      	str	r0, [sp, #40]	@ 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8012538:	2200      	movs	r2, #0
 801253a:	4925      	ldr	r1, [pc, #148]	@ (80125d0 <RegionUS915TxConfig+0xec>)
 801253c:	4630      	mov	r0, r6
 801253e:	f7ff fb61 	bl	8011c04 <RegionCommonComputeTxPower>
 8012542:	900b      	str	r0, [sp, #44]	@ 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8012544:	f8df 808c 	ldr.w	r8, [pc, #140]	@ 80125d4 <RegionUS915TxConfig+0xf0>
 8012548:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801254c:	f8d9 1000 	ldr.w	r1, [r9]
 8012550:	7823      	ldrb	r3, [r4, #0]
 8012552:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012556:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 801255a:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801255c:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8012560:	9308      	str	r3, [sp, #32]
 8012562:	2200      	movs	r2, #0
 8012564:	9207      	str	r2, [sp, #28]
 8012566:	9206      	str	r2, [sp, #24]
 8012568:	9205      	str	r2, [sp, #20]
 801256a:	2501      	movs	r5, #1
 801256c:	9504      	str	r5, [sp, #16]
 801256e:	9203      	str	r2, [sp, #12]
 8012570:	2308      	movs	r3, #8
 8012572:	9302      	str	r3, [sp, #8]
 8012574:	9501      	str	r5, [sp, #4]
 8012576:	f8cd a000 	str.w	sl, [sp]
 801257a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801257c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801257e:	4628      	mov	r0, r5
 8012580:	f8d8 c01c 	ldr.w	ip, [r8, #28]
 8012584:	47e0      	blx	ip
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8012586:	f8d9 2000 	ldr.w	r2, [r9]
 801258a:	7823      	ldrb	r3, [r4, #0]
 801258c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012590:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8012594:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012598:	f7ff fc4e 	bl	8011e38 <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 801259c:	f8d8 3054 	ldr.w	r3, [r8, #84]	@ 0x54
 80125a0:	7b21      	ldrb	r1, [r4, #12]
 80125a2:	4628      	mov	r0, r5
 80125a4:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80125a6:	89a1      	ldrh	r1, [r4, #12]
 80125a8:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80125ac:	f7ff fc84 	bl	8011eb8 <GetTimeOnAir>
 80125b0:	6038      	str	r0, [r7, #0]

    *txPower = txPowerLimited;
 80125b2:	f88b 6000 	strb.w	r6, [fp]
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 80125b6:	4628      	mov	r0, r5
 80125b8:	b00d      	add	sp, #52	@ 0x34
 80125ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125be:	bf00      	nop
 80125c0:	08016d10 	.word	0x08016d10
 80125c4:	20003b9c 	.word	0x20003b9c
 80125c8:	20003b98 	.word	0x20003b98
 80125cc:	08016cd0 	.word	0x08016cd0
 80125d0:	41f00000 	.word	0x41f00000
 80125d4:	080172ac 	.word	0x080172ac

080125d8 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80125d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80125dc:	b091      	sub	sp, #68	@ 0x44
 80125de:	4605      	mov	r5, r0
 80125e0:	4688      	mov	r8, r1
 80125e2:	4617      	mov	r7, r2
 80125e4:	461e      	mov	r6, r3
    uint8_t status = 0x07;
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 80125e6:	2400      	movs	r4, #0
 80125e8:	940e      	str	r4, [sp, #56]	@ 0x38
 80125ea:	f8ad 403c 	strh.w	r4, [sp, #60]	@ 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
 80125ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 80125f0:	940c      	str	r4, [sp, #48]	@ 0x30
 80125f2:	940d      	str	r4, [sp, #52]	@ 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 80125f4:	4b9d      	ldr	r3, [pc, #628]	@ (801286c <RegionUS915LinkAdrReq+0x294>)
 80125f6:	6819      	ldr	r1, [r3, #0]
 80125f8:	2206      	movs	r2, #6
 80125fa:	f501 6190 	add.w	r1, r1, #1152	@ 0x480
 80125fe:	a80b      	add	r0, sp, #44	@ 0x2c
 8012600:	f7ff f995 	bl	801192e <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8012604:	e00d      	b.n	8012622 <RegionUS915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 8012606:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801260a:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
            channelsMask[1] = 0xFFFF;
 801260e:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
            channelsMask[2] = 0xFFFF;
 8012612:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
            channelsMask[3] = 0xFFFF;
 8012616:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801261a:	f89d 303c 	ldrb.w	r3, [sp, #60]	@ 0x3c
 801261e:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8012622:	7a2b      	ldrb	r3, [r5, #8]
 8012624:	42a3      	cmp	r3, r4
 8012626:	f240 8084 	bls.w	8012732 <RegionUS915LinkAdrReq+0x15a>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801262a:	6868      	ldr	r0, [r5, #4]
 801262c:	a90e      	add	r1, sp, #56	@ 0x38
 801262e:	4420      	add	r0, r4
 8012630:	f7ff fa2e 	bl	8011a90 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 8012634:	4603      	mov	r3, r0
 8012636:	2800      	cmp	r0, #0
 8012638:	d07b      	beq.n	8012732 <RegionUS915LinkAdrReq+0x15a>
        bytesProcessed += nextIndex;
 801263a:	4423      	add	r3, r4
 801263c:	b2dc      	uxtb	r4, r3
        if( linkAdrParams.ChMaskCtrl == 6 )
 801263e:	f89d c03b 	ldrb.w	ip, [sp, #59]	@ 0x3b
 8012642:	f1bc 0f06 	cmp.w	ip, #6
 8012646:	d0de      	beq.n	8012606 <RegionUS915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 8012648:	f1bc 0f07 	cmp.w	ip, #7
 801264c:	d00a      	beq.n	8012664 <RegionUS915LinkAdrReq+0x8c>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 801264e:	f1bc 0f05 	cmp.w	ip, #5
 8012652:	d06a      	beq.n	801272a <RegionUS915LinkAdrReq+0x152>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 8012654:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8012658:	aa10      	add	r2, sp, #64	@ 0x40
 801265a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801265e:	f82c 3c14 	strh.w	r3, [ip, #-20]
 8012662:	e7de      	b.n	8012622 <RegionUS915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 8012664:	2300      	movs	r3, #0
 8012666:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
            channelsMask[1] = 0x0000;
 801266a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
            channelsMask[2] = 0x0000;
 801266e:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
            channelsMask[3] = 0x0000;
 8012672:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8012676:	f89d 303c 	ldrb.w	r3, [sp, #60]	@ 0x3c
 801267a:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801267e:	e7d0      	b.n	8012622 <RegionUS915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 8012680:	aa10      	add	r2, sp, #64	@ 0x40
 8012682:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 8012686:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 801268a:	f062 02ff 	orn	r2, r2, #255	@ 0xff
 801268e:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 8012692:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 8012696:	4313      	orrs	r3, r2
 8012698:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
                        cntChannelMask++;
 801269c:	3101      	adds	r1, #1
 801269e:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 80126a0:	f10c 0c01 	add.w	ip, ip, #1
 80126a4:	fa5f fc8c 	uxtb.w	ip, ip
 80126a8:	f1bc 0f07 	cmp.w	ip, #7
 80126ac:	d8b9      	bhi.n	8012622 <RegionUS915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 80126ae:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 80126b2:	2301      	movs	r3, #1
 80126b4:	fa03 f30c 	lsl.w	r3, r3, ip
 80126b8:	421a      	tst	r2, r3
 80126ba:	d011      	beq.n	80126e0 <RegionUS915LinkAdrReq+0x108>
                    if( ( i % 2 ) == 0 )
 80126bc:	f01c 0f01 	tst.w	ip, #1
 80126c0:	d1de      	bne.n	8012680 <RegionUS915LinkAdrReq+0xa8>
                        channelsMask[cntChannelMask] |= 0x00FF;
 80126c2:	aa10      	add	r2, sp, #64	@ 0x40
 80126c4:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 80126c8:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 80126cc:	f042 02ff 	orr.w	r2, r2, #255	@ 0xff
 80126d0:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 80126d4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 80126d8:	4313      	orrs	r3, r2
 80126da:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 80126de:	e7df      	b.n	80126a0 <RegionUS915LinkAdrReq+0xc8>
                    if( ( i % 2 ) == 0 )
 80126e0:	f01c 0f01 	tst.w	ip, #1
 80126e4:	d110      	bne.n	8012708 <RegionUS915LinkAdrReq+0x130>
                        channelsMask[cntChannelMask] &= 0xFF00;
 80126e6:	aa10      	add	r2, sp, #64	@ 0x40
 80126e8:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 80126ec:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 80126f0:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80126f4:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 80126f8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 80126fc:	43db      	mvns	r3, r3
 80126fe:	b21b      	sxth	r3, r3
 8012700:	4013      	ands	r3, r2
 8012702:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8012706:	e7cb      	b.n	80126a0 <RegionUS915LinkAdrReq+0xc8>
                        channelsMask[cntChannelMask] &= 0x00FF;
 8012708:	aa10      	add	r2, sp, #64	@ 0x40
 801270a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 801270e:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 8012712:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 8012716:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801271a:	43db      	mvns	r3, r3
 801271c:	b21b      	sxth	r3, r3
 801271e:	4013      	ands	r3, r2
 8012720:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
                        cntChannelMask++;
 8012724:	3101      	adds	r1, #1
 8012726:	b2c9      	uxtb	r1, r1
 8012728:	e7ba      	b.n	80126a0 <RegionUS915LinkAdrReq+0xc8>
            for( uint8_t i = 0; i <= 7; i++ )
 801272a:	f04f 0c00 	mov.w	ip, #0
            uint8_t cntChannelMask = 0;
 801272e:	4661      	mov	r1, ip
 8012730:	e7ba      	b.n	80126a8 <RegionUS915LinkAdrReq+0xd0>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8012732:	f99d 3039 	ldrsb.w	r3, [sp, #57]	@ 0x39
 8012736:	2b03      	cmp	r3, #3
 8012738:	dd58      	ble.n	80127ec <RegionUS915LinkAdrReq+0x214>
 801273a:	f04f 0907 	mov.w	r9, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801273e:	2302      	movs	r3, #2
 8012740:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8012744:	7a6b      	ldrb	r3, [r5, #9]
 8012746:	f88d 3026 	strb.w	r3, [sp, #38]	@ 0x26
    phyParam = RegionUS915GetPhyParam( &getPhy );
 801274a:	a809      	add	r0, sp, #36	@ 0x24
 801274c:	f7ff fbee 	bl	8011f2c <RegionUS915GetPhyParam>
 8012750:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 8012752:	f88d 9004 	strb.w	r9, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8012756:	7aab      	ldrb	r3, [r5, #10]
 8012758:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801275c:	f99d 3039 	ldrsb.w	r3, [sp, #57]	@ 0x39
 8012760:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8012764:	f99d 303a 	ldrsb.w	r3, [sp, #58]	@ 0x3a
 8012768:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801276c:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
 8012770:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8012774:	f995 300b 	ldrsb.w	r3, [r5, #11]
 8012778:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801277c:	f995 300c 	ldrsb.w	r3, [r5, #12]
 8012780:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8012784:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8012788:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 801278c:	2348      	movs	r3, #72	@ 0x48
 801278e:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 8012792:	ab0b      	add	r3, sp, #44	@ 0x2c
 8012794:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8012796:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 801279a:	2304      	movs	r3, #4
 801279c:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 80127a0:	4b32      	ldr	r3, [pc, #200]	@ (801286c <RegionUS915LinkAdrReq+0x294>)
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 80127a6:	230e      	movs	r3, #14
 80127a8:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 80127ac:	2300      	movs	r3, #0
 80127ae:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80127b2:	682b      	ldr	r3, [r5, #0]
 80127b4:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80127b6:	ab0e      	add	r3, sp, #56	@ 0x38
 80127b8:	f10d 023a 	add.w	r2, sp, #58	@ 0x3a
 80127bc:	f10d 0139 	add.w	r1, sp, #57	@ 0x39
 80127c0:	4668      	mov	r0, sp
 80127c2:	f7ff f983 	bl	8011acc <RegionCommonLinkAdrReqVerifyParams>
 80127c6:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80127c8:	2807      	cmp	r0, #7
 80127ca:	d01c      	beq.n	8012806 <RegionUS915LinkAdrReq+0x22e>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80127cc:	f99d 3039 	ldrsb.w	r3, [sp, #57]	@ 0x39
 80127d0:	f888 3000 	strb.w	r3, [r8]
    *txPowOut = linkAdrParams.TxPower;
 80127d4:	f99d 303a 	ldrsb.w	r3, [sp, #58]	@ 0x3a
 80127d8:	703b      	strb	r3, [r7, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80127da:	f89d 3038 	ldrb.w	r3, [sp, #56]	@ 0x38
 80127de:	7033      	strb	r3, [r6, #0]
    *nbBytesParsed = bytesProcessed;
 80127e0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80127e2:	701c      	strb	r4, [r3, #0]

#endif /* REGION_US915 */
    return status;
}
 80127e4:	4628      	mov	r0, r5
 80127e6:	b011      	add	sp, #68	@ 0x44
 80127e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 80127ec:	2204      	movs	r2, #4
 80127ee:	2100      	movs	r1, #0
 80127f0:	a80b      	add	r0, sp, #44	@ 0x2c
 80127f2:	f7ff f886 	bl	8011902 <RegionCommonCountChannels>
 80127f6:	2801      	cmp	r0, #1
 80127f8:	d902      	bls.n	8012800 <RegionUS915LinkAdrReq+0x228>
 80127fa:	f04f 0907 	mov.w	r9, #7
 80127fe:	e79e      	b.n	801273e <RegionUS915LinkAdrReq+0x166>
        status &= 0xFE; // Channel mask KO
 8012800:	f04f 0906 	mov.w	r9, #6
 8012804:	e79b      	b.n	801273e <RegionUS915LinkAdrReq+0x166>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 8012806:	f8df 9064 	ldr.w	r9, [pc, #100]	@ 801286c <RegionUS915LinkAdrReq+0x294>
 801280a:	f8d9 0000 	ldr.w	r0, [r9]
 801280e:	2206      	movs	r2, #6
 8012810:	a90b      	add	r1, sp, #44	@ 0x2c
 8012812:	f500 6090 	add.w	r0, r0, #1152	@ 0x480
 8012816:	f7ff f88a 	bl	801192e <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 801281a:	4b15      	ldr	r3, [pc, #84]	@ (8012870 <RegionUS915LinkAdrReq+0x298>)
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	f8b3 1090 	ldrh.w	r1, [r3, #144]	@ 0x90
 8012822:	f8d9 2000 	ldr.w	r2, [r9]
 8012826:	f8b2 0480 	ldrh.w	r0, [r2, #1152]	@ 0x480
 801282a:	4001      	ands	r1, r0
 801282c:	f8a3 1090 	strh.w	r1, [r3, #144]	@ 0x90
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 8012830:	f8b3 1092 	ldrh.w	r1, [r3, #146]	@ 0x92
 8012834:	f8b2 0482 	ldrh.w	r0, [r2, #1154]	@ 0x482
 8012838:	4001      	ands	r1, r0
 801283a:	f8a3 1092 	strh.w	r1, [r3, #146]	@ 0x92
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 801283e:	f8b3 1094 	ldrh.w	r1, [r3, #148]	@ 0x94
 8012842:	f8b2 0484 	ldrh.w	r0, [r2, #1156]	@ 0x484
 8012846:	4001      	ands	r1, r0
 8012848:	f8a3 1094 	strh.w	r1, [r3, #148]	@ 0x94
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 801284c:	f8b3 1096 	ldrh.w	r1, [r3, #150]	@ 0x96
 8012850:	f8b2 0486 	ldrh.w	r0, [r2, #1158]	@ 0x486
 8012854:	4001      	ands	r1, r0
 8012856:	f8a3 1096 	strh.w	r1, [r3, #150]	@ 0x96
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 801285a:	f8b2 1488 	ldrh.w	r1, [r2, #1160]	@ 0x488
 801285e:	f8a3 1098 	strh.w	r1, [r3, #152]	@ 0x98
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 8012862:	f8b2 248a 	ldrh.w	r2, [r2, #1162]	@ 0x48a
 8012866:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
 801286a:	e7af      	b.n	80127cc <RegionUS915LinkAdrReq+0x1f4>
 801286c:	20003b98 	.word	0x20003b98
 8012870:	20003b9c 	.word	0x20003b9c

08012874 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8012874:	b538      	push	{r3, r4, r5, lr}
 8012876:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8012878:	6840      	ldr	r0, [r0, #4]
 801287a:	f7ff faed 	bl	8011e58 <VerifyRfFreq>
 801287e:	b310      	cbz	r0, 80128c6 <RegionUS915RxParamSetupReq+0x52>
    uint8_t status = 0x07;
 8012880:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8012882:	220d      	movs	r2, #13
 8012884:	2108      	movs	r1, #8
 8012886:	f994 0000 	ldrsb.w	r0, [r4]
 801288a:	f7fe ffdc 	bl	8011846 <RegionCommonValueInRange>
 801288e:	b908      	cbnz	r0, 8012894 <RegionUS915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 8012890:	f005 05fd 	and.w	r5, r5, #253	@ 0xfd
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8012894:	2207      	movs	r2, #7
 8012896:	2105      	movs	r1, #5
 8012898:	f994 0000 	ldrsb.w	r0, [r4]
 801289c:	f7fe ffd3 	bl	8011846 <RegionCommonValueInRange>
 80128a0:	2801      	cmp	r0, #1
 80128a2:	d003      	beq.n	80128ac <RegionUS915RxParamSetupReq+0x38>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 80128a4:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 80128a8:	2b0d      	cmp	r3, #13
 80128aa:	dd01      	ble.n	80128b0 <RegionUS915RxParamSetupReq+0x3c>
    {
        status &= 0xFD; // Datarate KO
 80128ac:	f005 05fd 	and.w	r5, r5, #253	@ 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 80128b0:	2203      	movs	r2, #3
 80128b2:	2100      	movs	r1, #0
 80128b4:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80128b8:	f7fe ffc5 	bl	8011846 <RegionCommonValueInRange>
 80128bc:	b908      	cbnz	r0, 80128c2 <RegionUS915RxParamSetupReq+0x4e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80128be:	f005 05fb 	and.w	r5, r5, #251	@ 0xfb
    }

#endif /* REGION_US915 */
    return status;
}
 80128c2:	4628      	mov	r0, r5
 80128c4:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 80128c6:	2506      	movs	r5, #6
 80128c8:	e7db      	b.n	8012882 <RegionUS915RxParamSetupReq+0xe>

080128ca <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 80128ca:	f04f 30ff 	mov.w	r0, #4294967295
 80128ce:	4770      	bx	lr

080128d0 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 80128d0:	f04f 30ff 	mov.w	r0, #4294967295
 80128d4:	4770      	bx	lr

080128d6 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 80128d6:	f04f 30ff 	mov.w	r0, #4294967295
 80128da:	4770      	bx	lr

080128dc <RegionUS915AlternateDr>:
int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 80128dc:	b9b1      	cbnz	r1, 801290c <RegionUS915AlternateDr+0x30>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 80128de:	4b10      	ldr	r3, [pc, #64]	@ (8012920 <RegionUS915AlternateDr+0x44>)
 80128e0:	681a      	ldr	r2, [r3, #0]
 80128e2:	f892 309d 	ldrb.w	r3, [r2, #157]	@ 0x9d
 80128e6:	3301      	adds	r3, #1
 80128e8:	f882 309d 	strb.w	r3, [r2, #157]	@ 0x9d
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 80128ec:	4b0c      	ldr	r3, [pc, #48]	@ (8012920 <RegionUS915AlternateDr+0x44>)
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	f893 209d 	ldrb.w	r2, [r3, #157]	@ 0x9d
 80128f4:	4b0b      	ldr	r3, [pc, #44]	@ (8012924 <RegionUS915AlternateDr+0x48>)
 80128f6:	fba3 1302 	umull	r1, r3, r3, r2
 80128fa:	085b      	lsrs	r3, r3, #1
 80128fc:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8012900:	1ad2      	subs	r2, r2, r3
 8012902:	f012 0fff 	tst.w	r2, #255	@ 0xff
 8012906:	d009      	beq.n	801291c <RegionUS915AlternateDr+0x40>
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 8012908:	2000      	movs	r0, #0
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_US915 */
}
 801290a:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 801290c:	4b04      	ldr	r3, [pc, #16]	@ (8012920 <RegionUS915AlternateDr+0x44>)
 801290e:	681a      	ldr	r2, [r3, #0]
 8012910:	f892 309d 	ldrb.w	r3, [r2, #157]	@ 0x9d
 8012914:	3b01      	subs	r3, #1
 8012916:	f882 309d 	strb.w	r3, [r2, #157]	@ 0x9d
 801291a:	e7e7      	b.n	80128ec <RegionUS915AlternateDr+0x10>
        currentDr = DR_4;
 801291c:	2004      	movs	r0, #4
 801291e:	4770      	bx	lr
 8012920:	20003b9c 	.word	0x20003b9c
 8012924:	38e38e39 	.word	0x38e38e39

08012928 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8012928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801292c:	b0a4      	sub	sp, #144	@ 0x90
 801292e:	4604      	mov	r4, r0
 8012930:	460e      	mov	r6, r1
 8012932:	4690      	mov	r8, r2
 8012934:	461f      	mov	r7, r3
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 8012936:	2500      	movs	r5, #0
 8012938:	f88d 508f 	strb.w	r5, [sp, #143]	@ 0x8f
    uint8_t nbRestrictedChannels = 0;
 801293c:	f88d 508e 	strb.w	r5, [sp, #142]	@ 0x8e
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8012940:	9511      	str	r5, [sp, #68]	@ 0x44
 8012942:	2244      	movs	r2, #68	@ 0x44
 8012944:	4629      	mov	r1, r5
 8012946:	a812      	add	r0, sp, #72	@ 0x48
 8012948:	f003 fbd8 	bl	80160fc <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 801294c:	4b4e      	ldr	r3, [pc, #312]	@ (8012a88 <RegionUS915NextChannel+0x160>)
 801294e:	6818      	ldr	r0, [r3, #0]
 8012950:	2204      	movs	r2, #4
 8012952:	4629      	mov	r1, r5
 8012954:	3090      	adds	r0, #144	@ 0x90
 8012956:	f7fe ffd4 	bl	8011902 <RegionCommonCountChannels>
 801295a:	2800      	cmp	r0, #0
 801295c:	d054      	beq.n	8012a08 <RegionUS915NextChannel+0xe0>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 801295e:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8012962:	2b03      	cmp	r3, #3
 8012964:	dd0a      	ble.n	801297c <RegionUS915NextChannel+0x54>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8012966:	4b48      	ldr	r3, [pc, #288]	@ (8012a88 <RegionUS915NextChannel+0x160>)
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 801296e:	b92a      	cbnz	r2, 801297c <RegionUS915NextChannel+0x54>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8012970:	4a46      	ldr	r2, [pc, #280]	@ (8012a8c <RegionUS915NextChannel+0x164>)
 8012972:	6812      	ldr	r2, [r2, #0]
 8012974:	f8b2 2488 	ldrh.w	r2, [r2, #1160]	@ 0x488
 8012978:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801297c:	7a63      	ldrb	r3, [r4, #9]
 801297e:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8012982:	7a23      	ldrb	r3, [r4, #8]
 8012984:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 8012988:	4b3f      	ldr	r3, [pc, #252]	@ (8012a88 <RegionUS915NextChannel+0x160>)
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8012990:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8012992:	4a3e      	ldr	r2, [pc, #248]	@ (8012a8c <RegionUS915NextChannel+0x164>)
 8012994:	6812      	ldr	r2, [r2, #0]
 8012996:	9205      	str	r2, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8012998:	9306      	str	r3, [sp, #24]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 801299a:	2348      	movs	r3, #72	@ 0x48
 801299c:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 80129a0:	2300      	movs	r3, #0
 80129a2:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80129a4:	6823      	ldr	r3, [r4, #0]
 80129a6:	9309      	str	r3, [sp, #36]	@ 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80129a8:	6863      	ldr	r3, [r4, #4]
 80129aa:	930a      	str	r3, [sp, #40]	@ 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80129ac:	7aa3      	ldrb	r3, [r4, #10]
 80129ae:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 80129b2:	2301      	movs	r3, #1
 80129b4:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80129b8:	ab0c      	add	r3, sp, #48	@ 0x30
 80129ba:	f104 020c 	add.w	r2, r4, #12
 80129be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80129c2:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80129c6:	7d23      	ldrb	r3, [r4, #20]
 80129c8:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80129cc:	8ae1      	ldrh	r1, [r4, #22]
 80129ce:	f994 0008 	ldrsb.w	r0, [r4, #8]
 80129d2:	f7ff fa71 	bl	8011eb8 <GetTimeOnAir>
 80129d6:	900f      	str	r0, [sp, #60]	@ 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80129d8:	ab03      	add	r3, sp, #12
 80129da:	9310      	str	r3, [sp, #64]	@ 0x40
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80129dc:	f8cd 8004 	str.w	r8, [sp, #4]
 80129e0:	f10d 038e 	add.w	r3, sp, #142	@ 0x8e
 80129e4:	9300      	str	r3, [sp, #0]
 80129e6:	f10d 038f 	add.w	r3, sp, #143	@ 0x8f
 80129ea:	aa11      	add	r2, sp, #68	@ 0x44
 80129ec:	4639      	mov	r1, r7
 80129ee:	a809      	add	r0, sp, #36	@ 0x24
 80129f0:	f7ff f981 	bl	8011cf6 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80129f4:	4605      	mov	r5, r0
 80129f6:	2800      	cmp	r0, #0
 80129f8:	d141      	bne.n	8012a7e <RegionUS915NextChannel+0x156>
    {
        if( nextChanParams->Joined == true )
 80129fa:	7a63      	ldrb	r3, [r4, #9]
 80129fc:	b99b      	cbnz	r3, 8012a26 <RegionUS915NextChannel+0xfe>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 80129fe:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8012a02:	b1eb      	cbz	r3, 8012a40 <RegionUS915NextChannel+0x118>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 8012a04:	4603      	mov	r3, r0
 8012a06:	e029      	b.n	8012a5c <RegionUS915NextChannel+0x134>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 8012a08:	4d1f      	ldr	r5, [pc, #124]	@ (8012a88 <RegionUS915NextChannel+0x160>)
 8012a0a:	6828      	ldr	r0, [r5, #0]
 8012a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8012a8c <RegionUS915NextChannel+0x164>)
 8012a0e:	6819      	ldr	r1, [r3, #0]
 8012a10:	2204      	movs	r2, #4
 8012a12:	f501 6190 	add.w	r1, r1, #1152	@ 0x480
 8012a16:	3090      	adds	r0, #144	@ 0x90
 8012a18:	f7fe ff89 	bl	801192e <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8012a1c:	682b      	ldr	r3, [r5, #0]
 8012a1e:	2200      	movs	r2, #0
 8012a20:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
 8012a24:	e79b      	b.n	801295e <RegionUS915NextChannel+0x36>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8012a26:	f89d 108f 	ldrb.w	r1, [sp, #143]	@ 0x8f
 8012a2a:	3901      	subs	r1, #1
 8012a2c:	f000 ff9e 	bl	801396c <randr>
 8012a30:	f100 0390 	add.w	r3, r0, #144	@ 0x90
 8012a34:	eb0d 0003 	add.w	r0, sp, r3
 8012a38:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 8012a3c:	7033      	strb	r3, [r6, #0]
 8012a3e:	e017      	b.n	8012a70 <RegionUS915NextChannel+0x148>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8012a40:	4b11      	ldr	r3, [pc, #68]	@ (8012a88 <RegionUS915NextChannel+0x160>)
 8012a42:	6818      	ldr	r0, [r3, #0]
 8012a44:	4632      	mov	r2, r6
 8012a46:	f100 019c 	add.w	r1, r0, #156	@ 0x9c
 8012a4a:	3090      	adds	r0, #144	@ 0x90
 8012a4c:	f7fe fddc 	bl	8011608 <RegionBaseUSComputeNext125kHzJoinChannel>
 8012a50:	2803      	cmp	r0, #3
 8012a52:	d10d      	bne.n	8012a70 <RegionUS915NextChannel+0x148>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 8012a54:	4605      	mov	r5, r0
 8012a56:	e012      	b.n	8012a7e <RegionUS915NextChannel+0x156>
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
 8012a58:	3301      	adds	r3, #1
 8012a5a:	b2db      	uxtb	r3, r3
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8012a5c:	4a0a      	ldr	r2, [pc, #40]	@ (8012a88 <RegionUS915NextChannel+0x160>)
 8012a5e:	6812      	ldr	r2, [r2, #0]
 8012a60:	f892 0098 	ldrb.w	r0, [r2, #152]	@ 0x98
 8012a64:	4118      	asrs	r0, r3
 8012a66:	f010 0f01 	tst.w	r0, #1
 8012a6a:	d0f5      	beq.n	8012a58 <RegionUS915NextChannel+0x130>
                }
                *channel = 64 + i;
 8012a6c:	3340      	adds	r3, #64	@ 0x40
 8012a6e:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 8012a70:	4b05      	ldr	r3, [pc, #20]	@ (8012a88 <RegionUS915NextChannel+0x160>)
 8012a72:	6818      	ldr	r0, [r3, #0]
 8012a74:	2248      	movs	r2, #72	@ 0x48
 8012a76:	7831      	ldrb	r1, [r6, #0]
 8012a78:	3090      	adds	r0, #144	@ 0x90
 8012a7a:	f7fe ff26 	bl	80118ca <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 8012a7e:	4628      	mov	r0, r5
 8012a80:	b024      	add	sp, #144	@ 0x90
 8012a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a86:	bf00      	nop
 8012a88:	20003b9c 	.word	0x20003b9c
 8012a8c:	20003b98 	.word	0x20003b98

08012a90 <RegionUS915SetContinuousWave>:
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionUS915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8012a90:	b538      	push	{r3, r4, r5, lr}
 8012a92:	4604      	mov	r4, r0
#if defined( REGION_US915 )
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, RegionNvmGroup2->ChannelsMask );
 8012a94:	4b14      	ldr	r3, [pc, #80]	@ (8012ae8 <RegionUS915SetContinuousWave+0x58>)
 8012a96:	6819      	ldr	r1, [r3, #0]
 8012a98:	4d14      	ldr	r5, [pc, #80]	@ (8012aec <RegionUS915SetContinuousWave+0x5c>)
 8012a9a:	682b      	ldr	r3, [r5, #0]
 8012a9c:	7802      	ldrb	r2, [r0, #0]
 8012a9e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012aa2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8012aa6:	7a52      	ldrb	r2, [r2, #9]
 8012aa8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012aac:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8012ab0:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8012ab4:	f990 2001 	ldrsb.w	r2, [r0, #1]
 8012ab8:	f991 1002 	ldrsb.w	r1, [r1, #2]
 8012abc:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8012ac0:	f7ff fa18 	bl	8011ef4 <LimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8012ac4:	682a      	ldr	r2, [r5, #0]
 8012ac6:	7823      	ldrb	r3, [r4, #0]
 8012ac8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012acc:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8012ad0:	2200      	movs	r2, #0
 8012ad2:	4907      	ldr	r1, [pc, #28]	@ (8012af0 <RegionUS915SetContinuousWave+0x60>)
 8012ad4:	f7ff f896 	bl	8011c04 <RegionCommonComputeTxPower>
 8012ad8:	4601      	mov	r1, r0

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8012ada:	4b06      	ldr	r3, [pc, #24]	@ (8012af4 <RegionUS915SetContinuousWave+0x64>)
 8012adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012ade:	89a2      	ldrh	r2, [r4, #12]
 8012ae0:	4628      	mov	r0, r5
 8012ae2:	4798      	blx	r3
#endif /* REGION_US915 */
}
 8012ae4:	bd38      	pop	{r3, r4, r5, pc}
 8012ae6:	bf00      	nop
 8012ae8:	20003b9c 	.word	0x20003b9c
 8012aec:	20003b98 	.word	0x20003b98
 8012af0:	41f00000 	.word	0x41f00000
 8012af4:	080172ac 	.word	0x080172ac

08012af8 <RegionUS915ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 8012af8:	4b04      	ldr	r3, [pc, #16]	@ (8012b0c <RegionUS915ApplyDrOffset+0x14>)
 8012afa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8012afe:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
 8012b00:	2800      	cmp	r0, #0
 8012b02:	db01      	blt.n	8012b08 <RegionUS915ApplyDrOffset+0x10>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_US915 */
}
 8012b04:	b2c0      	uxtb	r0, r0
 8012b06:	4770      	bx	lr
        datarate = DR_0;
 8012b08:	2000      	movs	r0, #0
 8012b0a:	e7fb      	b.n	8012b04 <RegionUS915ApplyDrOffset+0xc>
 8012b0c:	08016cbc 	.word	0x08016cbc

08012b10 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 8012b10:	b510      	push	{r4, lr}
 8012b12:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 8012b14:	2210      	movs	r2, #16
 8012b16:	2100      	movs	r1, #0
 8012b18:	30f1      	adds	r0, #241	@ 0xf1
 8012b1a:	f000 ff4c 	bl	80139b6 <memset1>
    ctx->M_n = 0;
 8012b1e:	2100      	movs	r1, #0
 8012b20:	f8c4 1114 	str.w	r1, [r4, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8012b24:	22f0      	movs	r2, #240	@ 0xf0
 8012b26:	4620      	mov	r0, r4
 8012b28:	f000 ff45 	bl	80139b6 <memset1>
}
 8012b2c:	bd10      	pop	{r4, pc}

08012b2e <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 8012b2e:	b508      	push	{r3, lr}
 8012b30:	4602      	mov	r2, r0
 8012b32:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 8012b34:	2110      	movs	r1, #16
 8012b36:	f000 fb3b 	bl	80131b0 <lorawan_aes_set_key>
}
 8012b3a:	bd08      	pop	{r3, pc}

08012b3c <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 8012b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b40:	b084      	sub	sp, #16
 8012b42:	4604      	mov	r4, r0
 8012b44:	460d      	mov	r5, r1
 8012b46:	4616      	mov	r6, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 8012b48:	f8d0 3114 	ldr.w	r3, [r0, #276]	@ 0x114
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d054      	beq.n	8012bfa <AES_CMAC_Update+0xbe>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 8012b50:	f1c3 0810 	rsb	r8, r3, #16
 8012b54:	4647      	mov	r7, r8
 8012b56:	4590      	cmp	r8, r2
 8012b58:	bf28      	it	cs
 8012b5a:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8012b5c:	f200 1001 	addw	r0, r0, #257	@ 0x101
 8012b60:	b2ba      	uxth	r2, r7
 8012b62:	4418      	add	r0, r3
 8012b64:	f000 ff0f 	bl	8013986 <memcpy1>
        ctx->M_n += mlen;
 8012b68:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
 8012b6c:	443b      	add	r3, r7
 8012b6e:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 8012b72:	2b0f      	cmp	r3, #15
 8012b74:	d94d      	bls.n	8012c12 <AES_CMAC_Update+0xd6>
 8012b76:	45b0      	cmp	r8, r6
 8012b78:	d24b      	bcs.n	8012c12 <AES_CMAC_Update+0xd6>
            return;
        XOR( ctx->M_last, ctx->X );
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	e008      	b.n	8012b90 <AES_CMAC_Update+0x54>
 8012b7e:	18e2      	adds	r2, r4, r3
 8012b80:	f892 10f1 	ldrb.w	r1, [r2, #241]	@ 0xf1
 8012b84:	f892 0101 	ldrb.w	r0, [r2, #257]	@ 0x101
 8012b88:	4041      	eors	r1, r0
 8012b8a:	f882 10f1 	strb.w	r1, [r2, #241]	@ 0xf1
 8012b8e:	3301      	adds	r3, #1
 8012b90:	2b0f      	cmp	r3, #15
 8012b92:	ddf4      	ble.n	8012b7e <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8012b94:	f104 08f1 	add.w	r8, r4, #241	@ 0xf1
 8012b98:	2210      	movs	r2, #16
 8012b9a:	4641      	mov	r1, r8
 8012b9c:	4668      	mov	r0, sp
 8012b9e:	f000 fef2 	bl	8013986 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8012ba2:	4622      	mov	r2, r4
 8012ba4:	4669      	mov	r1, sp
 8012ba6:	4668      	mov	r0, sp
 8012ba8:	f000 fb86 	bl	80132b8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8012bac:	2210      	movs	r2, #16
 8012bae:	4669      	mov	r1, sp
 8012bb0:	4640      	mov	r0, r8
 8012bb2:	f000 fee8 	bl	8013986 <memcpy1>

        data += mlen;
 8012bb6:	443d      	add	r5, r7
        len -= mlen;
 8012bb8:	1bf6      	subs	r6, r6, r7
 8012bba:	e01e      	b.n	8012bfa <AES_CMAC_Update+0xbe>
    }
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );
 8012bbc:	eb04 0e03 	add.w	lr, r4, r3
 8012bc0:	f89e c0f1 	ldrb.w	ip, [lr, #241]	@ 0xf1
 8012bc4:	5cea      	ldrb	r2, [r5, r3]
 8012bc6:	ea8c 0c02 	eor.w	ip, ip, r2
 8012bca:	f88e c0f1 	strb.w	ip, [lr, #241]	@ 0xf1
 8012bce:	3301      	adds	r3, #1
 8012bd0:	2b0f      	cmp	r3, #15
 8012bd2:	ddf3      	ble.n	8012bbc <AES_CMAC_Update+0x80>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8012bd4:	f104 07f1 	add.w	r7, r4, #241	@ 0xf1
 8012bd8:	2210      	movs	r2, #16
 8012bda:	4639      	mov	r1, r7
 8012bdc:	4668      	mov	r0, sp
 8012bde:	f000 fed2 	bl	8013986 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8012be2:	4622      	mov	r2, r4
 8012be4:	4669      	mov	r1, sp
 8012be6:	4668      	mov	r0, sp
 8012be8:	f000 fb66 	bl	80132b8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8012bec:	2210      	movs	r2, #16
 8012bee:	4669      	mov	r1, sp
 8012bf0:	4638      	mov	r0, r7
 8012bf2:	f000 fec8 	bl	8013986 <memcpy1>

        data += 16;
 8012bf6:	3510      	adds	r5, #16
        len -= 16;
 8012bf8:	3e10      	subs	r6, #16
    while( len > 16 )
 8012bfa:	2e10      	cmp	r6, #16
 8012bfc:	d901      	bls.n	8012c02 <AES_CMAC_Update+0xc6>
        XOR( data, ctx->X );
 8012bfe:	2300      	movs	r3, #0
 8012c00:	e7e6      	b.n	8012bd0 <AES_CMAC_Update+0x94>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 8012c02:	b2b2      	uxth	r2, r6
 8012c04:	4629      	mov	r1, r5
 8012c06:	f204 1001 	addw	r0, r4, #257	@ 0x101
 8012c0a:	f000 febc 	bl	8013986 <memcpy1>
    ctx->M_n = len;
 8012c0e:	f8c4 6114 	str.w	r6, [r4, #276]	@ 0x114
}
 8012c12:	b004      	add	sp, #16
 8012c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012c18 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 8012c18:	b530      	push	{r4, r5, lr}
 8012c1a:	b089      	sub	sp, #36	@ 0x24
 8012c1c:	4605      	mov	r5, r0
 8012c1e:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 8012c20:	2210      	movs	r2, #16
 8012c22:	2100      	movs	r1, #0
 8012c24:	eb0d 0002 	add.w	r0, sp, r2
 8012c28:	f000 fec5 	bl	80139b6 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 8012c2c:	4622      	mov	r2, r4
 8012c2e:	a904      	add	r1, sp, #16
 8012c30:	4608      	mov	r0, r1
 8012c32:	f000 fb41 	bl	80132b8 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 8012c36:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	db01      	blt.n	8012c42 <AES_CMAC_Final+0x2a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 8012c3e:	2300      	movs	r3, #0
 8012c40:	e030      	b.n	8012ca4 <AES_CMAC_Final+0x8c>
        LSHIFT( K, K );
 8012c42:	2300      	movs	r3, #0
 8012c44:	2b0e      	cmp	r3, #14
 8012c46:	dc11      	bgt.n	8012c6c <AES_CMAC_Final+0x54>
 8012c48:	f103 0220 	add.w	r2, r3, #32
 8012c4c:	eb0d 0102 	add.w	r1, sp, r2
 8012c50:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 8012c54:	3301      	adds	r3, #1
 8012c56:	f103 0220 	add.w	r2, r3, #32
 8012c5a:	446a      	add	r2, sp
 8012c5c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8012c60:	09d2      	lsrs	r2, r2, #7
 8012c62:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8012c66:	f801 2c10 	strb.w	r2, [r1, #-16]
 8012c6a:	e7eb      	b.n	8012c44 <AES_CMAC_Final+0x2c>
 8012c6c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8012c70:	005b      	lsls	r3, r3, #1
 8012c72:	b2db      	uxtb	r3, r3
 8012c74:	f88d 301f 	strb.w	r3, [sp, #31]
        K[15] ^= 0x87;
 8012c78:	f083 0387 	eor.w	r3, r3, #135	@ 0x87
 8012c7c:	f88d 301f 	strb.w	r3, [sp, #31]
 8012c80:	e017      	b.n	8012cb2 <AES_CMAC_Final+0x9a>
        LSHIFT( K, K );
 8012c82:	f103 0220 	add.w	r2, r3, #32
 8012c86:	eb0d 0102 	add.w	r1, sp, r2
 8012c8a:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 8012c8e:	3301      	adds	r3, #1
 8012c90:	f103 0220 	add.w	r2, r3, #32
 8012c94:	446a      	add	r2, sp
 8012c96:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8012c9a:	09d2      	lsrs	r2, r2, #7
 8012c9c:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8012ca0:	f801 2c10 	strb.w	r2, [r1, #-16]
 8012ca4:	2b0e      	cmp	r3, #14
 8012ca6:	ddec      	ble.n	8012c82 <AES_CMAC_Final+0x6a>
 8012ca8:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8012cac:	005b      	lsls	r3, r3, #1
 8012cae:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 8012cb2:	f8d4 0114 	ldr.w	r0, [r4, #276]	@ 0x114
 8012cb6:	2810      	cmp	r0, #16
 8012cb8:	d014      	beq.n	8012ce4 <AES_CMAC_Final+0xcc>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 8012cba:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	db30      	blt.n	8012d24 <AES_CMAC_Final+0x10c>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	e041      	b.n	8012d4a <AES_CMAC_Final+0x132>
        XOR( K, ctx->M_last );
 8012cc6:	18e1      	adds	r1, r4, r3
 8012cc8:	f891 2101 	ldrb.w	r2, [r1, #257]	@ 0x101
 8012ccc:	f103 0020 	add.w	r0, r3, #32
 8012cd0:	4468      	add	r0, sp
 8012cd2:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 8012cd6:	4042      	eors	r2, r0
 8012cd8:	f881 2101 	strb.w	r2, [r1, #257]	@ 0x101
 8012cdc:	3301      	adds	r3, #1
 8012cde:	2b0f      	cmp	r3, #15
 8012ce0:	ddf1      	ble.n	8012cc6 <AES_CMAC_Final+0xae>
 8012ce2:	e059      	b.n	8012d98 <AES_CMAC_Final+0x180>
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	e7fa      	b.n	8012cde <AES_CMAC_Final+0xc6>
            LSHIFT( K, K );
 8012ce8:	f103 0220 	add.w	r2, r3, #32
 8012cec:	eb0d 0102 	add.w	r1, sp, r2
 8012cf0:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 8012cf4:	3301      	adds	r3, #1
 8012cf6:	f103 0220 	add.w	r2, r3, #32
 8012cfa:	446a      	add	r2, sp
 8012cfc:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8012d00:	09d2      	lsrs	r2, r2, #7
 8012d02:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 8012d06:	f801 2c10 	strb.w	r2, [r1, #-16]
 8012d0a:	2b0e      	cmp	r3, #14
 8012d0c:	ddec      	ble.n	8012ce8 <AES_CMAC_Final+0xd0>
 8012d0e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8012d12:	005b      	lsls	r3, r3, #1
 8012d14:	b2db      	uxtb	r3, r3
 8012d16:	f88d 301f 	strb.w	r3, [sp, #31]
            K[15] ^= 0x87;
 8012d1a:	f083 0387 	eor.w	r3, r3, #135	@ 0x87
 8012d1e:	f88d 301f 	strb.w	r3, [sp, #31]
 8012d22:	e019      	b.n	8012d58 <AES_CMAC_Final+0x140>
            LSHIFT( K, K );
 8012d24:	2300      	movs	r3, #0
 8012d26:	e7f0      	b.n	8012d0a <AES_CMAC_Final+0xf2>
            LSHIFT( K, K );
 8012d28:	f103 0220 	add.w	r2, r3, #32
 8012d2c:	eb0d 0102 	add.w	r1, sp, r2
 8012d30:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 8012d34:	3301      	adds	r3, #1
 8012d36:	f103 0220 	add.w	r2, r3, #32
 8012d3a:	446a      	add	r2, sp
 8012d3c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8012d40:	09d2      	lsrs	r2, r2, #7
 8012d42:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 8012d46:	f801 2c10 	strb.w	r2, [r1, #-16]
 8012d4a:	2b0e      	cmp	r3, #14
 8012d4c:	ddec      	ble.n	8012d28 <AES_CMAC_Final+0x110>
 8012d4e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8012d52:	005b      	lsls	r3, r3, #1
 8012d54:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 8012d58:	4420      	add	r0, r4
 8012d5a:	2380      	movs	r3, #128	@ 0x80
 8012d5c:	f880 3101 	strb.w	r3, [r0, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 8012d60:	e003      	b.n	8012d6a <AES_CMAC_Final+0x152>
            ctx->M_last[ctx->M_n] = 0;
 8012d62:	4423      	add	r3, r4
 8012d64:	2200      	movs	r2, #0
 8012d66:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 8012d6a:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
 8012d6e:	3301      	adds	r3, #1
 8012d70:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
 8012d74:	2b0f      	cmp	r3, #15
 8012d76:	d9f4      	bls.n	8012d62 <AES_CMAC_Final+0x14a>

        XOR( K, ctx->M_last );
 8012d78:	2300      	movs	r3, #0
 8012d7a:	e00b      	b.n	8012d94 <AES_CMAC_Final+0x17c>
 8012d7c:	18e1      	adds	r1, r4, r3
 8012d7e:	f891 2101 	ldrb.w	r2, [r1, #257]	@ 0x101
 8012d82:	f103 0020 	add.w	r0, r3, #32
 8012d86:	4468      	add	r0, sp
 8012d88:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 8012d8c:	4042      	eors	r2, r0
 8012d8e:	f881 2101 	strb.w	r2, [r1, #257]	@ 0x101
 8012d92:	3301      	adds	r3, #1
 8012d94:	2b0f      	cmp	r3, #15
 8012d96:	ddf1      	ble.n	8012d7c <AES_CMAC_Final+0x164>
 8012d98:	2300      	movs	r3, #0
 8012d9a:	e009      	b.n	8012db0 <AES_CMAC_Final+0x198>
    }
    XOR( ctx->M_last, ctx->X );
 8012d9c:	18e2      	adds	r2, r4, r3
 8012d9e:	f892 c0f1 	ldrb.w	ip, [r2, #241]	@ 0xf1
 8012da2:	f892 1101 	ldrb.w	r1, [r2, #257]	@ 0x101
 8012da6:	ea8c 0c01 	eor.w	ip, ip, r1
 8012daa:	f882 c0f1 	strb.w	ip, [r2, #241]	@ 0xf1
 8012dae:	3301      	adds	r3, #1
 8012db0:	2b0f      	cmp	r3, #15
 8012db2:	ddf3      	ble.n	8012d9c <AES_CMAC_Final+0x184>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8012db4:	2210      	movs	r2, #16
 8012db6:	f104 01f1 	add.w	r1, r4, #241	@ 0xf1
 8012dba:	4668      	mov	r0, sp
 8012dbc:	f000 fde3 	bl	8013986 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 8012dc0:	4622      	mov	r2, r4
 8012dc2:	4629      	mov	r1, r5
 8012dc4:	4668      	mov	r0, sp
 8012dc6:	f000 fa77 	bl	80132b8 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 8012dca:	2210      	movs	r2, #16
 8012dcc:	2100      	movs	r1, #0
 8012dce:	eb0d 0002 	add.w	r0, sp, r2
 8012dd2:	f000 fdf0 	bl	80139b6 <memset1>
}
 8012dd6:	b009      	add	sp, #36	@ 0x24
 8012dd8:	bd30      	pop	{r4, r5, pc}

08012dda <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 8012dda:	780b      	ldrb	r3, [r1, #0]
 8012ddc:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 8012dde:	784b      	ldrb	r3, [r1, #1]
 8012de0:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 8012de2:	788b      	ldrb	r3, [r1, #2]
 8012de4:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 8012de6:	78cb      	ldrb	r3, [r1, #3]
 8012de8:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 8012dea:	790b      	ldrb	r3, [r1, #4]
 8012dec:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 8012dee:	794b      	ldrb	r3, [r1, #5]
 8012df0:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 8012df2:	798b      	ldrb	r3, [r1, #6]
 8012df4:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 8012df6:	79cb      	ldrb	r3, [r1, #7]
 8012df8:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 8012dfa:	7a0b      	ldrb	r3, [r1, #8]
 8012dfc:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 8012dfe:	7a4b      	ldrb	r3, [r1, #9]
 8012e00:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 8012e02:	7a8b      	ldrb	r3, [r1, #10]
 8012e04:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 8012e06:	7acb      	ldrb	r3, [r1, #11]
 8012e08:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 8012e0a:	7b0b      	ldrb	r3, [r1, #12]
 8012e0c:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 8012e0e:	7b4b      	ldrb	r3, [r1, #13]
 8012e10:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 8012e12:	7b8b      	ldrb	r3, [r1, #14]
 8012e14:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 8012e16:	7bcb      	ldrb	r3, [r1, #15]
 8012e18:	73c3      	strb	r3, [r0, #15]
#endif
}
 8012e1a:	4770      	bx	lr

08012e1c <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 8012e1c:	e004      	b.n	8012e28 <copy_block_nn+0xc>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 8012e1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012e22:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 8012e26:	461a      	mov	r2, r3
 8012e28:	1e53      	subs	r3, r2, #1
 8012e2a:	b2db      	uxtb	r3, r3
 8012e2c:	2a00      	cmp	r2, #0
 8012e2e:	d1f6      	bne.n	8012e1e <copy_block_nn+0x2>
}
 8012e30:	4770      	bx	lr

08012e32 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8012e32:	7803      	ldrb	r3, [r0, #0]
 8012e34:	780a      	ldrb	r2, [r1, #0]
 8012e36:	4053      	eors	r3, r2
 8012e38:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8012e3a:	7843      	ldrb	r3, [r0, #1]
 8012e3c:	784a      	ldrb	r2, [r1, #1]
 8012e3e:	4053      	eors	r3, r2
 8012e40:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8012e42:	7883      	ldrb	r3, [r0, #2]
 8012e44:	788a      	ldrb	r2, [r1, #2]
 8012e46:	4053      	eors	r3, r2
 8012e48:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8012e4a:	78c3      	ldrb	r3, [r0, #3]
 8012e4c:	78ca      	ldrb	r2, [r1, #3]
 8012e4e:	4053      	eors	r3, r2
 8012e50:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8012e52:	7903      	ldrb	r3, [r0, #4]
 8012e54:	790a      	ldrb	r2, [r1, #4]
 8012e56:	4053      	eors	r3, r2
 8012e58:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8012e5a:	7943      	ldrb	r3, [r0, #5]
 8012e5c:	794a      	ldrb	r2, [r1, #5]
 8012e5e:	4053      	eors	r3, r2
 8012e60:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8012e62:	7983      	ldrb	r3, [r0, #6]
 8012e64:	798a      	ldrb	r2, [r1, #6]
 8012e66:	4053      	eors	r3, r2
 8012e68:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8012e6a:	79c3      	ldrb	r3, [r0, #7]
 8012e6c:	79ca      	ldrb	r2, [r1, #7]
 8012e6e:	4053      	eors	r3, r2
 8012e70:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8012e72:	7a03      	ldrb	r3, [r0, #8]
 8012e74:	7a0a      	ldrb	r2, [r1, #8]
 8012e76:	4053      	eors	r3, r2
 8012e78:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8012e7a:	7a43      	ldrb	r3, [r0, #9]
 8012e7c:	7a4a      	ldrb	r2, [r1, #9]
 8012e7e:	4053      	eors	r3, r2
 8012e80:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8012e82:	7a83      	ldrb	r3, [r0, #10]
 8012e84:	7a8a      	ldrb	r2, [r1, #10]
 8012e86:	4053      	eors	r3, r2
 8012e88:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8012e8a:	7ac3      	ldrb	r3, [r0, #11]
 8012e8c:	7aca      	ldrb	r2, [r1, #11]
 8012e8e:	4053      	eors	r3, r2
 8012e90:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8012e92:	7b03      	ldrb	r3, [r0, #12]
 8012e94:	7b0a      	ldrb	r2, [r1, #12]
 8012e96:	4053      	eors	r3, r2
 8012e98:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8012e9a:	7b43      	ldrb	r3, [r0, #13]
 8012e9c:	7b4a      	ldrb	r2, [r1, #13]
 8012e9e:	4053      	eors	r3, r2
 8012ea0:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8012ea2:	7b83      	ldrb	r3, [r0, #14]
 8012ea4:	7b8a      	ldrb	r2, [r1, #14]
 8012ea6:	4053      	eors	r3, r2
 8012ea8:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8012eaa:	7bc3      	ldrb	r3, [r0, #15]
 8012eac:	7bca      	ldrb	r2, [r1, #15]
 8012eae:	4053      	eors	r3, r2
 8012eb0:	73c3      	strb	r3, [r0, #15]
#endif
}
 8012eb2:	4770      	bx	lr

08012eb4 <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8012eb4:	780b      	ldrb	r3, [r1, #0]
 8012eb6:	f892 c000 	ldrb.w	ip, [r2]
 8012eba:	ea83 030c 	eor.w	r3, r3, ip
 8012ebe:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8012ec0:	784b      	ldrb	r3, [r1, #1]
 8012ec2:	f892 c001 	ldrb.w	ip, [r2, #1]
 8012ec6:	ea83 030c 	eor.w	r3, r3, ip
 8012eca:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8012ecc:	788b      	ldrb	r3, [r1, #2]
 8012ece:	f892 c002 	ldrb.w	ip, [r2, #2]
 8012ed2:	ea83 030c 	eor.w	r3, r3, ip
 8012ed6:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8012ed8:	78cb      	ldrb	r3, [r1, #3]
 8012eda:	f892 c003 	ldrb.w	ip, [r2, #3]
 8012ede:	ea83 030c 	eor.w	r3, r3, ip
 8012ee2:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8012ee4:	790b      	ldrb	r3, [r1, #4]
 8012ee6:	f892 c004 	ldrb.w	ip, [r2, #4]
 8012eea:	ea83 030c 	eor.w	r3, r3, ip
 8012eee:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8012ef0:	794b      	ldrb	r3, [r1, #5]
 8012ef2:	f892 c005 	ldrb.w	ip, [r2, #5]
 8012ef6:	ea83 030c 	eor.w	r3, r3, ip
 8012efa:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8012efc:	798b      	ldrb	r3, [r1, #6]
 8012efe:	f892 c006 	ldrb.w	ip, [r2, #6]
 8012f02:	ea83 030c 	eor.w	r3, r3, ip
 8012f06:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8012f08:	79cb      	ldrb	r3, [r1, #7]
 8012f0a:	f892 c007 	ldrb.w	ip, [r2, #7]
 8012f0e:	ea83 030c 	eor.w	r3, r3, ip
 8012f12:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8012f14:	7a0b      	ldrb	r3, [r1, #8]
 8012f16:	f892 c008 	ldrb.w	ip, [r2, #8]
 8012f1a:	ea83 030c 	eor.w	r3, r3, ip
 8012f1e:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8012f20:	7a4b      	ldrb	r3, [r1, #9]
 8012f22:	f892 c009 	ldrb.w	ip, [r2, #9]
 8012f26:	ea83 030c 	eor.w	r3, r3, ip
 8012f2a:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8012f2c:	7a8b      	ldrb	r3, [r1, #10]
 8012f2e:	f892 c00a 	ldrb.w	ip, [r2, #10]
 8012f32:	ea83 030c 	eor.w	r3, r3, ip
 8012f36:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8012f38:	7acb      	ldrb	r3, [r1, #11]
 8012f3a:	f892 c00b 	ldrb.w	ip, [r2, #11]
 8012f3e:	ea83 030c 	eor.w	r3, r3, ip
 8012f42:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8012f44:	7b0b      	ldrb	r3, [r1, #12]
 8012f46:	f892 c00c 	ldrb.w	ip, [r2, #12]
 8012f4a:	ea83 030c 	eor.w	r3, r3, ip
 8012f4e:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8012f50:	7b4b      	ldrb	r3, [r1, #13]
 8012f52:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8012f56:	ea83 030c 	eor.w	r3, r3, ip
 8012f5a:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8012f5c:	7b8b      	ldrb	r3, [r1, #14]
 8012f5e:	f892 c00e 	ldrb.w	ip, [r2, #14]
 8012f62:	ea83 030c 	eor.w	r3, r3, ip
 8012f66:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8012f68:	7bcb      	ldrb	r3, [r1, #15]
 8012f6a:	7bd2      	ldrb	r2, [r2, #15]
 8012f6c:	4053      	eors	r3, r2
 8012f6e:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8012f70:	4770      	bx	lr

08012f72 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 8012f72:	b508      	push	{r3, lr}
    xor_block(d, k);
 8012f74:	f7ff ff5d 	bl	8012e32 <xor_block>
}
 8012f78:	bd08      	pop	{r3, pc}
	...

08012f7c <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8012f7c:	7802      	ldrb	r2, [r0, #0]
 8012f7e:	4b18      	ldr	r3, [pc, #96]	@ (8012fe0 <shift_sub_rows+0x64>)
 8012f80:	5c9a      	ldrb	r2, [r3, r2]
 8012f82:	7002      	strb	r2, [r0, #0]
 8012f84:	7902      	ldrb	r2, [r0, #4]
 8012f86:	5c9a      	ldrb	r2, [r3, r2]
 8012f88:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8012f8a:	7a02      	ldrb	r2, [r0, #8]
 8012f8c:	5c9a      	ldrb	r2, [r3, r2]
 8012f8e:	7202      	strb	r2, [r0, #8]
 8012f90:	7b02      	ldrb	r2, [r0, #12]
 8012f92:	5c9a      	ldrb	r2, [r3, r2]
 8012f94:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8012f96:	7842      	ldrb	r2, [r0, #1]
 8012f98:	7941      	ldrb	r1, [r0, #5]
 8012f9a:	5c59      	ldrb	r1, [r3, r1]
 8012f9c:	7041      	strb	r1, [r0, #1]
 8012f9e:	7a41      	ldrb	r1, [r0, #9]
 8012fa0:	5c59      	ldrb	r1, [r3, r1]
 8012fa2:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8012fa4:	7b41      	ldrb	r1, [r0, #13]
 8012fa6:	5c59      	ldrb	r1, [r3, r1]
 8012fa8:	7241      	strb	r1, [r0, #9]
 8012faa:	5c9a      	ldrb	r2, [r3, r2]
 8012fac:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8012fae:	7882      	ldrb	r2, [r0, #2]
 8012fb0:	7a81      	ldrb	r1, [r0, #10]
 8012fb2:	5c59      	ldrb	r1, [r3, r1]
 8012fb4:	7081      	strb	r1, [r0, #2]
 8012fb6:	5c9a      	ldrb	r2, [r3, r2]
 8012fb8:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8012fba:	7982      	ldrb	r2, [r0, #6]
 8012fbc:	7b81      	ldrb	r1, [r0, #14]
 8012fbe:	5c59      	ldrb	r1, [r3, r1]
 8012fc0:	7181      	strb	r1, [r0, #6]
 8012fc2:	5c9a      	ldrb	r2, [r3, r2]
 8012fc4:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8012fc6:	7bc2      	ldrb	r2, [r0, #15]
 8012fc8:	7ac1      	ldrb	r1, [r0, #11]
 8012fca:	5c59      	ldrb	r1, [r3, r1]
 8012fcc:	73c1      	strb	r1, [r0, #15]
 8012fce:	79c1      	ldrb	r1, [r0, #7]
 8012fd0:	5c59      	ldrb	r1, [r3, r1]
 8012fd2:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8012fd4:	78c1      	ldrb	r1, [r0, #3]
 8012fd6:	5c59      	ldrb	r1, [r3, r1]
 8012fd8:	71c1      	strb	r1, [r0, #7]
 8012fda:	5c9b      	ldrb	r3, [r3, r2]
 8012fdc:	70c3      	strb	r3, [r0, #3]
}
 8012fde:	4770      	bx	lr
 8012fe0:	08016f20 	.word	0x08016f20

08012fe4 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 8012fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012fe8:	b084      	sub	sp, #16
 8012fea:	4604      	mov	r4, r0
    block_copy(st, dt);
 8012fec:	4601      	mov	r1, r0
 8012fee:	4668      	mov	r0, sp
 8012ff0:	f7ff fef3 	bl	8012dda <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8012ff4:	f89d c000 	ldrb.w	ip, [sp]
 8012ff8:	4b6a      	ldr	r3, [pc, #424]	@ (80131a4 <mix_sub_columns+0x1c0>)
 8012ffa:	f813 000c 	ldrb.w	r0, [r3, ip]
 8012ffe:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8013002:	4a69      	ldr	r2, [pc, #420]	@ (80131a8 <mix_sub_columns+0x1c4>)
 8013004:	f812 9008 	ldrb.w	r9, [r2, r8]
 8013008:	f89d e00a 	ldrb.w	lr, [sp, #10]
 801300c:	4967      	ldr	r1, [pc, #412]	@ (80131ac <mix_sub_columns+0x1c8>)
 801300e:	f811 500e 	ldrb.w	r5, [r1, lr]
 8013012:	f89d 700f 	ldrb.w	r7, [sp, #15]
 8013016:	5dce      	ldrb	r6, [r1, r7]
 8013018:	ea80 0009 	eor.w	r0, r0, r9
 801301c:	4068      	eors	r0, r5
 801301e:	4070      	eors	r0, r6
 8013020:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8013022:	f811 000c 	ldrb.w	r0, [r1, ip]
 8013026:	f813 a008 	ldrb.w	sl, [r3, r8]
 801302a:	f812 900e 	ldrb.w	r9, [r2, lr]
 801302e:	ea80 0a0a 	eor.w	sl, r0, sl
 8013032:	ea89 090a 	eor.w	r9, r9, sl
 8013036:	ea86 0609 	eor.w	r6, r6, r9
 801303a:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 801303c:	f811 8008 	ldrb.w	r8, [r1, r8]
 8013040:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8013044:	5dd6      	ldrb	r6, [r2, r7]
 8013046:	ea80 0008 	eor.w	r0, r0, r8
 801304a:	ea8e 0000 	eor.w	r0, lr, r0
 801304e:	4070      	eors	r0, r6
 8013050:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8013052:	f812 600c 	ldrb.w	r6, [r2, ip]
 8013056:	5dd8      	ldrb	r0, [r3, r7]
 8013058:	ea86 0608 	eor.w	r6, r6, r8
 801305c:	4075      	eors	r5, r6
 801305e:	4068      	eors	r0, r5
 8013060:	70e0      	strb	r0, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8013062:	f89d c004 	ldrb.w	ip, [sp, #4]
 8013066:	f813 000c 	ldrb.w	r0, [r3, ip]
 801306a:	f89d 8009 	ldrb.w	r8, [sp, #9]
 801306e:	f812 9008 	ldrb.w	r9, [r2, r8]
 8013072:	f89d e00e 	ldrb.w	lr, [sp, #14]
 8013076:	f811 500e 	ldrb.w	r5, [r1, lr]
 801307a:	f89d 7003 	ldrb.w	r7, [sp, #3]
 801307e:	5dce      	ldrb	r6, [r1, r7]
 8013080:	ea80 0009 	eor.w	r0, r0, r9
 8013084:	4068      	eors	r0, r5
 8013086:	4070      	eors	r0, r6
 8013088:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 801308a:	f811 000c 	ldrb.w	r0, [r1, ip]
 801308e:	f813 a008 	ldrb.w	sl, [r3, r8]
 8013092:	f812 900e 	ldrb.w	r9, [r2, lr]
 8013096:	ea80 0a0a 	eor.w	sl, r0, sl
 801309a:	ea89 090a 	eor.w	r9, r9, sl
 801309e:	ea86 0609 	eor.w	r6, r6, r9
 80130a2:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 80130a4:	f811 8008 	ldrb.w	r8, [r1, r8]
 80130a8:	f813 e00e 	ldrb.w	lr, [r3, lr]
 80130ac:	5dd6      	ldrb	r6, [r2, r7]
 80130ae:	ea80 0008 	eor.w	r0, r0, r8
 80130b2:	ea8e 0000 	eor.w	r0, lr, r0
 80130b6:	4070      	eors	r0, r6
 80130b8:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 80130ba:	f812 600c 	ldrb.w	r6, [r2, ip]
 80130be:	5dd8      	ldrb	r0, [r3, r7]
 80130c0:	ea86 0608 	eor.w	r6, r6, r8
 80130c4:	4075      	eors	r5, r6
 80130c6:	4068      	eors	r0, r5
 80130c8:	71e0      	strb	r0, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 80130ca:	f89d c008 	ldrb.w	ip, [sp, #8]
 80130ce:	f813 000c 	ldrb.w	r0, [r3, ip]
 80130d2:	f89d 800d 	ldrb.w	r8, [sp, #13]
 80130d6:	f812 9008 	ldrb.w	r9, [r2, r8]
 80130da:	f89d e002 	ldrb.w	lr, [sp, #2]
 80130de:	f811 500e 	ldrb.w	r5, [r1, lr]
 80130e2:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80130e6:	5dce      	ldrb	r6, [r1, r7]
 80130e8:	ea80 0009 	eor.w	r0, r0, r9
 80130ec:	4068      	eors	r0, r5
 80130ee:	4070      	eors	r0, r6
 80130f0:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 80130f2:	f811 000c 	ldrb.w	r0, [r1, ip]
 80130f6:	f813 a008 	ldrb.w	sl, [r3, r8]
 80130fa:	f812 900e 	ldrb.w	r9, [r2, lr]
 80130fe:	ea80 0a0a 	eor.w	sl, r0, sl
 8013102:	ea89 090a 	eor.w	r9, r9, sl
 8013106:	ea86 0609 	eor.w	r6, r6, r9
 801310a:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 801310c:	f811 8008 	ldrb.w	r8, [r1, r8]
 8013110:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8013114:	5dd6      	ldrb	r6, [r2, r7]
 8013116:	ea80 0008 	eor.w	r0, r0, r8
 801311a:	ea8e 0000 	eor.w	r0, lr, r0
 801311e:	4070      	eors	r0, r6
 8013120:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8013122:	f812 600c 	ldrb.w	r6, [r2, ip]
 8013126:	5dd8      	ldrb	r0, [r3, r7]
 8013128:	ea86 0608 	eor.w	r6, r6, r8
 801312c:	4075      	eors	r5, r6
 801312e:	4068      	eors	r0, r5
 8013130:	72e0      	strb	r0, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8013132:	f89d 600c 	ldrb.w	r6, [sp, #12]
 8013136:	5d98      	ldrb	r0, [r3, r6]
 8013138:	f89d 8001 	ldrb.w	r8, [sp, #1]
 801313c:	f812 9008 	ldrb.w	r9, [r2, r8]
 8013140:	f89d 7006 	ldrb.w	r7, [sp, #6]
 8013144:	f811 c007 	ldrb.w	ip, [r1, r7]
 8013148:	f89d 500b 	ldrb.w	r5, [sp, #11]
 801314c:	f811 e005 	ldrb.w	lr, [r1, r5]
 8013150:	ea80 0009 	eor.w	r0, r0, r9
 8013154:	ea8c 0000 	eor.w	r0, ip, r0
 8013158:	ea8e 0000 	eor.w	r0, lr, r0
 801315c:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 801315e:	5d88      	ldrb	r0, [r1, r6]
 8013160:	f813 a008 	ldrb.w	sl, [r3, r8]
 8013164:	f812 9007 	ldrb.w	r9, [r2, r7]
 8013168:	ea80 0a0a 	eor.w	sl, r0, sl
 801316c:	ea89 090a 	eor.w	r9, r9, sl
 8013170:	ea8e 0e09 	eor.w	lr, lr, r9
 8013174:	f884 e00d 	strb.w	lr, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8013178:	f811 1008 	ldrb.w	r1, [r1, r8]
 801317c:	f813 e007 	ldrb.w	lr, [r3, r7]
 8013180:	5d57      	ldrb	r7, [r2, r5]
 8013182:	4048      	eors	r0, r1
 8013184:	ea8e 0000 	eor.w	r0, lr, r0
 8013188:	4078      	eors	r0, r7
 801318a:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 801318c:	5d92      	ldrb	r2, [r2, r6]
 801318e:	5d5b      	ldrb	r3, [r3, r5]
 8013190:	4051      	eors	r1, r2
 8013192:	ea8c 0c01 	eor.w	ip, ip, r1
 8013196:	ea83 030c 	eor.w	r3, r3, ip
 801319a:	73e3      	strb	r3, [r4, #15]
  }
 801319c:	b004      	add	sp, #16
 801319e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131a2:	bf00      	nop
 80131a4:	08016e20 	.word	0x08016e20
 80131a8:	08016d20 	.word	0x08016d20
 80131ac:	08016f20 	.word	0x08016f20

080131b0 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 80131b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80131b4:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 80131b6:	f1a1 0310 	sub.w	r3, r1, #16
 80131ba:	b2db      	uxtb	r3, r3
 80131bc:	2b10      	cmp	r3, #16
 80131be:	d806      	bhi.n	80131ce <lorawan_aes_set_key+0x1e>
 80131c0:	460d      	mov	r5, r1
 80131c2:	4a3b      	ldr	r2, [pc, #236]	@ (80132b0 <lorawan_aes_set_key+0x100>)
 80131c4:	fa22 f303 	lsr.w	r3, r2, r3
 80131c8:	f013 0f01 	tst.w	r3, #1
 80131cc:	d105      	bne.n	80131da <lorawan_aes_set_key+0x2a>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 80131ce:	2300      	movs	r3, #0
 80131d0:	f884 30f0 	strb.w	r3, [r4, #240]	@ 0xf0
        return ( uint8_t )-1;
 80131d4:	20ff      	movs	r0, #255	@ 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 80131d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 80131da:	460a      	mov	r2, r1
 80131dc:	4601      	mov	r1, r0
 80131de:	4620      	mov	r0, r4
 80131e0:	f7ff fe1c 	bl	8012e1c <copy_block_nn>
    hi = (keylen + 28) << 2;
 80131e4:	f105 031c 	add.w	r3, r5, #28
 80131e8:	b2db      	uxtb	r3, r3
 80131ea:	009b      	lsls	r3, r3, #2
 80131ec:	fa5f fe83 	uxtb.w	lr, r3
    ctx->rnd = (hi >> 4) - 1;
 80131f0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80131f4:	3b01      	subs	r3, #1
 80131f6:	f884 30f0 	strb.w	r3, [r4, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80131fa:	462b      	mov	r3, r5
 80131fc:	f04f 0c01 	mov.w	ip, #1
 8013200:	e023      	b.n	801324a <lorawan_aes_set_key+0x9a>
        else if( keylen > 24 && cc % keylen == 16 )
 8013202:	2d18      	cmp	r5, #24
 8013204:	d901      	bls.n	801320a <lorawan_aes_set_key+0x5a>
 8013206:	2a10      	cmp	r2, #16
 8013208:	d048      	beq.n	801329c <lorawan_aes_set_key+0xec>
        tt = cc - keylen;
 801320a:	1b5a      	subs	r2, r3, r5
 801320c:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 801320e:	f814 9002 	ldrb.w	r9, [r4, r2]
 8013212:	ea89 0808 	eor.w	r8, r9, r8
 8013216:	f804 8000 	strb.w	r8, [r4, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 801321a:	f102 0801 	add.w	r8, r2, #1
 801321e:	f814 8008 	ldrb.w	r8, [r4, r8]
 8013222:	f100 0901 	add.w	r9, r0, #1
 8013226:	ea88 0707 	eor.w	r7, r8, r7
 801322a:	f804 7009 	strb.w	r7, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 801322e:	1c97      	adds	r7, r2, #2
 8013230:	5de7      	ldrb	r7, [r4, r7]
 8013232:	f100 0802 	add.w	r8, r0, #2
 8013236:	407e      	eors	r6, r7
 8013238:	f804 6008 	strb.w	r6, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 801323c:	3203      	adds	r2, #3
 801323e:	5ca6      	ldrb	r6, [r4, r2]
 8013240:	1cc2      	adds	r2, r0, #3
 8013242:	4071      	eors	r1, r6
 8013244:	54a1      	strb	r1, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8013246:	3304      	adds	r3, #4
 8013248:	b2db      	uxtb	r3, r3
 801324a:	4573      	cmp	r3, lr
 801324c:	d22d      	bcs.n	80132aa <lorawan_aes_set_key+0xfa>
        t0 = ctx->ksch[cc - 4];
 801324e:	4618      	mov	r0, r3
 8013250:	1f1a      	subs	r2, r3, #4
 8013252:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 8013256:	1eda      	subs	r2, r3, #3
 8013258:	5ca7      	ldrb	r7, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 801325a:	1e9a      	subs	r2, r3, #2
 801325c:	5ca6      	ldrb	r6, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 801325e:	1e5a      	subs	r2, r3, #1
 8013260:	5ca1      	ldrb	r1, [r4, r2]
        if( cc % keylen == 0 )
 8013262:	fbb3 f2f5 	udiv	r2, r3, r5
 8013266:	fb05 3212 	mls	r2, r5, r2, r3
 801326a:	f012 02ff 	ands.w	r2, r2, #255	@ 0xff
 801326e:	d1c8      	bne.n	8013202 <lorawan_aes_set_key+0x52>
            t0 = s_box(t1) ^ rc;
 8013270:	4a10      	ldr	r2, [pc, #64]	@ (80132b4 <lorawan_aes_set_key+0x104>)
 8013272:	f812 9007 	ldrb.w	r9, [r2, r7]
 8013276:	ea89 090c 	eor.w	r9, r9, ip
            t1 = s_box(t2);
 801327a:	5d97      	ldrb	r7, [r2, r6]
            t2 = s_box(t3);
 801327c:	5c56      	ldrb	r6, [r2, r1]
            t3 = s_box(tt);
 801327e:	f812 1008 	ldrb.w	r1, [r2, r8]
            rc = f2(rc);
 8013282:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 8013286:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801328a:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 801328e:	b2d2      	uxtb	r2, r2
 8013290:	ea82 024c 	eor.w	r2, r2, ip, lsl #1
 8013294:	fa5f fc82 	uxtb.w	ip, r2
            t0 = s_box(t1) ^ rc;
 8013298:	46c8      	mov	r8, r9
 801329a:	e7b6      	b.n	801320a <lorawan_aes_set_key+0x5a>
            t0 = s_box(t0);
 801329c:	4a05      	ldr	r2, [pc, #20]	@ (80132b4 <lorawan_aes_set_key+0x104>)
 801329e:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 80132a2:	5dd7      	ldrb	r7, [r2, r7]
            t2 = s_box(t2);
 80132a4:	5d96      	ldrb	r6, [r2, r6]
            t3 = s_box(t3);
 80132a6:	5c51      	ldrb	r1, [r2, r1]
 80132a8:	e7af      	b.n	801320a <lorawan_aes_set_key+0x5a>
    return 0;
 80132aa:	2000      	movs	r0, #0
 80132ac:	e793      	b.n	80131d6 <lorawan_aes_set_key+0x26>
 80132ae:	bf00      	nop
 80132b0:	00010101 	.word	0x00010101
 80132b4:	08016f20 	.word	0x08016f20

080132b8 <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 80132b8:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 80132bc:	b31b      	cbz	r3, 8013306 <lorawan_aes_encrypt+0x4e>
{
 80132be:	b570      	push	{r4, r5, r6, lr}
 80132c0:	b084      	sub	sp, #16
 80132c2:	460e      	mov	r6, r1
 80132c4:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 80132c6:	4601      	mov	r1, r0
 80132c8:	4668      	mov	r0, sp
 80132ca:	f7ff fdf3 	bl	8012eb4 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 80132ce:	2401      	movs	r4, #1
 80132d0:	e009      	b.n	80132e6 <lorawan_aes_encrypt+0x2e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 80132d2:	4668      	mov	r0, sp
 80132d4:	f7ff fe86 	bl	8012fe4 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 80132d8:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 80132dc:	4668      	mov	r0, sp
 80132de:	f7ff fe48 	bl	8012f72 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 80132e2:	3401      	adds	r4, #1
 80132e4:	b2e4      	uxtb	r4, r4
 80132e6:	f895 30f0 	ldrb.w	r3, [r5, #240]	@ 0xf0
 80132ea:	42a3      	cmp	r3, r4
 80132ec:	d8f1      	bhi.n	80132d2 <lorawan_aes_encrypt+0x1a>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 80132ee:	4668      	mov	r0, sp
 80132f0:	f7ff fe44 	bl	8012f7c <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 80132f4:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 80132f8:	4669      	mov	r1, sp
 80132fa:	4630      	mov	r0, r6
 80132fc:	f7ff fdda 	bl	8012eb4 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 8013300:	2000      	movs	r0, #0
}
 8013302:	b004      	add	sp, #16
 8013304:	bd70      	pop	{r4, r5, r6, pc}
        return ( uint8_t )-1;
 8013306:	20ff      	movs	r0, #255	@ 0xff
}
 8013308:	4770      	bx	lr
	...

0801330c <GetKeyByID>:
}

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801330c:	2300      	movs	r3, #0
 801330e:	2b0a      	cmp	r3, #10
 8013310:	d816      	bhi.n	8013340 <GetKeyByID+0x34>
{
 8013312:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8013314:	4a0b      	ldr	r2, [pc, #44]	@ (8013344 <GetKeyByID+0x38>)
 8013316:	6814      	ldr	r4, [r2, #0]
 8013318:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 801331c:	4422      	add	r2, r4
 801331e:	7e12      	ldrb	r2, [r2, #24]
 8013320:	4282      	cmp	r2, r0
 8013322:	d006      	beq.n	8013332 <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8013324:	3301      	adds	r3, #1
 8013326:	b2db      	uxtb	r3, r3
 8013328:	2b0a      	cmp	r3, #10
 801332a:	d9f3      	bls.n	8013314 <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801332c:	2003      	movs	r0, #3
}
 801332e:	bc10      	pop	{r4}
 8013330:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 8013332:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8013336:	3318      	adds	r3, #24
 8013338:	441c      	add	r4, r3
 801333a:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 801333c:	2000      	movs	r0, #0
 801333e:	e7f6      	b.n	801332e <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8013340:	2003      	movs	r0, #3
}
 8013342:	4770      	bx	lr
 8013344:	20003ba0 	.word	0x20003ba0

08013348 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 8013348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801334c:	b0cc      	sub	sp, #304	@ 0x130
 801334e:	9d52      	ldr	r5, [sp, #328]	@ 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8013350:	b3a9      	cbz	r1, 80133be <ComputeCmac+0x76>
 8013352:	4607      	mov	r7, r0
 8013354:	4616      	mov	r6, r2
 8013356:	461c      	mov	r4, r3
 8013358:	4688      	mov	r8, r1
 801335a:	b395      	cbz	r5, 80133c2 <ComputeCmac+0x7a>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 801335c:	a802      	add	r0, sp, #8
 801335e:	f7ff fbd7 	bl	8012b10 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8013362:	a901      	add	r1, sp, #4
 8013364:	4620      	mov	r0, r4
 8013366:	f7ff ffd1 	bl	801330c <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 801336a:	4604      	mov	r4, r0
 801336c:	b118      	cbz	r0, 8013376 <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 801336e:	4620      	mov	r0, r4
 8013370:	b04c      	add	sp, #304	@ 0x130
 8013372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 8013376:	9901      	ldr	r1, [sp, #4]
 8013378:	3101      	adds	r1, #1
 801337a:	a802      	add	r0, sp, #8
 801337c:	f7ff fbd7 	bl	8012b2e <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 8013380:	b127      	cbz	r7, 801338c <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 8013382:	2210      	movs	r2, #16
 8013384:	4639      	mov	r1, r7
 8013386:	a802      	add	r0, sp, #8
 8013388:	f7ff fbd8 	bl	8012b3c <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 801338c:	4632      	mov	r2, r6
 801338e:	4641      	mov	r1, r8
 8013390:	a802      	add	r0, sp, #8
 8013392:	f7ff fbd3 	bl	8012b3c <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 8013396:	a902      	add	r1, sp, #8
 8013398:	a848      	add	r0, sp, #288	@ 0x120
 801339a:	f7ff fc3d 	bl	8012c18 <AES_CMAC_Final>
        *cmac = GET_UINT32_LE( Cmac, 0 );
 801339e:	f89d 3120 	ldrb.w	r3, [sp, #288]	@ 0x120
 80133a2:	f89d 2121 	ldrb.w	r2, [sp, #289]	@ 0x121
 80133a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80133aa:	f89d 2122 	ldrb.w	r2, [sp, #290]	@ 0x122
 80133ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80133b2:	f89d 2123 	ldrb.w	r2, [sp, #291]	@ 0x123
 80133b6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80133ba:	602b      	str	r3, [r5, #0]
 80133bc:	e7d7      	b.n	801336e <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 80133be:	2402      	movs	r4, #2
 80133c0:	e7d5      	b.n	801336e <ComputeCmac+0x26>
 80133c2:	2402      	movs	r4, #2
 80133c4:	e7d3      	b.n	801336e <ComputeCmac+0x26>
	...

080133c8 <SecureElementInit>:
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
    if( nvm == NULL )
 80133c8:	b140      	cbz	r0, 80133dc <SecureElementInit+0x14>
{
 80133ca:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 80133cc:	4a04      	ldr	r2, [pc, #16]	@ (80133e0 <SecureElementInit+0x18>)
 80133ce:	6010      	str	r0, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 80133d0:	22d8      	movs	r2, #216	@ 0xd8
 80133d2:	4904      	ldr	r1, [pc, #16]	@ (80133e4 <SecureElementInit+0x1c>)
 80133d4:	f000 fad7 	bl	8013986 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 80133d8:	2000      	movs	r0, #0
}
 80133da:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80133dc:	2002      	movs	r0, #2
}
 80133de:	4770      	bx	lr
 80133e0:	20003ba0 	.word	0x20003ba0
 80133e4:	0803e500 	.word	0x0803e500

080133e8 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80133e8:	2300      	movs	r3, #0
 80133ea:	2b0a      	cmp	r3, #10
 80133ec:	d816      	bhi.n	801341c <SecureElementGetKeyByID+0x34>
{
 80133ee:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 80133f0:	4a0b      	ldr	r2, [pc, #44]	@ (8013420 <SecureElementGetKeyByID+0x38>)
 80133f2:	6814      	ldr	r4, [r2, #0]
 80133f4:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 80133f8:	4422      	add	r2, r4
 80133fa:	7e12      	ldrb	r2, [r2, #24]
 80133fc:	4282      	cmp	r2, r0
 80133fe:	d006      	beq.n	801340e <SecureElementGetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8013400:	3301      	adds	r3, #1
 8013402:	b2db      	uxtb	r3, r3
 8013404:	2b0a      	cmp	r3, #10
 8013406:	d9f3      	bls.n	80133f0 <SecureElementGetKeyByID+0x8>
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8013408:	2003      	movs	r0, #3
}
 801340a:	bc10      	pop	{r4}
 801340c:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 801340e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8013412:	3318      	adds	r3, #24
 8013414:	441c      	add	r4, r3
 8013416:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 8013418:	2000      	movs	r0, #0
 801341a:	e7f6      	b.n	801340a <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801341c:	2003      	movs	r0, #3
}
 801341e:	4770      	bx	lr
 8013420:	20003ba0 	.word	0x20003ba0

08013424 <PrintKey>:
{
 8013424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013428:	b099      	sub	sp, #100	@ 0x64
 801342a:	4604      	mov	r4, r0
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 801342c:	a917      	add	r1, sp, #92	@ 0x5c
 801342e:	f7ff ffdb 	bl	80133e8 <SecureElementGetKeyByID>
 8013432:	4603      	mov	r3, r0
 8013434:	2800      	cmp	r0, #0
 8013436:	d042      	beq.n	80134be <PrintKey+0x9a>
}
 8013438:	b019      	add	sp, #100	@ 0x64
 801343a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                MW_LOG( TS_OFF, VLEVEL_M,
 801343e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013442:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8013446:	689b      	ldr	r3, [r3, #8]
 8013448:	9313      	str	r3, [sp, #76]	@ 0x4c
 801344a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801344c:	785a      	ldrb	r2, [r3, #1]
 801344e:	9214      	str	r2, [sp, #80]	@ 0x50
 8013450:	7899      	ldrb	r1, [r3, #2]
 8013452:	9115      	str	r1, [sp, #84]	@ 0x54
 8013454:	78da      	ldrb	r2, [r3, #3]
 8013456:	7919      	ldrb	r1, [r3, #4]
 8013458:	7958      	ldrb	r0, [r3, #5]
 801345a:	799c      	ldrb	r4, [r3, #6]
 801345c:	79dd      	ldrb	r5, [r3, #7]
 801345e:	7a1e      	ldrb	r6, [r3, #8]
 8013460:	7a5f      	ldrb	r7, [r3, #9]
 8013462:	f893 c00a 	ldrb.w	ip, [r3, #10]
 8013466:	f893 e00b 	ldrb.w	lr, [r3, #11]
 801346a:	f893 800c 	ldrb.w	r8, [r3, #12]
 801346e:	f893 900d 	ldrb.w	r9, [r3, #13]
 8013472:	f893 a00e 	ldrb.w	sl, [r3, #14]
 8013476:	f893 b00f 	ldrb.w	fp, [r3, #15]
 801347a:	7c1b      	ldrb	r3, [r3, #16]
 801347c:	9310      	str	r3, [sp, #64]	@ 0x40
 801347e:	f8cd b03c 	str.w	fp, [sp, #60]	@ 0x3c
 8013482:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
 8013486:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 801348a:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
 801348e:	f8cd e02c 	str.w	lr, [sp, #44]	@ 0x2c
 8013492:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 8013496:	9709      	str	r7, [sp, #36]	@ 0x24
 8013498:	9608      	str	r6, [sp, #32]
 801349a:	9507      	str	r5, [sp, #28]
 801349c:	9406      	str	r4, [sp, #24]
 801349e:	9005      	str	r0, [sp, #20]
 80134a0:	9104      	str	r1, [sp, #16]
 80134a2:	9203      	str	r2, [sp, #12]
 80134a4:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80134a6:	9102      	str	r1, [sp, #8]
 80134a8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80134aa:	9201      	str	r2, [sp, #4]
 80134ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80134ae:	9300      	str	r3, [sp, #0]
 80134b0:	4b09      	ldr	r3, [pc, #36]	@ (80134d8 <PrintKey+0xb4>)
 80134b2:	2200      	movs	r2, #0
 80134b4:	4611      	mov	r1, r2
 80134b6:	2002      	movs	r0, #2
 80134b8:	f002 f940 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
                return;
 80134bc:	e7bc      	b.n	8013438 <PrintKey+0x14>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80134be:	2b0a      	cmp	r3, #10
 80134c0:	d8ba      	bhi.n	8013438 <PrintKey+0x14>
            if( KeyLabel[i].keyID == keyID )
 80134c2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80134c6:	4905      	ldr	r1, [pc, #20]	@ (80134dc <PrintKey+0xb8>)
 80134c8:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
 80134cc:	42a2      	cmp	r2, r4
 80134ce:	d0b6      	beq.n	801343e <PrintKey+0x1a>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80134d0:	3301      	adds	r3, #1
 80134d2:	b2db      	uxtb	r3, r3
 80134d4:	e7f3      	b.n	80134be <PrintKey+0x9a>
 80134d6:	bf00      	nop
 80134d8:	08017020 	.word	0x08017020
 80134dc:	080171b8 	.word	0x080171b8

080134e0 <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
    if( keyID >= MC_KE_KEY )
 80134e0:	2b0b      	cmp	r3, #11
 80134e2:	d80a      	bhi.n	80134fa <SecureElementComputeAesCmac+0x1a>
{
 80134e4:	b500      	push	{lr}
 80134e6:	b083      	sub	sp, #12
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 80134e8:	f8dd c010 	ldr.w	ip, [sp, #16]
 80134ec:	f8cd c000 	str.w	ip, [sp]
 80134f0:	f7ff ff2a 	bl	8013348 <ComputeCmac>
}
 80134f4:	b003      	add	sp, #12
 80134f6:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80134fa:	2003      	movs	r0, #3
}
 80134fc:	4770      	bx	lr

080134fe <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 80134fe:	b190      	cbz	r0, 8013526 <SecureElementVerifyAesCmac+0x28>
{
 8013500:	b510      	push	{r4, lr}
 8013502:	b084      	sub	sp, #16
 8013504:	468c      	mov	ip, r1
 8013506:	4614      	mov	r4, r2
 8013508:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 801350a:	2000      	movs	r0, #0
 801350c:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 801350e:	aa03      	add	r2, sp, #12
 8013510:	9200      	str	r2, [sp, #0]
 8013512:	4662      	mov	r2, ip
 8013514:	f7ff ff18 	bl	8013348 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8013518:	b918      	cbnz	r0, 8013522 <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 801351a:	9b03      	ldr	r3, [sp, #12]
 801351c:	42a3      	cmp	r3, r4
 801351e:	d000      	beq.n	8013522 <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 8013520:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 8013522:	b004      	add	sp, #16
 8013524:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8013526:	2002      	movs	r0, #2
}
 8013528:	4770      	bx	lr

0801352a <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 801352a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801352e:	b0be      	sub	sp, #248	@ 0xf8
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 8013530:	b348      	cbz	r0, 8013586 <SecureElementAesEncrypt+0x5c>
 8013532:	460d      	mov	r5, r1
 8013534:	4614      	mov	r4, r2
 8013536:	461e      	mov	r6, r3
 8013538:	4607      	mov	r7, r0
 801353a:	b33b      	cbz	r3, 801358c <SecureElementAesEncrypt+0x62>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 801353c:	f011 0f0f 	tst.w	r1, #15
 8013540:	d127      	bne.n	8013592 <SecureElementAesEncrypt+0x68>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 8013542:	22f0      	movs	r2, #240	@ 0xf0
 8013544:	2100      	movs	r1, #0
 8013546:	a801      	add	r0, sp, #4
 8013548:	f000 fa35 	bl	80139b6 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 801354c:	4669      	mov	r1, sp
 801354e:	4620      	mov	r0, r4
 8013550:	f7ff fedc 	bl	801330c <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 8013554:	4680      	mov	r8, r0
 8013556:	b118      	cbz	r0, 8013560 <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 8013558:	4640      	mov	r0, r8
 801355a:	b03e      	add	sp, #248	@ 0xf8
 801355c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 8013560:	aa01      	add	r2, sp, #4
 8013562:	2110      	movs	r1, #16
 8013564:	9800      	ldr	r0, [sp, #0]
 8013566:	3001      	adds	r0, #1
 8013568:	f7ff fe22 	bl	80131b0 <lorawan_aes_set_key>
        uint8_t block = 0;
 801356c:	4644      	mov	r4, r8
        while( size != 0 )
 801356e:	e007      	b.n	8013580 <SecureElementAesEncrypt+0x56>
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 8013570:	aa01      	add	r2, sp, #4
 8013572:	1931      	adds	r1, r6, r4
 8013574:	1938      	adds	r0, r7, r4
 8013576:	f7ff fe9f 	bl	80132b8 <lorawan_aes_encrypt>
            block = block + 16;
 801357a:	3410      	adds	r4, #16
 801357c:	b2e4      	uxtb	r4, r4
            size  = size - 16;
 801357e:	3d10      	subs	r5, #16
        while( size != 0 )
 8013580:	2d00      	cmp	r5, #0
 8013582:	d1f5      	bne.n	8013570 <SecureElementAesEncrypt+0x46>
 8013584:	e7e8      	b.n	8013558 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 8013586:	f04f 0802 	mov.w	r8, #2
 801358a:	e7e5      	b.n	8013558 <SecureElementAesEncrypt+0x2e>
 801358c:	f04f 0802 	mov.w	r8, #2
 8013590:	e7e2      	b.n	8013558 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8013592:	f04f 0805 	mov.w	r8, #5
 8013596:	e7df      	b.n	8013558 <SecureElementAesEncrypt+0x2e>

08013598 <SecureElementSetKey>:
{
 8013598:	b530      	push	{r4, r5, lr}
 801359a:	b085      	sub	sp, #20
    if( key == NULL )
 801359c:	2900      	cmp	r1, #0
 801359e:	d038      	beq.n	8013612 <SecureElementSetKey+0x7a>
 80135a0:	468c      	mov	ip, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80135a2:	2300      	movs	r3, #0
 80135a4:	2b0a      	cmp	r3, #10
 80135a6:	d830      	bhi.n	801360a <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 80135a8:	4a1b      	ldr	r2, [pc, #108]	@ (8013618 <SecureElementSetKey+0x80>)
 80135aa:	6811      	ldr	r1, [r2, #0]
 80135ac:	461c      	mov	r4, r3
 80135ae:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 80135b2:	440a      	add	r2, r1
 80135b4:	7e12      	ldrb	r2, [r2, #24]
 80135b6:	4282      	cmp	r2, r0
 80135b8:	d002      	beq.n	80135c0 <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80135ba:	3301      	adds	r3, #1
 80135bc:	b2db      	uxtb	r3, r3
 80135be:	e7f1      	b.n	80135a4 <SecureElementSetKey+0xc>
            if( keyID == MC_KEY_0 )
 80135c0:	280d      	cmp	r0, #13
 80135c2:	d00a      	beq.n	80135da <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 80135c4:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 80135c8:	3418      	adds	r4, #24
 80135ca:	1908      	adds	r0, r1, r4
 80135cc:	2210      	movs	r2, #16
 80135ce:	4661      	mov	r1, ip
 80135d0:	3001      	adds	r0, #1
 80135d2:	f000 f9d8 	bl	8013986 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 80135d6:	2500      	movs	r5, #0
 80135d8:	e018      	b.n	801360c <SecureElementSetKey+0x74>
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 80135da:	2300      	movs	r3, #0
 80135dc:	9300      	str	r3, [sp, #0]
 80135de:	9301      	str	r3, [sp, #4]
 80135e0:	9302      	str	r3, [sp, #8]
 80135e2:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 80135e4:	466b      	mov	r3, sp
 80135e6:	220c      	movs	r2, #12
 80135e8:	2110      	movs	r1, #16
 80135ea:	4660      	mov	r0, ip
 80135ec:	f7ff ff9d 	bl	801352a <SecureElementAesEncrypt>
 80135f0:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 80135f2:	4b09      	ldr	r3, [pc, #36]	@ (8013618 <SecureElementSetKey+0x80>)
 80135f4:	6818      	ldr	r0, [r3, #0]
 80135f6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80135fa:	3418      	adds	r4, #24
 80135fc:	4420      	add	r0, r4
 80135fe:	2210      	movs	r2, #16
 8013600:	4669      	mov	r1, sp
 8013602:	3001      	adds	r0, #1
 8013604:	f000 f9bf 	bl	8013986 <memcpy1>
                return retval;
 8013608:	e000      	b.n	801360c <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801360a:	2503      	movs	r5, #3
}
 801360c:	4628      	mov	r0, r5
 801360e:	b005      	add	sp, #20
 8013610:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8013612:	2502      	movs	r5, #2
 8013614:	e7fa      	b.n	801360c <SecureElementSetKey+0x74>
 8013616:	bf00      	nop
 8013618:	20003ba0 	.word	0x20003ba0

0801361c <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 801361c:	b1d0      	cbz	r0, 8013654 <SecureElementDeriveAndStoreKey+0x38>
{
 801361e:	b510      	push	{r4, lr}
 8013620:	b084      	sub	sp, #16
 8013622:	4614      	mov	r4, r2
 8013624:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 8013626:	2a0c      	cmp	r2, #12
 8013628:	d101      	bne.n	801362e <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 801362a:	290b      	cmp	r1, #11
 801362c:	d114      	bne.n	8013658 <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 801362e:	2300      	movs	r3, #0
 8013630:	9300      	str	r3, [sp, #0]
 8013632:	9301      	str	r3, [sp, #4]
 8013634:	9302      	str	r3, [sp, #8]
 8013636:	9303      	str	r3, [sp, #12]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 8013638:	466b      	mov	r3, sp
 801363a:	460a      	mov	r2, r1
 801363c:	2110      	movs	r1, #16
 801363e:	4660      	mov	r0, ip
 8013640:	f7ff ff73 	bl	801352a <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8013644:	b108      	cbz	r0, 801364a <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 8013646:	b004      	add	sp, #16
 8013648:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 801364a:	4669      	mov	r1, sp
 801364c:	4620      	mov	r0, r4
 801364e:	f7ff ffa3 	bl	8013598 <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8013652:	e7f8      	b.n	8013646 <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 8013654:	2002      	movs	r0, #2
}
 8013656:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8013658:	2003      	movs	r0, #3
 801365a:	e7f4      	b.n	8013646 <SecureElementDeriveAndStoreKey+0x2a>

0801365c <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 801365c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801365e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8013662:	9c07      	ldr	r4, [sp, #28]
 8013664:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 8013666:	b35b      	cbz	r3, 80136c0 <SecureElementProcessJoinAccept+0x64>
 8013668:	461f      	mov	r7, r3
 801366a:	b35c      	cbz	r4, 80136c4 <SecureElementProcessJoinAccept+0x68>
 801366c:	b366      	cbz	r6, 80136c8 <SecureElementProcessJoinAccept+0x6c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 801366e:	2d21      	cmp	r5, #33	@ 0x21
 8013670:	d82c      	bhi.n	80136cc <SecureElementProcessJoinAccept+0x70>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 8013672:	462a      	mov	r2, r5
 8013674:	4619      	mov	r1, r3
 8013676:	4620      	mov	r0, r4
 8013678:	f000 f985 	bl	8013986 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 801367c:	1c63      	adds	r3, r4, #1
 801367e:	2201      	movs	r2, #1
 8013680:	1e69      	subs	r1, r5, #1
 8013682:	18b8      	adds	r0, r7, r2
 8013684:	f7ff ff51 	bl	801352a <SecureElementAesEncrypt>
 8013688:	bb10      	cbnz	r0, 80136d0 <SecureElementProcessJoinAccept+0x74>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 801368a:	7ae3      	ldrb	r3, [r4, #11]
 801368c:	09db      	lsrs	r3, r3, #7
 801368e:	7033      	strb	r3, [r6, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 8013690:	1961      	adds	r1, r4, r5
 8013692:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 8013696:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 801369a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 801369e:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 80136a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80136a6:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 80136aa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 80136ae:	b98b      	cbnz	r3, 80136d4 <SecureElementProcessJoinAccept+0x78>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 80136b0:	2301      	movs	r3, #1
 80136b2:	1f29      	subs	r1, r5, #4
 80136b4:	4620      	mov	r0, r4
 80136b6:	f7ff ff22 	bl	80134fe <SecureElementVerifyAesCmac>
 80136ba:	b140      	cbz	r0, 80136ce <SecureElementProcessJoinAccept+0x72>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 80136bc:	2001      	movs	r0, #1
 80136be:	e006      	b.n	80136ce <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_NPE;
 80136c0:	2002      	movs	r0, #2
 80136c2:	e004      	b.n	80136ce <SecureElementProcessJoinAccept+0x72>
 80136c4:	2002      	movs	r0, #2
 80136c6:	e002      	b.n	80136ce <SecureElementProcessJoinAccept+0x72>
 80136c8:	2002      	movs	r0, #2
 80136ca:	e000      	b.n	80136ce <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 80136cc:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 80136ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 80136d0:	2007      	movs	r0, #7
 80136d2:	e7fc      	b.n	80136ce <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 80136d4:	2004      	movs	r0, #4
 80136d6:	e7fa      	b.n	80136ce <SecureElementProcessJoinAccept+0x72>

080136d8 <SecureElementRandomNumber>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t *randomNum )
{
    if( randomNum == NULL )
 80136d8:	b138      	cbz	r0, 80136ea <SecureElementRandomNumber+0x12>
{
 80136da:	b510      	push	{r4, lr}
 80136dc:	4604      	mov	r4, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    *randomNum = Radio.Random();
 80136de:	4b04      	ldr	r3, [pc, #16]	@ (80136f0 <SecureElementRandomNumber+0x18>)
 80136e0:	695b      	ldr	r3, [r3, #20]
 80136e2:	4798      	blx	r3
 80136e4:	6020      	str	r0, [r4, #0]
    return SECURE_ELEMENT_SUCCESS;
 80136e6:	2000      	movs	r0, #0
}
 80136e8:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80136ea:	2002      	movs	r0, #2
}
 80136ec:	4770      	bx	lr
 80136ee:	bf00      	nop
 80136f0:	080172ac 	.word	0x080172ac

080136f4 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 80136f4:	b140      	cbz	r0, 8013708 <SecureElementSetDevEui+0x14>
{
 80136f6:	b508      	push	{r3, lr}
 80136f8:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 80136fa:	2208      	movs	r2, #8
 80136fc:	4b03      	ldr	r3, [pc, #12]	@ (801370c <SecureElementSetDevEui+0x18>)
 80136fe:	6818      	ldr	r0, [r3, #0]
 8013700:	f000 f941 	bl	8013986 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8013704:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8013706:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8013708:	2002      	movs	r0, #2
}
 801370a:	4770      	bx	lr
 801370c:	20003ba0 	.word	0x20003ba0

08013710 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 8013710:	b138      	cbz	r0, 8013722 <SecureElementGetDevEui+0x12>
{
 8013712:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 8013714:	2208      	movs	r2, #8
 8013716:	4904      	ldr	r1, [pc, #16]	@ (8013728 <SecureElementGetDevEui+0x18>)
 8013718:	6809      	ldr	r1, [r1, #0]
 801371a:	f000 f934 	bl	8013986 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 801371e:	2000      	movs	r0, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8013720:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8013722:	2002      	movs	r0, #2
}
 8013724:	4770      	bx	lr
 8013726:	bf00      	nop
 8013728:	20003ba0 	.word	0x20003ba0

0801372c <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 801372c:	b148      	cbz	r0, 8013742 <SecureElementSetJoinEui+0x16>
{
 801372e:	b508      	push	{r3, lr}
 8013730:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 8013732:	4b05      	ldr	r3, [pc, #20]	@ (8013748 <SecureElementSetJoinEui+0x1c>)
 8013734:	6818      	ldr	r0, [r3, #0]
 8013736:	2208      	movs	r2, #8
 8013738:	4410      	add	r0, r2
 801373a:	f000 f924 	bl	8013986 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 801373e:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8013740:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8013742:	2002      	movs	r0, #2
}
 8013744:	4770      	bx	lr
 8013746:	bf00      	nop
 8013748:	20003ba0 	.word	0x20003ba0

0801374c <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 801374c:	b140      	cbz	r0, 8013760 <SecureElementGetJoinEui+0x14>
{
 801374e:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 8013750:	4a04      	ldr	r2, [pc, #16]	@ (8013764 <SecureElementGetJoinEui+0x18>)
 8013752:	6811      	ldr	r1, [r2, #0]
 8013754:	2208      	movs	r2, #8
 8013756:	4411      	add	r1, r2
 8013758:	f000 f915 	bl	8013986 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 801375c:	2000      	movs	r0, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 801375e:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8013760:	2002      	movs	r0, #2
}
 8013762:	4770      	bx	lr
 8013764:	20003ba0 	.word	0x20003ba0

08013768 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 8013768:	2802      	cmp	r0, #2
 801376a:	d004      	beq.n	8013776 <SecureElementSetDevAddr+0xe>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 801376c:	4b04      	ldr	r3, [pc, #16]	@ (8013780 <SecureElementSetDevAddr+0x18>)
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	6159      	str	r1, [r3, #20]
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 8013772:	2000      	movs	r0, #0
 8013774:	4770      	bx	lr
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 8013776:	4b02      	ldr	r3, [pc, #8]	@ (8013780 <SecureElementSetDevAddr+0x18>)
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	6119      	str	r1, [r3, #16]
 801377c:	e7f9      	b.n	8013772 <SecureElementSetDevAddr+0xa>
 801377e:	bf00      	nop
 8013780:	20003ba0 	.word	0x20003ba0

08013784 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
    if( devAddr == NULL )
 8013784:	b169      	cbz	r1, 80137a2 <SecureElementGetDevAddr+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 8013786:	2802      	cmp	r0, #2
 8013788:	d005      	beq.n	8013796 <SecureElementGetDevAddr+0x12>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 801378a:	4a07      	ldr	r2, [pc, #28]	@ (80137a8 <SecureElementGetDevAddr+0x24>)
 801378c:	6812      	ldr	r2, [r2, #0]
 801378e:	6952      	ldr	r2, [r2, #20]
 8013790:	600a      	str	r2, [r1, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 8013792:	2000      	movs	r0, #0
 8013794:	4770      	bx	lr
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 8013796:	4a04      	ldr	r2, [pc, #16]	@ (80137a8 <SecureElementGetDevAddr+0x24>)
 8013798:	6812      	ldr	r2, [r2, #0]
 801379a:	6912      	ldr	r2, [r2, #16]
 801379c:	600a      	str	r2, [r1, #0]
    return SECURE_ELEMENT_SUCCESS;
 801379e:	2000      	movs	r0, #0
 80137a0:	4770      	bx	lr
        return SECURE_ELEMENT_ERROR_NPE;
 80137a2:	2002      	movs	r0, #2
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 80137a4:	4770      	bx	lr
 80137a6:	bf00      	nop
 80137a8:	20003ba0 	.word	0x20003ba0

080137ac <SecureElementInitMcuID>:
{
 80137ac:	b530      	push	{r4, r5, lr}
 80137ae:	b085      	sub	sp, #20
 80137b0:	4605      	mov	r5, r0
 80137b2:	460c      	mov	r4, r1
    uint32_t devAddrABP = 0;
 80137b4:	2300      	movs	r3, #0
 80137b6:	9301      	str	r3, [sp, #4]
    SecureElementGetDevEui( devEui );
 80137b8:	a802      	add	r0, sp, #8
 80137ba:	f7ff ffa9 	bl	8013710 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 80137be:	a901      	add	r1, sp, #4
 80137c0:	2001      	movs	r0, #1
 80137c2:	f7ff ffdf 	bl	8013784 <SecureElementGetDevAddr>
    if( seGetUniqueId != NULL )
 80137c6:	b195      	cbz	r5, 80137ee <SecureElementInitMcuID+0x42>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 80137c8:	2300      	movs	r3, #0
 80137ca:	2b07      	cmp	r3, #7
 80137cc:	d808      	bhi.n	80137e0 <SecureElementInitMcuID+0x34>
            if( devEui[index] != 0 )
 80137ce:	f103 0210 	add.w	r2, r3, #16
 80137d2:	446a      	add	r2, sp
 80137d4:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80137d8:	b9aa      	cbnz	r2, 8013806 <SecureElementInitMcuID+0x5a>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 80137da:	3301      	adds	r3, #1
 80137dc:	b2db      	uxtb	r3, r3
 80137de:	e7f4      	b.n	80137ca <SecureElementInitMcuID+0x1e>
        bool id_init = false;
 80137e0:	2300      	movs	r3, #0
        if( id_init == false )
 80137e2:	b923      	cbnz	r3, 80137ee <SecureElementInitMcuID+0x42>
            seGetUniqueId( devEui );
 80137e4:	a802      	add	r0, sp, #8
 80137e6:	47a8      	blx	r5
            SecureElementSetDevEui( devEui );
 80137e8:	a802      	add	r0, sp, #8
 80137ea:	f7ff ff83 	bl	80136f4 <SecureElementSetDevEui>
    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 80137ee:	b13c      	cbz	r4, 8013800 <SecureElementInitMcuID+0x54>
 80137f0:	9b01      	ldr	r3, [sp, #4]
 80137f2:	b92b      	cbnz	r3, 8013800 <SecureElementInitMcuID+0x54>
        seGetDevAddr( &devAddrABP );
 80137f4:	a801      	add	r0, sp, #4
 80137f6:	47a0      	blx	r4
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 80137f8:	9901      	ldr	r1, [sp, #4]
 80137fa:	2001      	movs	r0, #1
 80137fc:	f7ff ffb4 	bl	8013768 <SecureElementSetDevAddr>
}
 8013800:	2000      	movs	r0, #0
 8013802:	b005      	add	sp, #20
 8013804:	bd30      	pop	{r4, r5, pc}
                id_init = true;
 8013806:	2301      	movs	r3, #1
 8013808:	e7eb      	b.n	80137e2 <SecureElementInitMcuID+0x36>
	...

0801380c <PrintIds>:
{
 801380c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801380e:	b08f      	sub	sp, #60	@ 0x3c
 8013810:	4605      	mov	r5, r0
    uint32_t devAddr = 0;
 8013812:	2400      	movs	r4, #0
 8013814:	9409      	str	r4, [sp, #36]	@ 0x24
    SecureElementGetDevEui( devEui );
 8013816:	a80a      	add	r0, sp, #40	@ 0x28
 8013818:	f7ff ff7a 	bl	8013710 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 801381c:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8013820:	f89d 2029 	ldrb.w	r2, [sp, #41]	@ 0x29
 8013824:	f89d 102a 	ldrb.w	r1, [sp, #42]	@ 0x2a
 8013828:	f89d 002b 	ldrb.w	r0, [sp, #43]	@ 0x2b
 801382c:	f89d 602c 	ldrb.w	r6, [sp, #44]	@ 0x2c
 8013830:	f89d 702d 	ldrb.w	r7, [sp, #45]	@ 0x2d
 8013834:	f89d c02e 	ldrb.w	ip, [sp, #46]	@ 0x2e
 8013838:	f89d e02f 	ldrb.w	lr, [sp, #47]	@ 0x2f
 801383c:	f8cd e01c 	str.w	lr, [sp, #28]
 8013840:	f8cd c018 	str.w	ip, [sp, #24]
 8013844:	9705      	str	r7, [sp, #20]
 8013846:	9604      	str	r6, [sp, #16]
 8013848:	9003      	str	r0, [sp, #12]
 801384a:	9102      	str	r1, [sp, #8]
 801384c:	9201      	str	r2, [sp, #4]
 801384e:	9300      	str	r3, [sp, #0]
 8013850:	4b20      	ldr	r3, [pc, #128]	@ (80138d4 <PrintIds+0xc8>)
 8013852:	4622      	mov	r2, r4
 8013854:	4621      	mov	r1, r4
 8013856:	2002      	movs	r0, #2
 8013858:	f001 ff70 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetJoinEui( joinEui );
 801385c:	a80c      	add	r0, sp, #48	@ 0x30
 801385e:	f7ff ff75 	bl	801374c <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 8013862:	f89d 3030 	ldrb.w	r3, [sp, #48]	@ 0x30
 8013866:	f89d 2031 	ldrb.w	r2, [sp, #49]	@ 0x31
 801386a:	f89d 1032 	ldrb.w	r1, [sp, #50]	@ 0x32
 801386e:	f89d 0033 	ldrb.w	r0, [sp, #51]	@ 0x33
 8013872:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 8013876:	f89d 7035 	ldrb.w	r7, [sp, #53]	@ 0x35
 801387a:	f89d c036 	ldrb.w	ip, [sp, #54]	@ 0x36
 801387e:	f89d e037 	ldrb.w	lr, [sp, #55]	@ 0x37
 8013882:	f8cd e01c 	str.w	lr, [sp, #28]
 8013886:	f8cd c018 	str.w	ip, [sp, #24]
 801388a:	9705      	str	r7, [sp, #20]
 801388c:	9604      	str	r6, [sp, #16]
 801388e:	9003      	str	r0, [sp, #12]
 8013890:	9102      	str	r1, [sp, #8]
 8013892:	9201      	str	r2, [sp, #4]
 8013894:	9300      	str	r3, [sp, #0]
 8013896:	4b10      	ldr	r3, [pc, #64]	@ (80138d8 <PrintIds+0xcc>)
 8013898:	4622      	mov	r2, r4
 801389a:	4621      	mov	r1, r4
 801389c:	2002      	movs	r0, #2
 801389e:	f001 ff4d 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetDevAddr( mode, &devAddr );
 80138a2:	a909      	add	r1, sp, #36	@ 0x24
 80138a4:	4628      	mov	r0, r5
 80138a6:	f7ff ff6d 	bl	8013784 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 80138aa:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 80138ae:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 80138b2:	f89d 1025 	ldrb.w	r1, [sp, #37]	@ 0x25
 80138b6:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 80138ba:	9003      	str	r0, [sp, #12]
 80138bc:	9102      	str	r1, [sp, #8]
 80138be:	9201      	str	r2, [sp, #4]
 80138c0:	9300      	str	r3, [sp, #0]
 80138c2:	4b06      	ldr	r3, [pc, #24]	@ (80138dc <PrintIds+0xd0>)
 80138c4:	4622      	mov	r2, r4
 80138c6:	4621      	mov	r1, r4
 80138c8:	2002      	movs	r0, #2
 80138ca:	f001 ff37 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
}
 80138ce:	b00f      	add	sp, #60	@ 0x3c
 80138d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138d2:	bf00      	nop
 80138d4:	0801707c 	.word	0x0801707c
 80138d8:	080170bc 	.word	0x080170bc
 80138dc:	080170fc 	.word	0x080170fc

080138e0 <SecureElementPrintKeys>:
{
 80138e0:	b508      	push	{r3, lr}
    PrintKey( APP_KEY );
 80138e2:	2000      	movs	r0, #0
 80138e4:	f7ff fd9e 	bl	8013424 <PrintKey>
    PrintKey( NWK_KEY );
 80138e8:	2001      	movs	r0, #1
 80138ea:	f7ff fd9b 	bl	8013424 <PrintKey>
    PrintKey( APP_S_KEY );
 80138ee:	2009      	movs	r0, #9
 80138f0:	f7ff fd98 	bl	8013424 <PrintKey>
    PrintKey( NWK_S_KEY );
 80138f4:	2008      	movs	r0, #8
 80138f6:	f7ff fd95 	bl	8013424 <PrintKey>
    PrintIds( ACTIVATION_TYPE_NONE );
 80138fa:	2000      	movs	r0, #0
 80138fc:	f7ff ff86 	bl	801380c <PrintIds>
}
 8013900:	2000      	movs	r0, #0
 8013902:	bd08      	pop	{r3, pc}

08013904 <SecureElementPrintSessionKeys>:
{
 8013904:	b510      	push	{r4, lr}
 8013906:	4604      	mov	r4, r0
    PrintKey( MC_ROOT_KEY );
 8013908:	200b      	movs	r0, #11
 801390a:	f7ff fd8b 	bl	8013424 <PrintKey>
    PrintKey( MC_KE_KEY );
 801390e:	200c      	movs	r0, #12
 8013910:	f7ff fd88 	bl	8013424 <PrintKey>
    PrintKey( APP_S_KEY );
 8013914:	2009      	movs	r0, #9
 8013916:	f7ff fd85 	bl	8013424 <PrintKey>
    PrintKey( NWK_S_KEY );
 801391a:	2008      	movs	r0, #8
 801391c:	f7ff fd82 	bl	8013424 <PrintKey>
    PrintKey( DATABLOCK_INT_KEY );
 8013920:	200a      	movs	r0, #10
 8013922:	f7ff fd7f 	bl	8013424 <PrintKey>
    PrintIds( mode );
 8013926:	4620      	mov	r0, r4
 8013928:	f7ff ff70 	bl	801380c <PrintIds>
}
 801392c:	2000      	movs	r0, #0
 801392e:	bd10      	pop	{r4, pc}

08013930 <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8013930:	4b09      	ldr	r3, [pc, #36]	@ (8013958 <rand1+0x28>)
 8013932:	681a      	ldr	r2, [r3, #0]
 8013934:	4909      	ldr	r1, [pc, #36]	@ (801395c <rand1+0x2c>)
 8013936:	f243 0039 	movw	r0, #12345	@ 0x3039
 801393a:	fb01 0002 	mla	r0, r1, r2, r0
 801393e:	6018      	str	r0, [r3, #0]
 8013940:	2303      	movs	r3, #3
 8013942:	fba3 2300 	umull	r2, r3, r3, r0
 8013946:	1ac2      	subs	r2, r0, r3
 8013948:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 801394c:	0f9b      	lsrs	r3, r3, #30
 801394e:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 8013952:	1ac0      	subs	r0, r0, r3
 8013954:	4770      	bx	lr
 8013956:	bf00      	nop
 8013958:	2000010c 	.word	0x2000010c
 801395c:	41c64e6d 	.word	0x41c64e6d

08013960 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 8013960:	4b01      	ldr	r3, [pc, #4]	@ (8013968 <srand1+0x8>)
 8013962:	6018      	str	r0, [r3, #0]
}
 8013964:	4770      	bx	lr
 8013966:	bf00      	nop
 8013968:	2000010c 	.word	0x2000010c

0801396c <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 801396c:	b538      	push	{r3, r4, r5, lr}
 801396e:	4605      	mov	r5, r0
 8013970:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8013972:	f7ff ffdd 	bl	8013930 <rand1>
 8013976:	1b61      	subs	r1, r4, r5
 8013978:	3101      	adds	r1, #1
 801397a:	fb90 f3f1 	sdiv	r3, r0, r1
 801397e:	fb01 0013 	mls	r0, r1, r3, r0
}
 8013982:	4428      	add	r0, r5
 8013984:	bd38      	pop	{r3, r4, r5, pc}

08013986 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 8013986:	e004      	b.n	8013992 <memcpy1+0xc>
    {
        *dst++ = *src++;
 8013988:	f811 2b01 	ldrb.w	r2, [r1], #1
 801398c:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 8013990:	461a      	mov	r2, r3
 8013992:	1e53      	subs	r3, r2, #1
 8013994:	b29b      	uxth	r3, r3
 8013996:	2a00      	cmp	r2, #0
 8013998:	d1f6      	bne.n	8013988 <memcpy1+0x2>
    }
}
 801399a:	4770      	bx	lr

0801399c <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 801399c:	1e53      	subs	r3, r2, #1
 801399e:	4418      	add	r0, r3
    while( size-- )
 80139a0:	e004      	b.n	80139ac <memcpyr+0x10>
    {
        *dst-- = *src++;
 80139a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80139a6:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 80139aa:	461a      	mov	r2, r3
 80139ac:	1e53      	subs	r3, r2, #1
 80139ae:	b29b      	uxth	r3, r3
 80139b0:	2a00      	cmp	r2, #0
 80139b2:	d1f6      	bne.n	80139a2 <memcpyr+0x6>
    }
}
 80139b4:	4770      	bx	lr

080139b6 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 80139b6:	e002      	b.n	80139be <memset1+0x8>
    {
        *dst++ = value;
 80139b8:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 80139bc:	461a      	mov	r2, r3
 80139be:	1e53      	subs	r3, r2, #1
 80139c0:	b29b      	uxth	r3, r3
 80139c2:	2a00      	cmp	r2, #0
 80139c4:	d1f8      	bne.n	80139b8 <memset1+0x2>
    }
}
 80139c6:	4770      	bx	lr

080139c8 <Crc32>:
uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 80139c8:	b1f0      	cbz	r0, 8013a08 <Crc32+0x40>
{
 80139ca:	b510      	push	{r4, lr}
 80139cc:	4604      	mov	r4, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 80139ce:	f04f 0e00 	mov.w	lr, #0
    uint32_t crc = 0xFFFFFFFF;
 80139d2:	f04f 30ff 	mov.w	r0, #4294967295
 80139d6:	e00e      	b.n	80139f6 <Crc32+0x2e>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80139d8:	f340 0c00 	sbfx	ip, r0, #0, #1
 80139dc:	4a0b      	ldr	r2, [pc, #44]	@ (8013a0c <Crc32+0x44>)
 80139de:	ea0c 0202 	and.w	r2, ip, r2
 80139e2:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 80139e6:	3301      	adds	r3, #1
 80139e8:	b29b      	uxth	r3, r3
 80139ea:	2b07      	cmp	r3, #7
 80139ec:	d9f4      	bls.n	80139d8 <Crc32+0x10>
    for( uint16_t i = 0; i < length; ++i )
 80139ee:	f10e 0e01 	add.w	lr, lr, #1
 80139f2:	fa1f fe8e 	uxth.w	lr, lr
 80139f6:	458e      	cmp	lr, r1
 80139f8:	d204      	bcs.n	8013a04 <Crc32+0x3c>
        crc ^= ( uint32_t )buffer[i];
 80139fa:	f814 300e 	ldrb.w	r3, [r4, lr]
 80139fe:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 8013a00:	2300      	movs	r3, #0
 8013a02:	e7f2      	b.n	80139ea <Crc32+0x22>
        }
    }

    return ~crc;
 8013a04:	43c0      	mvns	r0, r0
}
 8013a06:	bd10      	pop	{r4, pc}
        return 0;
 8013a08:	2000      	movs	r0, #0
}
 8013a0a:	4770      	bx	lr
 8013a0c:	edb88320 	.word	0xedb88320

08013a10 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 8013a10:	2001      	movs	r0, #1
 8013a12:	4770      	bx	lr

08013a14 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 8013a14:	280a      	cmp	r0, #10
 8013a16:	d807      	bhi.n	8013a28 <RadioGetLoRaBandwidthInHz+0x14>
 8013a18:	e8df f000 	tbb	[pc, r0]
 8013a1c:	17110b20 	.word	0x17110b20
 8013a20:	061e1c1a 	.word	0x061e1c1a
 8013a24:	0e08      	.short	0x0e08
 8013a26:	14          	.byte	0x14
 8013a27:	00          	.byte	0x00
 8013a28:	2000      	movs	r0, #0
 8013a2a:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8013a2c:	f642 00b1 	movw	r0, #10417	@ 0x28b1
        break;
 8013a30:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8013a32:	f643 5009 	movw	r0, #15625	@ 0x3d09
        break;
 8013a36:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8013a38:	f245 1061 	movw	r0, #20833	@ 0x5161
        break;
 8013a3c:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8013a3e:	f647 2012 	movw	r0, #31250	@ 0x7a12
        break;
 8013a42:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8013a44:	f24a 20c3 	movw	r0, #41667	@ 0xa2c3
        break;
 8013a48:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8013a4a:	f24f 4024 	movw	r0, #62500	@ 0xf424
        break;
 8013a4e:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8013a50:	4804      	ldr	r0, [pc, #16]	@ (8013a64 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 8013a52:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8013a54:	4804      	ldr	r0, [pc, #16]	@ (8013a68 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 8013a56:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8013a58:	4804      	ldr	r0, [pc, #16]	@ (8013a6c <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 8013a5a:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 8013a5c:	f641 6084 	movw	r0, #7812	@ 0x1e84
    }

    return bandwidthInHz;
}
 8013a60:	4770      	bx	lr
 8013a62:	bf00      	nop
 8013a64:	0001e848 	.word	0x0001e848
 8013a68:	0003d090 	.word	0x0003d090
 8013a6c:	0007a120 	.word	0x0007a120

08013a70 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8013a70:	f89d 1004 	ldrb.w	r1, [sp, #4]
    return ( preambleLen << 3 ) +
 8013a74:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8013a76:	b953      	cbnz	r3, 8013a8e <RadioGetGfskTimeOnAirNumerator+0x1e>
 8013a78:	2308      	movs	r3, #8
    return ( preambleLen << 3 ) +
 8013a7a:	441a      	add	r2, r3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8013a7c:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8013a7e:	b141      	cbz	r1, 8013a92 <RadioGetGfskTimeOnAirNumerator+0x22>
 8013a80:	2302      	movs	r3, #2
 8013a82:	f89d 0000 	ldrb.w	r0, [sp]
 8013a86:	4418      	add	r0, r3
}
 8013a88:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8013a8c:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8013a8e:	2300      	movs	r3, #0
 8013a90:	e7f3      	b.n	8013a7a <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8013a92:	2300      	movs	r3, #0
 8013a94:	e7f5      	b.n	8013a82 <RadioGetGfskTimeOnAirNumerator+0x12>

08013a96 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8013a96:	b570      	push	{r4, r5, r6, lr}
 8013a98:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8013a9c:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 8013aa0:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8013aa2:	f1a1 0c05 	sub.w	ip, r1, #5
 8013aa6:	f1bc 0f01 	cmp.w	ip, #1
 8013aaa:	d931      	bls.n	8013b10 <RadioGetLoRaTimeOnAirNumerator+0x7a>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8013aac:	b918      	cbnz	r0, 8013ab6 <RadioGetLoRaTimeOnAirNumerator+0x20>
 8013aae:	f1a1 060b 	sub.w	r6, r1, #11
 8013ab2:	2e01      	cmp	r6, #1
 8013ab4:	d934      	bls.n	8013b20 <RadioGetLoRaTimeOnAirNumerator+0x8a>
 8013ab6:	2801      	cmp	r0, #1
 8013ab8:	d02e      	beq.n	8013b18 <RadioGetLoRaTimeOnAirNumerator+0x82>
    bool    lowDatareOptimize = false;
 8013aba:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8013abc:	f89d c014 	ldrb.w	ip, [sp, #20]
 8013ac0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
                            ( crcOn ? 16 : 0 ) -
 8013ac4:	b385      	cbz	r5, 8013b28 <RadioGetLoRaTimeOnAirNumerator+0x92>
 8013ac6:	2010      	movs	r0, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8013ac8:	4484      	add	ip, r0
                            ( 4 * datarate ) +
 8013aca:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 8013acc:	ebac 0c81 	sub.w	ip, ip, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 8013ad0:	b364      	cbz	r4, 8013b2c <RadioGetLoRaTimeOnAirNumerator+0x96>
 8013ad2:	f04f 0e00 	mov.w	lr, #0
                            ( 4 * datarate ) +
 8013ad6:	44f4      	add	ip, lr

    if( datarate <= 6 )
 8013ad8:	2906      	cmp	r1, #6
 8013ada:	d904      	bls.n	8013ae6 <RadioGetLoRaTimeOnAirNumerator+0x50>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 8013adc:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 8013ae0:	b10e      	cbz	r6, 8013ae6 <RadioGetLoRaTimeOnAirNumerator+0x50>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8013ae2:	1e88      	subs	r0, r1, #2
 8013ae4:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 8013ae6:	f1bc 0f00 	cmp.w	ip, #0
 8013aea:	db22      	blt.n	8013b32 <RadioGetLoRaTimeOnAirNumerator+0x9c>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8013aec:	4484      	add	ip, r0
 8013aee:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013af2:	fb9c fcf0 	sdiv	ip, ip, r0
 8013af6:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 8013afa:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 8013afe:	2906      	cmp	r1, #6
 8013b00:	d801      	bhi.n	8013b06 <RadioGetLoRaTimeOnAirNumerator+0x70>
    {
        intermediate += 2;
 8013b02:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8013b06:	0080      	lsls	r0, r0, #2
 8013b08:	3001      	adds	r0, #1
 8013b0a:	3902      	subs	r1, #2
}
 8013b0c:	4088      	lsls	r0, r1
 8013b0e:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 8013b10:	2b0b      	cmp	r3, #11
 8013b12:	d8cb      	bhi.n	8013aac <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 8013b14:	230c      	movs	r3, #12
 8013b16:	e7c9      	b.n	8013aac <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8013b18:	290c      	cmp	r1, #12
 8013b1a:	d003      	beq.n	8013b24 <RadioGetLoRaTimeOnAirNumerator+0x8e>
    bool    lowDatareOptimize = false;
 8013b1c:	2600      	movs	r6, #0
 8013b1e:	e7cd      	b.n	8013abc <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 8013b20:	2601      	movs	r6, #1
 8013b22:	e7cb      	b.n	8013abc <RadioGetLoRaTimeOnAirNumerator+0x26>
 8013b24:	2601      	movs	r6, #1
 8013b26:	e7c9      	b.n	8013abc <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 8013b28:	2000      	movs	r0, #0
 8013b2a:	e7cd      	b.n	8013ac8 <RadioGetLoRaTimeOnAirNumerator+0x32>
                            ( fixLen ? 0 : 20 );
 8013b2c:	f04f 0e14 	mov.w	lr, #20
 8013b30:	e7d1      	b.n	8013ad6 <RadioGetLoRaTimeOnAirNumerator+0x40>
        ceilNumerator = 0;
 8013b32:	f04f 0c00 	mov.w	ip, #0
 8013b36:	e7d9      	b.n	8013aec <RadioGetLoRaTimeOnAirNumerator+0x56>

08013b38 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8013b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b3a:	b085      	sub	sp, #20
 8013b3c:	460e      	mov	r6, r1
 8013b3e:	4615      	mov	r5, r2
 8013b40:	4619      	mov	r1, r3
 8013b42:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8013b46:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8013b4a:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 8013b4e:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 8013b52:	b148      	cbz	r0, 8013b68 <RadioTimeOnAir+0x30>
 8013b54:	2801      	cmp	r0, #1
 8013b56:	d012      	beq.n	8013b7e <RadioTimeOnAir+0x46>
 8013b58:	2501      	movs	r5, #1
 8013b5a:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8013b5c:	442c      	add	r4, r5
 8013b5e:	1e60      	subs	r0, r4, #1
}
 8013b60:	fbb0 f0f5 	udiv	r0, r0, r5
 8013b64:	b005      	add	sp, #20
 8013b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8013b68:	f8cd c004 	str.w	ip, [sp, #4]
 8013b6c:	9700      	str	r7, [sp, #0]
 8013b6e:	4628      	mov	r0, r5
 8013b70:	f7ff ff7e 	bl	8013a70 <RadioGetGfskTimeOnAirNumerator>
 8013b74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013b78:	fb03 f400 	mul.w	r4, r3, r0
        break;
 8013b7c:	e7ee      	b.n	8013b5c <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8013b7e:	f8cd c008 	str.w	ip, [sp, #8]
 8013b82:	9701      	str	r7, [sp, #4]
 8013b84:	9300      	str	r3, [sp, #0]
 8013b86:	4613      	mov	r3, r2
 8013b88:	460a      	mov	r2, r1
 8013b8a:	4629      	mov	r1, r5
 8013b8c:	4630      	mov	r0, r6
 8013b8e:	f7ff ff82 	bl	8013a96 <RadioGetLoRaTimeOnAirNumerator>
 8013b92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013b96:	fb03 f400 	mul.w	r4, r3, r0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8013b9a:	4b03      	ldr	r3, [pc, #12]	@ (8013ba8 <RadioTimeOnAir+0x70>)
 8013b9c:	5d98      	ldrb	r0, [r3, r6]
 8013b9e:	f7ff ff39 	bl	8013a14 <RadioGetLoRaBandwidthInHz>
 8013ba2:	4605      	mov	r5, r0
        break;
 8013ba4:	e7da      	b.n	8013b5c <RadioTimeOnAir+0x24>
 8013ba6:	bf00      	nop
 8013ba8:	080172a8 	.word	0x080172a8

08013bac <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 8013bac:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8013bae:	4b05      	ldr	r3, [pc, #20]	@ (8013bc4 <RadioOnTxTimeoutProcess+0x18>)
 8013bb0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8013bb4:	629a      	str	r2, [r3, #40]	@ 0x28
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8013bb6:	4b04      	ldr	r3, [pc, #16]	@ (8013bc8 <RadioOnTxTimeoutProcess+0x1c>)
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	b113      	cbz	r3, 8013bc2 <RadioOnTxTimeoutProcess+0x16>
 8013bbc:	685b      	ldr	r3, [r3, #4]
 8013bbe:	b103      	cbz	r3, 8013bc2 <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 8013bc0:	4798      	blx	r3
    }
}
 8013bc2:	bd08      	pop	{r3, pc}
 8013bc4:	48000400 	.word	0x48000400
 8013bc8:	20003c30 	.word	0x20003c30

08013bcc <RadioOnTxTimeoutIrq>:
{
 8013bcc:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 8013bce:	f7ff ffed 	bl	8013bac <RadioOnTxTimeoutProcess>
}
 8013bd2:	bd08      	pop	{r3, pc}

08013bd4 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8013bd4:	b508      	push	{r3, lr}
 8013bd6:	4b05      	ldr	r3, [pc, #20]	@ (8013bec <RadioOnRxTimeoutProcess+0x18>)
 8013bd8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8013bdc:	629a      	str	r2, [r3, #40]	@ 0x28
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8013bde:	4b04      	ldr	r3, [pc, #16]	@ (8013bf0 <RadioOnRxTimeoutProcess+0x1c>)
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	b113      	cbz	r3, 8013bea <RadioOnRxTimeoutProcess+0x16>
 8013be4:	68db      	ldr	r3, [r3, #12]
 8013be6:	b103      	cbz	r3, 8013bea <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 8013be8:	4798      	blx	r3
    }
}
 8013bea:	bd08      	pop	{r3, pc}
 8013bec:	48000400 	.word	0x48000400
 8013bf0:	20003c30 	.word	0x20003c30

08013bf4 <RadioOnRxTimeoutIrq>:
{
 8013bf4:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 8013bf6:	f7ff ffed 	bl	8013bd4 <RadioOnRxTimeoutProcess>
}
 8013bfa:	bd08      	pop	{r3, pc}

08013bfc <RadioSetRxGenericConfig>:
    }
    return status;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8013bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8013c00:	4770      	bx	lr

08013c02 <RadioSetTxGenericConfig>:
    SubgRf.TxTimeout = timeout;
    return 0;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8013c02:	f04f 30ff 	mov.w	r0, #4294967295
 8013c06:	4770      	bx	lr

08013c08 <RadioLrFhssSetCfg>:
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
}
 8013c08:	2001      	movs	r0, #1
 8013c0a:	4770      	bx	lr

08013c0c <RadioLrFhssGetTimeOnAirInMs>:

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
#endif /* RADIO_LR_FHSS_IS_ON */
 8013c0c:	2001      	movs	r0, #1
 8013c0e:	4770      	bx	lr

08013c10 <RadioWrite>:
{
 8013c10:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 8013c12:	f000 fe35 	bl	8014880 <SUBGRF_WriteRegister>
}
 8013c16:	bd08      	pop	{r3, pc}

08013c18 <RadioTxCw>:
{
 8013c18:	b510      	push	{r4, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8013c1a:	f001 fbcd 	bl	80153b8 <SUBGRF_SetRfTxPower>
 8013c1e:	4604      	mov	r4, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8013c20:	210e      	movs	r1, #14
 8013c22:	f640 101f 	movw	r0, #2335	@ 0x91f
 8013c26:	f000 fe2b 	bl	8014880 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8013c2a:	2101      	movs	r1, #1
 8013c2c:	4620      	mov	r0, r4
 8013c2e:	f001 fbaf 	bl	8015390 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8013c32:	f000 fff5 	bl	8014c20 <SUBGRF_SetTxContinuousWave>
}
 8013c36:	bd10      	pop	{r4, pc}

08013c38 <RadioTxPrbs>:
{
 8013c38:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8013c3a:	2101      	movs	r1, #1
 8013c3c:	4b07      	ldr	r3, [pc, #28]	@ (8013c5c <RadioTxPrbs+0x24>)
 8013c3e:	f893 0056 	ldrb.w	r0, [r3, #86]	@ 0x56
 8013c42:	f001 fba5 	bl	8015390 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8013c46:	212d      	movs	r1, #45	@ 0x2d
 8013c48:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8013c4c:	f7ff ffe0 	bl	8013c10 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 8013c50:	f000 ffed 	bl	8014c2e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8013c54:	4802      	ldr	r0, [pc, #8]	@ (8013c60 <RadioTxPrbs+0x28>)
 8013c56:	f000 ff23 	bl	8014aa0 <SUBGRF_SetTx>
}
 8013c5a:	bd08      	pop	{r3, pc}
 8013c5c:	20003bd4 	.word	0x20003bd4
 8013c60:	000fffff 	.word	0x000fffff

08013c64 <RadioSetRxDutyCycle>:
{
 8013c64:	b570      	push	{r4, r5, r6, lr}
 8013c66:	4604      	mov	r4, r0
 8013c68:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8013c6a:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 8013c6e:	4e09      	ldr	r6, [pc, #36]	@ (8013c94 <RadioSetRxDutyCycle+0x30>)
 8013c70:	65b3      	str	r3, [r6, #88]	@ 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8013c72:	2300      	movs	r3, #0
 8013c74:	461a      	mov	r2, r3
 8013c76:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8013c7a:	4608      	mov	r0, r1
 8013c7c:	f001 f8a3 	bl	8014dc6 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8013c80:	2100      	movs	r1, #0
 8013c82:	f896 0056 	ldrb.w	r0, [r6, #86]	@ 0x56
 8013c86:	f001 fb83 	bl	8015390 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8013c8a:	4629      	mov	r1, r5
 8013c8c:	4620      	mov	r0, r4
 8013c8e:	f000 ff97 	bl	8014bc0 <SUBGRF_SetRxDutyCycle>
}
 8013c92:	bd70      	pop	{r4, r5, r6, pc}
 8013c94:	20003bd4 	.word	0x20003bd4

08013c98 <RadioRxBoosted>:
{
 8013c98:	b538      	push	{r3, r4, r5, lr}
 8013c9a:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 8013c9c:	f001 fc67 	bl	801556e <RFW_Is_Init>
 8013ca0:	2801      	cmp	r0, #1
 8013ca2:	d019      	beq.n	8013cd8 <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8013ca4:	2300      	movs	r3, #0
 8013ca6:	461a      	mov	r2, r3
 8013ca8:	f240 2162 	movw	r1, #610	@ 0x262
 8013cac:	4608      	mov	r0, r1
 8013cae:	f001 f88a 	bl	8014dc6 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8013cb2:	b9a4      	cbnz	r4, 8013cde <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8013cb4:	4c11      	ldr	r4, [pc, #68]	@ (8013cfc <RadioRxBoosted+0x64>)
 8013cb6:	2100      	movs	r1, #0
 8013cb8:	65a1      	str	r1, [r4, #88]	@ 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 8013cba:	4b11      	ldr	r3, [pc, #68]	@ (8013d00 <RadioRxBoosted+0x68>)
 8013cbc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8013cc0:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8013cc2:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 8013cc6:	f001 fb63 	bl	8015390 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8013cca:	7863      	ldrb	r3, [r4, #1]
 8013ccc:	b183      	cbz	r3, 8013cf0 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8013cce:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8013cd2:	f000 ff57 	bl	8014b84 <SUBGRF_SetRxBoosted>
}
 8013cd6:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 8013cd8:	f001 fc51 	bl	801557e <RFW_ReceiveInit>
 8013cdc:	e7e9      	b.n	8013cb2 <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8013cde:	4d09      	ldr	r5, [pc, #36]	@ (8013d04 <RadioRxBoosted+0x6c>)
 8013ce0:	4621      	mov	r1, r4
 8013ce2:	4628      	mov	r0, r5
 8013ce4:	f002 f848 	bl	8015d78 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8013ce8:	4628      	mov	r0, r5
 8013cea:	f001 ffff 	bl	8015cec <UTIL_TIMER_Start>
 8013cee:	e7e1      	b.n	8013cb4 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8013cf0:	4b02      	ldr	r3, [pc, #8]	@ (8013cfc <RadioRxBoosted+0x64>)
 8013cf2:	6898      	ldr	r0, [r3, #8]
 8013cf4:	0180      	lsls	r0, r0, #6
 8013cf6:	f000 ff45 	bl	8014b84 <SUBGRF_SetRxBoosted>
}
 8013cfa:	e7ec      	b.n	8013cd6 <RadioRxBoosted+0x3e>
 8013cfc:	20003bd4 	.word	0x20003bd4
 8013d00:	48000400 	.word	0x48000400
 8013d04:	20003ba4 	.word	0x20003ba4

08013d08 <RadioStandby>:
{
 8013d08:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 8013d0a:	2000      	movs	r0, #0
 8013d0c:	f000 feae 	bl	8014a6c <SUBGRF_SetStandby>
}
 8013d10:	bd08      	pop	{r3, pc}

08013d12 <RadioRead>:
{
 8013d12:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 8013d14:	f000 fdc4 	bl	80148a0 <SUBGRF_ReadRegister>
}
 8013d18:	bd08      	pop	{r3, pc}

08013d1a <RadioGetStatus>:
{
 8013d1a:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 8013d1c:	f000 fda4 	bl	8014868 <SUBGRF_GetOperatingMode>
 8013d20:	2805      	cmp	r0, #5
 8013d22:	d007      	beq.n	8013d34 <RadioGetStatus+0x1a>
 8013d24:	2807      	cmp	r0, #7
 8013d26:	d007      	beq.n	8013d38 <RadioGetStatus+0x1e>
 8013d28:	2804      	cmp	r0, #4
 8013d2a:	d001      	beq.n	8013d30 <RadioGetStatus+0x16>
            return RF_IDLE;
 8013d2c:	2000      	movs	r0, #0
}
 8013d2e:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 8013d30:	2002      	movs	r0, #2
 8013d32:	e7fc      	b.n	8013d2e <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 8013d34:	2001      	movs	r0, #1
 8013d36:	e7fa      	b.n	8013d2e <RadioGetStatus+0x14>
            return RF_CAD;
 8013d38:	2003      	movs	r0, #3
 8013d3a:	e7f8      	b.n	8013d2e <RadioGetStatus+0x14>

08013d3c <RadioIrqProcess>:
{
 8013d3c:	b530      	push	{r4, r5, lr}
 8013d3e:	b083      	sub	sp, #12
    uint8_t size = 0;
 8013d40:	2300      	movs	r3, #0
 8013d42:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 8013d46:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 8013d48:	4ba5      	ldr	r3, [pc, #660]	@ (8013fe0 <RadioIrqProcess+0x2a4>)
 8013d4a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8013d4e:	2b20      	cmp	r3, #32
 8013d50:	d829      	bhi.n	8013da6 <RadioIrqProcess+0x6a>
 8013d52:	b21a      	sxth	r2, r3
 8013d54:	2a00      	cmp	r2, #0
 8013d56:	f000 8140 	beq.w	8013fda <RadioIrqProcess+0x29e>
 8013d5a:	3b01      	subs	r3, #1
 8013d5c:	2b1f      	cmp	r3, #31
 8013d5e:	f200 813c 	bhi.w	8013fda <RadioIrqProcess+0x29e>
 8013d62:	e8df f013 	tbh	[pc, r3, lsl #1]
 8013d66:	0063      	.short	0x0063
 8013d68:	013a007f 	.word	0x013a007f
 8013d6c:	013a00f7 	.word	0x013a00f7
 8013d70:	013a013a 	.word	0x013a013a
 8013d74:	013a0127 	.word	0x013a0127
 8013d78:	013a013a 	.word	0x013a013a
 8013d7c:	013a013a 	.word	0x013a013a
 8013d80:	013a013a 	.word	0x013a013a
 8013d84:	013a0134 	.word	0x013a0134
 8013d88:	013a013a 	.word	0x013a013a
 8013d8c:	013a013a 	.word	0x013a013a
 8013d90:	013a013a 	.word	0x013a013a
 8013d94:	013a013a 	.word	0x013a013a
 8013d98:	013a013a 	.word	0x013a013a
 8013d9c:	013a013a 	.word	0x013a013a
 8013da0:	013a013a 	.word	0x013a013a
 8013da4:	0155      	.short	0x0155
 8013da6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013daa:	f000 80b3 	beq.w	8013f14 <RadioIrqProcess+0x1d8>
 8013dae:	d928      	bls.n	8013e02 <RadioIrqProcess+0xc6>
 8013db0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013db4:	f040 8111 	bne.w	8013fda <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8013db8:	4b8a      	ldr	r3, [pc, #552]	@ (8013fe4 <RadioIrqProcess+0x2a8>)
 8013dba:	2201      	movs	r2, #1
 8013dbc:	2100      	movs	r1, #0
 8013dbe:	2002      	movs	r0, #2
 8013dc0:	f001 fcbc 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8013dc4:	f000 fd50 	bl	8014868 <SUBGRF_GetOperatingMode>
 8013dc8:	2804      	cmp	r0, #4
 8013dca:	f000 80b0 	beq.w	8013f2e <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8013dce:	f000 fd4b 	bl	8014868 <SUBGRF_GetOperatingMode>
 8013dd2:	2805      	cmp	r0, #5
 8013dd4:	f040 8101 	bne.w	8013fda <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 8013dd8:	4b83      	ldr	r3, [pc, #524]	@ (8013fe8 <RadioIrqProcess+0x2ac>)
 8013dda:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8013dde:	629a      	str	r2, [r3, #40]	@ 0x28
            TimerStop( &RxTimeoutTimer );
 8013de0:	4882      	ldr	r0, [pc, #520]	@ (8013fec <RadioIrqProcess+0x2b0>)
 8013de2:	f001 ff29 	bl	8015c38 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8013de6:	2000      	movs	r0, #0
 8013de8:	f000 fe40 	bl	8014a6c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8013dec:	4b80      	ldr	r3, [pc, #512]	@ (8013ff0 <RadioIrqProcess+0x2b4>)
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	f000 80f2 	beq.w	8013fda <RadioIrqProcess+0x29e>
 8013df6:	68db      	ldr	r3, [r3, #12]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	f000 80ee 	beq.w	8013fda <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 8013dfe:	4798      	blx	r3
 8013e00:	e0eb      	b.n	8013fda <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 8013e02:	2b40      	cmp	r3, #64	@ 0x40
 8013e04:	f000 811d 	beq.w	8014042 <RadioIrqProcess+0x306>
 8013e08:	2b80      	cmp	r3, #128	@ 0x80
 8013e0a:	f040 80e6 	bne.w	8013fda <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 8013e0e:	2000      	movs	r0, #0
 8013e10:	f000 fe2c 	bl	8014a6c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8013e14:	4b76      	ldr	r3, [pc, #472]	@ (8013ff0 <RadioIrqProcess+0x2b4>)
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	f000 80de 	beq.w	8013fda <RadioIrqProcess+0x29e>
 8013e1e:	699b      	ldr	r3, [r3, #24]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	f000 80da 	beq.w	8013fda <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 8013e26:	2000      	movs	r0, #0
 8013e28:	4798      	blx	r3
 8013e2a:	e0d6      	b.n	8013fda <RadioIrqProcess+0x29e>
 8013e2c:	4b6e      	ldr	r3, [pc, #440]	@ (8013fe8 <RadioIrqProcess+0x2ac>)
 8013e2e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8013e32:	629a      	str	r2, [r3, #40]	@ 0x28
        TimerStop( &TxTimeoutTimer );
 8013e34:	486f      	ldr	r0, [pc, #444]	@ (8013ff4 <RadioIrqProcess+0x2b8>)
 8013e36:	f001 feff 	bl	8015c38 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8013e3a:	2000      	movs	r0, #0
 8013e3c:	f000 fe16 	bl	8014a6c <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8013e40:	f001 fb97 	bl	8015572 <RFW_Is_LongPacketModeEnabled>
 8013e44:	2801      	cmp	r0, #1
 8013e46:	d00a      	beq.n	8013e5e <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8013e48:	4b69      	ldr	r3, [pc, #420]	@ (8013ff0 <RadioIrqProcess+0x2b4>)
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	f000 80c4 	beq.w	8013fda <RadioIrqProcess+0x29e>
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	f000 80c0 	beq.w	8013fda <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 8013e5a:	4798      	blx	r3
 8013e5c:	e0bd      	b.n	8013fda <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 8013e5e:	f001 fb91 	bl	8015584 <RFW_DeInit_TxLongPacket>
 8013e62:	e7f1      	b.n	8013e48 <RadioIrqProcess+0x10c>
 8013e64:	4b60      	ldr	r3, [pc, #384]	@ (8013fe8 <RadioIrqProcess+0x2ac>)
 8013e66:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8013e6a:	629a      	str	r2, [r3, #40]	@ 0x28
        TimerStop( &RxTimeoutTimer );
 8013e6c:	485f      	ldr	r0, [pc, #380]	@ (8013fec <RadioIrqProcess+0x2b0>)
 8013e6e:	f001 fee3 	bl	8015c38 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8013e72:	4b5b      	ldr	r3, [pc, #364]	@ (8013fe0 <RadioIrqProcess+0x2a4>)
 8013e74:	785b      	ldrb	r3, [r3, #1]
 8013e76:	b303      	cbz	r3, 8013eba <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8013e78:	22ff      	movs	r2, #255	@ 0xff
 8013e7a:	f10d 0107 	add.w	r1, sp, #7
 8013e7e:	485e      	ldr	r0, [pc, #376]	@ (8013ff8 <RadioIrqProcess+0x2bc>)
 8013e80:	f001 fa30 	bl	80152e4 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8013e84:	485d      	ldr	r0, [pc, #372]	@ (8013ffc <RadioIrqProcess+0x2c0>)
 8013e86:	f001 fa47 	bl	8015318 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8013e8a:	4b59      	ldr	r3, [pc, #356]	@ (8013ff0 <RadioIrqProcess+0x2b4>)
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	f000 80a3 	beq.w	8013fda <RadioIrqProcess+0x29e>
 8013e94:	689c      	ldr	r4, [r3, #8]
 8013e96:	2c00      	cmp	r4, #0
 8013e98:	f000 809f 	beq.w	8013fda <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 8013e9c:	4b50      	ldr	r3, [pc, #320]	@ (8013fe0 <RadioIrqProcess+0x2a4>)
 8013e9e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8013ea2:	2b01      	cmp	r3, #1
 8013ea4:	d11d      	bne.n	8013ee2 <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8013ea6:	4a4e      	ldr	r2, [pc, #312]	@ (8013fe0 <RadioIrqProcess+0x2a4>)
 8013ea8:	f992 3031 	ldrsb.w	r3, [r2, #49]	@ 0x31
 8013eac:	f992 2030 	ldrsb.w	r2, [r2, #48]	@ 0x30
 8013eb0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8013eb4:	4850      	ldr	r0, [pc, #320]	@ (8013ff8 <RadioIrqProcess+0x2bc>)
 8013eb6:	47a0      	blx	r4
                break;
 8013eb8:	e08f      	b.n	8013fda <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8013eba:	2000      	movs	r0, #0
 8013ebc:	f000 fdd6 	bl	8014a6c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8013ec0:	2100      	movs	r1, #0
 8013ec2:	f640 1002 	movw	r0, #2306	@ 0x902
 8013ec6:	f000 fcdb 	bl	8014880 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8013eca:	f640 1044 	movw	r0, #2372	@ 0x944
 8013ece:	f000 fce7 	bl	80148a0 <SUBGRF_ReadRegister>
 8013ed2:	f040 0102 	orr.w	r1, r0, #2
 8013ed6:	b2c9      	uxtb	r1, r1
 8013ed8:	f640 1044 	movw	r0, #2372	@ 0x944
 8013edc:	f000 fcd0 	bl	8014880 <SUBGRF_WriteRegister>
 8013ee0:	e7ca      	b.n	8013e78 <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8013ee2:	4c3f      	ldr	r4, [pc, #252]	@ (8013fe0 <RadioIrqProcess+0x2a4>)
 8013ee4:	4669      	mov	r1, sp
 8013ee6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8013ee8:	f001 faf6 	bl	80154d8 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8013eec:	4b40      	ldr	r3, [pc, #256]	@ (8013ff0 <RadioIrqProcess+0x2b4>)
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	689d      	ldr	r5, [r3, #8]
 8013ef2:	9b00      	ldr	r3, [sp, #0]
 8013ef4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8013ef8:	4a41      	ldr	r2, [pc, #260]	@ (8014000 <RadioIrqProcess+0x2c4>)
 8013efa:	fb82 1203 	smull	r1, r2, r2, r3
 8013efe:	17db      	asrs	r3, r3, #31
 8013f00:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8013f04:	b25b      	sxtb	r3, r3
 8013f06:	f994 2029 	ldrsb.w	r2, [r4, #41]	@ 0x29
 8013f0a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8013f0e:	483a      	ldr	r0, [pc, #232]	@ (8013ff8 <RadioIrqProcess+0x2bc>)
 8013f10:	47a8      	blx	r5
                break;
 8013f12:	e062      	b.n	8013fda <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 8013f14:	2000      	movs	r0, #0
 8013f16:	f000 fda9 	bl	8014a6c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8013f1a:	4b35      	ldr	r3, [pc, #212]	@ (8013ff0 <RadioIrqProcess+0x2b4>)
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d05b      	beq.n	8013fda <RadioIrqProcess+0x29e>
 8013f22:	699b      	ldr	r3, [r3, #24]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d058      	beq.n	8013fda <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 8013f28:	2001      	movs	r0, #1
 8013f2a:	4798      	blx	r3
 8013f2c:	e055      	b.n	8013fda <RadioIrqProcess+0x29e>
 8013f2e:	4b2e      	ldr	r3, [pc, #184]	@ (8013fe8 <RadioIrqProcess+0x2ac>)
 8013f30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8013f34:	629a      	str	r2, [r3, #40]	@ 0x28
            TimerStop( &TxTimeoutTimer );
 8013f36:	482f      	ldr	r0, [pc, #188]	@ (8013ff4 <RadioIrqProcess+0x2b8>)
 8013f38:	f001 fe7e 	bl	8015c38 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8013f3c:	2000      	movs	r0, #0
 8013f3e:	f000 fd95 	bl	8014a6c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8013f42:	4b2b      	ldr	r3, [pc, #172]	@ (8013ff0 <RadioIrqProcess+0x2b4>)
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d047      	beq.n	8013fda <RadioIrqProcess+0x29e>
 8013f4a:	685b      	ldr	r3, [r3, #4]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d044      	beq.n	8013fda <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 8013f50:	4798      	blx	r3
 8013f52:	e042      	b.n	8013fda <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8013f54:	4b2b      	ldr	r3, [pc, #172]	@ (8014004 <RadioIrqProcess+0x2c8>)
 8013f56:	2201      	movs	r2, #1
 8013f58:	2100      	movs	r1, #0
 8013f5a:	2002      	movs	r0, #2
 8013f5c:	f001 fbee 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8013f60:	4b1f      	ldr	r3, [pc, #124]	@ (8013fe0 <RadioIrqProcess+0x2a4>)
 8013f62:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8013f64:	b3c9      	cbz	r1, 8013fda <RadioIrqProcess+0x29e>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8013f66:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8013f6a:	f640 1003 	movw	r0, #2307	@ 0x903
 8013f6e:	f7ff fe4f 	bl	8013c10 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8013f72:	4c1b      	ldr	r4, [pc, #108]	@ (8013fe0 <RadioIrqProcess+0x2a4>)
 8013f74:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8013f78:	f640 1004 	movw	r0, #2308	@ 0x904
 8013f7c:	f7ff fe48 	bl	8013c10 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8013f80:	f894 1058 	ldrb.w	r1, [r4, #88]	@ 0x58
 8013f84:	f640 1005 	movw	r0, #2309	@ 0x905
 8013f88:	f7ff fe42 	bl	8013c10 <RadioWrite>
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8013f8c:	f640 1002 	movw	r0, #2306	@ 0x902
 8013f90:	f7ff febf 	bl	8013d12 <RadioRead>
 8013f94:	f040 0101 	orr.w	r1, r0, #1
 8013f98:	b2c9      	uxtb	r1, r1
 8013f9a:	f640 1002 	movw	r0, #2306	@ 0x902
 8013f9e:	f7ff fe37 	bl	8013c10 <RadioWrite>
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	65a2      	str	r2, [r4, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8013fa6:	4613      	mov	r3, r2
 8013fa8:	f240 2162 	movw	r1, #610	@ 0x262
 8013fac:	4608      	mov	r0, r1
 8013fae:	f000 ff0a 	bl	8014dc6 <SUBGRF_SetDioIrqParams>
 8013fb2:	e012      	b.n	8013fda <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8013fb4:	4b14      	ldr	r3, [pc, #80]	@ (8014008 <RadioIrqProcess+0x2cc>)
 8013fb6:	2201      	movs	r2, #1
 8013fb8:	2100      	movs	r1, #0
 8013fba:	2002      	movs	r0, #2
 8013fbc:	f001 fbbe 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8013fc0:	f001 fad5 	bl	801556e <RFW_Is_Init>
 8013fc4:	2801      	cmp	r0, #1
 8013fc6:	d108      	bne.n	8013fda <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 8013fc8:	f001 fadd 	bl	8015586 <RFW_ReceivePayload>
 8013fcc:	e005      	b.n	8013fda <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8013fce:	4b0f      	ldr	r3, [pc, #60]	@ (801400c <RadioIrqProcess+0x2d0>)
 8013fd0:	2201      	movs	r2, #1
 8013fd2:	2100      	movs	r1, #0
 8013fd4:	2002      	movs	r0, #2
 8013fd6:	f001 fbb1 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
}
 8013fda:	b003      	add	sp, #12
 8013fdc:	bd30      	pop	{r4, r5, pc}
 8013fde:	bf00      	nop
 8013fe0:	20003bd4 	.word	0x20003bd4
 8013fe4:	0801723c 	.word	0x0801723c
 8013fe8:	48000400 	.word	0x48000400
 8013fec:	20003ba4 	.word	0x20003ba4
 8013ff0:	20003c30 	.word	0x20003c30
 8013ff4:	20003bbc 	.word	0x20003bbc
 8013ff8:	20003c34 	.word	0x20003c34
 8013ffc:	20003bf8 	.word	0x20003bf8
 8014000:	10624dd3 	.word	0x10624dd3
 8014004:	08017250 	.word	0x08017250
 8014008:	0801725c 	.word	0x0801725c
 801400c:	08017268 	.word	0x08017268
        TimerStop( &RxTimeoutTimer );
 8014010:	4817      	ldr	r0, [pc, #92]	@ (8014070 <RadioIrqProcess+0x334>)
 8014012:	f001 fe11 	bl	8015c38 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8014016:	4b17      	ldr	r3, [pc, #92]	@ (8014074 <RadioIrqProcess+0x338>)
 8014018:	785b      	ldrb	r3, [r3, #1]
 801401a:	b173      	cbz	r3, 801403a <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801401c:	4b16      	ldr	r3, [pc, #88]	@ (8014078 <RadioIrqProcess+0x33c>)
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	2b00      	cmp	r3, #0
 8014022:	d0da      	beq.n	8013fda <RadioIrqProcess+0x29e>
 8014024:	68db      	ldr	r3, [r3, #12]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d0d7      	beq.n	8013fda <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 801402a:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801402c:	4b13      	ldr	r3, [pc, #76]	@ (801407c <RadioIrqProcess+0x340>)
 801402e:	2201      	movs	r2, #1
 8014030:	2100      	movs	r1, #0
 8014032:	2002      	movs	r0, #2
 8014034:	f001 fb82 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
 8014038:	e7cf      	b.n	8013fda <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 801403a:	2000      	movs	r0, #0
 801403c:	f000 fd16 	bl	8014a6c <SUBGRF_SetStandby>
 8014040:	e7ec      	b.n	801401c <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8014042:	4b0f      	ldr	r3, [pc, #60]	@ (8014080 <RadioIrqProcess+0x344>)
 8014044:	2201      	movs	r2, #1
 8014046:	2100      	movs	r1, #0
 8014048:	2002      	movs	r0, #2
 801404a:	f001 fb77 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801404e:	4b09      	ldr	r3, [pc, #36]	@ (8014074 <RadioIrqProcess+0x338>)
 8014050:	785b      	ldrb	r3, [r3, #1]
 8014052:	b143      	cbz	r3, 8014066 <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8014054:	4b08      	ldr	r3, [pc, #32]	@ (8014078 <RadioIrqProcess+0x33c>)
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d0be      	beq.n	8013fda <RadioIrqProcess+0x29e>
 801405c:	691b      	ldr	r3, [r3, #16]
 801405e:	2b00      	cmp	r3, #0
 8014060:	d0bb      	beq.n	8013fda <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 8014062:	4798      	blx	r3
}
 8014064:	e7b9      	b.n	8013fda <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8014066:	2000      	movs	r0, #0
 8014068:	f000 fd00 	bl	8014a6c <SUBGRF_SetStandby>
 801406c:	e7f2      	b.n	8014054 <RadioIrqProcess+0x318>
 801406e:	bf00      	nop
 8014070:	20003ba4 	.word	0x20003ba4
 8014074:	20003bd4 	.word	0x20003bd4
 8014078:	20003c30 	.word	0x20003c30
 801407c:	08017274 	.word	0x08017274
 8014080:	08017280 	.word	0x08017280

08014084 <RadioOnDioIrq>:
{
 8014084:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 8014086:	4b03      	ldr	r3, [pc, #12]	@ (8014094 <RadioOnDioIrq+0x10>)
 8014088:	f8a3 0054 	strh.w	r0, [r3, #84]	@ 0x54
    RADIO_IRQ_PROCESS();
 801408c:	f7ff fe56 	bl	8013d3c <RadioIrqProcess>
}
 8014090:	bd08      	pop	{r3, pc}
 8014092:	bf00      	nop
 8014094:	20003bd4 	.word	0x20003bd4

08014098 <RadioGetWakeupTime>:
{
 8014098:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801409a:	f001 f9a4 	bl	80153e6 <SUBGRF_GetRadioWakeUpTime>
}
 801409e:	3003      	adds	r0, #3
 80140a0:	bd08      	pop	{r3, pc}
	...

080140a4 <RadioSetMaxPayloadLength>:
{
 80140a4:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 80140a6:	2801      	cmp	r0, #1
 80140a8:	d004      	beq.n	80140b4 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80140aa:	4b0a      	ldr	r3, [pc, #40]	@ (80140d4 <RadioSetMaxPayloadLength+0x30>)
 80140ac:	7d5b      	ldrb	r3, [r3, #21]
 80140ae:	2b01      	cmp	r3, #1
 80140b0:	d008      	beq.n	80140c4 <RadioSetMaxPayloadLength+0x20>
}
 80140b2:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 80140b4:	4b08      	ldr	r3, [pc, #32]	@ (80140d8 <RadioSetMaxPayloadLength+0x34>)
 80140b6:	7019      	strb	r1, [r3, #0]
 80140b8:	4806      	ldr	r0, [pc, #24]	@ (80140d4 <RadioSetMaxPayloadLength+0x30>)
 80140ba:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80140bc:	300e      	adds	r0, #14
 80140be:	f001 f851 	bl	8015164 <SUBGRF_SetPacketParams>
 80140c2:	e7f6      	b.n	80140b2 <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80140c4:	4b04      	ldr	r3, [pc, #16]	@ (80140d8 <RadioSetMaxPayloadLength+0x34>)
 80140c6:	7019      	strb	r1, [r3, #0]
 80140c8:	4802      	ldr	r0, [pc, #8]	@ (80140d4 <RadioSetMaxPayloadLength+0x30>)
 80140ca:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80140cc:	300e      	adds	r0, #14
 80140ce:	f001 f849 	bl	8015164 <SUBGRF_SetPacketParams>
}
 80140d2:	e7ee      	b.n	80140b2 <RadioSetMaxPayloadLength+0xe>
 80140d4:	20003bd4 	.word	0x20003bd4
 80140d8:	20000110 	.word	0x20000110

080140dc <RadioReadRegisters>:
{
 80140dc:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 80140de:	f000 fc5d 	bl	801499c <SUBGRF_ReadRegisters>
}
 80140e2:	bd08      	pop	{r3, pc}

080140e4 <RadioWriteRegisters>:
{
 80140e4:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 80140e6:	f000 fc17 	bl	8014918 <SUBGRF_WriteRegisters>
}
 80140ea:	bd08      	pop	{r3, pc}

080140ec <RadioRssi>:
{
 80140ec:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 80140ee:	f001 f8c9 	bl	8015284 <SUBGRF_GetRssiInst>
}
 80140f2:	bd08      	pop	{r3, pc}

080140f4 <RadioSetTxContinuousWave>:
{
 80140f4:	b538      	push	{r3, r4, r5, lr}
 80140f6:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 80140f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80140fc:	fb03 f402 	mul.w	r4, r3, r2
    SUBGRF_SetRfFrequency( freq );
 8014100:	f000 fed4 	bl	8014eac <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 8014104:	4628      	mov	r0, r5
 8014106:	f001 f957 	bl	80153b8 <SUBGRF_SetRfTxPower>
 801410a:	4605      	mov	r5, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801410c:	210e      	movs	r1, #14
 801410e:	f640 101f 	movw	r0, #2335	@ 0x91f
 8014112:	f000 fbb5 	bl	8014880 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8014116:	2101      	movs	r1, #1
 8014118:	4628      	mov	r0, r5
 801411a:	f001 f939 	bl	8015390 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801411e:	f000 fd7f 	bl	8014c20 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8014122:	4d04      	ldr	r5, [pc, #16]	@ (8014134 <RadioSetTxContinuousWave+0x40>)
 8014124:	4621      	mov	r1, r4
 8014126:	4628      	mov	r0, r5
 8014128:	f001 fe26 	bl	8015d78 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801412c:	4628      	mov	r0, r5
 801412e:	f001 fddd 	bl	8015cec <UTIL_TIMER_Start>
}
 8014132:	bd38      	pop	{r3, r4, r5, pc}
 8014134:	20003bbc 	.word	0x20003bbc

08014138 <RadioSetChannel>:
{
 8014138:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 801413a:	f000 feb7 	bl	8014eac <SUBGRF_SetRfFrequency>
}
 801413e:	bd08      	pop	{r3, pc}

08014140 <RadioStartCad>:
{
 8014140:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8014142:	2100      	movs	r1, #0
 8014144:	4b07      	ldr	r3, [pc, #28]	@ (8014164 <RadioStartCad+0x24>)
 8014146:	f893 0056 	ldrb.w	r0, [r3, #86]	@ 0x56
 801414a:	f001 f921 	bl	8015390 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801414e:	2300      	movs	r3, #0
 8014150:	461a      	mov	r2, r3
 8014152:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8014156:	4608      	mov	r0, r1
 8014158:	f000 fe35 	bl	8014dc6 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 801415c:	f000 fd54 	bl	8014c08 <SUBGRF_SetCad>
}
 8014160:	bd08      	pop	{r3, pc}
 8014162:	bf00      	nop
 8014164:	20003bd4 	.word	0x20003bd4

08014168 <RadioRx>:
{
 8014168:	b538      	push	{r3, r4, r5, lr}
 801416a:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 801416c:	f001 f9ff 	bl	801556e <RFW_Is_Init>
 8014170:	2801      	cmp	r0, #1
 8014172:	d019      	beq.n	80141a8 <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8014174:	2300      	movs	r3, #0
 8014176:	461a      	mov	r2, r3
 8014178:	f240 2162 	movw	r1, #610	@ 0x262
 801417c:	4608      	mov	r0, r1
 801417e:	f000 fe22 	bl	8014dc6 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8014182:	b9a4      	cbnz	r4, 80141ae <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8014184:	4c11      	ldr	r4, [pc, #68]	@ (80141cc <RadioRx+0x64>)
 8014186:	2100      	movs	r1, #0
 8014188:	65a1      	str	r1, [r4, #88]	@ 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 801418a:	4b11      	ldr	r3, [pc, #68]	@ (80141d0 <RadioRx+0x68>)
 801418c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8014190:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8014192:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 8014196:	f001 f8fb 	bl	8015390 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 801419a:	7863      	ldrb	r3, [r4, #1]
 801419c:	b183      	cbz	r3, 80141c0 <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801419e:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80141a2:	f000 fc9f 	bl	8014ae4 <SUBGRF_SetRx>
}
 80141a6:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 80141a8:	f001 f9e9 	bl	801557e <RFW_ReceiveInit>
 80141ac:	e7e9      	b.n	8014182 <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 80141ae:	4d09      	ldr	r5, [pc, #36]	@ (80141d4 <RadioRx+0x6c>)
 80141b0:	4621      	mov	r1, r4
 80141b2:	4628      	mov	r0, r5
 80141b4:	f001 fde0 	bl	8015d78 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80141b8:	4628      	mov	r0, r5
 80141ba:	f001 fd97 	bl	8015cec <UTIL_TIMER_Start>
 80141be:	e7e1      	b.n	8014184 <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 80141c0:	4b02      	ldr	r3, [pc, #8]	@ (80141cc <RadioRx+0x64>)
 80141c2:	6898      	ldr	r0, [r3, #8]
 80141c4:	0180      	lsls	r0, r0, #6
 80141c6:	f000 fc8d 	bl	8014ae4 <SUBGRF_SetRx>
}
 80141ca:	e7ec      	b.n	80141a6 <RadioRx+0x3e>
 80141cc:	20003bd4 	.word	0x20003bd4
 80141d0:	48000400 	.word	0x48000400
 80141d4:	20003ba4 	.word	0x20003ba4

080141d8 <RadioSleep>:
{
 80141d8:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 80141da:	f04f 0004 	mov.w	r0, #4
 80141de:	f000 fc25 	bl	8014a2c <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 80141e2:	2002      	movs	r0, #2
 80141e4:	f7ed fd26 	bl	8001c34 <HAL_Delay>
}
 80141e8:	bd08      	pop	{r3, pc}
	...

080141ec <RadioSend>:
{
 80141ec:	b570      	push	{r4, r5, r6, lr}
 80141ee:	b082      	sub	sp, #8
 80141f0:	4605      	mov	r5, r0
 80141f2:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80141f4:	2300      	movs	r3, #0
 80141f6:	461a      	mov	r2, r3
 80141f8:	f240 2101 	movw	r1, #513	@ 0x201
 80141fc:	4608      	mov	r0, r1
 80141fe:	f000 fde2 	bl	8014dc6 <SUBGRF_SetDioIrqParams>
 8014202:	4b3f      	ldr	r3, [pc, #252]	@ (8014300 <RadioSend+0x114>)
 8014204:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8014208:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801420a:	4e3e      	ldr	r6, [pc, #248]	@ (8014304 <RadioSend+0x118>)
 801420c:	2101      	movs	r1, #1
 801420e:	f896 0056 	ldrb.w	r0, [r6, #86]	@ 0x56
 8014212:	f001 f8bd 	bl	8015390 <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8014216:	7833      	ldrb	r3, [r6, #0]
 8014218:	2b01      	cmp	r3, #1
 801421a:	d103      	bne.n	8014224 <RadioSend+0x38>
 801421c:	f896 3051 	ldrb.w	r3, [r6, #81]	@ 0x51
 8014220:	2b06      	cmp	r3, #6
 8014222:	d012      	beq.n	801424a <RadioSend+0x5e>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8014224:	f640 0089 	movw	r0, #2185	@ 0x889
 8014228:	f000 fb3a 	bl	80148a0 <SUBGRF_ReadRegister>
 801422c:	f040 0104 	orr.w	r1, r0, #4
 8014230:	b2c9      	uxtb	r1, r1
 8014232:	f640 0089 	movw	r0, #2185	@ 0x889
 8014236:	f000 fb23 	bl	8014880 <SUBGRF_WriteRegister>
        switch( SubgRf.Modem )
 801423a:	4b32      	ldr	r3, [pc, #200]	@ (8014304 <RadioSend+0x118>)
 801423c:	781b      	ldrb	r3, [r3, #0]
 801423e:	2b03      	cmp	r3, #3
 8014240:	d818      	bhi.n	8014274 <RadioSend+0x88>
 8014242:	e8df f003 	tbb	[pc, r3]
 8014246:	0d23      	.short	0x0d23
 8014248:	4f23      	.short	0x4f23
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801424a:	f640 0089 	movw	r0, #2185	@ 0x889
 801424e:	f000 fb27 	bl	80148a0 <SUBGRF_ReadRegister>
 8014252:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 8014256:	f640 0089 	movw	r0, #2185	@ 0x889
 801425a:	f000 fb11 	bl	8014880 <SUBGRF_WriteRegister>
 801425e:	e7ec      	b.n	801423a <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8014260:	4828      	ldr	r0, [pc, #160]	@ (8014304 <RadioSend+0x118>)
 8014262:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8014264:	300e      	adds	r0, #14
 8014266:	f000 ff7d 	bl	8015164 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801426a:	2200      	movs	r2, #0
 801426c:	4621      	mov	r1, r4
 801426e:	4628      	mov	r0, r5
 8014270:	f000 fc30 	bl	8014ad4 <SUBGRF_SendPayload>
        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8014274:	4c24      	ldr	r4, [pc, #144]	@ (8014308 <RadioSend+0x11c>)
 8014276:	4b23      	ldr	r3, [pc, #140]	@ (8014304 <RadioSend+0x118>)
 8014278:	6859      	ldr	r1, [r3, #4]
 801427a:	4620      	mov	r0, r4
 801427c:	f001 fd7c 	bl	8015d78 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8014280:	4620      	mov	r0, r4
 8014282:	f001 fd33 	bl	8015cec <UTIL_TIMER_Start>
    return RADIO_STATUS_OK;
 8014286:	2000      	movs	r0, #0
}
 8014288:	b002      	add	sp, #8
 801428a:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 801428c:	f001 f96f 	bl	801556e <RFW_Is_Init>
 8014290:	2801      	cmp	r0, #1
 8014292:	d00a      	beq.n	80142aa <RadioSend+0xbe>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8014294:	481b      	ldr	r0, [pc, #108]	@ (8014304 <RadioSend+0x118>)
 8014296:	7584      	strb	r4, [r0, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8014298:	300e      	adds	r0, #14
 801429a:	f000 ff63 	bl	8015164 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 801429e:	2200      	movs	r2, #0
 80142a0:	4621      	mov	r1, r4
 80142a2:	4628      	mov	r0, r5
 80142a4:	f000 fc16 	bl	8014ad4 <SUBGRF_SendPayload>
 80142a8:	e7e4      	b.n	8014274 <RadioSend+0x88>
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 80142aa:	f10d 0207 	add.w	r2, sp, #7
 80142ae:	4621      	mov	r1, r4
 80142b0:	4628      	mov	r0, r5
 80142b2:	f001 f961 	bl	8015578 <RFW_TransmitInit>
 80142b6:	b968      	cbnz	r0, 80142d4 <RadioSend+0xe8>
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80142b8:	4812      	ldr	r0, [pc, #72]	@ (8014304 <RadioSend+0x118>)
 80142ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80142be:	7583      	strb	r3, [r0, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80142c0:	300e      	adds	r0, #14
 80142c2:	f000 ff4f 	bl	8015164 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 80142c6:	2200      	movs	r2, #0
 80142c8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80142cc:	4628      	mov	r0, r5
 80142ce:	f000 fc01 	bl	8014ad4 <SUBGRF_SendPayload>
 80142d2:	e7cf      	b.n	8014274 <RadioSend+0x88>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 80142d4:	4b0d      	ldr	r3, [pc, #52]	@ (801430c <RadioSend+0x120>)
 80142d6:	2201      	movs	r2, #1
 80142d8:	2100      	movs	r1, #0
 80142da:	2002      	movs	r0, #2
 80142dc:	f001 fa2e 	bl	801573c <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 80142e0:	2003      	movs	r0, #3
 80142e2:	e7d1      	b.n	8014288 <RadioSend+0x9c>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80142e4:	4807      	ldr	r0, [pc, #28]	@ (8014304 <RadioSend+0x118>)
 80142e6:	2302      	movs	r3, #2
 80142e8:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80142ea:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80142ec:	300e      	adds	r0, #14
 80142ee:	f000 ff39 	bl	8015164 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80142f2:	2200      	movs	r2, #0
 80142f4:	4621      	mov	r1, r4
 80142f6:	4628      	mov	r0, r5
 80142f8:	f000 fbec 	bl	8014ad4 <SUBGRF_SendPayload>
            break;
 80142fc:	e7ba      	b.n	8014274 <RadioSend+0x88>
 80142fe:	bf00      	nop
 8014300:	48000400 	.word	0x48000400
 8014304:	20003bd4 	.word	0x20003bd4
 8014308:	20003bbc 	.word	0x20003bbc
 801430c:	08017290 	.word	0x08017290

08014310 <RadioRandom>:
{
 8014310:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8014312:	2300      	movs	r3, #0
 8014314:	461a      	mov	r2, r3
 8014316:	4619      	mov	r1, r3
 8014318:	4618      	mov	r0, r3
 801431a:	f000 fd54 	bl	8014dc6 <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 801431e:	f000 fbfb 	bl	8014b18 <SUBGRF_GetRandom>
}
 8014322:	bd08      	pop	{r3, pc}

08014324 <RadioSetModem>:
{
 8014324:	b510      	push	{r4, lr}
 8014326:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 8014328:	4b14      	ldr	r3, [pc, #80]	@ (801437c <RadioSetModem+0x58>)
 801432a:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 801432c:	f001 f92c 	bl	8015588 <RFW_SetRadioModem>
    switch( modem )
 8014330:	2c01      	cmp	r4, #1
 8014332:	d010      	beq.n	8014356 <RadioSetModem+0x32>
 8014334:	2c03      	cmp	r4, #3
 8014336:	d01a      	beq.n	801436e <RadioSetModem+0x4a>
 8014338:	b134      	cbz	r4, 8014348 <RadioSetModem+0x24>
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 801433a:	2003      	movs	r0, #3
 801433c:	f000 fde2 	bl	8014f04 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8014340:	4b0e      	ldr	r3, [pc, #56]	@ (801437c <RadioSetModem+0x58>)
 8014342:	2200      	movs	r2, #0
 8014344:	735a      	strb	r2, [r3, #13]
}
 8014346:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8014348:	2000      	movs	r0, #0
 801434a:	f000 fddb 	bl	8014f04 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 801434e:	4b0b      	ldr	r3, [pc, #44]	@ (801437c <RadioSetModem+0x58>)
 8014350:	2200      	movs	r2, #0
 8014352:	735a      	strb	r2, [r3, #13]
        break;
 8014354:	e7f7      	b.n	8014346 <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8014356:	2001      	movs	r0, #1
 8014358:	f000 fdd4 	bl	8014f04 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 801435c:	4b07      	ldr	r3, [pc, #28]	@ (801437c <RadioSetModem+0x58>)
 801435e:	7b5a      	ldrb	r2, [r3, #13]
 8014360:	7b18      	ldrb	r0, [r3, #12]
 8014362:	4282      	cmp	r2, r0
 8014364:	d0ef      	beq.n	8014346 <RadioSetModem+0x22>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8014366:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8014368:	f000 f80a 	bl	8014380 <RadioSetPublicNetwork>
 801436c:	e7eb      	b.n	8014346 <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801436e:	2002      	movs	r0, #2
 8014370:	f000 fdc8 	bl	8014f04 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8014374:	4b01      	ldr	r3, [pc, #4]	@ (801437c <RadioSetModem+0x58>)
 8014376:	2200      	movs	r2, #0
 8014378:	735a      	strb	r2, [r3, #13]
}
 801437a:	e7e4      	b.n	8014346 <RadioSetModem+0x22>
 801437c:	20003bd4 	.word	0x20003bd4

08014380 <RadioSetPublicNetwork>:
{
 8014380:	b510      	push	{r4, lr}
 8014382:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8014384:	4b0e      	ldr	r3, [pc, #56]	@ (80143c0 <RadioSetPublicNetwork+0x40>)
 8014386:	7318      	strb	r0, [r3, #12]
 8014388:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 801438a:	2001      	movs	r0, #1
 801438c:	f7ff ffca 	bl	8014324 <RadioSetModem>
    if( enable == true )
 8014390:	b154      	cbz	r4, 80143a8 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8014392:	2134      	movs	r1, #52	@ 0x34
 8014394:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8014398:	f000 fa72 	bl	8014880 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801439c:	2144      	movs	r1, #68	@ 0x44
 801439e:	f240 7041 	movw	r0, #1857	@ 0x741
 80143a2:	f000 fa6d 	bl	8014880 <SUBGRF_WriteRegister>
}
 80143a6:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80143a8:	2114      	movs	r1, #20
 80143aa:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 80143ae:	f000 fa67 	bl	8014880 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80143b2:	2124      	movs	r1, #36	@ 0x24
 80143b4:	f240 7041 	movw	r0, #1857	@ 0x741
 80143b8:	f000 fa62 	bl	8014880 <SUBGRF_WriteRegister>
}
 80143bc:	e7f3      	b.n	80143a6 <RadioSetPublicNetwork+0x26>
 80143be:	bf00      	nop
 80143c0:	20003bd4 	.word	0x20003bd4

080143c4 <RadioSetTxConfig>:
{
 80143c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143c8:	b083      	sub	sp, #12
 80143ca:	4604      	mov	r4, r0
 80143cc:	460e      	mov	r6, r1
 80143ce:	4617      	mov	r7, r2
 80143d0:	461d      	mov	r5, r3
 80143d2:	f8bd 8038 	ldrh.w	r8, [sp, #56]	@ 0x38
 80143d6:	f89d 903c 	ldrb.w	r9, [sp, #60]	@ 0x3c
 80143da:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
    RFW_DeInit();
 80143de:	f001 f8c5 	bl	801556c <RFW_DeInit>
    switch( modem )
 80143e2:	b1ac      	cbz	r4, 8014410 <RadioSetTxConfig+0x4c>
 80143e4:	2c01      	cmp	r4, #1
 80143e6:	d05a      	beq.n	801449e <RadioSetTxConfig+0xda>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80143e8:	4630      	mov	r0, r6
 80143ea:	f000 ffe5 	bl	80153b8 <SUBGRF_SetRfTxPower>
 80143ee:	4c55      	ldr	r4, [pc, #340]	@ (8014544 <RadioSetTxConfig+0x180>)
 80143f0:	f884 0056 	strb.w	r0, [r4, #86]	@ 0x56
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80143f4:	210e      	movs	r1, #14
 80143f6:	f640 101f 	movw	r0, #2335	@ 0x91f
 80143fa:	f000 fa41 	bl	8014880 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80143fe:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 8014402:	f001 f8b8 	bl	8015576 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8014406:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8014408:	6063      	str	r3, [r4, #4]
}
 801440a:	b003      	add	sp, #12
 801440c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8014410:	4c4c      	ldr	r4, [pc, #304]	@ (8014544 <RadioSetTxConfig+0x180>)
 8014412:	f04f 0b00 	mov.w	fp, #0
 8014416:	f884 b038 	strb.w	fp, [r4, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801441a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801441c:	63e3      	str	r3, [r4, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801441e:	230b      	movs	r3, #11
 8014420:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8014424:	4628      	mov	r0, r5
 8014426:	f001 f83f 	bl	80154a8 <SUBGRF_GetFskBandwidthRegValue>
 801442a:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801442e:	6427      	str	r7, [r4, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8014430:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8014434:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8014438:	f8a4 8010 	strh.w	r8, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801443c:	2304      	movs	r3, #4
 801443e:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8014440:	2318      	movs	r3, #24
 8014442:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8014444:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8014448:	f089 0901 	eor.w	r9, r9, #1
 801444c:	f884 9015 	strb.w	r9, [r4, #21]
            if( crcOn == true )
 8014450:	f1ba 0f00 	cmp.w	sl, #0
 8014454:	d01f      	beq.n	8014496 <RadioSetTxConfig+0xd2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8014456:	22f2      	movs	r2, #242	@ 0xf2
 8014458:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801445a:	4c3a      	ldr	r4, [pc, #232]	@ (8014544 <RadioSetTxConfig+0x180>)
 801445c:	2301      	movs	r3, #1
 801445e:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8014460:	f7ff fc52 	bl	8013d08 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8014464:	2000      	movs	r0, #0
 8014466:	f7ff ff5d 	bl	8014324 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801446a:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 801446e:	f000 fdf1 	bl	8015054 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8014472:	f104 000e 	add.w	r0, r4, #14
 8014476:	f000 fe75 	bl	8015164 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801447a:	4a33      	ldr	r2, [pc, #204]	@ (8014548 <RadioSetTxConfig+0x184>)
 801447c:	466b      	mov	r3, sp
 801447e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014482:	e883 0003 	stmia.w	r3, {r0, r1}
 8014486:	4618      	mov	r0, r3
 8014488:	f000 fa56 	bl	8014938 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801448c:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8014490:	f000 fa29 	bl	80148e6 <SUBGRF_SetWhiteningSeed>
            break;
 8014494:	e7a8      	b.n	80143e8 <RadioSetTxConfig+0x24>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8014496:	4b2b      	ldr	r3, [pc, #172]	@ (8014544 <RadioSetTxConfig+0x180>)
 8014498:	2201      	movs	r2, #1
 801449a:	75da      	strb	r2, [r3, #23]
 801449c:	e7dd      	b.n	801445a <RadioSetTxConfig+0x96>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801449e:	4a29      	ldr	r2, [pc, #164]	@ (8014544 <RadioSetTxConfig+0x180>)
 80144a0:	2301      	movs	r3, #1
 80144a2:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80144a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80144a8:	b2db      	uxtb	r3, r3
 80144aa:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80144ae:	4927      	ldr	r1, [pc, #156]	@ (801454c <RadioSetTxConfig+0x188>)
 80144b0:	5d49      	ldrb	r1, [r1, r5]
 80144b2:	f882 1051 	strb.w	r1, [r2, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80144b6:	f89d 1034 	ldrb.w	r1, [sp, #52]	@ 0x34
 80144ba:	f882 1052 	strb.w	r1, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80144be:	b91d      	cbnz	r5, 80144c8 <RadioSetTxConfig+0x104>
 80144c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80144c2:	3a0b      	subs	r2, #11
 80144c4:	2a01      	cmp	r2, #1
 80144c6:	d92c      	bls.n	8014522 <RadioSetTxConfig+0x15e>
 80144c8:	2d01      	cmp	r5, #1
 80144ca:	d027      	beq.n	801451c <RadioSetTxConfig+0x158>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80144cc:	4a1d      	ldr	r2, [pc, #116]	@ (8014544 <RadioSetTxConfig+0x180>)
 80144ce:	2100      	movs	r1, #0
 80144d0:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80144d4:	4a1b      	ldr	r2, [pc, #108]	@ (8014544 <RadioSetTxConfig+0x180>)
 80144d6:	2101      	movs	r1, #1
 80144d8:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80144da:	3b05      	subs	r3, #5
 80144dc:	b2db      	uxtb	r3, r3
 80144de:	428b      	cmp	r3, r1
 80144e0:	d924      	bls.n	801452c <RadioSetTxConfig+0x168>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80144e2:	4b18      	ldr	r3, [pc, #96]	@ (8014544 <RadioSetTxConfig+0x180>)
 80144e4:	f8a3 801c 	strh.w	r8, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80144e8:	4c16      	ldr	r4, [pc, #88]	@ (8014544 <RadioSetTxConfig+0x180>)
 80144ea:	f884 901e 	strb.w	r9, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80144ee:	4b18      	ldr	r3, [pc, #96]	@ (8014550 <RadioSetTxConfig+0x18c>)
 80144f0:	781b      	ldrb	r3, [r3, #0]
 80144f2:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80144f4:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80144f8:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 80144fc:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
            RadioStandby( );
 8014500:	f7ff fc02 	bl	8013d08 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8014504:	2001      	movs	r0, #1
 8014506:	f7ff ff0d 	bl	8014324 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801450a:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 801450e:	f000 fda1 	bl	8015054 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8014512:	f104 000e 	add.w	r0, r4, #14
 8014516:	f000 fe25 	bl	8015164 <SUBGRF_SetPacketParams>
            break;
 801451a:	e765      	b.n	80143e8 <RadioSetTxConfig+0x24>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801451c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801451e:	2a0c      	cmp	r2, #12
 8014520:	d1d4      	bne.n	80144cc <RadioSetTxConfig+0x108>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8014522:	4a08      	ldr	r2, [pc, #32]	@ (8014544 <RadioSetTxConfig+0x180>)
 8014524:	2101      	movs	r1, #1
 8014526:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
 801452a:	e7d3      	b.n	80144d4 <RadioSetTxConfig+0x110>
                if( preambleLen < 12 )
 801452c:	f1b8 0f0b 	cmp.w	r8, #11
 8014530:	d803      	bhi.n	801453a <RadioSetTxConfig+0x176>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8014532:	4613      	mov	r3, r2
 8014534:	220c      	movs	r2, #12
 8014536:	839a      	strh	r2, [r3, #28]
 8014538:	e7d6      	b.n	80144e8 <RadioSetTxConfig+0x124>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801453a:	4b02      	ldr	r3, [pc, #8]	@ (8014544 <RadioSetTxConfig+0x180>)
 801453c:	f8a3 801c 	strh.w	r8, [r3, #28]
 8014540:	e7d2      	b.n	80144e8 <RadioSetTxConfig+0x124>
 8014542:	bf00      	nop
 8014544:	20003bd4 	.word	0x20003bd4
 8014548:	080162a4 	.word	0x080162a4
 801454c:	080172a8 	.word	0x080172a8
 8014550:	20000110 	.word	0x20000110

08014554 <RadioSetRxConfig>:
{
 8014554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014558:	b085      	sub	sp, #20
 801455a:	4604      	mov	r4, r0
 801455c:	460d      	mov	r5, r1
 801455e:	4616      	mov	r6, r2
 8014560:	9301      	str	r3, [sp, #4]
 8014562:	f8bd 903c 	ldrh.w	r9, [sp, #60]	@ 0x3c
 8014566:	f8bd a040 	ldrh.w	sl, [sp, #64]	@ 0x40
 801456a:	f89d 7044 	ldrb.w	r7, [sp, #68]	@ 0x44
 801456e:	f89d b04c 	ldrb.w	fp, [sp, #76]	@ 0x4c
 8014572:	f89d 805c 	ldrb.w	r8, [sp, #92]	@ 0x5c
    SubgRf.RxContinuous = rxContinuous;
 8014576:	4b73      	ldr	r3, [pc, #460]	@ (8014744 <RadioSetRxConfig+0x1f0>)
 8014578:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit();
 801457c:	f000 fff6 	bl	801556c <RFW_DeInit>
    if( rxContinuous == true )
 8014580:	f1b8 0f00 	cmp.w	r8, #0
 8014584:	d001      	beq.n	801458a <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 8014586:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 801458a:	b14f      	cbz	r7, 80145a0 <RadioSetRxConfig+0x4c>
        MaxPayloadLength = payloadLen;
 801458c:	f89d 2048 	ldrb.w	r2, [sp, #72]	@ 0x48
 8014590:	4b6d      	ldr	r3, [pc, #436]	@ (8014748 <RadioSetRxConfig+0x1f4>)
 8014592:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8014594:	b144      	cbz	r4, 80145a8 <RadioSetRxConfig+0x54>
 8014596:	2c01      	cmp	r4, #1
 8014598:	d057      	beq.n	801464a <RadioSetRxConfig+0xf6>
}
 801459a:	b005      	add	sp, #20
 801459c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 80145a0:	4b69      	ldr	r3, [pc, #420]	@ (8014748 <RadioSetRxConfig+0x1f4>)
 80145a2:	22ff      	movs	r2, #255	@ 0xff
 80145a4:	701a      	strb	r2, [r3, #0]
 80145a6:	e7f5      	b.n	8014594 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80145a8:	2000      	movs	r0, #0
 80145aa:	f000 fb47 	bl	8014c3c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80145ae:	4c65      	ldr	r4, [pc, #404]	@ (8014744 <RadioSetRxConfig+0x1f0>)
 80145b0:	f04f 0800 	mov.w	r8, #0
 80145b4:	f884 8038 	strb.w	r8, [r4, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80145b8:	63e6      	str	r6, [r4, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80145ba:	230b      	movs	r3, #11
 80145bc:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80145c0:	4628      	mov	r0, r5
 80145c2:	f000 ff71 	bl	80154a8 <SUBGRF_GetFskBandwidthRegValue>
 80145c6:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80145ca:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80145ce:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80145d2:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80145d6:	2304      	movs	r3, #4
 80145d8:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80145da:	2318      	movs	r3, #24
 80145dc:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80145de:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80145e2:	f087 0701 	eor.w	r7, r7, #1
 80145e6:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80145e8:	4b57      	ldr	r3, [pc, #348]	@ (8014748 <RadioSetRxConfig+0x1f4>)
 80145ea:	781b      	ldrb	r3, [r3, #0]
 80145ec:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 80145ee:	f1bb 0f00 	cmp.w	fp, #0
 80145f2:	d026      	beq.n	8014642 <RadioSetRxConfig+0xee>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80145f4:	22f2      	movs	r2, #242	@ 0xf2
 80145f6:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80145f8:	4c52      	ldr	r4, [pc, #328]	@ (8014744 <RadioSetRxConfig+0x1f0>)
 80145fa:	2301      	movs	r3, #1
 80145fc:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 80145fe:	f7ff fb83 	bl	8013d08 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8014602:	2000      	movs	r0, #0
 8014604:	f7ff fe8e 	bl	8014324 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8014608:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 801460c:	f000 fd22 	bl	8015054 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8014610:	f104 000e 	add.w	r0, r4, #14
 8014614:	f000 fda6 	bl	8015164 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8014618:	4a4c      	ldr	r2, [pc, #304]	@ (801474c <RadioSetRxConfig+0x1f8>)
 801461a:	ab02      	add	r3, sp, #8
 801461c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014620:	e883 0003 	stmia.w	r3, {r0, r1}
 8014624:	4618      	mov	r0, r3
 8014626:	f000 f987 	bl	8014938 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801462a:	f240 10ff 	movw	r0, #511	@ 0x1ff
 801462e:	f000 f95a 	bl	80148e6 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8014632:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8014636:	fb03 f30a 	mul.w	r3, r3, sl
 801463a:	fbb3 f3f6 	udiv	r3, r3, r6
 801463e:	60a3      	str	r3, [r4, #8]
            break;
 8014640:	e7ab      	b.n	801459a <RadioSetRxConfig+0x46>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8014642:	4b40      	ldr	r3, [pc, #256]	@ (8014744 <RadioSetRxConfig+0x1f0>)
 8014644:	2201      	movs	r2, #1
 8014646:	75da      	strb	r2, [r3, #23]
 8014648:	e7d6      	b.n	80145f8 <RadioSetRxConfig+0xa4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801464a:	2000      	movs	r0, #0
 801464c:	f000 faf6 	bl	8014c3c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8014650:	4a3c      	ldr	r2, [pc, #240]	@ (8014744 <RadioSetRxConfig+0x1f0>)
 8014652:	2301      	movs	r3, #1
 8014654:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8014658:	b2f3      	uxtb	r3, r6
 801465a:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801465e:	493c      	ldr	r1, [pc, #240]	@ (8014750 <RadioSetRxConfig+0x1fc>)
 8014660:	5d49      	ldrb	r1, [r1, r5]
 8014662:	f882 1051 	strb.w	r1, [r2, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8014666:	9901      	ldr	r1, [sp, #4]
 8014668:	f882 1052 	strb.w	r1, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801466c:	b91d      	cbnz	r5, 8014676 <RadioSetRxConfig+0x122>
 801466e:	f1a6 020b 	sub.w	r2, r6, #11
 8014672:	2a01      	cmp	r2, #1
 8014674:	d94b      	bls.n	801470e <RadioSetRxConfig+0x1ba>
 8014676:	2d01      	cmp	r5, #1
 8014678:	d047      	beq.n	801470a <RadioSetRxConfig+0x1b6>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801467a:	4a32      	ldr	r2, [pc, #200]	@ (8014744 <RadioSetRxConfig+0x1f0>)
 801467c:	2100      	movs	r1, #0
 801467e:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8014682:	4a30      	ldr	r2, [pc, #192]	@ (8014744 <RadioSetRxConfig+0x1f0>)
 8014684:	2101      	movs	r1, #1
 8014686:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8014688:	3b05      	subs	r3, #5
 801468a:	b2db      	uxtb	r3, r3
 801468c:	428b      	cmp	r3, r1
 801468e:	d943      	bls.n	8014718 <RadioSetRxConfig+0x1c4>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8014690:	4b2c      	ldr	r3, [pc, #176]	@ (8014744 <RadioSetRxConfig+0x1f0>)
 8014692:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8014696:	4c2b      	ldr	r4, [pc, #172]	@ (8014744 <RadioSetRxConfig+0x1f0>)
 8014698:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801469a:	4b2b      	ldr	r3, [pc, #172]	@ (8014748 <RadioSetRxConfig+0x1f4>)
 801469c:	781b      	ldrb	r3, [r3, #0]
 801469e:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80146a0:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80146a4:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80146a8:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
            RadioStandby( );
 80146ac:	f7ff fb2c 	bl	8013d08 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80146b0:	2001      	movs	r0, #1
 80146b2:	f7ff fe37 	bl	8014324 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80146b6:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80146ba:	f000 fccb 	bl	8015054 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80146be:	f104 000e 	add.w	r0, r4, #14
 80146c2:	f000 fd4f 	bl	8015164 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80146c6:	fa5f f08a 	uxtb.w	r0, sl
 80146ca:	f000 fac4 	bl	8014c56 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 80146ce:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 80146d2:	f000 f8e5 	bl	80148a0 <SUBGRF_ReadRegister>
 80146d6:	f000 0101 	and.w	r1, r0, #1
 80146da:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 80146de:	f000 f8cf 	bl	8014880 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80146e2:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 80146e6:	2b01      	cmp	r3, #1
 80146e8:	d021      	beq.n	801472e <RadioSetRxConfig+0x1da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80146ea:	f240 7036 	movw	r0, #1846	@ 0x736
 80146ee:	f000 f8d7 	bl	80148a0 <SUBGRF_ReadRegister>
 80146f2:	f040 0104 	orr.w	r1, r0, #4
 80146f6:	b2c9      	uxtb	r1, r1
 80146f8:	f240 7036 	movw	r0, #1846	@ 0x736
 80146fc:	f000 f8c0 	bl	8014880 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8014700:	4b10      	ldr	r3, [pc, #64]	@ (8014744 <RadioSetRxConfig+0x1f0>)
 8014702:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014706:	609a      	str	r2, [r3, #8]
}
 8014708:	e747      	b.n	801459a <RadioSetRxConfig+0x46>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801470a:	2e0c      	cmp	r6, #12
 801470c:	d1b5      	bne.n	801467a <RadioSetRxConfig+0x126>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801470e:	4a0d      	ldr	r2, [pc, #52]	@ (8014744 <RadioSetRxConfig+0x1f0>)
 8014710:	2101      	movs	r1, #1
 8014712:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
 8014716:	e7b4      	b.n	8014682 <RadioSetRxConfig+0x12e>
                if( preambleLen < 12 )
 8014718:	f1b9 0f0b 	cmp.w	r9, #11
 801471c:	d803      	bhi.n	8014726 <RadioSetRxConfig+0x1d2>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801471e:	4613      	mov	r3, r2
 8014720:	220c      	movs	r2, #12
 8014722:	839a      	strh	r2, [r3, #28]
 8014724:	e7b7      	b.n	8014696 <RadioSetRxConfig+0x142>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8014726:	4b07      	ldr	r3, [pc, #28]	@ (8014744 <RadioSetRxConfig+0x1f0>)
 8014728:	f8a3 901c 	strh.w	r9, [r3, #28]
 801472c:	e7b3      	b.n	8014696 <RadioSetRxConfig+0x142>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801472e:	f240 7036 	movw	r0, #1846	@ 0x736
 8014732:	f000 f8b5 	bl	80148a0 <SUBGRF_ReadRegister>
 8014736:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 801473a:	f240 7036 	movw	r0, #1846	@ 0x736
 801473e:	f000 f89f 	bl	8014880 <SUBGRF_WriteRegister>
 8014742:	e7dd      	b.n	8014700 <RadioSetRxConfig+0x1ac>
 8014744:	20003bd4 	.word	0x20003bd4
 8014748:	20000110 	.word	0x20000110
 801474c:	080162a4 	.word	0x080162a4
 8014750:	080172a8 	.word	0x080172a8

08014754 <RadioIsChannelFree>:
{
 8014754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014756:	b08b      	sub	sp, #44	@ 0x2c
 8014758:	4604      	mov	r4, r0
 801475a:	460f      	mov	r7, r1
 801475c:	4616      	mov	r6, r2
 801475e:	461d      	mov	r5, r3
    RadioStandby( );
 8014760:	f7ff fad2 	bl	8013d08 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 8014764:	2000      	movs	r0, #0
 8014766:	f7ff fddd 	bl	8014324 <RadioSetModem>
    RadioSetChannel( freq );
 801476a:	4620      	mov	r0, r4
 801476c:	f7ff fce4 	bl	8014138 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8014770:	2301      	movs	r3, #1
 8014772:	9309      	str	r3, [sp, #36]	@ 0x24
 8014774:	2400      	movs	r4, #0
 8014776:	9408      	str	r4, [sp, #32]
 8014778:	9407      	str	r4, [sp, #28]
 801477a:	9406      	str	r4, [sp, #24]
 801477c:	9405      	str	r4, [sp, #20]
 801477e:	9404      	str	r4, [sp, #16]
 8014780:	9403      	str	r4, [sp, #12]
 8014782:	9402      	str	r4, [sp, #8]
 8014784:	2303      	movs	r3, #3
 8014786:	9301      	str	r3, [sp, #4]
 8014788:	9700      	str	r7, [sp, #0]
 801478a:	4623      	mov	r3, r4
 801478c:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8014790:	4639      	mov	r1, r7
 8014792:	4620      	mov	r0, r4
 8014794:	f7ff fede 	bl	8014554 <RadioSetRxConfig>
    RadioRx( 0 );
 8014798:	4620      	mov	r0, r4
 801479a:	f7ff fce5 	bl	8014168 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801479e:	f7ff fc7b 	bl	8014098 <RadioGetWakeupTime>
 80147a2:	f7ed fa47 	bl	8001c34 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 80147a6:	f001 fa07 	bl	8015bb8 <UTIL_TIMER_GetCurrentTime>
 80147aa:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80147ac:	4620      	mov	r0, r4
 80147ae:	f001 fa0d 	bl	8015bcc <UTIL_TIMER_GetElapsedTime>
 80147b2:	42a8      	cmp	r0, r5
 80147b4:	d206      	bcs.n	80147c4 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 80147b6:	2000      	movs	r0, #0
 80147b8:	f7ff fc98 	bl	80140ec <RadioRssi>
        if( rssi > rssiThresh )
 80147bc:	42b0      	cmp	r0, r6
 80147be:	ddf5      	ble.n	80147ac <RadioIsChannelFree+0x58>
            status = false;
 80147c0:	2400      	movs	r4, #0
 80147c2:	e000      	b.n	80147c6 <RadioIsChannelFree+0x72>
    bool status = true;
 80147c4:	2401      	movs	r4, #1
    RadioStandby( );
 80147c6:	f7ff fa9f 	bl	8013d08 <RadioStandby>
}
 80147ca:	4620      	mov	r0, r4
 80147cc:	b00b      	add	sp, #44	@ 0x2c
 80147ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080147d0 <RadioInit>:
{
 80147d0:	b570      	push	{r4, r5, r6, lr}
 80147d2:	b082      	sub	sp, #8
    RadioEvents = events;
 80147d4:	4b1d      	ldr	r3, [pc, #116]	@ (801484c <RadioInit+0x7c>)
 80147d6:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 80147d8:	4d1d      	ldr	r5, [pc, #116]	@ (8014850 <RadioInit+0x80>)
 80147da:	2400      	movs	r4, #0
 80147dc:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 80147de:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 80147e0:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80147e2:	65ac      	str	r4, [r5, #88]	@ 0x58
    SUBGRF_Init( RadioOnDioIrq );
 80147e4:	481b      	ldr	r0, [pc, #108]	@ (8014854 <RadioInit+0x84>)
 80147e6:	f000 fb27 	bl	8014e38 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 80147ea:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 80147ec:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 80147ee:	f000 fa53 	bl	8014c98 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80147f2:	4621      	mov	r1, r4
 80147f4:	4620      	mov	r0, r4
 80147f6:	f000 fd27 	bl	8015248 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80147fa:	2204      	movs	r2, #4
 80147fc:	4621      	mov	r1, r4
 80147fe:	2001      	movs	r0, #1
 8014800:	f000 fb9a 	bl	8014f38 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8014804:	4623      	mov	r3, r4
 8014806:	4622      	mov	r2, r4
 8014808:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801480c:	4608      	mov	r0, r1
 801480e:	f000 fada 	bl	8014dc6 <SUBGRF_SetDioIrqParams>
    RadioSleep();
 8014812:	f7ff fce1 	bl	80141d8 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8014816:	4e10      	ldr	r6, [pc, #64]	@ (8014858 <RadioInit+0x88>)
 8014818:	9400      	str	r4, [sp, #0]
 801481a:	4b10      	ldr	r3, [pc, #64]	@ (801485c <RadioInit+0x8c>)
 801481c:	4622      	mov	r2, r4
 801481e:	f04f 31ff 	mov.w	r1, #4294967295
 8014822:	4630      	mov	r0, r6
 8014824:	f001 f9a4 	bl	8015b70 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8014828:	4d0d      	ldr	r5, [pc, #52]	@ (8014860 <RadioInit+0x90>)
 801482a:	9400      	str	r4, [sp, #0]
 801482c:	4b0d      	ldr	r3, [pc, #52]	@ (8014864 <RadioInit+0x94>)
 801482e:	4622      	mov	r2, r4
 8014830:	f04f 31ff 	mov.w	r1, #4294967295
 8014834:	4628      	mov	r0, r5
 8014836:	f001 f99b 	bl	8015b70 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 801483a:	4630      	mov	r0, r6
 801483c:	f001 f9fc 	bl	8015c38 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8014840:	4628      	mov	r0, r5
 8014842:	f001 f9f9 	bl	8015c38 <UTIL_TIMER_Stop>
}
 8014846:	b002      	add	sp, #8
 8014848:	bd70      	pop	{r4, r5, r6, pc}
 801484a:	bf00      	nop
 801484c:	20003c30 	.word	0x20003c30
 8014850:	20003bd4 	.word	0x20003bd4
 8014854:	08014085 	.word	0x08014085
 8014858:	20003bbc 	.word	0x20003bbc
 801485c:	08013bcd 	.word	0x08013bcd
 8014860:	20003ba4 	.word	0x20003ba4
 8014864:	08013bf5 	.word	0x08013bf5

08014868 <SUBGRF_GetOperatingMode>:
}

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
    return OperatingMode;
}
 8014868:	4b01      	ldr	r3, [pc, #4]	@ (8014870 <SUBGRF_GetOperatingMode+0x8>)
 801486a:	7818      	ldrb	r0, [r3, #0]
 801486c:	4770      	bx	lr
 801486e:	bf00      	nop
 8014870:	20003d42 	.word	0x20003d42

08014874 <SUBGRF_GetPacketType>:
}

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
    return PacketType;
}
 8014874:	4b01      	ldr	r3, [pc, #4]	@ (801487c <SUBGRF_GetPacketType+0x8>)
 8014876:	7818      	ldrb	r0, [r3, #0]
 8014878:	4770      	bx	lr
 801487a:	bf00      	nop
 801487c:	20003d41 	.word	0x20003d41

08014880 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8014880:	b500      	push	{lr}
 8014882:	b083      	sub	sp, #12
 8014884:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8014888:	2301      	movs	r3, #1
 801488a:	f10d 0207 	add.w	r2, sp, #7
 801488e:	4601      	mov	r1, r0
 8014890:	4802      	ldr	r0, [pc, #8]	@ (801489c <SUBGRF_WriteRegister+0x1c>)
 8014892:	f7f2 ff7b 	bl	800778c <HAL_SUBGHZ_WriteRegisters>
}
 8014896:	b003      	add	sp, #12
 8014898:	f85d fb04 	ldr.w	pc, [sp], #4
 801489c:	20000248 	.word	0x20000248

080148a0 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 80148a0:	b500      	push	{lr}
 80148a2:	b083      	sub	sp, #12
 80148a4:	4601      	mov	r1, r0
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80148a6:	2301      	movs	r3, #1
 80148a8:	f10d 0207 	add.w	r2, sp, #7
 80148ac:	4803      	ldr	r0, [pc, #12]	@ (80148bc <SUBGRF_ReadRegister+0x1c>)
 80148ae:	f7f2 ffbd 	bl	800782c <HAL_SUBGHZ_ReadRegisters>
    return data;
}
 80148b2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80148b6:	b003      	add	sp, #12
 80148b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80148bc:	20000248 	.word	0x20000248

080148c0 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
}

static void Radio_SMPS_Set(uint8_t level)
{
 80148c0:	b510      	push	{r4, lr}
 80148c2:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 80148c4:	f7ee fa8e 	bl	8002de4 <RBI_IsDCDC>
 80148c8:	2801      	cmp	r0, #1
 80148ca:	d000      	beq.n	80148ce <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 80148cc:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80148ce:	f640 1023 	movw	r0, #2339	@ 0x923
 80148d2:	f7ff ffe5 	bl	80148a0 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 80148d6:	f000 01f9 	and.w	r1, r0, #249	@ 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 80148da:	4321      	orrs	r1, r4
 80148dc:	f640 1023 	movw	r0, #2339	@ 0x923
 80148e0:	f7ff ffce 	bl	8014880 <SUBGRF_WriteRegister>
}
 80148e4:	e7f2      	b.n	80148cc <Radio_SMPS_Set+0xc>

080148e6 <SUBGRF_SetWhiteningSeed>:
{
 80148e6:	b510      	push	{r4, lr}
 80148e8:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 80148ea:	f7ff ffc3 	bl	8014874 <SUBGRF_GetPacketType>
 80148ee:	b100      	cbz	r0, 80148f2 <SUBGRF_SetWhiteningSeed+0xc>
}
 80148f0:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 80148f2:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 80148f6:	f7ff ffd3 	bl	80148a0 <SUBGRF_ReadRegister>
 80148fa:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80148fe:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8014902:	4301      	orrs	r1, r0
 8014904:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8014908:	f7ff ffba 	bl	8014880 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801490c:	b2e1      	uxtb	r1, r4
 801490e:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 8014912:	f7ff ffb5 	bl	8014880 <SUBGRF_WriteRegister>
}
 8014916:	e7eb      	b.n	80148f0 <SUBGRF_SetWhiteningSeed+0xa>

08014918 <SUBGRF_WriteRegisters>:
{
 8014918:	b510      	push	{r4, lr}
 801491a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801491c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014920:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8014922:	460a      	mov	r2, r1
 8014924:	4601      	mov	r1, r0
 8014926:	4803      	ldr	r0, [pc, #12]	@ (8014934 <SUBGRF_WriteRegisters+0x1c>)
 8014928:	f7f2 ff30 	bl	800778c <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801492c:	f384 8810 	msr	PRIMASK, r4
}
 8014930:	bd10      	pop	{r4, pc}
 8014932:	bf00      	nop
 8014934:	20000248 	.word	0x20000248

08014938 <SUBGRF_SetSyncWord>:
{
 8014938:	b508      	push	{r3, lr}
 801493a:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801493c:	2208      	movs	r2, #8
 801493e:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 8014942:	f7ff ffe9 	bl	8014918 <SUBGRF_WriteRegisters>
}
 8014946:	2000      	movs	r0, #0
 8014948:	bd08      	pop	{r3, pc}

0801494a <SUBGRF_SetCrcSeed>:
{
 801494a:	b500      	push	{lr}
 801494c:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801494e:	0a03      	lsrs	r3, r0, #8
 8014950:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8014954:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8014958:	f7ff ff8c 	bl	8014874 <SUBGRF_GetPacketType>
 801495c:	b110      	cbz	r0, 8014964 <SUBGRF_SetCrcSeed+0x1a>
}
 801495e:	b003      	add	sp, #12
 8014960:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8014964:	2202      	movs	r2, #2
 8014966:	a901      	add	r1, sp, #4
 8014968:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 801496c:	f7ff ffd4 	bl	8014918 <SUBGRF_WriteRegisters>
}
 8014970:	e7f5      	b.n	801495e <SUBGRF_SetCrcSeed+0x14>

08014972 <SUBGRF_SetCrcPolynomial>:
{
 8014972:	b500      	push	{lr}
 8014974:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8014976:	0a03      	lsrs	r3, r0, #8
 8014978:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801497c:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8014980:	f7ff ff78 	bl	8014874 <SUBGRF_GetPacketType>
 8014984:	b110      	cbz	r0, 801498c <SUBGRF_SetCrcPolynomial+0x1a>
}
 8014986:	b003      	add	sp, #12
 8014988:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801498c:	2202      	movs	r2, #2
 801498e:	a901      	add	r1, sp, #4
 8014990:	f240 60be 	movw	r0, #1726	@ 0x6be
 8014994:	f7ff ffc0 	bl	8014918 <SUBGRF_WriteRegisters>
}
 8014998:	e7f5      	b.n	8014986 <SUBGRF_SetCrcPolynomial+0x14>
	...

0801499c <SUBGRF_ReadRegisters>:
{
 801499c:	b510      	push	{r4, lr}
 801499e:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80149a0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80149a4:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 80149a6:	460a      	mov	r2, r1
 80149a8:	4601      	mov	r1, r0
 80149aa:	4803      	ldr	r0, [pc, #12]	@ (80149b8 <SUBGRF_ReadRegisters+0x1c>)
 80149ac:	f7f2 ff3e 	bl	800782c <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80149b0:	f384 8810 	msr	PRIMASK, r4
}
 80149b4:	bd10      	pop	{r4, pc}
 80149b6:	bf00      	nop
 80149b8:	20000248 	.word	0x20000248

080149bc <SUBGRF_WriteBuffer>:
{
 80149bc:	b510      	push	{r4, lr}
 80149be:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80149c0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80149c4:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80149c6:	460a      	mov	r2, r1
 80149c8:	4601      	mov	r1, r0
 80149ca:	4803      	ldr	r0, [pc, #12]	@ (80149d8 <SUBGRF_WriteBuffer+0x1c>)
 80149cc:	f7f3 f88c 	bl	8007ae8 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80149d0:	f384 8810 	msr	PRIMASK, r4
}
 80149d4:	bd10      	pop	{r4, pc}
 80149d6:	bf00      	nop
 80149d8:	20000248 	.word	0x20000248

080149dc <SUBGRF_SetPayload>:
{
 80149dc:	b508      	push	{r3, lr}
 80149de:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 80149e0:	4601      	mov	r1, r0
 80149e2:	2000      	movs	r0, #0
 80149e4:	f7ff ffea 	bl	80149bc <SUBGRF_WriteBuffer>
}
 80149e8:	bd08      	pop	{r3, pc}
	...

080149ec <SUBGRF_ReadBuffer>:
{
 80149ec:	b510      	push	{r4, lr}
 80149ee:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80149f0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80149f4:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 80149f6:	460a      	mov	r2, r1
 80149f8:	4601      	mov	r1, r0
 80149fa:	4803      	ldr	r0, [pc, #12]	@ (8014a08 <SUBGRF_ReadBuffer+0x1c>)
 80149fc:	f7f3 f8be 	bl	8007b7c <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014a00:	f384 8810 	msr	PRIMASK, r4
}
 8014a04:	bd10      	pop	{r4, pc}
 8014a06:	bf00      	nop
 8014a08:	20000248 	.word	0x20000248

08014a0c <SUBGRF_WriteCommand>:
{
 8014a0c:	b510      	push	{r4, lr}
 8014a0e:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014a10:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014a14:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8014a16:	460a      	mov	r2, r1
 8014a18:	4601      	mov	r1, r0
 8014a1a:	4803      	ldr	r0, [pc, #12]	@ (8014a28 <SUBGRF_WriteCommand+0x1c>)
 8014a1c:	f7f2 ff5a 	bl	80078d4 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014a20:	f384 8810 	msr	PRIMASK, r4
}
 8014a24:	bd10      	pop	{r4, pc}
 8014a26:	bf00      	nop
 8014a28:	20000248 	.word	0x20000248

08014a2c <SUBGRF_SetSleep>:
{
 8014a2c:	b510      	push	{r4, lr}
 8014a2e:	b082      	sub	sp, #8
 8014a30:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8014a32:	2000      	movs	r0, #0
 8014a34:	f7ee f9ca 	bl	8002dcc <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8014a38:	2002      	movs	r0, #2
 8014a3a:	f7ff ff41 	bl	80148c0 <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8014a3e:	f004 0304 	and.w	r3, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8014a42:	f004 0202 	and.w	r2, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8014a46:	4313      	orrs	r3, r2
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8014a48:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8014a4c:	4323      	orrs	r3, r4
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8014a4e:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8014a52:	2201      	movs	r2, #1
 8014a54:	f10d 0107 	add.w	r1, sp, #7
 8014a58:	2084      	movs	r0, #132	@ 0x84
 8014a5a:	f7ff ffd7 	bl	8014a0c <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8014a5e:	4b02      	ldr	r3, [pc, #8]	@ (8014a68 <SUBGRF_SetSleep+0x3c>)
 8014a60:	2200      	movs	r2, #0
 8014a62:	701a      	strb	r2, [r3, #0]
}
 8014a64:	b002      	add	sp, #8
 8014a66:	bd10      	pop	{r4, pc}
 8014a68:	20003d42 	.word	0x20003d42

08014a6c <SUBGRF_SetStandby>:
{
 8014a6c:	b500      	push	{lr}
 8014a6e:	b083      	sub	sp, #12
 8014a70:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8014a74:	2201      	movs	r2, #1
 8014a76:	f10d 0107 	add.w	r1, sp, #7
 8014a7a:	2080      	movs	r0, #128	@ 0x80
 8014a7c:	f7ff ffc6 	bl	8014a0c <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8014a80:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014a84:	b92b      	cbnz	r3, 8014a92 <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 8014a86:	4b05      	ldr	r3, [pc, #20]	@ (8014a9c <SUBGRF_SetStandby+0x30>)
 8014a88:	2201      	movs	r2, #1
 8014a8a:	701a      	strb	r2, [r3, #0]
}
 8014a8c:	b003      	add	sp, #12
 8014a8e:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 8014a92:	4b02      	ldr	r3, [pc, #8]	@ (8014a9c <SUBGRF_SetStandby+0x30>)
 8014a94:	2202      	movs	r2, #2
 8014a96:	701a      	strb	r2, [r3, #0]
}
 8014a98:	e7f8      	b.n	8014a8c <SUBGRF_SetStandby+0x20>
 8014a9a:	bf00      	nop
 8014a9c:	20003d42 	.word	0x20003d42

08014aa0 <SUBGRF_SetTx>:
{
 8014aa0:	b500      	push	{lr}
 8014aa2:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 8014aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8014ad0 <SUBGRF_SetTx+0x30>)
 8014aa6:	2204      	movs	r2, #4
 8014aa8:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8014aaa:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8014aae:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8014ab2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8014ab6:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8014aba:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8014abe:	2203      	movs	r2, #3
 8014ac0:	a901      	add	r1, sp, #4
 8014ac2:	2083      	movs	r0, #131	@ 0x83
 8014ac4:	f7ff ffa2 	bl	8014a0c <SUBGRF_WriteCommand>
}
 8014ac8:	b003      	add	sp, #12
 8014aca:	f85d fb04 	ldr.w	pc, [sp], #4
 8014ace:	bf00      	nop
 8014ad0:	20003d42 	.word	0x20003d42

08014ad4 <SUBGRF_SendPayload>:
{
 8014ad4:	b510      	push	{r4, lr}
 8014ad6:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 8014ad8:	f7ff ff80 	bl	80149dc <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8014adc:	4620      	mov	r0, r4
 8014ade:	f7ff ffdf 	bl	8014aa0 <SUBGRF_SetTx>
}
 8014ae2:	bd10      	pop	{r4, pc}

08014ae4 <SUBGRF_SetRx>:
{
 8014ae4:	b500      	push	{lr}
 8014ae6:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 8014ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8014b14 <SUBGRF_SetRx+0x30>)
 8014aea:	2205      	movs	r2, #5
 8014aec:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8014aee:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8014af2:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8014af6:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8014afa:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8014afe:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8014b02:	2203      	movs	r2, #3
 8014b04:	a901      	add	r1, sp, #4
 8014b06:	2082      	movs	r0, #130	@ 0x82
 8014b08:	f7ff ff80 	bl	8014a0c <SUBGRF_WriteCommand>
}
 8014b0c:	b003      	add	sp, #12
 8014b0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014b12:	bf00      	nop
 8014b14:	20003d42 	.word	0x20003d42

08014b18 <SUBGRF_GetRandom>:
{
 8014b18:	b570      	push	{r4, r5, r6, lr}
 8014b1a:	b082      	sub	sp, #8
    uint32_t number = 0;
 8014b1c:	2600      	movs	r6, #0
 8014b1e:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8014b20:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8014b24:	f7ff febc 	bl	80148a0 <SUBGRF_ReadRegister>
 8014b28:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8014b2a:	f000 01fe 	and.w	r1, r0, #254	@ 0xfe
 8014b2e:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8014b32:	f7ff fea5 	bl	8014880 <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8014b36:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8014b3a:	f7ff feb1 	bl	80148a0 <SUBGRF_ReadRegister>
 8014b3e:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8014b40:	f000 017f 	and.w	r1, r0, #127	@ 0x7f
 8014b44:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8014b48:	f7ff fe9a 	bl	8014880 <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8014b4c:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8014b50:	f7ff ffc8 	bl	8014ae4 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8014b54:	2204      	movs	r2, #4
 8014b56:	eb0d 0102 	add.w	r1, sp, r2
 8014b5a:	f640 0019 	movw	r0, #2073	@ 0x819
 8014b5e:	f7ff ff1d 	bl	801499c <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 8014b62:	4630      	mov	r0, r6
 8014b64:	f7ff ff82 	bl	8014a6c <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8014b68:	4629      	mov	r1, r5
 8014b6a:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8014b6e:	f7ff fe87 	bl	8014880 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8014b72:	4621      	mov	r1, r4
 8014b74:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8014b78:	f7ff fe82 	bl	8014880 <SUBGRF_WriteRegister>
}
 8014b7c:	9801      	ldr	r0, [sp, #4]
 8014b7e:	b002      	add	sp, #8
 8014b80:	bd70      	pop	{r4, r5, r6, pc}
	...

08014b84 <SUBGRF_SetRxBoosted>:
{
 8014b84:	b510      	push	{r4, lr}
 8014b86:	b082      	sub	sp, #8
 8014b88:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 8014b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8014bbc <SUBGRF_SetRxBoosted+0x38>)
 8014b8c:	2205      	movs	r2, #5
 8014b8e:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8014b90:	2197      	movs	r1, #151	@ 0x97
 8014b92:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 8014b96:	f7ff fe73 	bl	8014880 <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8014b9a:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8014b9e:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8014ba2:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8014ba6:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8014baa:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8014bae:	2203      	movs	r2, #3
 8014bb0:	a901      	add	r1, sp, #4
 8014bb2:	2082      	movs	r0, #130	@ 0x82
 8014bb4:	f7ff ff2a 	bl	8014a0c <SUBGRF_WriteCommand>
}
 8014bb8:	b002      	add	sp, #8
 8014bba:	bd10      	pop	{r4, pc}
 8014bbc:	20003d42 	.word	0x20003d42

08014bc0 <SUBGRF_SetRxDutyCycle>:
{
 8014bc0:	b500      	push	{lr}
 8014bc2:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8014bc4:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8014bc8:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8014bcc:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8014bd0:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8014bd4:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8014bd8:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8014bdc:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8014be0:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8014be4:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8014be8:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8014bec:	2206      	movs	r2, #6
 8014bee:	4669      	mov	r1, sp
 8014bf0:	2094      	movs	r0, #148	@ 0x94
 8014bf2:	f7ff ff0b 	bl	8014a0c <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8014bf6:	4b03      	ldr	r3, [pc, #12]	@ (8014c04 <SUBGRF_SetRxDutyCycle+0x44>)
 8014bf8:	2206      	movs	r2, #6
 8014bfa:	701a      	strb	r2, [r3, #0]
}
 8014bfc:	b003      	add	sp, #12
 8014bfe:	f85d fb04 	ldr.w	pc, [sp], #4
 8014c02:	bf00      	nop
 8014c04:	20003d42 	.word	0x20003d42

08014c08 <SUBGRF_SetCad>:
{
 8014c08:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8014c0a:	2200      	movs	r2, #0
 8014c0c:	4611      	mov	r1, r2
 8014c0e:	20c5      	movs	r0, #197	@ 0xc5
 8014c10:	f7ff fefc 	bl	8014a0c <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8014c14:	4b01      	ldr	r3, [pc, #4]	@ (8014c1c <SUBGRF_SetCad+0x14>)
 8014c16:	2207      	movs	r2, #7
 8014c18:	701a      	strb	r2, [r3, #0]
}
 8014c1a:	bd08      	pop	{r3, pc}
 8014c1c:	20003d42 	.word	0x20003d42

08014c20 <SUBGRF_SetTxContinuousWave>:
{
 8014c20:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8014c22:	2200      	movs	r2, #0
 8014c24:	4611      	mov	r1, r2
 8014c26:	20d1      	movs	r0, #209	@ 0xd1
 8014c28:	f7ff fef0 	bl	8014a0c <SUBGRF_WriteCommand>
}
 8014c2c:	bd08      	pop	{r3, pc}

08014c2e <SUBGRF_SetTxInfinitePreamble>:
{
 8014c2e:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8014c30:	2200      	movs	r2, #0
 8014c32:	4611      	mov	r1, r2
 8014c34:	20d2      	movs	r0, #210	@ 0xd2
 8014c36:	f7ff fee9 	bl	8014a0c <SUBGRF_WriteCommand>
}
 8014c3a:	bd08      	pop	{r3, pc}

08014c3c <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 8014c3c:	b500      	push	{lr}
 8014c3e:	b083      	sub	sp, #12
 8014c40:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8014c44:	2201      	movs	r2, #1
 8014c46:	f10d 0107 	add.w	r1, sp, #7
 8014c4a:	209f      	movs	r0, #159	@ 0x9f
 8014c4c:	f7ff fede 	bl	8014a0c <SUBGRF_WriteCommand>
}
 8014c50:	b003      	add	sp, #12
 8014c52:	f85d fb04 	ldr.w	pc, [sp], #4

08014c56 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 8014c56:	b500      	push	{lr}
 8014c58:	b083      	sub	sp, #12
 8014c5a:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8014c5e:	2201      	movs	r2, #1
 8014c60:	f10d 0107 	add.w	r1, sp, #7
 8014c64:	20a0      	movs	r0, #160	@ 0xa0
 8014c66:	f7ff fed1 	bl	8014a0c <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 8014c6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014c6e:	2b3f      	cmp	r3, #63	@ 0x3f
 8014c70:	d90f      	bls.n	8014c92 <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 8014c72:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 8014c74:	2200      	movs	r2, #0
        while( mant > 31 )
 8014c76:	e002      	b.n	8014c7e <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 8014c78:	089b      	lsrs	r3, r3, #2
            exp++;
 8014c7a:	3201      	adds	r2, #1
 8014c7c:	b2d2      	uxtb	r2, r2
        while( mant > 31 )
 8014c7e:	2b1f      	cmp	r3, #31
 8014c80:	d8fa      	bhi.n	8014c78 <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 8014c82:	00d9      	lsls	r1, r3, #3
 8014c84:	b2c9      	uxtb	r1, r1
 8014c86:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8014c88:	b2c9      	uxtb	r1, r1
 8014c8a:	f240 7006 	movw	r0, #1798	@ 0x706
 8014c8e:	f7ff fdf7 	bl	8014880 <SUBGRF_WriteRegister>
}
 8014c92:	b003      	add	sp, #12
 8014c94:	f85d fb04 	ldr.w	pc, [sp], #4

08014c98 <SUBGRF_SetRegulatorMode>:
{
 8014c98:	b500      	push	{lr}
 8014c9a:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8014c9c:	f7ee f8a2 	bl	8002de4 <RBI_IsDCDC>
 8014ca0:	2801      	cmp	r0, #1
 8014ca2:	d00b      	beq.n	8014cbc <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 8014ca4:	2300      	movs	r3, #0
 8014ca6:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8014caa:	2201      	movs	r2, #1
 8014cac:	f10d 0107 	add.w	r1, sp, #7
 8014cb0:	2096      	movs	r0, #150	@ 0x96
 8014cb2:	f7ff feab 	bl	8014a0c <SUBGRF_WriteCommand>
}
 8014cb6:	b003      	add	sp, #12
 8014cb8:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 8014cbc:	2301      	movs	r3, #1
 8014cbe:	f88d 3007 	strb.w	r3, [sp, #7]
 8014cc2:	e7f2      	b.n	8014caa <SUBGRF_SetRegulatorMode+0x12>

08014cc4 <SUBGRF_Calibrate>:
{
 8014cc4:	b500      	push	{lr}
 8014cc6:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8014cc8:	f000 0340 	and.w	r3, r0, #64	@ 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8014ccc:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8014cd0:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8014cd2:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8014cd6:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8014cd8:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8014cdc:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8014cde:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8014ce2:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8014ce4:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8014ce8:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8014cea:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8014cee:	4303      	orrs	r3, r0
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8014cf0:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8014cf4:	2201      	movs	r2, #1
 8014cf6:	f10d 0107 	add.w	r1, sp, #7
 8014cfa:	2089      	movs	r0, #137	@ 0x89
 8014cfc:	f7ff fe86 	bl	8014a0c <SUBGRF_WriteCommand>
}
 8014d00:	b003      	add	sp, #12
 8014d02:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08014d08 <SUBGRF_CalibrateImage>:
{
 8014d08:	b500      	push	{lr}
 8014d0a:	b083      	sub	sp, #12
    if( freq > 900000000 )
 8014d0c:	4b1f      	ldr	r3, [pc, #124]	@ (8014d8c <SUBGRF_CalibrateImage+0x84>)
 8014d0e:	4298      	cmp	r0, r3
 8014d10:	d90d      	bls.n	8014d2e <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 8014d12:	23e1      	movs	r3, #225	@ 0xe1
 8014d14:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 8014d18:	23e9      	movs	r3, #233	@ 0xe9
 8014d1a:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8014d1e:	2202      	movs	r2, #2
 8014d20:	a901      	add	r1, sp, #4
 8014d22:	2098      	movs	r0, #152	@ 0x98
 8014d24:	f7ff fe72 	bl	8014a0c <SUBGRF_WriteCommand>
}
 8014d28:	b003      	add	sp, #12
 8014d2a:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 8014d2e:	4b18      	ldr	r3, [pc, #96]	@ (8014d90 <SUBGRF_CalibrateImage+0x88>)
 8014d30:	4298      	cmp	r0, r3
 8014d32:	d906      	bls.n	8014d42 <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 8014d34:	23d7      	movs	r3, #215	@ 0xd7
 8014d36:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 8014d3a:	23db      	movs	r3, #219	@ 0xdb
 8014d3c:	f88d 3005 	strb.w	r3, [sp, #5]
 8014d40:	e7ed      	b.n	8014d1e <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 8014d42:	4b14      	ldr	r3, [pc, #80]	@ (8014d94 <SUBGRF_CalibrateImage+0x8c>)
 8014d44:	4298      	cmp	r0, r3
 8014d46:	d906      	bls.n	8014d56 <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 8014d48:	23c1      	movs	r3, #193	@ 0xc1
 8014d4a:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 8014d4e:	23c5      	movs	r3, #197	@ 0xc5
 8014d50:	f88d 3005 	strb.w	r3, [sp, #5]
 8014d54:	e7e3      	b.n	8014d1e <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 8014d56:	4b10      	ldr	r3, [pc, #64]	@ (8014d98 <SUBGRF_CalibrateImage+0x90>)
 8014d58:	4298      	cmp	r0, r3
 8014d5a:	d906      	bls.n	8014d6a <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 8014d5c:	2375      	movs	r3, #117	@ 0x75
 8014d5e:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 8014d62:	2381      	movs	r3, #129	@ 0x81
 8014d64:	f88d 3005 	strb.w	r3, [sp, #5]
 8014d68:	e7d9      	b.n	8014d1e <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 8014d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8014d9c <SUBGRF_CalibrateImage+0x94>)
 8014d6c:	4298      	cmp	r0, r3
 8014d6e:	d906      	bls.n	8014d7e <SUBGRF_CalibrateImage+0x76>
        calFreq[0] = 0x6B;
 8014d70:	236b      	movs	r3, #107	@ 0x6b
 8014d72:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 8014d76:	236f      	movs	r3, #111	@ 0x6f
 8014d78:	f88d 3005 	strb.w	r3, [sp, #5]
 8014d7c:	e7cf      	b.n	8014d1e <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x29;
 8014d7e:	2329      	movs	r3, #41	@ 0x29
 8014d80:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x2B ;
 8014d84:	232b      	movs	r3, #43	@ 0x2b
 8014d86:	f88d 3005 	strb.w	r3, [sp, #5]
 8014d8a:	e7c8      	b.n	8014d1e <SUBGRF_CalibrateImage+0x16>
 8014d8c:	35a4e900 	.word	0x35a4e900
 8014d90:	32a9f880 	.word	0x32a9f880
 8014d94:	2de54480 	.word	0x2de54480
 8014d98:	1b6b0b00 	.word	0x1b6b0b00
 8014d9c:	1954fc40 	.word	0x1954fc40

08014da0 <SUBGRF_SetPaConfig>:
{
 8014da0:	b500      	push	{lr}
 8014da2:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 8014da4:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8014da8:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 8014dac:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 8014db0:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8014db4:	2204      	movs	r2, #4
 8014db6:	eb0d 0102 	add.w	r1, sp, r2
 8014dba:	2095      	movs	r0, #149	@ 0x95
 8014dbc:	f7ff fe26 	bl	8014a0c <SUBGRF_WriteCommand>
}
 8014dc0:	b003      	add	sp, #12
 8014dc2:	f85d fb04 	ldr.w	pc, [sp], #4

08014dc6 <SUBGRF_SetDioIrqParams>:
{
 8014dc6:	b500      	push	{lr}
 8014dc8:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8014dca:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 8014dce:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8014dd2:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8014dd6:	0a08      	lsrs	r0, r1, #8
 8014dd8:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8014ddc:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8014de0:	0a11      	lsrs	r1, r2, #8
 8014de2:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8014de6:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8014dea:	0a1a      	lsrs	r2, r3, #8
 8014dec:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8014df0:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8014df4:	2208      	movs	r2, #8
 8014df6:	4669      	mov	r1, sp
 8014df8:	4610      	mov	r0, r2
 8014dfa:	f7ff fe07 	bl	8014a0c <SUBGRF_WriteCommand>
}
 8014dfe:	b003      	add	sp, #12
 8014e00:	f85d fb04 	ldr.w	pc, [sp], #4

08014e04 <SUBGRF_SetTcxoMode>:
{
 8014e04:	b500      	push	{lr}
 8014e06:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 8014e08:	f000 0007 	and.w	r0, r0, #7
 8014e0c:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8014e10:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8014e14:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8014e18:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8014e1c:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8014e20:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8014e24:	2204      	movs	r2, #4
 8014e26:	eb0d 0102 	add.w	r1, sp, r2
 8014e2a:	2097      	movs	r0, #151	@ 0x97
 8014e2c:	f7ff fdee 	bl	8014a0c <SUBGRF_WriteCommand>
}
 8014e30:	b003      	add	sp, #12
 8014e32:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08014e38 <SUBGRF_Init>:
{
 8014e38:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 8014e3a:	b108      	cbz	r0, 8014e40 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 8014e3c:	4a18      	ldr	r2, [pc, #96]	@ (8014ea0 <SUBGRF_Init+0x68>)
 8014e3e:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 8014e40:	f7ec fdee 	bl	8001a20 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8014e44:	2002      	movs	r0, #2
 8014e46:	f7ff fd3b 	bl	80148c0 <Radio_SMPS_Set>
    ImageCalibrated = false;
 8014e4a:	2000      	movs	r0, #0
 8014e4c:	4b15      	ldr	r3, [pc, #84]	@ (8014ea4 <SUBGRF_Init+0x6c>)
 8014e4e:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 8014e50:	f7ff fe0c 	bl	8014a6c <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 8014e54:	f7ed ffc2 	bl	8002ddc <RBI_IsTCXO>
 8014e58:	2801      	cmp	r0, #1
 8014e5a:	d014      	beq.n	8014e86 <SUBGRF_Init+0x4e>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8014e5c:	2120      	movs	r1, #32
 8014e5e:	f640 1011 	movw	r0, #2321	@ 0x911
 8014e62:	f7ff fd0d 	bl	8014880 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8014e66:	2120      	movs	r1, #32
 8014e68:	f640 1012 	movw	r0, #2322	@ 0x912
 8014e6c:	f7ff fd08 	bl	8014880 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8014e70:	210e      	movs	r1, #14
 8014e72:	f640 101f 	movw	r0, #2335	@ 0x91f
 8014e76:	f7ff fd03 	bl	8014880 <SUBGRF_WriteRegister>
    RBI_Init();
 8014e7a:	f7ed ffa3 	bl	8002dc4 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 8014e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8014ea8 <SUBGRF_Init+0x70>)
 8014e80:	2201      	movs	r2, #1
 8014e82:	701a      	strb	r2, [r3, #0]
}
 8014e84:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8014e86:	2140      	movs	r1, #64	@ 0x40
 8014e88:	f7ff ffbc 	bl	8014e04 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8014e8c:	2100      	movs	r1, #0
 8014e8e:	f640 1011 	movw	r0, #2321	@ 0x911
 8014e92:	f7ff fcf5 	bl	8014880 <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 8014e96:	f04f 007f 	mov.w	r0, #127	@ 0x7f
 8014e9a:	f7ff ff13 	bl	8014cc4 <SUBGRF_Calibrate>
 8014e9e:	e7e7      	b.n	8014e70 <SUBGRF_Init+0x38>
 8014ea0:	20003d34 	.word	0x20003d34
 8014ea4:	20003d38 	.word	0x20003d38
 8014ea8:	20003d42 	.word	0x20003d42

08014eac <SUBGRF_SetRfFrequency>:
{
 8014eac:	b510      	push	{r4, lr}
 8014eae:	b082      	sub	sp, #8
 8014eb0:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 8014eb2:	4b12      	ldr	r3, [pc, #72]	@ (8014efc <SUBGRF_SetRfFrequency+0x50>)
 8014eb4:	781b      	ldrb	r3, [r3, #0]
 8014eb6:	b1d3      	cbz	r3, 8014eee <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8014eb8:	4a11      	ldr	r2, [pc, #68]	@ (8014f00 <SUBGRF_SetRfFrequency+0x54>)
 8014eba:	2300      	movs	r3, #0
 8014ebc:	0660      	lsls	r0, r4, #25
 8014ebe:	09e1      	lsrs	r1, r4, #7
 8014ec0:	f7eb fe2a 	bl	8000b18 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8014ec4:	0e03      	lsrs	r3, r0, #24
 8014ec6:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8014eca:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8014ece:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8014ed2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8014ed6:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8014eda:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8014ede:	2204      	movs	r2, #4
 8014ee0:	eb0d 0102 	add.w	r1, sp, r2
 8014ee4:	2086      	movs	r0, #134	@ 0x86
 8014ee6:	f7ff fd91 	bl	8014a0c <SUBGRF_WriteCommand>
}
 8014eea:	b002      	add	sp, #8
 8014eec:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 8014eee:	f7ff ff0b 	bl	8014d08 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8014ef2:	4b02      	ldr	r3, [pc, #8]	@ (8014efc <SUBGRF_SetRfFrequency+0x50>)
 8014ef4:	2201      	movs	r2, #1
 8014ef6:	701a      	strb	r2, [r3, #0]
 8014ef8:	e7de      	b.n	8014eb8 <SUBGRF_SetRfFrequency+0xc>
 8014efa:	bf00      	nop
 8014efc:	20003d38 	.word	0x20003d38
 8014f00:	01e84800 	.word	0x01e84800

08014f04 <SUBGRF_SetPacketType>:
{
 8014f04:	b500      	push	{lr}
 8014f06:	b083      	sub	sp, #12
 8014f08:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8014f0c:	b2c3      	uxtb	r3, r0
 8014f0e:	4a09      	ldr	r2, [pc, #36]	@ (8014f34 <SUBGRF_SetPacketType+0x30>)
 8014f10:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 8014f12:	b143      	cbz	r3, 8014f26 <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8014f14:	2201      	movs	r2, #1
 8014f16:	f10d 0107 	add.w	r1, sp, #7
 8014f1a:	208a      	movs	r0, #138	@ 0x8a
 8014f1c:	f7ff fd76 	bl	8014a0c <SUBGRF_WriteCommand>
}
 8014f20:	b003      	add	sp, #12
 8014f22:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8014f26:	2100      	movs	r1, #0
 8014f28:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8014f2c:	f7ff fca8 	bl	8014880 <SUBGRF_WriteRegister>
 8014f30:	e7f0      	b.n	8014f14 <SUBGRF_SetPacketType+0x10>
 8014f32:	bf00      	nop
 8014f34:	20003d41 	.word	0x20003d41

08014f38 <SUBGRF_SetTxParams>:
{
 8014f38:	b570      	push	{r4, r5, r6, lr}
 8014f3a:	b082      	sub	sp, #8
 8014f3c:	460c      	mov	r4, r1
 8014f3e:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 8014f40:	2801      	cmp	r0, #1
 8014f42:	d035      	beq.n	8014fb0 <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8014f44:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8014f48:	f7ff fcaa 	bl	80148a0 <SUBGRF_ReadRegister>
 8014f4c:	f040 011e 	orr.w	r1, r0, #30
 8014f50:	b2c9      	uxtb	r1, r1
 8014f52:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8014f56:	f7ff fc93 	bl	8014880 <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8014f5a:	2001      	movs	r0, #1
 8014f5c:	f7ed ff46 	bl	8002dec <RBI_GetRFOMaxPowerConfig>
 8014f60:	4605      	mov	r5, r0
        if (power > max_power)
 8014f62:	4284      	cmp	r4, r0
 8014f64:	dd00      	ble.n	8014f68 <SUBGRF_SetTxParams+0x30>
            power = max_power;
 8014f66:	b244      	sxtb	r4, r0
        if (max_power == 20)
 8014f68:	2d14      	cmp	r5, #20
 8014f6a:	d054      	beq.n	8015016 <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 8014f6c:	2d11      	cmp	r5, #17
 8014f6e:	d05c      	beq.n	801502a <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 8014f70:	2d0e      	cmp	r5, #14
 8014f72:	d064      	beq.n	801503e <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8014f74:	2301      	movs	r3, #1
 8014f76:	2200      	movs	r2, #0
 8014f78:	2107      	movs	r1, #7
 8014f7a:	2004      	movs	r0, #4
 8014f7c:	f7ff ff10 	bl	8014da0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8014f80:	1b64      	subs	r4, r4, r5
 8014f82:	3416      	adds	r4, #22
 8014f84:	b265      	sxtb	r5, r4
        if (power < -9)
 8014f86:	f115 0f09 	cmn.w	r5, #9
 8014f8a:	da01      	bge.n	8014f90 <SUBGRF_SetTxParams+0x58>
            power = -9;
 8014f8c:	f06f 0508 	mvn.w	r5, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8014f90:	2138      	movs	r1, #56	@ 0x38
 8014f92:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8014f96:	f7ff fc73 	bl	8014880 <SUBGRF_WriteRegister>
    buf[0] = power;
 8014f9a:	f88d 5004 	strb.w	r5, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 8014f9e:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8014fa2:	2202      	movs	r2, #2
 8014fa4:	a901      	add	r1, sp, #4
 8014fa6:	208e      	movs	r0, #142	@ 0x8e
 8014fa8:	f7ff fd30 	bl	8014a0c <SUBGRF_WriteCommand>
}
 8014fac:	b002      	add	sp, #8
 8014fae:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8014fb0:	2000      	movs	r0, #0
 8014fb2:	f7ed ff1b 	bl	8002dec <RBI_GetRFOMaxPowerConfig>
 8014fb6:	4605      	mov	r5, r0
        if (power >  max_power)
 8014fb8:	4284      	cmp	r4, r0
 8014fba:	dd00      	ble.n	8014fbe <SUBGRF_SetTxParams+0x86>
          power = max_power;
 8014fbc:	b244      	sxtb	r4, r0
        if (max_power == 14)
 8014fbe:	2d0e      	cmp	r5, #14
 8014fc0:	d015      	beq.n	8014fee <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 8014fc2:	2d0a      	cmp	r5, #10
 8014fc4:	d01d      	beq.n	8015002 <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8014fc6:	2301      	movs	r3, #1
 8014fc8:	461a      	mov	r2, r3
 8014fca:	2100      	movs	r1, #0
 8014fcc:	2007      	movs	r0, #7
 8014fce:	f7ff fee7 	bl	8014da0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8014fd2:	1b65      	subs	r5, r4, r5
 8014fd4:	350e      	adds	r5, #14
 8014fd6:	b26d      	sxtb	r5, r5
        if (power < -17)
 8014fd8:	f115 0f11 	cmn.w	r5, #17
 8014fdc:	da01      	bge.n	8014fe2 <SUBGRF_SetTxParams+0xaa>
            power = -17;
 8014fde:	f06f 0510 	mvn.w	r5, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8014fe2:	2118      	movs	r1, #24
 8014fe4:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8014fe8:	f7ff fc4a 	bl	8014880 <SUBGRF_WriteRegister>
 8014fec:	e7d5      	b.n	8014f9a <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8014fee:	2301      	movs	r3, #1
 8014ff0:	461a      	mov	r2, r3
 8014ff2:	2100      	movs	r1, #0
 8014ff4:	2004      	movs	r0, #4
 8014ff6:	f7ff fed3 	bl	8014da0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8014ffa:	1b65      	subs	r5, r4, r5
 8014ffc:	350e      	adds	r5, #14
 8014ffe:	b26d      	sxtb	r5, r5
 8015000:	e7ea      	b.n	8014fd8 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8015002:	2301      	movs	r3, #1
 8015004:	461a      	mov	r2, r3
 8015006:	2100      	movs	r1, #0
 8015008:	4618      	mov	r0, r3
 801500a:	f7ff fec9 	bl	8014da0 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801500e:	1b65      	subs	r5, r4, r5
 8015010:	350d      	adds	r5, #13
 8015012:	b26d      	sxtb	r5, r5
 8015014:	e7e0      	b.n	8014fd8 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8015016:	2301      	movs	r3, #1
 8015018:	2200      	movs	r2, #0
 801501a:	2105      	movs	r1, #5
 801501c:	2003      	movs	r0, #3
 801501e:	f7ff febf 	bl	8014da0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8015022:	1b65      	subs	r5, r4, r5
 8015024:	3516      	adds	r5, #22
 8015026:	b26d      	sxtb	r5, r5
 8015028:	e7ad      	b.n	8014f86 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801502a:	2301      	movs	r3, #1
 801502c:	2200      	movs	r2, #0
 801502e:	2103      	movs	r1, #3
 8015030:	2002      	movs	r0, #2
 8015032:	f7ff feb5 	bl	8014da0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8015036:	1b65      	subs	r5, r4, r5
 8015038:	3516      	adds	r5, #22
 801503a:	b26d      	sxtb	r5, r5
 801503c:	e7a3      	b.n	8014f86 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801503e:	2301      	movs	r3, #1
 8015040:	2200      	movs	r2, #0
 8015042:	2102      	movs	r1, #2
 8015044:	4608      	mov	r0, r1
 8015046:	f7ff feab 	bl	8014da0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801504a:	1b65      	subs	r5, r4, r5
 801504c:	350e      	adds	r5, #14
 801504e:	b26d      	sxtb	r5, r5
 8015050:	e799      	b.n	8014f86 <SUBGRF_SetTxParams+0x4e>
	...

08015054 <SUBGRF_SetModulationParams>:
{
 8015054:	b510      	push	{r4, lr}
 8015056:	b082      	sub	sp, #8
 8015058:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801505a:	4b3e      	ldr	r3, [pc, #248]	@ (8015154 <SUBGRF_SetModulationParams+0x100>)
 801505c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015060:	ab02      	add	r3, sp, #8
 8015062:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 8015066:	7820      	ldrb	r0, [r4, #0]
 8015068:	4b3b      	ldr	r3, [pc, #236]	@ (8015158 <SUBGRF_SetModulationParams+0x104>)
 801506a:	781b      	ldrb	r3, [r3, #0]
 801506c:	4298      	cmp	r0, r3
 801506e:	d106      	bne.n	801507e <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 8015070:	7823      	ldrb	r3, [r4, #0]
 8015072:	2b03      	cmp	r3, #3
 8015074:	d82c      	bhi.n	80150d0 <SUBGRF_SetModulationParams+0x7c>
 8015076:	e8df f003 	tbb	[pc, r3]
 801507a:	4205      	.short	0x4205
 801507c:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801507e:	f7ff ff41 	bl	8014f04 <SUBGRF_SetPacketType>
 8015082:	e7f5      	b.n	8015070 <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8015084:	6862      	ldr	r2, [r4, #4]
 8015086:	4b35      	ldr	r3, [pc, #212]	@ (801515c <SUBGRF_SetModulationParams+0x108>)
 8015088:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801508c:	0c1a      	lsrs	r2, r3, #16
 801508e:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8015092:	0a1a      	lsrs	r2, r3, #8
 8015094:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8015098:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801509c:	7b23      	ldrb	r3, [r4, #12]
 801509e:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80150a2:	7b63      	ldrb	r3, [r4, #13]
 80150a4:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80150a8:	68a1      	ldr	r1, [r4, #8]
 80150aa:	4a2d      	ldr	r2, [pc, #180]	@ (8015160 <SUBGRF_SetModulationParams+0x10c>)
 80150ac:	2300      	movs	r3, #0
 80150ae:	0648      	lsls	r0, r1, #25
 80150b0:	09c9      	lsrs	r1, r1, #7
 80150b2:	f7eb fd31 	bl	8000b18 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 80150b6:	0c03      	lsrs	r3, r0, #16
 80150b8:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 80150bc:	0a03      	lsrs	r3, r0, #8
 80150be:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 80150c2:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80150c6:	2208      	movs	r2, #8
 80150c8:	4669      	mov	r1, sp
 80150ca:	208b      	movs	r0, #139	@ 0x8b
 80150cc:	f7ff fc9e 	bl	8014a0c <SUBGRF_WriteCommand>
}
 80150d0:	b002      	add	sp, #8
 80150d2:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 80150d4:	6922      	ldr	r2, [r4, #16]
 80150d6:	4b21      	ldr	r3, [pc, #132]	@ (801515c <SUBGRF_SetModulationParams+0x108>)
 80150d8:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80150dc:	0c1a      	lsrs	r2, r3, #16
 80150de:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80150e2:	0a1a      	lsrs	r2, r3, #8
 80150e4:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 80150e8:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 80150ec:	7d23      	ldrb	r3, [r4, #20]
 80150ee:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80150f2:	2204      	movs	r2, #4
 80150f4:	4669      	mov	r1, sp
 80150f6:	208b      	movs	r0, #139	@ 0x8b
 80150f8:	f7ff fc88 	bl	8014a0c <SUBGRF_WriteCommand>
        break;
 80150fc:	e7e8      	b.n	80150d0 <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 80150fe:	7e23      	ldrb	r3, [r4, #24]
 8015100:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8015104:	7e63      	ldrb	r3, [r4, #25]
 8015106:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801510a:	7ea3      	ldrb	r3, [r4, #26]
 801510c:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8015110:	7ee3      	ldrb	r3, [r4, #27]
 8015112:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8015116:	2204      	movs	r2, #4
 8015118:	4669      	mov	r1, sp
 801511a:	208b      	movs	r0, #139	@ 0x8b
 801511c:	f7ff fc76 	bl	8014a0c <SUBGRF_WriteCommand>
        break;
 8015120:	e7d6      	b.n	80150d0 <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8015122:	6862      	ldr	r2, [r4, #4]
 8015124:	4b0d      	ldr	r3, [pc, #52]	@ (801515c <SUBGRF_SetModulationParams+0x108>)
 8015126:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801512a:	0c1a      	lsrs	r2, r3, #16
 801512c:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8015130:	0a1a      	lsrs	r2, r3, #8
 8015132:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8015136:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801513a:	7b23      	ldrb	r3, [r4, #12]
 801513c:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8015140:	7b63      	ldrb	r3, [r4, #13]
 8015142:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8015146:	2205      	movs	r2, #5
 8015148:	4669      	mov	r1, sp
 801514a:	208b      	movs	r0, #139	@ 0x8b
 801514c:	f7ff fc5e 	bl	8014a0c <SUBGRF_WriteCommand>
}
 8015150:	e7be      	b.n	80150d0 <SUBGRF_SetModulationParams+0x7c>
 8015152:	bf00      	nop
 8015154:	080162ac 	.word	0x080162ac
 8015158:	20003d41 	.word	0x20003d41
 801515c:	3d090000 	.word	0x3d090000
 8015160:	01e84800 	.word	0x01e84800

08015164 <SUBGRF_SetPacketParams>:
{
 8015164:	b510      	push	{r4, lr}
 8015166:	b084      	sub	sp, #16
 8015168:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801516a:	ab01      	add	r3, sp, #4
 801516c:	4a33      	ldr	r2, [pc, #204]	@ (801523c <SUBGRF_SetPacketParams+0xd8>)
 801516e:	ca07      	ldmia	r2, {r0, r1, r2}
 8015170:	c303      	stmia	r3!, {r0, r1}
 8015172:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 8015174:	7820      	ldrb	r0, [r4, #0]
 8015176:	4b32      	ldr	r3, [pc, #200]	@ (8015240 <SUBGRF_SetPacketParams+0xdc>)
 8015178:	781b      	ldrb	r3, [r3, #0]
 801517a:	4298      	cmp	r0, r3
 801517c:	d106      	bne.n	801518c <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 801517e:	7823      	ldrb	r3, [r4, #0]
 8015180:	2b03      	cmp	r3, #3
 8015182:	d82a      	bhi.n	80151da <SUBGRF_SetPacketParams+0x76>
 8015184:	e8df f003 	tbb	[pc, r3]
 8015188:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 801518c:	f7ff feba 	bl	8014f04 <SUBGRF_SetPacketType>
 8015190:	e7f5      	b.n	801517e <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8015192:	7a63      	ldrb	r3, [r4, #9]
 8015194:	2bf1      	cmp	r3, #241	@ 0xf1
 8015196:	d022      	beq.n	80151de <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8015198:	2bf2      	cmp	r3, #242	@ 0xf2
 801519a:	d02a      	beq.n	80151f2 <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801519c:	8862      	ldrh	r2, [r4, #2]
 801519e:	0a11      	lsrs	r1, r2, #8
 80151a0:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80151a4:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80151a8:	7922      	ldrb	r2, [r4, #4]
 80151aa:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 80151ae:	7962      	ldrb	r2, [r4, #5]
 80151b0:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 80151b4:	79a2      	ldrb	r2, [r4, #6]
 80151b6:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 80151ba:	79e2      	ldrb	r2, [r4, #7]
 80151bc:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 80151c0:	7a22      	ldrb	r2, [r4, #8]
 80151c2:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 80151c6:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 80151ca:	7aa3      	ldrb	r3, [r4, #10]
 80151cc:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 80151d0:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80151d2:	a901      	add	r1, sp, #4
 80151d4:	208c      	movs	r0, #140	@ 0x8c
 80151d6:	f7ff fc19 	bl	8014a0c <SUBGRF_WriteCommand>
}
 80151da:	b004      	add	sp, #16
 80151dc:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 80151de:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80151e2:	f7ff fbb2 	bl	801494a <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 80151e6:	f248 0005 	movw	r0, #32773	@ 0x8005
 80151ea:	f7ff fbc2 	bl	8014972 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80151ee:	2302      	movs	r3, #2
 80151f0:	e7d4      	b.n	801519c <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80151f2:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 80151f6:	f7ff fba8 	bl	801494a <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 80151fa:	f241 0021 	movw	r0, #4129	@ 0x1021
 80151fe:	f7ff fbb8 	bl	8014972 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8015202:	2306      	movs	r3, #6
 8015204:	e7ca      	b.n	801519c <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8015206:	7b23      	ldrb	r3, [r4, #12]
 8015208:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 801520c:	2201      	movs	r2, #1
        break;
 801520e:	e7e0      	b.n	80151d2 <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8015210:	89e3      	ldrh	r3, [r4, #14]
 8015212:	0a1a      	lsrs	r2, r3, #8
 8015214:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8015218:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801521c:	7c23      	ldrb	r3, [r4, #16]
 801521e:	4a09      	ldr	r2, [pc, #36]	@ (8015244 <SUBGRF_SetPacketParams+0xe0>)
 8015220:	7013      	strb	r3, [r2, #0]
 8015222:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8015226:	7c63      	ldrb	r3, [r4, #17]
 8015228:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801522c:	7ca3      	ldrb	r3, [r4, #18]
 801522e:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8015232:	7ce3      	ldrb	r3, [r4, #19]
 8015234:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 8015238:	2206      	movs	r2, #6
        break;
 801523a:	e7ca      	b.n	80151d2 <SUBGRF_SetPacketParams+0x6e>
 801523c:	080162b4 	.word	0x080162b4
 8015240:	20003d41 	.word	0x20003d41
 8015244:	20003d40 	.word	0x20003d40

08015248 <SUBGRF_SetBufferBaseAddress>:
{
 8015248:	b500      	push	{lr}
 801524a:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 801524c:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8015250:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8015254:	2202      	movs	r2, #2
 8015256:	a901      	add	r1, sp, #4
 8015258:	208f      	movs	r0, #143	@ 0x8f
 801525a:	f7ff fbd7 	bl	8014a0c <SUBGRF_WriteCommand>
}
 801525e:	b003      	add	sp, #12
 8015260:	f85d fb04 	ldr.w	pc, [sp], #4

08015264 <SUBGRF_ReadCommand>:
{
 8015264:	b510      	push	{r4, lr}
 8015266:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015268:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801526c:	b672      	cpsid	i
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801526e:	460a      	mov	r2, r1
 8015270:	4601      	mov	r1, r0
 8015272:	4803      	ldr	r0, [pc, #12]	@ (8015280 <SUBGRF_ReadCommand+0x1c>)
 8015274:	f7f2 fb84 	bl	8007980 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015278:	f384 8810 	msr	PRIMASK, r4
}
 801527c:	bd10      	pop	{r4, pc}
 801527e:	bf00      	nop
 8015280:	20000248 	.word	0x20000248

08015284 <SUBGRF_GetRssiInst>:
{
 8015284:	b500      	push	{lr}
 8015286:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8015288:	2201      	movs	r2, #1
 801528a:	a901      	add	r1, sp, #4
 801528c:	2015      	movs	r0, #21
 801528e:	f7ff ffe9 	bl	8015264 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8015292:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8015296:	4240      	negs	r0, r0
}
 8015298:	1040      	asrs	r0, r0, #1
 801529a:	b003      	add	sp, #12
 801529c:	f85d fb04 	ldr.w	pc, [sp], #4

080152a0 <SUBGRF_GetRxBufferStatus>:
{
 80152a0:	b530      	push	{r4, r5, lr}
 80152a2:	b083      	sub	sp, #12
 80152a4:	4605      	mov	r5, r0
 80152a6:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80152a8:	2202      	movs	r2, #2
 80152aa:	a901      	add	r1, sp, #4
 80152ac:	2013      	movs	r0, #19
 80152ae:	f7ff ffd9 	bl	8015264 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80152b2:	f7ff fadf 	bl	8014874 <SUBGRF_GetPacketType>
 80152b6:	2801      	cmp	r0, #1
 80152b8:	d007      	beq.n	80152ca <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 80152ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80152be:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 80152c0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80152c4:	7023      	strb	r3, [r4, #0]
}
 80152c6:	b003      	add	sp, #12
 80152c8:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80152ca:	4b05      	ldr	r3, [pc, #20]	@ (80152e0 <SUBGRF_GetRxBufferStatus+0x40>)
 80152cc:	781b      	ldrb	r3, [r3, #0]
 80152ce:	b2db      	uxtb	r3, r3
 80152d0:	2b01      	cmp	r3, #1
 80152d2:	d1f2      	bne.n	80152ba <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 80152d4:	f240 7002 	movw	r0, #1794	@ 0x702
 80152d8:	f7ff fae2 	bl	80148a0 <SUBGRF_ReadRegister>
 80152dc:	7028      	strb	r0, [r5, #0]
 80152de:	e7ef      	b.n	80152c0 <SUBGRF_GetRxBufferStatus+0x20>
 80152e0:	20003d40 	.word	0x20003d40

080152e4 <SUBGRF_GetPayload>:
{
 80152e4:	b570      	push	{r4, r5, r6, lr}
 80152e6:	b082      	sub	sp, #8
 80152e8:	4606      	mov	r6, r0
 80152ea:	460c      	mov	r4, r1
 80152ec:	4615      	mov	r5, r2
    uint8_t offset = 0;
 80152ee:	2300      	movs	r3, #0
 80152f0:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 80152f4:	f10d 0107 	add.w	r1, sp, #7
 80152f8:	4620      	mov	r0, r4
 80152fa:	f7ff ffd1 	bl	80152a0 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 80152fe:	7822      	ldrb	r2, [r4, #0]
 8015300:	42aa      	cmp	r2, r5
 8015302:	d902      	bls.n	801530a <SUBGRF_GetPayload+0x26>
        return 1;
 8015304:	2001      	movs	r0, #1
}
 8015306:	b002      	add	sp, #8
 8015308:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801530a:	4631      	mov	r1, r6
 801530c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8015310:	f7ff fb6c 	bl	80149ec <SUBGRF_ReadBuffer>
    return 0;
 8015314:	2000      	movs	r0, #0
 8015316:	e7f6      	b.n	8015306 <SUBGRF_GetPayload+0x22>

08015318 <SUBGRF_GetPacketStatus>:
{
 8015318:	b510      	push	{r4, lr}
 801531a:	b082      	sub	sp, #8
 801531c:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801531e:	2203      	movs	r2, #3
 8015320:	a901      	add	r1, sp, #4
 8015322:	2014      	movs	r0, #20
 8015324:	f7ff ff9e 	bl	8015264 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 8015328:	f7ff faa4 	bl	8014874 <SUBGRF_GetPacketType>
 801532c:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 801532e:	b148      	cbz	r0, 8015344 <SUBGRF_GetPacketStatus+0x2c>
 8015330:	2801      	cmp	r0, #1
 8015332:	d018      	beq.n	8015366 <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8015334:	2214      	movs	r2, #20
 8015336:	2100      	movs	r1, #0
 8015338:	4620      	mov	r0, r4
 801533a:	f000 fb20 	bl	801597e <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801533e:	230f      	movs	r3, #15
 8015340:	7023      	strb	r3, [r4, #0]
}
 8015342:	e00e      	b.n	8015362 <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8015344:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8015348:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801534a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801534e:	425b      	negs	r3, r3
 8015350:	105b      	asrs	r3, r3, #1
 8015352:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8015354:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8015358:	425b      	negs	r3, r3
 801535a:	105b      	asrs	r3, r3, #1
 801535c:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801535e:	2300      	movs	r3, #0
 8015360:	60a3      	str	r3, [r4, #8]
}
 8015362:	b002      	add	sp, #8
 8015364:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8015366:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801536a:	425b      	negs	r3, r3
 801536c:	105b      	asrs	r3, r3, #1
 801536e:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8015370:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 8015374:	3302      	adds	r3, #2
 8015376:	109b      	asrs	r3, r3, #2
 8015378:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801537a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801537e:	425b      	negs	r3, r3
 8015380:	105b      	asrs	r3, r3, #1
 8015382:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8015384:	4b01      	ldr	r3, [pc, #4]	@ (801538c <SUBGRF_GetPacketStatus+0x74>)
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	6123      	str	r3, [r4, #16]
            break;
 801538a:	e7ea      	b.n	8015362 <SUBGRF_GetPacketStatus+0x4a>
 801538c:	20003d3c 	.word	0x20003d3c

08015390 <SUBGRF_SetSwitch>:
{
 8015390:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 8015392:	2901      	cmp	r1, #1
 8015394:	d003      	beq.n	801539e <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8015396:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 8015398:	f7ed fd18 	bl	8002dcc <RBI_ConfigRFSwitch>
}
 801539c:	bd10      	pop	{r4, pc}
 801539e:	4604      	mov	r4, r0
 80153a0:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 80153a2:	2c01      	cmp	r4, #1
 80153a4:	d003      	beq.n	80153ae <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 80153a6:	2c02      	cmp	r4, #2
 80153a8:	d1f6      	bne.n	8015398 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 80153aa:	2003      	movs	r0, #3
 80153ac:	e7f4      	b.n	8015398 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 80153ae:	2004      	movs	r0, #4
 80153b0:	f7ff fa86 	bl	80148c0 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 80153b4:	2002      	movs	r0, #2
 80153b6:	e7f6      	b.n	80153a6 <SUBGRF_SetSwitch+0x16>

080153b8 <SUBGRF_SetRfTxPower>:
{
 80153b8:	b538      	push	{r3, r4, r5, lr}
 80153ba:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 80153bc:	f7ed fd0a 	bl	8002dd4 <RBI_GetTxConfig>
    switch (TxConfig)
 80153c0:	b148      	cbz	r0, 80153d6 <SUBGRF_SetRfTxPower+0x1e>
 80153c2:	2802      	cmp	r0, #2
 80153c4:	d10d      	bne.n	80153e2 <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 80153c6:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 80153c8:	2202      	movs	r2, #2
 80153ca:	4621      	mov	r1, r4
 80153cc:	4628      	mov	r0, r5
 80153ce:	f7ff fdb3 	bl	8014f38 <SUBGRF_SetTxParams>
}
 80153d2:	4628      	mov	r0, r5
 80153d4:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 80153d6:	2c0f      	cmp	r4, #15
 80153d8:	dc01      	bgt.n	80153de <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 80153da:	2501      	movs	r5, #1
 80153dc:	e7f4      	b.n	80153c8 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 80153de:	2502      	movs	r5, #2
 80153e0:	e7f2      	b.n	80153c8 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 80153e2:	2501      	movs	r5, #1
 80153e4:	e7f0      	b.n	80153c8 <SUBGRF_SetRfTxPower+0x10>

080153e6 <SUBGRF_GetRadioWakeUpTime>:
}
 80153e6:	2001      	movs	r0, #1
 80153e8:	4770      	bx	lr
	...

080153ec <HAL_SUBGHZ_TxCpltCallback>:
{
 80153ec:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 80153ee:	4b02      	ldr	r3, [pc, #8]	@ (80153f8 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	2001      	movs	r0, #1
 80153f4:	4798      	blx	r3
}
 80153f6:	bd08      	pop	{r3, pc}
 80153f8:	20003d34 	.word	0x20003d34

080153fc <HAL_SUBGHZ_RxCpltCallback>:
{
 80153fc:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 80153fe:	4b02      	ldr	r3, [pc, #8]	@ (8015408 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	2002      	movs	r0, #2
 8015404:	4798      	blx	r3
}
 8015406:	bd08      	pop	{r3, pc}
 8015408:	20003d34 	.word	0x20003d34

0801540c <HAL_SUBGHZ_CRCErrorCallback>:
{
 801540c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801540e:	4b02      	ldr	r3, [pc, #8]	@ (8015418 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	2040      	movs	r0, #64	@ 0x40
 8015414:	4798      	blx	r3
}
 8015416:	bd08      	pop	{r3, pc}
 8015418:	20003d34 	.word	0x20003d34

0801541c <HAL_SUBGHZ_CADStatusCallback>:
{
 801541c:	b508      	push	{r3, lr}
    switch (cadstatus)
 801541e:	b111      	cbz	r1, 8015426 <HAL_SUBGHZ_CADStatusCallback+0xa>
 8015420:	2901      	cmp	r1, #1
 8015422:	d005      	beq.n	8015430 <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 8015424:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8015426:	4b05      	ldr	r3, [pc, #20]	@ (801543c <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	2080      	movs	r0, #128	@ 0x80
 801542c:	4798      	blx	r3
            break;
 801542e:	e7f9      	b.n	8015424 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8015430:	4b02      	ldr	r3, [pc, #8]	@ (801543c <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8015438:	4798      	blx	r3
}
 801543a:	e7f3      	b.n	8015424 <HAL_SUBGHZ_CADStatusCallback+0x8>
 801543c:	20003d34 	.word	0x20003d34

08015440 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 8015440:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8015442:	4b03      	ldr	r3, [pc, #12]	@ (8015450 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801544a:	4798      	blx	r3
}
 801544c:	bd08      	pop	{r3, pc}
 801544e:	bf00      	nop
 8015450:	20003d34 	.word	0x20003d34

08015454 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 8015454:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8015456:	4b02      	ldr	r3, [pc, #8]	@ (8015460 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	2020      	movs	r0, #32
 801545c:	4798      	blx	r3
}
 801545e:	bd08      	pop	{r3, pc}
 8015460:	20003d34 	.word	0x20003d34

08015464 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 8015464:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8015466:	4b02      	ldr	r3, [pc, #8]	@ (8015470 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	2004      	movs	r0, #4
 801546c:	4798      	blx	r3
}
 801546e:	bd08      	pop	{r3, pc}
 8015470:	20003d34 	.word	0x20003d34

08015474 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 8015474:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8015476:	4b02      	ldr	r3, [pc, #8]	@ (8015480 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 8015478:	681b      	ldr	r3, [r3, #0]
 801547a:	2008      	movs	r0, #8
 801547c:	4798      	blx	r3
}
 801547e:	bd08      	pop	{r3, pc}
 8015480:	20003d34 	.word	0x20003d34

08015484 <HAL_SUBGHZ_HeaderValidCallback>:
{
 8015484:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8015486:	4b02      	ldr	r3, [pc, #8]	@ (8015490 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	2010      	movs	r0, #16
 801548c:	4798      	blx	r3
}
 801548e:	bd08      	pop	{r3, pc}
 8015490:	20003d34 	.word	0x20003d34

08015494 <HAL_SUBGHZ_LrFhssHopCallback>:
{
 8015494:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8015496:	4b03      	ldr	r3, [pc, #12]	@ (80154a4 <HAL_SUBGHZ_LrFhssHopCallback+0x10>)
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 801549e:	4798      	blx	r3
}
 80154a0:	bd08      	pop	{r3, pc}
 80154a2:	bf00      	nop
 80154a4:	20003d34 	.word	0x20003d34

080154a8 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 80154a8:	4601      	mov	r1, r0
 80154aa:	b180      	cbz	r0, 80154ce <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        return( 0x1F );
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80154ac:	2300      	movs	r3, #0
 80154ae:	2b15      	cmp	r3, #21
 80154b0:	d80c      	bhi.n	80154cc <SUBGRF_GetFskBandwidthRegValue+0x24>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 80154b2:	4a08      	ldr	r2, [pc, #32]	@ (80154d4 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 80154b4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80154b8:	428a      	cmp	r2, r1
 80154ba:	d802      	bhi.n	80154c2 <SUBGRF_GetFskBandwidthRegValue+0x1a>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80154bc:	3301      	adds	r3, #1
 80154be:	b2db      	uxtb	r3, r3
 80154c0:	e7f5      	b.n	80154ae <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 80154c2:	4a04      	ldr	r2, [pc, #16]	@ (80154d4 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 80154c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80154c8:	7918      	ldrb	r0, [r3, #4]
 80154ca:	4770      	bx	lr
        }
    }
    // ERROR: Value not found
    while( 1 );
 80154cc:	e7fe      	b.n	80154cc <SUBGRF_GetFskBandwidthRegValue+0x24>
        return( 0x1F );
 80154ce:	201f      	movs	r0, #31
}
 80154d0:	4770      	bx	lr
 80154d2:	bf00      	nop
 80154d4:	08017338 	.word	0x08017338

080154d8 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 80154d8:	b570      	push	{r4, r5, r6, lr}
 80154da:	b082      	sub	sp, #8
 80154dc:	4605      	mov	r5, r0
 80154de:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 80154e0:	4b1d      	ldr	r3, [pc, #116]	@ (8015558 <SUBGRF_GetCFO+0x80>)
 80154e2:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 80154e4:	f640 0007 	movw	r0, #2055	@ 0x807
 80154e8:	f7ff f9da 	bl	80148a0 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 80154ec:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 80154f0:	3308      	adds	r3, #8
 80154f2:	446b      	add	r3, sp
 80154f4:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 80154f8:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 80154fc:	3301      	adds	r3, #1
 80154fe:	fa02 f303 	lsl.w	r3, r2, r3
 8015502:	4a16      	ldr	r2, [pc, #88]	@ (801555c <SUBGRF_GetCFO+0x84>)
 8015504:	fbb2 f2f3 	udiv	r2, r2, r3
  uint32_t cf_osr = cf_fs / bitRate;
 8015508:	fbb2 f0f5 	udiv	r0, r2, r5
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801550c:	2807      	cmp	r0, #7
 801550e:	d921      	bls.n	8015554 <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 8015510:	2301      	movs	r3, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 8015512:	fb03 f000 	mul.w	r0, r3, r0
 8015516:	2803      	cmp	r0, #3
 8015518:	d800      	bhi.n	801551c <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 801551a:	2304      	movs	r3, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801551c:	fb02 f503 	mul.w	r5, r2, r3
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8015520:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 8015524:	f7ff f9bc 	bl	80148a0 <SUBGRF_ReadRegister>
 8015528:	0206      	lsls	r6, r0, #8
 801552a:	f406 6670 	and.w	r6, r6, #3840	@ 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801552e:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 8015532:	f7ff f9b5 	bl	80148a0 <SUBGRF_ReadRegister>
 8015536:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8015538:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 801553c:	d003      	beq.n	8015546 <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 801553e:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 8015542:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8015546:	096b      	lsrs	r3, r5, #5
 8015548:	fb03 f000 	mul.w	r0, r3, r0
 801554c:	11c0      	asrs	r0, r0, #7
 801554e:	6020      	str	r0, [r4, #0]
}
 8015550:	b002      	add	sp, #8
 8015552:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 8015554:	2302      	movs	r3, #2
 8015556:	e7dc      	b.n	8015512 <SUBGRF_GetCFO+0x3a>
 8015558:	0c0a0804 	.word	0x0c0a0804
 801555c:	01e84800 	.word	0x01e84800

08015560 <RFW_TransmitLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 8015560:	f04f 30ff 	mov.w	r0, #4294967295
 8015564:	4770      	bx	lr

08015566 <RFW_ReceiveLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 8015566:	f04f 30ff 	mov.w	r0, #4294967295
 801556a:	4770      	bx	lr

0801556c <RFW_DeInit>:
void RFW_DeInit( void )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801556c:	4770      	bx	lr

0801556e <RFW_Is_Init>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 801556e:	2000      	movs	r0, #0
 8015570:	4770      	bx	lr

08015572 <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 8015572:	2000      	movs	r0, #0
 8015574:	4770      	bx	lr

08015576 <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 8015576:	4770      	bx	lr

08015578 <RFW_TransmitInit>:

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
}
 8015578:	f04f 30ff 	mov.w	r0, #4294967295
 801557c:	4770      	bx	lr

0801557e <RFW_ReceiveInit>:
    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 801557e:	f04f 30ff 	mov.w	r0, #4294967295
 8015582:	4770      	bx	lr

08015584 <RFW_DeInit_TxLongPacket>:
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 8015584:	4770      	bx	lr

08015586 <RFW_ReceivePayload>:
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 8015586:	4770      	bx	lr

08015588 <RFW_SetRadioModem>:
void RFW_SetRadioModem( RadioModems_t Modem )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 8015588:	4770      	bx	lr
	...

0801558c <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801558c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801558e:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8015592:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8015594:	4b1e      	ldr	r3, [pc, #120]	@ (8015610 <TRACE_AllocateBufer+0x84>)
 8015596:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 801559a:	8a1a      	ldrh	r2, [r3, #16]
 801559c:	4596      	cmp	lr, r2
 801559e:	d011      	beq.n	80155c4 <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80155a0:	4596      	cmp	lr, r2
 80155a2:	d921      	bls.n	80155e8 <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 80155a4:	f5ce 6380 	rsb	r3, lr, #1024	@ 0x400
 80155a8:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 80155aa:	4283      	cmp	r3, r0
 80155ac:	d81f      	bhi.n	80155ee <TRACE_AllocateBufer+0x62>
 80155ae:	4282      	cmp	r2, r0
 80155b0:	d91d      	bls.n	80155ee <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 80155b2:	4b17      	ldr	r3, [pc, #92]	@ (8015610 <TRACE_AllocateBufer+0x84>)
 80155b4:	2401      	movs	r4, #1
 80155b6:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 80155b8:	f8a3 e000 	strh.w	lr, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 80155bc:	2400      	movs	r4, #0
 80155be:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 80155c0:	4613      	mov	r3, r2
 80155c2:	e014      	b.n	80155ee <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 80155c4:	f5ce 6380 	rsb	r3, lr, #1024	@ 0x400
 80155c8:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 80155ca:	4298      	cmp	r0, r3
 80155cc:	d30f      	bcc.n	80155ee <TRACE_AllocateBufer+0x62>
 80155ce:	4282      	cmp	r2, r0
 80155d0:	d90d      	bls.n	80155ee <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 80155d2:	4b0f      	ldr	r3, [pc, #60]	@ (8015610 <TRACE_AllocateBufer+0x84>)
 80155d4:	2401      	movs	r4, #1
 80155d6:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 80155d8:	f8a3 e000 	strh.w	lr, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 80155dc:	f04f 0e00 	mov.w	lr, #0
 80155e0:	f8a3 e012 	strh.w	lr, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 80155e4:	4613      	mov	r3, r2
 80155e6:	e002      	b.n	80155ee <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 80155e8:	eba2 020e 	sub.w	r2, r2, lr
 80155ec:	b293      	uxth	r3, r2
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 80155ee:	4283      	cmp	r3, r0
 80155f0:	d90a      	bls.n	8015608 <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 80155f2:	4a07      	ldr	r2, [pc, #28]	@ (8015610 <TRACE_AllocateBufer+0x84>)
 80155f4:	8a53      	ldrh	r3, [r2, #18]
 80155f6:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 80155f8:	4403      	add	r3, r0
 80155fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80155fe:	8253      	strh	r3, [r2, #18]
    ret = 0;
 8015600:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015602:	f38c 8810 	msr	PRIMASK, ip
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 8015606:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 8015608:	f04f 30ff 	mov.w	r0, #4294967295
 801560c:	e7f9      	b.n	8015602 <TRACE_AllocateBufer+0x76>
 801560e:	bf00      	nop
 8015610:	20004344 	.word	0x20004344

08015614 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015614:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8015618:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 801561a:	4a03      	ldr	r2, [pc, #12]	@ (8015628 <TRACE_Lock+0x14>)
 801561c:	8ad3      	ldrh	r3, [r2, #22]
 801561e:	3301      	adds	r3, #1
 8015620:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015622:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8015626:	4770      	bx	lr
 8015628:	20004344 	.word	0x20004344

0801562c <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801562c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8015630:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8015632:	4a03      	ldr	r2, [pc, #12]	@ (8015640 <TRACE_UnLock+0x14>)
 8015634:	8ad3      	ldrh	r3, [r2, #22]
 8015636:	3b01      	subs	r3, #1
 8015638:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801563a:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801563e:	4770      	bx	lr
 8015640:	20004344 	.word	0x20004344

08015644 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8015644:	4b02      	ldr	r3, [pc, #8]	@ (8015650 <TRACE_IsLocked+0xc>)
 8015646:	8ad8      	ldrh	r0, [r3, #22]
}
 8015648:	3800      	subs	r0, #0
 801564a:	bf18      	it	ne
 801564c:	2001      	movne	r0, #1
 801564e:	4770      	bx	lr
 8015650:	20004344 	.word	0x20004344

08015654 <UTIL_ADV_TRACE_Init>:
{
 8015654:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8015656:	2218      	movs	r2, #24
 8015658:	2100      	movs	r1, #0
 801565a:	4807      	ldr	r0, [pc, #28]	@ (8015678 <UTIL_ADV_TRACE_Init+0x24>)
 801565c:	f000 f98f 	bl	801597e <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8015660:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8015664:	2100      	movs	r1, #0
 8015666:	4805      	ldr	r0, [pc, #20]	@ (801567c <UTIL_ADV_TRACE_Init+0x28>)
 8015668:	f000 f989 	bl	801597e <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801566c:	4b04      	ldr	r3, [pc, #16]	@ (8015680 <UTIL_ADV_TRACE_Init+0x2c>)
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	4804      	ldr	r0, [pc, #16]	@ (8015684 <UTIL_ADV_TRACE_Init+0x30>)
 8015672:	4798      	blx	r3
}
 8015674:	bd08      	pop	{r3, pc}
 8015676:	bf00      	nop
 8015678:	20004344 	.word	0x20004344
 801567c:	20003f44 	.word	0x20003f44
 8015680:	08016354 	.word	0x08016354
 8015684:	08015805 	.word	0x08015805

08015688 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8015688:	4b01      	ldr	r3, [pc, #4]	@ (8015690 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 801568a:	6058      	str	r0, [r3, #4]
}
 801568c:	4770      	bx	lr
 801568e:	bf00      	nop
 8015690:	20004344 	.word	0x20004344

08015694 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8015694:	4b01      	ldr	r3, [pc, #4]	@ (801569c <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8015696:	7218      	strb	r0, [r3, #8]
}
 8015698:	4770      	bx	lr
 801569a:	bf00      	nop
 801569c:	20004344 	.word	0x20004344

080156a0 <TRACE_Send>:
{
 80156a0:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80156a2:	f3ef 8310 	mrs	r3, PRIMASK
 80156a6:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 80156a8:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 80156aa:	f7ff ffcb 	bl	8015644 <TRACE_IsLocked>
 80156ae:	b118      	cbz	r0, 80156b8 <TRACE_Send+0x18>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80156b0:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 80156b4:	2000      	movs	r0, #0
}
 80156b6:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 80156b8:	f7ff ffac 	bl	8015614 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 80156bc:	4b1c      	ldr	r3, [pc, #112]	@ (8015730 <TRACE_Send+0x90>)
 80156be:	8a1a      	ldrh	r2, [r3, #16]
 80156c0:	8a5b      	ldrh	r3, [r3, #18]
 80156c2:	429a      	cmp	r2, r3
 80156c4:	d02e      	beq.n	8015724 <TRACE_Send+0x84>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 80156c6:	491a      	ldr	r1, [pc, #104]	@ (8015730 <TRACE_Send+0x90>)
 80156c8:	7889      	ldrb	r1, [r1, #2]
 80156ca:	2901      	cmp	r1, #1
 80156cc:	d017      	beq.n	80156fe <TRACE_Send+0x5e>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80156ce:	4a18      	ldr	r2, [pc, #96]	@ (8015730 <TRACE_Send+0x90>)
 80156d0:	7892      	ldrb	r2, [r2, #2]
 80156d2:	b932      	cbnz	r2, 80156e2 <TRACE_Send+0x42>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80156d4:	4a16      	ldr	r2, [pc, #88]	@ (8015730 <TRACE_Send+0x90>)
 80156d6:	8a12      	ldrh	r2, [r2, #16]
 80156d8:	4293      	cmp	r3, r2
 80156da:	d91e      	bls.n	801571a <TRACE_Send+0x7a>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80156dc:	1a9b      	subs	r3, r3, r2
 80156de:	4a14      	ldr	r2, [pc, #80]	@ (8015730 <TRACE_Send+0x90>)
 80156e0:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80156e2:	4e13      	ldr	r6, [pc, #76]	@ (8015730 <TRACE_Send+0x90>)
 80156e4:	8a35      	ldrh	r5, [r6, #16]
 80156e6:	4b13      	ldr	r3, [pc, #76]	@ (8015734 <TRACE_Send+0x94>)
 80156e8:	441d      	add	r5, r3
 80156ea:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 80156ee:	f7ec fa87 	bl	8001c00 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80156f2:	4b11      	ldr	r3, [pc, #68]	@ (8015738 <TRACE_Send+0x98>)
 80156f4:	68db      	ldr	r3, [r3, #12]
 80156f6:	8ab1      	ldrh	r1, [r6, #20]
 80156f8:	4628      	mov	r0, r5
 80156fa:	4798      	blx	r3
 80156fc:	e7db      	b.n	80156b6 <TRACE_Send+0x16>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 80156fe:	480c      	ldr	r0, [pc, #48]	@ (8015730 <TRACE_Send+0x90>)
 8015700:	8801      	ldrh	r1, [r0, #0]
 8015702:	1a8a      	subs	r2, r1, r2
 8015704:	b292      	uxth	r2, r2
 8015706:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8015708:	2102      	movs	r1, #2
 801570a:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801570c:	2100      	movs	r1, #0
 801570e:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8015710:	2a00      	cmp	r2, #0
 8015712:	d1dc      	bne.n	80156ce <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8015714:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8015716:	8201      	strh	r1, [r0, #16]
 8015718:	e7d9      	b.n	80156ce <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801571a:	f5c2 6280 	rsb	r2, r2, #1024	@ 0x400
 801571e:	4b04      	ldr	r3, [pc, #16]	@ (8015730 <TRACE_Send+0x90>)
 8015720:	829a      	strh	r2, [r3, #20]
 8015722:	e7de      	b.n	80156e2 <TRACE_Send+0x42>
      TRACE_UnLock();
 8015724:	f7ff ff82 	bl	801562c <TRACE_UnLock>
 8015728:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801572c:	2000      	movs	r0, #0
}
 801572e:	e7c2      	b.n	80156b6 <TRACE_Send+0x16>
 8015730:	20004344 	.word	0x20004344
 8015734:	20003f44 	.word	0x20003f44
 8015738:	08016354 	.word	0x08016354

0801573c <UTIL_ADV_TRACE_COND_FSend>:
{
 801573c:	b408      	push	{r3}
 801573e:	b530      	push	{r4, r5, lr}
 8015740:	b086      	sub	sp, #24
 8015742:	9c09      	ldr	r4, [sp, #36]	@ 0x24
  uint16_t timestamp_size = 0u;
 8015744:	2300      	movs	r3, #0
 8015746:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801574a:	4b2b      	ldr	r3, [pc, #172]	@ (80157f8 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 801574c:	7a1b      	ldrb	r3, [r3, #8]
 801574e:	4283      	cmp	r3, r0
 8015750:	d34c      	bcc.n	80157ec <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8015752:	4b29      	ldr	r3, [pc, #164]	@ (80157f8 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8015754:	68db      	ldr	r3, [r3, #12]
 8015756:	4399      	bics	r1, r3
 8015758:	d14b      	bne.n	80157f2 <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801575a:	4b27      	ldr	r3, [pc, #156]	@ (80157f8 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 801575c:	685b      	ldr	r3, [r3, #4]
 801575e:	b123      	cbz	r3, 801576a <UTIL_ADV_TRACE_COND_FSend+0x2e>
 8015760:	b11a      	cbz	r2, 801576a <UTIL_ADV_TRACE_COND_FSend+0x2e>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8015762:	f10d 0102 	add.w	r1, sp, #2
 8015766:	a801      	add	r0, sp, #4
 8015768:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 801576a:	ab0a      	add	r3, sp, #40	@ 0x28
 801576c:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801576e:	4622      	mov	r2, r4
 8015770:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8015774:	4821      	ldr	r0, [pc, #132]	@ (80157fc <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8015776:	f000 fbfd 	bl	8015f74 <tiny_vsnprintf_like>
 801577a:	b285      	uxth	r5, r0
  TRACE_Lock();
 801577c:	f7ff ff4a 	bl	8015614 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8015780:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015784:	18e8      	adds	r0, r5, r3
 8015786:	4669      	mov	r1, sp
 8015788:	b280      	uxth	r0, r0
 801578a:	f7ff feff 	bl	801558c <TRACE_AllocateBufer>
 801578e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015792:	d026      	beq.n	80157e2 <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 8015794:	2300      	movs	r3, #0
 8015796:	e00d      	b.n	80157b4 <UTIL_ADV_TRACE_COND_FSend+0x78>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8015798:	f8bd 2000 	ldrh.w	r2, [sp]
 801579c:	f103 0118 	add.w	r1, r3, #24
 80157a0:	4469      	add	r1, sp
 80157a2:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 80157a6:	4916      	ldr	r1, [pc, #88]	@ (8015800 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 80157a8:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 80157aa:	3201      	adds	r2, #1
 80157ac:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 80157b0:	3301      	adds	r3, #1
 80157b2:	b29b      	uxth	r3, r3
 80157b4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80157b8:	429a      	cmp	r2, r3
 80157ba:	d8ed      	bhi.n	8015798 <UTIL_ADV_TRACE_COND_FSend+0x5c>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 80157bc:	f8bd 0000 	ldrh.w	r0, [sp]
 80157c0:	9b05      	ldr	r3, [sp, #20]
 80157c2:	4622      	mov	r2, r4
 80157c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80157c8:	4c0d      	ldr	r4, [pc, #52]	@ (8015800 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 80157ca:	4420      	add	r0, r4
 80157cc:	f000 fbd2 	bl	8015f74 <tiny_vsnprintf_like>
    TRACE_UnLock();
 80157d0:	f7ff ff2c 	bl	801562c <TRACE_UnLock>
    return TRACE_Send();
 80157d4:	f7ff ff64 	bl	80156a0 <TRACE_Send>
}
 80157d8:	b006      	add	sp, #24
 80157da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80157de:	b001      	add	sp, #4
 80157e0:	4770      	bx	lr
  TRACE_UnLock();
 80157e2:	f7ff ff23 	bl	801562c <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 80157e6:	f06f 0002 	mvn.w	r0, #2
 80157ea:	e7f5      	b.n	80157d8 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_GIVEUP;
 80157ec:	f06f 0004 	mvn.w	r0, #4
 80157f0:	e7f2      	b.n	80157d8 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_REGIONMASKED;
 80157f2:	f06f 0005 	mvn.w	r0, #5
 80157f6:	e7ef      	b.n	80157d8 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 80157f8:	20004344 	.word	0x20004344
 80157fc:	20003d44 	.word	0x20003d44
 8015800:	20003f44 	.word	0x20003f44

08015804 <TRACE_TxCpltCallback>:
{
 8015804:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015806:	f3ef 8310 	mrs	r3, PRIMASK
 801580a:	4619      	mov	r1, r3
  __ASM volatile ("cpsid i" : : : "memory");
 801580c:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801580e:	4b26      	ldr	r3, [pc, #152]	@ (80158a8 <TRACE_TxCpltCallback+0xa4>)
 8015810:	789b      	ldrb	r3, [r3, #2]
 8015812:	2b02      	cmp	r3, #2
 8015814:	d016      	beq.n	8015844 <TRACE_TxCpltCallback+0x40>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8015816:	4a24      	ldr	r2, [pc, #144]	@ (80158a8 <TRACE_TxCpltCallback+0xa4>)
 8015818:	8a13      	ldrh	r3, [r2, #16]
 801581a:	8a90      	ldrh	r0, [r2, #20]
 801581c:	4403      	add	r3, r0
 801581e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8015822:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8015824:	4b20      	ldr	r3, [pc, #128]	@ (80158a8 <TRACE_TxCpltCallback+0xa4>)
 8015826:	8a1a      	ldrh	r2, [r3, #16]
 8015828:	8a5b      	ldrh	r3, [r3, #18]
 801582a:	429a      	cmp	r2, r3
 801582c:	d003      	beq.n	8015836 <TRACE_TxCpltCallback+0x32>
 801582e:	481e      	ldr	r0, [pc, #120]	@ (80158a8 <TRACE_TxCpltCallback+0xa4>)
 8015830:	8ac0      	ldrh	r0, [r0, #22]
 8015832:	2801      	cmp	r0, #1
 8015834:	d00b      	beq.n	801584e <TRACE_TxCpltCallback+0x4a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015836:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 801583a:	f7ec f9e7 	bl	8001c0c <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801583e:	f7ff fef5 	bl	801562c <TRACE_UnLock>
}
 8015842:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8015844:	4b18      	ldr	r3, [pc, #96]	@ (80158a8 <TRACE_TxCpltCallback+0xa4>)
 8015846:	2200      	movs	r2, #0
 8015848:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801584a:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 801584c:	e7ea      	b.n	8015824 <TRACE_TxCpltCallback+0x20>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801584e:	4816      	ldr	r0, [pc, #88]	@ (80158a8 <TRACE_TxCpltCallback+0xa4>)
 8015850:	7880      	ldrb	r0, [r0, #2]
 8015852:	2801      	cmp	r0, #1
 8015854:	d014      	beq.n	8015880 <TRACE_TxCpltCallback+0x7c>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8015856:	4a14      	ldr	r2, [pc, #80]	@ (80158a8 <TRACE_TxCpltCallback+0xa4>)
 8015858:	7892      	ldrb	r2, [r2, #2]
 801585a:	b932      	cbnz	r2, 801586a <TRACE_TxCpltCallback+0x66>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801585c:	4a12      	ldr	r2, [pc, #72]	@ (80158a8 <TRACE_TxCpltCallback+0xa4>)
 801585e:	8a12      	ldrh	r2, [r2, #16]
 8015860:	4293      	cmp	r3, r2
 8015862:	d91b      	bls.n	801589c <TRACE_TxCpltCallback+0x98>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8015864:	1a9b      	subs	r3, r3, r2
 8015866:	4a10      	ldr	r2, [pc, #64]	@ (80158a8 <TRACE_TxCpltCallback+0xa4>)
 8015868:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801586a:	4b0f      	ldr	r3, [pc, #60]	@ (80158a8 <TRACE_TxCpltCallback+0xa4>)
 801586c:	8a18      	ldrh	r0, [r3, #16]
 801586e:	4a0f      	ldr	r2, [pc, #60]	@ (80158ac <TRACE_TxCpltCallback+0xa8>)
 8015870:	4410      	add	r0, r2
 8015872:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8015876:	4a0e      	ldr	r2, [pc, #56]	@ (80158b0 <TRACE_TxCpltCallback+0xac>)
 8015878:	68d2      	ldr	r2, [r2, #12]
 801587a:	8a99      	ldrh	r1, [r3, #20]
 801587c:	4790      	blx	r2
 801587e:	e7e0      	b.n	8015842 <TRACE_TxCpltCallback+0x3e>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8015880:	4c09      	ldr	r4, [pc, #36]	@ (80158a8 <TRACE_TxCpltCallback+0xa4>)
 8015882:	8820      	ldrh	r0, [r4, #0]
 8015884:	1a82      	subs	r2, r0, r2
 8015886:	b292      	uxth	r2, r2
 8015888:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801588a:	2002      	movs	r0, #2
 801588c:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801588e:	2000      	movs	r0, #0
 8015890:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8015892:	2a00      	cmp	r2, #0
 8015894:	d1df      	bne.n	8015856 <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8015896:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8015898:	8220      	strh	r0, [r4, #16]
 801589a:	e7dc      	b.n	8015856 <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801589c:	f5c2 6280 	rsb	r2, r2, #1024	@ 0x400
 80158a0:	4b01      	ldr	r3, [pc, #4]	@ (80158a8 <TRACE_TxCpltCallback+0xa4>)
 80158a2:	829a      	strh	r2, [r3, #20]
 80158a4:	e7e1      	b.n	801586a <TRACE_TxCpltCallback+0x66>
 80158a6:	bf00      	nop
 80158a8:	20004344 	.word	0x20004344
 80158ac:	20003f44 	.word	0x20003f44
 80158b0:	08016354 	.word	0x08016354

080158b4 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80158b4:	2300      	movs	r3, #0
 80158b6:	4a02      	ldr	r2, [pc, #8]	@ (80158c0 <UTIL_LPM_Init+0xc>)
 80158b8:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80158ba:	4a02      	ldr	r2, [pc, #8]	@ (80158c4 <UTIL_LPM_Init+0x10>)
 80158bc:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80158be:	4770      	bx	lr
 80158c0:	20004360 	.word	0x20004360
 80158c4:	2000435c 	.word	0x2000435c

080158c8 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80158c8:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80158cc:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 80158ce:	b141      	cbz	r1, 80158e2 <UTIL_LPM_SetStopMode+0x1a>
 80158d0:	2901      	cmp	r1, #1
 80158d2:	d103      	bne.n	80158dc <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 80158d4:	4906      	ldr	r1, [pc, #24]	@ (80158f0 <UTIL_LPM_SetStopMode+0x28>)
 80158d6:	680a      	ldr	r2, [r1, #0]
 80158d8:	4302      	orrs	r2, r0
 80158da:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80158dc:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80158e0:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 80158e2:	4903      	ldr	r1, [pc, #12]	@ (80158f0 <UTIL_LPM_SetStopMode+0x28>)
 80158e4:	680a      	ldr	r2, [r1, #0]
 80158e6:	ea22 0200 	bic.w	r2, r2, r0
 80158ea:	600a      	str	r2, [r1, #0]
      break;
 80158ec:	e7f6      	b.n	80158dc <UTIL_LPM_SetStopMode+0x14>
 80158ee:	bf00      	nop
 80158f0:	20004360 	.word	0x20004360

080158f4 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80158f4:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80158f8:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 80158fa:	b141      	cbz	r1, 801590e <UTIL_LPM_SetOffMode+0x1a>
 80158fc:	2901      	cmp	r1, #1
 80158fe:	d103      	bne.n	8015908 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8015900:	4906      	ldr	r1, [pc, #24]	@ (801591c <UTIL_LPM_SetOffMode+0x28>)
 8015902:	680a      	ldr	r2, [r1, #0]
 8015904:	4302      	orrs	r2, r0
 8015906:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015908:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801590c:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 801590e:	4903      	ldr	r1, [pc, #12]	@ (801591c <UTIL_LPM_SetOffMode+0x28>)
 8015910:	680a      	ldr	r2, [r1, #0]
 8015912:	ea22 0200 	bic.w	r2, r2, r0
 8015916:	600a      	str	r2, [r1, #0]
      break;
 8015918:	e7f6      	b.n	8015908 <UTIL_LPM_SetOffMode+0x14>
 801591a:	bf00      	nop
 801591c:	2000435c 	.word	0x2000435c

08015920 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8015920:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015922:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8015926:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8015928:	4b0c      	ldr	r3, [pc, #48]	@ (801595c <UTIL_LPM_EnterLowPower+0x3c>)
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	b13b      	cbz	r3, 801593e <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801592e:	4d0c      	ldr	r5, [pc, #48]	@ (8015960 <UTIL_LPM_EnterLowPower+0x40>)
 8015930:	682b      	ldr	r3, [r5, #0]
 8015932:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8015934:	686b      	ldr	r3, [r5, #4]
 8015936:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015938:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801593c:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801593e:	4b09      	ldr	r3, [pc, #36]	@ (8015964 <UTIL_LPM_EnterLowPower+0x44>)
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	b12b      	cbz	r3, 8015950 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 8015944:	4d06      	ldr	r5, [pc, #24]	@ (8015960 <UTIL_LPM_EnterLowPower+0x40>)
 8015946:	68ab      	ldr	r3, [r5, #8]
 8015948:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801594a:	68eb      	ldr	r3, [r5, #12]
 801594c:	4798      	blx	r3
 801594e:	e7f3      	b.n	8015938 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 8015950:	4d03      	ldr	r5, [pc, #12]	@ (8015960 <UTIL_LPM_EnterLowPower+0x40>)
 8015952:	692b      	ldr	r3, [r5, #16]
 8015954:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8015956:	696b      	ldr	r3, [r5, #20]
 8015958:	4798      	blx	r3
 801595a:	e7ed      	b.n	8015938 <UTIL_LPM_EnterLowPower+0x18>
 801595c:	20004360 	.word	0x20004360
 8015960:	080162f0 	.word	0x080162f0
 8015964:	2000435c 	.word	0x2000435c

08015968 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 8015968:	e004      	b.n	8015974 <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 801596a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801596e:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 8015972:	461a      	mov	r2, r3
 8015974:	1e53      	subs	r3, r2, #1
 8015976:	b29b      	uxth	r3, r3
 8015978:	2a00      	cmp	r2, #0
 801597a:	d1f6      	bne.n	801596a <UTIL_MEM_cpy_8+0x2>
    }
}
 801597c:	4770      	bx	lr

0801597e <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 801597e:	e002      	b.n	8015986 <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 8015980:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 8015984:	461a      	mov	r2, r3
 8015986:	1e53      	subs	r3, r2, #1
 8015988:	b29b      	uxth	r3, r3
 801598a:	2a00      	cmp	r2, #0
 801598c:	d1f8      	bne.n	8015980 <UTIL_MEM_set_8+0x2>
  }
}
 801598e:	4770      	bx	lr

08015990 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8015990:	b082      	sub	sp, #8
 8015992:	b082      	sub	sp, #8
 8015994:	f10d 0c08 	add.w	ip, sp, #8
 8015998:	e90c 0006 	stmdb	ip, {r1, r2}
 801599c:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801599e:	2200      	movs	r2, #0
 80159a0:	6002      	str	r2, [r0, #0]
 80159a2:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 80159a4:	440b      	add	r3, r1
 80159a6:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 80159a8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80159ac:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80159b0:	440a      	add	r2, r1
 80159b2:	b291      	uxth	r1, r2
 80159b4:	b212      	sxth	r2, r2
 80159b6:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 80159b8:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 80159bc:	db04      	blt.n	80159c8 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 80159be:	3301      	adds	r3, #1
 80159c0:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 80159c2:	f5a1 717a 	sub.w	r1, r1, #1000	@ 0x3e8
 80159c6:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 80159c8:	b002      	add	sp, #8
 80159ca:	b002      	add	sp, #8
 80159cc:	4770      	bx	lr

080159ce <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 80159ce:	b082      	sub	sp, #8
 80159d0:	b082      	sub	sp, #8
 80159d2:	f10d 0c08 	add.w	ip, sp, #8
 80159d6:	e90c 0006 	stmdb	ip, {r1, r2}
 80159da:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 80159dc:	2200      	movs	r2, #0
 80159de:	6002      	str	r2, [r0, #0]
 80159e0:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds - b.Seconds;
 80159e2:	1acb      	subs	r3, r1, r3
 80159e4:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 80159e6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80159ea:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80159ee:	1a52      	subs	r2, r2, r1
 80159f0:	b291      	uxth	r1, r2
 80159f2:	b212      	sxth	r2, r2
 80159f4:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 80159f6:	2a00      	cmp	r2, #0
 80159f8:	db02      	blt.n	8015a00 <SysTimeSub+0x32>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 80159fa:	b002      	add	sp, #8
 80159fc:	b002      	add	sp, #8
 80159fe:	4770      	bx	lr
    c.Seconds--;
 8015a00:	3b01      	subs	r3, #1
 8015a02:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 8015a04:	f501 717a 	add.w	r1, r1, #1000	@ 0x3e8
 8015a08:	8081      	strh	r1, [r0, #4]
  return c;
 8015a0a:	e7f6      	b.n	80159fa <SysTimeSub+0x2c>

08015a0c <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8015a0c:	b530      	push	{r4, r5, lr}
 8015a0e:	b089      	sub	sp, #36	@ 0x24
 8015a10:	ac02      	add	r4, sp, #8
 8015a12:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8015a16:	2300      	movs	r3, #0
 8015a18:	9304      	str	r3, [sp, #16]
 8015a1a:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8015a1e:	4d0b      	ldr	r5, [pc, #44]	@ (8015a4c <SysTimeSet+0x40>)
 8015a20:	692b      	ldr	r3, [r5, #16]
 8015a22:	a805      	add	r0, sp, #20
 8015a24:	4798      	blx	r3
 8015a26:	4603      	mov	r3, r0
 8015a28:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8015a2a:	9a05      	ldr	r2, [sp, #20]
 8015a2c:	9200      	str	r2, [sp, #0]
 8015a2e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8015a32:	a806      	add	r0, sp, #24
 8015a34:	f7ff ffcb 	bl	80159ce <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8015a38:	682b      	ldr	r3, [r5, #0]
 8015a3a:	9806      	ldr	r0, [sp, #24]
 8015a3c:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8015a3e:	68ab      	ldr	r3, [r5, #8]
 8015a40:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8015a44:	4798      	blx	r3
}
 8015a46:	b009      	add	sp, #36	@ 0x24
 8015a48:	bd30      	pop	{r4, r5, pc}
 8015a4a:	bf00      	nop
 8015a4c:	08016314 	.word	0x08016314

08015a50 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8015a50:	b530      	push	{r4, r5, lr}
 8015a52:	b087      	sub	sp, #28
 8015a54:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8015a56:	2300      	movs	r3, #0
 8015a58:	9304      	str	r3, [sp, #16]
 8015a5a:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8015a5e:	6003      	str	r3, [r0, #0]
 8015a60:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8015a62:	4d0b      	ldr	r5, [pc, #44]	@ (8015a90 <SysTimeGet+0x40>)
 8015a64:	692b      	ldr	r3, [r5, #16]
 8015a66:	a805      	add	r0, sp, #20
 8015a68:	4798      	blx	r3
 8015a6a:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8015a6c:	68eb      	ldr	r3, [r5, #12]
 8015a6e:	4798      	blx	r3
 8015a70:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8015a74:	686b      	ldr	r3, [r5, #4]
 8015a76:	4798      	blx	r3
 8015a78:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8015a7a:	9b05      	ldr	r3, [sp, #20]
 8015a7c:	9300      	str	r3, [sp, #0]
 8015a7e:	9b04      	ldr	r3, [sp, #16]
 8015a80:	aa02      	add	r2, sp, #8
 8015a82:	ca06      	ldmia	r2, {r1, r2}
 8015a84:	4620      	mov	r0, r4
 8015a86:	f7ff ff83 	bl	8015990 <SysTimeAdd>

  return sysTime;
}
 8015a8a:	4620      	mov	r0, r4
 8015a8c:	b007      	add	sp, #28
 8015a8e:	bd30      	pop	{r4, r5, pc}
 8015a90:	08016314 	.word	0x08016314

08015a94 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8015a94:	b530      	push	{r4, r5, lr}
 8015a96:	b083      	sub	sp, #12
 8015a98:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	9300      	str	r3, [sp, #0]
 8015a9e:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8015aa2:	4b06      	ldr	r3, [pc, #24]	@ (8015abc <SysTimeGetMcuTime+0x28>)
 8015aa4:	691b      	ldr	r3, [r3, #16]
 8015aa6:	466d      	mov	r5, sp
 8015aa8:	a801      	add	r0, sp, #4
 8015aaa:	4798      	blx	r3
 8015aac:	9000      	str	r0, [sp, #0]

  return calendarTime;
 8015aae:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015ab2:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8015ab6:	4620      	mov	r0, r4
 8015ab8:	b003      	add	sp, #12
 8015aba:	bd30      	pop	{r4, r5, pc}
 8015abc:	08016314 	.word	0x08016314

08015ac0 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8015ac0:	b530      	push	{r4, r5, lr}
 8015ac2:	b089      	sub	sp, #36	@ 0x24
 8015ac4:	ac02      	add	r4, sp, #8
 8015ac6:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8015aca:	4d0c      	ldr	r5, [pc, #48]	@ (8015afc <SysTimeToMs+0x3c>)
 8015acc:	68eb      	ldr	r3, [r5, #12]
 8015ace:	4798      	blx	r3
 8015ad0:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8015ad4:	686b      	ldr	r3, [r5, #4]
 8015ad6:	4798      	blx	r3
 8015ad8:	4603      	mov	r3, r0
 8015ada:	9006      	str	r0, [sp, #24]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8015adc:	9a07      	ldr	r2, [sp, #28]
 8015ade:	9200      	str	r2, [sp, #0]
 8015ae0:	e894 0006 	ldmia.w	r4, {r1, r2}
 8015ae4:	a804      	add	r0, sp, #16
 8015ae6:	f7ff ff72 	bl	80159ce <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8015aea:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 8015aee:	9a04      	ldr	r2, [sp, #16]
 8015af0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8015af4:	fb00 3002 	mla	r0, r0, r2, r3
 8015af8:	b009      	add	sp, #36	@ 0x24
 8015afa:	bd30      	pop	{r4, r5, pc}
 8015afc:	08016314 	.word	0x08016314

08015b00 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8015b00:	b530      	push	{r4, r5, lr}
 8015b02:	b087      	sub	sp, #28
 8015b04:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 8015b06:	4b12      	ldr	r3, [pc, #72]	@ (8015b50 <SysTimeFromMs+0x50>)
 8015b08:	fba3 2301 	umull	r2, r3, r3, r1
 8015b0c:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8015b0e:	9304      	str	r3, [sp, #16]
 8015b10:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8015b14:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015b18:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 8015b1c:	f8ad 1014 	strh.w	r1, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 8015b20:	2300      	movs	r3, #0
 8015b22:	9302      	str	r3, [sp, #8]
 8015b24:	9303      	str	r3, [sp, #12]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8015b26:	4d0b      	ldr	r5, [pc, #44]	@ (8015b54 <SysTimeFromMs+0x54>)
 8015b28:	68eb      	ldr	r3, [r5, #12]
 8015b2a:	4798      	blx	r3
 8015b2c:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8015b30:	686b      	ldr	r3, [r5, #4]
 8015b32:	4798      	blx	r3
 8015b34:	4603      	mov	r3, r0
 8015b36:	9002      	str	r0, [sp, #8]
  return SysTimeAdd( sysTime, DeltaTime );
 8015b38:	9a03      	ldr	r2, [sp, #12]
 8015b3a:	9200      	str	r2, [sp, #0]
 8015b3c:	aa06      	add	r2, sp, #24
 8015b3e:	e912 0006 	ldmdb	r2, {r1, r2}
 8015b42:	4620      	mov	r0, r4
 8015b44:	f7ff ff24 	bl	8015990 <SysTimeAdd>
}
 8015b48:	4620      	mov	r0, r4
 8015b4a:	b007      	add	sp, #28
 8015b4c:	bd30      	pop	{r4, r5, pc}
 8015b4e:	bf00      	nop
 8015b50:	10624dd3 	.word	0x10624dd3
 8015b54:	08016314 	.word	0x08016314

08015b58 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8015b58:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8015b5a:	4b03      	ldr	r3, [pc, #12]	@ (8015b68 <UTIL_TIMER_Init+0x10>)
 8015b5c:	2200      	movs	r2, #0
 8015b5e:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8015b60:	4b02      	ldr	r3, [pc, #8]	@ (8015b6c <UTIL_TIMER_Init+0x14>)
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	4798      	blx	r3
}
 8015b66:	bd08      	pop	{r3, pc}
 8015b68:	20004364 	.word	0x20004364
 8015b6c:	08016328 	.word	0x08016328

08015b70 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 8015b70:	b1a8      	cbz	r0, 8015b9e <UTIL_TIMER_Create+0x2e>
{
 8015b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b74:	4617      	mov	r7, r2
 8015b76:	461e      	mov	r6, r3
 8015b78:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 8015b7a:	b193      	cbz	r3, 8015ba2 <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 8015b7c:	2500      	movs	r5, #0
 8015b7e:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8015b80:	4b09      	ldr	r3, [pc, #36]	@ (8015ba8 <UTIL_TIMER_Create+0x38>)
 8015b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b84:	4608      	mov	r0, r1
 8015b86:	4798      	blx	r3
 8015b88:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8015b8a:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 8015b8c:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8015b8e:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8015b90:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 8015b92:	9b06      	ldr	r3, [sp, #24]
 8015b94:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8015b96:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8015b98:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 8015b9a:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 8015b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 8015b9e:	2001      	movs	r0, #1
}
 8015ba0:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 8015ba2:	2001      	movs	r0, #1
 8015ba4:	e7fa      	b.n	8015b9c <UTIL_TIMER_Create+0x2c>
 8015ba6:	bf00      	nop
 8015ba8:	08016328 	.word	0x08016328

08015bac <UTIL_TIMER_IsRunning>:
  return ret;
}

uint32_t UTIL_TIMER_IsRunning( UTIL_TIMER_Object_t *TimerObject )
{
  if( TimerObject != NULL )
 8015bac:	b108      	cbz	r0, 8015bb2 <UTIL_TIMER_IsRunning+0x6>
  {
    return TimerObject->IsRunning;
 8015bae:	7a40      	ldrb	r0, [r0, #9]
 8015bb0:	4770      	bx	lr
  }
  else
  {
    return 0;
 8015bb2:	2000      	movs	r0, #0
  }
}
 8015bb4:	4770      	bx	lr
	...

08015bb8 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8015bb8:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8015bba:	4c03      	ldr	r4, [pc, #12]	@ (8015bc8 <UTIL_TIMER_GetCurrentTime+0x10>)
 8015bbc:	69e3      	ldr	r3, [r4, #28]
 8015bbe:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8015bc0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8015bc2:	4798      	blx	r3
}
 8015bc4:	bd10      	pop	{r4, pc}
 8015bc6:	bf00      	nop
 8015bc8:	08016328 	.word	0x08016328

08015bcc <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8015bcc:	b570      	push	{r4, r5, r6, lr}
 8015bce:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8015bd0:	4d05      	ldr	r5, [pc, #20]	@ (8015be8 <UTIL_TIMER_GetElapsedTime+0x1c>)
 8015bd2:	69eb      	ldr	r3, [r5, #28]
 8015bd4:	4798      	blx	r3
 8015bd6:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8015bd8:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8015bda:	4630      	mov	r0, r6
 8015bdc:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8015bde:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8015be0:	1a20      	subs	r0, r4, r0
 8015be2:	4798      	blx	r3
}
 8015be4:	bd70      	pop	{r4, r5, r6, pc}
 8015be6:	bf00      	nop
 8015be8:	08016328 	.word	0x08016328

08015bec <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8015bec:	4b05      	ldr	r3, [pc, #20]	@ (8015c04 <TimerExists+0x18>)
 8015bee:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 8015bf0:	e000      	b.n	8015bf4 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 8015bf2:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 8015bf4:	b11b      	cbz	r3, 8015bfe <TimerExists+0x12>
    if( cur == TimerObject )
 8015bf6:	4283      	cmp	r3, r0
 8015bf8:	d1fb      	bne.n	8015bf2 <TimerExists+0x6>
      return true;
 8015bfa:	2001      	movs	r0, #1
  }
  return false;
}
 8015bfc:	4770      	bx	lr
  return false;
 8015bfe:	2000      	movs	r0, #0
 8015c00:	4770      	bx	lr
 8015c02:	bf00      	nop
 8015c04:	20004364 	.word	0x20004364

08015c08 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8015c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c0a:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8015c0c:	4e09      	ldr	r6, [pc, #36]	@ (8015c34 <TimerSetTimeout+0x2c>)
 8015c0e:	6a33      	ldr	r3, [r6, #32]
 8015c10:	4798      	blx	r3
 8015c12:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8015c14:	2301      	movs	r3, #1
 8015c16:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8015c18:	6827      	ldr	r7, [r4, #0]
 8015c1a:	69b6      	ldr	r6, [r6, #24]
 8015c1c:	47b0      	blx	r6
 8015c1e:	4428      	add	r0, r5
 8015c20:	4287      	cmp	r7, r0
 8015c22:	d202      	bcs.n	8015c2a <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8015c24:	47b0      	blx	r6
 8015c26:	4428      	add	r0, r5
 8015c28:	6020      	str	r0, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8015c2a:	4b02      	ldr	r3, [pc, #8]	@ (8015c34 <TimerSetTimeout+0x2c>)
 8015c2c:	689b      	ldr	r3, [r3, #8]
 8015c2e:	6820      	ldr	r0, [r4, #0]
 8015c30:	4798      	blx	r3
}
 8015c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c34:	08016328 	.word	0x08016328

08015c38 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8015c38:	b368      	cbz	r0, 8015c96 <UTIL_TIMER_Stop+0x5e>
{
 8015c3a:	b510      	push	{r4, lr}
 8015c3c:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015c3e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8015c42:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8015c44:	4b15      	ldr	r3, [pc, #84]	@ (8015c9c <UTIL_TIMER_Stop+0x64>)
 8015c46:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8015c48:	2301      	movs	r3, #1
 8015c4a:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 8015c4c:	b1e1      	cbz	r1, 8015c88 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 8015c4e:	2300      	movs	r3, #0
 8015c50:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8015c52:	4288      	cmp	r0, r1
 8015c54:	d006      	beq.n	8015c64 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8015c56:	460b      	mov	r3, r1
        while( cur != NULL )
 8015c58:	b1b3      	cbz	r3, 8015c88 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 8015c5a:	4293      	cmp	r3, r2
 8015c5c:	d011      	beq.n	8015c82 <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 8015c5e:	4619      	mov	r1, r3
            cur = cur->Next;
 8015c60:	695b      	ldr	r3, [r3, #20]
 8015c62:	e7f9      	b.n	8015c58 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 8015c64:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 8015c66:	6948      	ldr	r0, [r1, #20]
 8015c68:	b120      	cbz	r0, 8015c74 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 8015c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8015c9c <UTIL_TIMER_Stop+0x64>)
 8015c6c:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 8015c6e:	f7ff ffcb 	bl	8015c08 <TimerSetTimeout>
 8015c72:	e009      	b.n	8015c88 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 8015c74:	4b0a      	ldr	r3, [pc, #40]	@ (8015ca0 <UTIL_TIMER_Stop+0x68>)
 8015c76:	68db      	ldr	r3, [r3, #12]
 8015c78:	4798      	blx	r3
            TimerListHead = NULL;
 8015c7a:	4b08      	ldr	r3, [pc, #32]	@ (8015c9c <UTIL_TIMER_Stop+0x64>)
 8015c7c:	2200      	movs	r2, #0
 8015c7e:	601a      	str	r2, [r3, #0]
 8015c80:	e002      	b.n	8015c88 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 8015c82:	695b      	ldr	r3, [r3, #20]
 8015c84:	b123      	cbz	r3, 8015c90 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 8015c86:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015c88:	f384 8810 	msr	PRIMASK, r4
}
 8015c8c:	2000      	movs	r0, #0
}
 8015c8e:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 8015c90:	2300      	movs	r3, #0
 8015c92:	614b      	str	r3, [r1, #20]
 8015c94:	e7f8      	b.n	8015c88 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 8015c96:	2001      	movs	r0, #1
}
 8015c98:	4770      	bx	lr
 8015c9a:	bf00      	nop
 8015c9c:	20004364 	.word	0x20004364
 8015ca0:	08016328 	.word	0x08016328

08015ca4 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8015ca4:	4b09      	ldr	r3, [pc, #36]	@ (8015ccc <TimerInsertTimer+0x28>)
 8015ca6:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8015ca8:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 8015caa:	e001      	b.n	8015cb0 <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 8015cac:	461a      	mov	r2, r3
        next = next->Next;
 8015cae:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 8015cb0:	6951      	ldr	r1, [r2, #20]
 8015cb2:	b139      	cbz	r1, 8015cc4 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 8015cb4:	6819      	ldr	r1, [r3, #0]
 8015cb6:	f8d0 c000 	ldr.w	ip, [r0]
 8015cba:	458c      	cmp	ip, r1
 8015cbc:	d8f6      	bhi.n	8015cac <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 8015cbe:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 8015cc0:	6143      	str	r3, [r0, #20]
        return;
 8015cc2:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 8015cc4:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8015cc6:	2300      	movs	r3, #0
 8015cc8:	6143      	str	r3, [r0, #20]
}
 8015cca:	4770      	bx	lr
 8015ccc:	20004364 	.word	0x20004364

08015cd0 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8015cd0:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8015cd2:	4b05      	ldr	r3, [pc, #20]	@ (8015ce8 <TimerInsertNewHeadTimer+0x18>)
 8015cd4:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 8015cd6:	b10b      	cbz	r3, 8015cdc <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8015cd8:	2200      	movs	r2, #0
 8015cda:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8015cdc:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 8015cde:	4b02      	ldr	r3, [pc, #8]	@ (8015ce8 <TimerInsertNewHeadTimer+0x18>)
 8015ce0:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 8015ce2:	f7ff ff91 	bl	8015c08 <TimerSetTimeout>
}
 8015ce6:	bd08      	pop	{r3, pc}
 8015ce8:	20004364 	.word	0x20004364

08015cec <UTIL_TIMER_Start>:
{
 8015cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8015cee:	2800      	cmp	r0, #0
 8015cf0:	d036      	beq.n	8015d60 <UTIL_TIMER_Start+0x74>
 8015cf2:	4604      	mov	r4, r0
 8015cf4:	f7ff ff7a 	bl	8015bec <TimerExists>
 8015cf8:	2800      	cmp	r0, #0
 8015cfa:	d134      	bne.n	8015d66 <UTIL_TIMER_Start+0x7a>
 8015cfc:	7a65      	ldrb	r5, [r4, #9]
 8015cfe:	2d00      	cmp	r5, #0
 8015d00:	d133      	bne.n	8015d6a <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015d02:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8015d06:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8015d08:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8015d0a:	4b19      	ldr	r3, [pc, #100]	@ (8015d70 <UTIL_TIMER_Start+0x84>)
 8015d0c:	6a1b      	ldr	r3, [r3, #32]
 8015d0e:	4798      	blx	r3
    if( ticks < minValue )
 8015d10:	4287      	cmp	r7, r0
 8015d12:	d300      	bcc.n	8015d16 <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 8015d14:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 8015d16:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8015d18:	2300      	movs	r3, #0
 8015d1a:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8015d1c:	2201      	movs	r2, #1
 8015d1e:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8015d20:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 8015d22:	4b14      	ldr	r3, [pc, #80]	@ (8015d74 <UTIL_TIMER_Start+0x88>)
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	b183      	cbz	r3, 8015d4a <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8015d28:	4b11      	ldr	r3, [pc, #68]	@ (8015d70 <UTIL_TIMER_Start+0x84>)
 8015d2a:	699b      	ldr	r3, [r3, #24]
 8015d2c:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8015d2e:	6823      	ldr	r3, [r4, #0]
 8015d30:	4418      	add	r0, r3
 8015d32:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8015d34:	4b0f      	ldr	r3, [pc, #60]	@ (8015d74 <UTIL_TIMER_Start+0x88>)
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	4298      	cmp	r0, r3
 8015d3c:	d20c      	bcs.n	8015d58 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 8015d3e:	4620      	mov	r0, r4
 8015d40:	f7ff ffc6 	bl	8015cd0 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015d44:	f386 8810 	msr	PRIMASK, r6
}
 8015d48:	e00b      	b.n	8015d62 <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 8015d4a:	4b09      	ldr	r3, [pc, #36]	@ (8015d70 <UTIL_TIMER_Start+0x84>)
 8015d4c:	691b      	ldr	r3, [r3, #16]
 8015d4e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8015d50:	4620      	mov	r0, r4
 8015d52:	f7ff ffbd 	bl	8015cd0 <TimerInsertNewHeadTimer>
 8015d56:	e7f5      	b.n	8015d44 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 8015d58:	4620      	mov	r0, r4
 8015d5a:	f7ff ffa3 	bl	8015ca4 <TimerInsertTimer>
 8015d5e:	e7f1      	b.n	8015d44 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8015d60:	2501      	movs	r5, #1
}
 8015d62:	4628      	mov	r0, r5
 8015d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 8015d66:	2501      	movs	r5, #1
 8015d68:	e7fb      	b.n	8015d62 <UTIL_TIMER_Start+0x76>
 8015d6a:	2501      	movs	r5, #1
 8015d6c:	e7f9      	b.n	8015d62 <UTIL_TIMER_Start+0x76>
 8015d6e:	bf00      	nop
 8015d70:	08016328 	.word	0x08016328
 8015d74:	20004364 	.word	0x20004364

08015d78 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 8015d78:	b198      	cbz	r0, 8015da2 <UTIL_TIMER_SetPeriod+0x2a>
{
 8015d7a:	b510      	push	{r4, lr}
 8015d7c:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8015d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8015da8 <UTIL_TIMER_SetPeriod+0x30>)
 8015d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d82:	4608      	mov	r0, r1
 8015d84:	4798      	blx	r3
 8015d86:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8015d88:	4620      	mov	r0, r4
 8015d8a:	f7ff ff2f 	bl	8015bec <TimerExists>
 8015d8e:	b908      	cbnz	r0, 8015d94 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8015d90:	2000      	movs	r0, #0
}
 8015d92:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 8015d94:	4620      	mov	r0, r4
 8015d96:	f7ff ff4f 	bl	8015c38 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8015d9a:	4620      	mov	r0, r4
 8015d9c:	f7ff ffa6 	bl	8015cec <UTIL_TIMER_Start>
 8015da0:	e7f7      	b.n	8015d92 <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 8015da2:	2001      	movs	r0, #1
}
 8015da4:	4770      	bx	lr
 8015da6:	bf00      	nop
 8015da8:	08016328 	.word	0x08016328

08015dac <UTIL_TIMER_IRQ_Handler>:
{
 8015dac:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015dae:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8015db2:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8015db4:	4c1e      	ldr	r4, [pc, #120]	@ (8015e30 <UTIL_TIMER_IRQ_Handler+0x84>)
 8015db6:	6963      	ldr	r3, [r4, #20]
 8015db8:	4798      	blx	r3
 8015dba:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8015dbc:	6923      	ldr	r3, [r4, #16]
 8015dbe:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 8015dc0:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 8015dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8015e34 <UTIL_TIMER_IRQ_Handler+0x88>)
 8015dc4:	681b      	ldr	r3, [r3, #0]
 8015dc6:	b923      	cbnz	r3, 8015dd2 <UTIL_TIMER_IRQ_Handler+0x26>
 8015dc8:	e018      	b.n	8015dfc <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 8015dca:	2200      	movs	r2, #0
 8015dcc:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8015dce:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8015dd0:	b1a3      	cbz	r3, 8015dfc <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 8015dd2:	681a      	ldr	r2, [r3, #0]
 8015dd4:	42a2      	cmp	r2, r4
 8015dd6:	d9f8      	bls.n	8015dca <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8015dd8:	1a31      	subs	r1, r6, r0
 8015dda:	440a      	add	r2, r1
 8015ddc:	601a      	str	r2, [r3, #0]
 8015dde:	e7f6      	b.n	8015dce <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 8015de0:	4b14      	ldr	r3, [pc, #80]	@ (8015e34 <UTIL_TIMER_IRQ_Handler+0x88>)
 8015de2:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 8015de4:	6962      	ldr	r2, [r4, #20]
 8015de6:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8015de8:	2300      	movs	r3, #0
 8015dea:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 8015dec:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 8015dee:	68e3      	ldr	r3, [r4, #12]
 8015df0:	6920      	ldr	r0, [r4, #16]
 8015df2:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8015df4:	8963      	ldrh	r3, [r4, #10]
 8015df6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015dfa:	d012      	beq.n	8015e22 <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8015dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8015e34 <UTIL_TIMER_IRQ_Handler+0x88>)
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	b13b      	cbz	r3, 8015e12 <UTIL_TIMER_IRQ_Handler+0x66>
 8015e02:	681c      	ldr	r4, [r3, #0]
 8015e04:	2c00      	cmp	r4, #0
 8015e06:	d0eb      	beq.n	8015de0 <UTIL_TIMER_IRQ_Handler+0x34>
 8015e08:	4b09      	ldr	r3, [pc, #36]	@ (8015e30 <UTIL_TIMER_IRQ_Handler+0x84>)
 8015e0a:	699b      	ldr	r3, [r3, #24]
 8015e0c:	4798      	blx	r3
 8015e0e:	4284      	cmp	r4, r0
 8015e10:	d3e6      	bcc.n	8015de0 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8015e12:	4b08      	ldr	r3, [pc, #32]	@ (8015e34 <UTIL_TIMER_IRQ_Handler+0x88>)
 8015e14:	6818      	ldr	r0, [r3, #0]
 8015e16:	b108      	cbz	r0, 8015e1c <UTIL_TIMER_IRQ_Handler+0x70>
 8015e18:	7a03      	ldrb	r3, [r0, #8]
 8015e1a:	b133      	cbz	r3, 8015e2a <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015e1c:	f385 8810 	msr	PRIMASK, r5
}
 8015e20:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 8015e22:	4620      	mov	r0, r4
 8015e24:	f7ff ff62 	bl	8015cec <UTIL_TIMER_Start>
 8015e28:	e7e8      	b.n	8015dfc <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 8015e2a:	f7ff feed 	bl	8015c08 <TimerSetTimeout>
 8015e2e:	e7f5      	b.n	8015e1c <UTIL_TIMER_IRQ_Handler+0x70>
 8015e30:	08016328 	.word	0x08016328
 8015e34:	20004364 	.word	0x20004364

08015e38 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8015e38:	4601      	mov	r1, r0
  int i = 0;
 8015e3a:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8015e3c:	e008      	b.n	8015e50 <ee_skip_atoi+0x18>
 8015e3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8015e42:	1c53      	adds	r3, r2, #1
 8015e44:	600b      	str	r3, [r1, #0]
 8015e46:	7813      	ldrb	r3, [r2, #0]
 8015e48:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8015e4c:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 8015e50:	680a      	ldr	r2, [r1, #0]
 8015e52:	7813      	ldrb	r3, [r2, #0]
 8015e54:	3b30      	subs	r3, #48	@ 0x30
 8015e56:	b2db      	uxtb	r3, r3
 8015e58:	2b09      	cmp	r3, #9
 8015e5a:	d9f0      	bls.n	8015e3e <ee_skip_atoi+0x6>
  return i;
}
 8015e5c:	4770      	bx	lr
	...

08015e60 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8015e60:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8015e64:	b093      	sub	sp, #76	@ 0x4c
 8015e66:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8015e68:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8015e6a:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8015e6e:	d110      	bne.n	8015e92 <ee_number+0x32>
  char *dig = lower_digits;
 8015e70:	f8df a0f8 	ldr.w	sl, [pc, #248]	@ 8015f6c <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8015e74:	1e9f      	subs	r7, r3, #2
 8015e76:	2f22      	cmp	r7, #34	@ 0x22
 8015e78:	d875      	bhi.n	8015f66 <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 8015e7a:	f016 0401 	ands.w	r4, r6, #1
 8015e7e:	d00b      	beq.n	8015e98 <ee_number+0x38>
 8015e80:	f04f 0e30 	mov.w	lr, #48	@ 0x30
  sign = 0;
  if (type & SIGN)
 8015e84:	f016 0f02 	tst.w	r6, #2
 8015e88:	d00f      	beq.n	8015eaa <ee_number+0x4a>
  {
    if (num < 0)
 8015e8a:	2a00      	cmp	r2, #0
 8015e8c:	db07      	blt.n	8015e9e <ee_number+0x3e>
  sign = 0;
 8015e8e:	2700      	movs	r7, #0
 8015e90:	e00c      	b.n	8015eac <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 8015e92:	f8df a0dc 	ldr.w	sl, [pc, #220]	@ 8015f70 <ee_number+0x110>
 8015e96:	e7ed      	b.n	8015e74 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 8015e98:	f04f 0e20 	mov.w	lr, #32
 8015e9c:	e7f2      	b.n	8015e84 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 8015e9e:	4252      	negs	r2, r2
      size--;
 8015ea0:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8015ea2:	3e01      	subs	r6, #1
 8015ea4:	961a      	str	r6, [sp, #104]	@ 0x68
      sign = '-';
 8015ea6:	272d      	movs	r7, #45	@ 0x2d
 8015ea8:	e000      	b.n	8015eac <ee_number+0x4c>
  sign = 0;
 8015eaa:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 8015eac:	bb5a      	cbnz	r2, 8015f06 <ee_number+0xa6>
    tmp[i++] = '0';
 8015eae:	2330      	movs	r3, #48	@ 0x30
 8015eb0:	f88d 3004 	strb.w	r3, [sp, #4]
 8015eb4:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 8015eb8:	45ac      	cmp	ip, r5
 8015eba:	dd00      	ble.n	8015ebe <ee_number+0x5e>
 8015ebc:	4665      	mov	r5, ip
  size -= precision;
 8015ebe:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8015ec0:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8015ec2:	b31c      	cbz	r4, 8015f0c <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 8015ec4:	b11f      	cbz	r7, 8015ece <ee_number+0x6e>
 8015ec6:	f800 7b01 	strb.w	r7, [r0], #1
 8015eca:	3901      	subs	r1, #1
 8015ecc:	d007      	beq.n	8015ede <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	f103 33ff 	add.w	r3, r3, #4294967295
 8015ed4:	dd24      	ble.n	8015f20 <ee_number+0xc0>
 8015ed6:	f800 eb01 	strb.w	lr, [r0], #1
 8015eda:	3901      	subs	r1, #1
 8015edc:	d1f7      	bne.n	8015ece <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 8015ede:	b013      	add	sp, #76	@ 0x4c
 8015ee0:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8015ee4:	fbb2 f6f3 	udiv	r6, r2, r3
 8015ee8:	fb03 2216 	mls	r2, r3, r6, r2
 8015eec:	f81a 8002 	ldrb.w	r8, [sl, r2]
 8015ef0:	f10c 0248 	add.w	r2, ip, #72	@ 0x48
 8015ef4:	446a      	add	r2, sp
 8015ef6:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 8015efa:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8015efc:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 8015f00:	2a00      	cmp	r2, #0
 8015f02:	d1ef      	bne.n	8015ee4 <ee_number+0x84>
 8015f04:	e7d8      	b.n	8015eb8 <ee_number+0x58>
  i = 0;
 8015f06:	f04f 0c00 	mov.w	ip, #0
 8015f0a:	e7f9      	b.n	8015f00 <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	f103 33ff 	add.w	r3, r3, #4294967295
 8015f12:	ddd7      	ble.n	8015ec4 <ee_number+0x64>
 8015f14:	2220      	movs	r2, #32
 8015f16:	f800 2b01 	strb.w	r2, [r0], #1
 8015f1a:	3901      	subs	r1, #1
 8015f1c:	d1f6      	bne.n	8015f0c <ee_number+0xac>
 8015f1e:	e7de      	b.n	8015ede <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 8015f20:	4565      	cmp	r5, ip
 8015f22:	f105 35ff 	add.w	r5, r5, #4294967295
 8015f26:	dd05      	ble.n	8015f34 <ee_number+0xd4>
 8015f28:	2230      	movs	r2, #48	@ 0x30
 8015f2a:	f800 2b01 	strb.w	r2, [r0], #1
 8015f2e:	3901      	subs	r1, #1
 8015f30:	d1f6      	bne.n	8015f20 <ee_number+0xc0>
 8015f32:	e7d4      	b.n	8015ede <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8015f34:	4662      	mov	r2, ip
 8015f36:	2a00      	cmp	r2, #0
 8015f38:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015f3c:	dd09      	ble.n	8015f52 <ee_number+0xf2>
 8015f3e:	f10c 0248 	add.w	r2, ip, #72	@ 0x48
 8015f42:	446a      	add	r2, sp
 8015f44:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8015f48:	f800 2b01 	strb.w	r2, [r0], #1
 8015f4c:	3901      	subs	r1, #1
 8015f4e:	d1f1      	bne.n	8015f34 <ee_number+0xd4>
 8015f50:	e7c5      	b.n	8015ede <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	f103 33ff 	add.w	r3, r3, #4294967295
 8015f58:	ddc1      	ble.n	8015ede <ee_number+0x7e>
 8015f5a:	2220      	movs	r2, #32
 8015f5c:	f800 2b01 	strb.w	r2, [r0], #1
 8015f60:	3901      	subs	r1, #1
 8015f62:	d1f6      	bne.n	8015f52 <ee_number+0xf2>
 8015f64:	e7bb      	b.n	8015ede <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 8015f66:	2000      	movs	r0, #0
 8015f68:	e7b9      	b.n	8015ede <ee_number+0x7e>
 8015f6a:	bf00      	nop
 8015f6c:	080173e8 	.word	0x080173e8
 8015f70:	08017410 	.word	0x08017410

08015f74 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8015f74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f78:	b087      	sub	sp, #28
 8015f7a:	9205      	str	r2, [sp, #20]
 8015f7c:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8015f7e:	1e0f      	subs	r7, r1, #0
 8015f80:	f340 80b8 	ble.w	80160f4 <tiny_vsnprintf_like+0x180>
 8015f84:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8015f86:	4604      	mov	r4, r0
 8015f88:	e004      	b.n	8015f94 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 8015f8a:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8015f8e:	9b05      	ldr	r3, [sp, #20]
 8015f90:	3301      	adds	r3, #1
 8015f92:	9305      	str	r3, [sp, #20]
 8015f94:	9905      	ldr	r1, [sp, #20]
 8015f96:	780a      	ldrb	r2, [r1, #0]
 8015f98:	b922      	cbnz	r2, 8015fa4 <tiny_vsnprintf_like+0x30>
 8015f9a:	1ba3      	subs	r3, r4, r6
 8015f9c:	1e78      	subs	r0, r7, #1
 8015f9e:	4283      	cmp	r3, r0
 8015fa0:	f2c0 80a2 	blt.w	80160e8 <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 8015fa4:	1ba3      	subs	r3, r4, r6
 8015fa6:	f107 38ff 	add.w	r8, r7, #4294967295
 8015faa:	4543      	cmp	r3, r8
 8015fac:	f280 809c 	bge.w	80160e8 <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 8015fb0:	2a25      	cmp	r2, #37	@ 0x25
 8015fb2:	d1ea      	bne.n	8015f8a <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8015fb4:	1c4b      	adds	r3, r1, #1
 8015fb6:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8015fb8:	784b      	ldrb	r3, [r1, #1]
 8015fba:	2b30      	cmp	r3, #48	@ 0x30
 8015fbc:	d020      	beq.n	8016000 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 8015fbe:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 8015fc2:	3b30      	subs	r3, #48	@ 0x30
 8015fc4:	b2db      	uxtb	r3, r3
 8015fc6:	2b09      	cmp	r3, #9
 8015fc8:	d91d      	bls.n	8016006 <tiny_vsnprintf_like+0x92>
    field_width = -1;
 8015fca:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 8015fce:	9b05      	ldr	r3, [sp, #20]
 8015fd0:	781a      	ldrb	r2, [r3, #0]
 8015fd2:	f1a2 0358 	sub.w	r3, r2, #88	@ 0x58
 8015fd6:	2b20      	cmp	r3, #32
 8015fd8:	d867      	bhi.n	80160aa <tiny_vsnprintf_like+0x136>
 8015fda:	e8df f003 	tbb	[pc, r3]
 8015fde:	664a      	.short	0x664a
 8015fe0:	66666666 	.word	0x66666666
 8015fe4:	66666666 	.word	0x66666666
 8015fe8:	66621e66 	.word	0x66621e66
 8015fec:	62666666 	.word	0x62666666
 8015ff0:	66666666 	.word	0x66666666
 8015ff4:	66666666 	.word	0x66666666
 8015ff8:	19662866 	.word	0x19662866
 8015ffc:	6666      	.short	0x6666
 8015ffe:	7c          	.byte	0x7c
 8015fff:	00          	.byte	0x00
      flags |= ZEROPAD;
 8016000:	f04f 0901 	mov.w	r9, #1
 8016004:	e7dd      	b.n	8015fc2 <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 8016006:	a805      	add	r0, sp, #20
 8016008:	f7ff ff16 	bl	8015e38 <ee_skip_atoi>
 801600c:	4605      	mov	r5, r0
 801600e:	e7de      	b.n	8015fce <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 8016010:	230a      	movs	r3, #10
 8016012:	e031      	b.n	8016078 <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8016014:	2320      	movs	r3, #32
 8016016:	f804 3b01 	strb.w	r3, [r4], #1
 801601a:	3d01      	subs	r5, #1
 801601c:	2d00      	cmp	r5, #0
 801601e:	dcf9      	bgt.n	8016014 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 8016020:	9b04      	ldr	r3, [sp, #16]
 8016022:	1d1a      	adds	r2, r3, #4
 8016024:	9204      	str	r2, [sp, #16]
 8016026:	781b      	ldrb	r3, [r3, #0]
 8016028:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801602c:	e7af      	b.n	8015f8e <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 801602e:	9b04      	ldr	r3, [sp, #16]
 8016030:	1d1a      	adds	r2, r3, #4
 8016032:	9204      	str	r2, [sp, #16]
 8016034:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 8016038:	f1b8 0f00 	cmp.w	r8, #0
 801603c:	d003      	beq.n	8016046 <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 801603e:	4640      	mov	r0, r8
 8016040:	f7ea f89e 	bl	8000180 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8016044:	e006      	b.n	8016054 <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 8016046:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 80160f8 <tiny_vsnprintf_like+0x184>
 801604a:	e7f8      	b.n	801603e <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 801604c:	2220      	movs	r2, #32
 801604e:	f804 2b01 	strb.w	r2, [r4], #1
 8016052:	461d      	mov	r5, r3
 8016054:	1e6b      	subs	r3, r5, #1
 8016056:	4285      	cmp	r5, r0
 8016058:	dcf8      	bgt.n	801604c <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801605a:	2200      	movs	r2, #0
 801605c:	e006      	b.n	801606c <tiny_vsnprintf_like+0xf8>
 801605e:	4643      	mov	r3, r8
 8016060:	f813 1b01 	ldrb.w	r1, [r3], #1
 8016064:	f804 1b01 	strb.w	r1, [r4], #1
 8016068:	3201      	adds	r2, #1
 801606a:	4698      	mov	r8, r3
 801606c:	4282      	cmp	r2, r0
 801606e:	dbf6      	blt.n	801605e <tiny_vsnprintf_like+0xea>
 8016070:	e78d      	b.n	8015f8e <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 8016072:	f049 0940 	orr.w	r9, r9, #64	@ 0x40

      case 'x':
        base = 16;
 8016076:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 8016078:	f019 0f02 	tst.w	r9, #2
 801607c:	d02f      	beq.n	80160de <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 801607e:	9a04      	ldr	r2, [sp, #16]
 8016080:	1d11      	adds	r1, r2, #4
 8016082:	9104      	str	r1, [sp, #16]
 8016084:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8016086:	1ba1      	subs	r1, r4, r6
 8016088:	f8cd 9008 	str.w	r9, [sp, #8]
 801608c:	f04f 30ff 	mov.w	r0, #4294967295
 8016090:	9001      	str	r0, [sp, #4]
 8016092:	9500      	str	r5, [sp, #0]
 8016094:	eba8 0101 	sub.w	r1, r8, r1
 8016098:	4620      	mov	r0, r4
 801609a:	f7ff fee1 	bl	8015e60 <ee_number>
 801609e:	4604      	mov	r4, r0
 80160a0:	e775      	b.n	8015f8e <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 80160a2:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 80160a6:	230a      	movs	r3, #10
 80160a8:	e7e6      	b.n	8016078 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 80160aa:	2a25      	cmp	r2, #37	@ 0x25
 80160ac:	d002      	beq.n	80160b4 <tiny_vsnprintf_like+0x140>
 80160ae:	2325      	movs	r3, #37	@ 0x25
 80160b0:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 80160b4:	1ba3      	subs	r3, r4, r6
 80160b6:	4598      	cmp	r8, r3
 80160b8:	dd0f      	ble.n	80160da <tiny_vsnprintf_like+0x166>
        if (*fmt)
 80160ba:	9b05      	ldr	r3, [sp, #20]
 80160bc:	781a      	ldrb	r2, [r3, #0]
 80160be:	b13a      	cbz	r2, 80160d0 <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 80160c0:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 80160c4:	1ba3      	subs	r3, r4, r6
 80160c6:	4598      	cmp	r8, r3
 80160c8:	f73f af61 	bgt.w	8015f8e <tiny_vsnprintf_like+0x1a>
    base = 10;
 80160cc:	230a      	movs	r3, #10
 80160ce:	e7d3      	b.n	8016078 <tiny_vsnprintf_like+0x104>
          --fmt;
 80160d0:	3b01      	subs	r3, #1
 80160d2:	9305      	str	r3, [sp, #20]
 80160d4:	e7f6      	b.n	80160c4 <tiny_vsnprintf_like+0x150>
        base = 16;
 80160d6:	2310      	movs	r3, #16
 80160d8:	e7ce      	b.n	8016078 <tiny_vsnprintf_like+0x104>
    base = 10;
 80160da:	230a      	movs	r3, #10
 80160dc:	e7cc      	b.n	8016078 <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 80160de:	9a04      	ldr	r2, [sp, #16]
 80160e0:	1d11      	adds	r1, r2, #4
 80160e2:	9104      	str	r1, [sp, #16]
 80160e4:	6812      	ldr	r2, [r2, #0]
 80160e6:	e7ce      	b.n	8016086 <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 80160e8:	2300      	movs	r3, #0
 80160ea:	7023      	strb	r3, [r4, #0]
  return str - buf;
 80160ec:	1ba0      	subs	r0, r4, r6
}
 80160ee:	b007      	add	sp, #28
 80160f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 80160f4:	2000      	movs	r0, #0
 80160f6:	e7fa      	b.n	80160ee <tiny_vsnprintf_like+0x17a>
 80160f8:	08017438 	.word	0x08017438

080160fc <memset>:
 80160fc:	4402      	add	r2, r0
 80160fe:	4603      	mov	r3, r0
 8016100:	4293      	cmp	r3, r2
 8016102:	d100      	bne.n	8016106 <memset+0xa>
 8016104:	4770      	bx	lr
 8016106:	f803 1b01 	strb.w	r1, [r3], #1
 801610a:	e7f9      	b.n	8016100 <memset+0x4>

0801610c <__libc_init_array>:
 801610c:	b570      	push	{r4, r5, r6, lr}
 801610e:	4d0d      	ldr	r5, [pc, #52]	@ (8016144 <__libc_init_array+0x38>)
 8016110:	4c0d      	ldr	r4, [pc, #52]	@ (8016148 <__libc_init_array+0x3c>)
 8016112:	1b64      	subs	r4, r4, r5
 8016114:	10a4      	asrs	r4, r4, #2
 8016116:	2600      	movs	r6, #0
 8016118:	42a6      	cmp	r6, r4
 801611a:	d109      	bne.n	8016130 <__libc_init_array+0x24>
 801611c:	4d0b      	ldr	r5, [pc, #44]	@ (801614c <__libc_init_array+0x40>)
 801611e:	4c0c      	ldr	r4, [pc, #48]	@ (8016150 <__libc_init_array+0x44>)
 8016120:	f000 f8a6 	bl	8016270 <_init>
 8016124:	1b64      	subs	r4, r4, r5
 8016126:	10a4      	asrs	r4, r4, #2
 8016128:	2600      	movs	r6, #0
 801612a:	42a6      	cmp	r6, r4
 801612c:	d105      	bne.n	801613a <__libc_init_array+0x2e>
 801612e:	bd70      	pop	{r4, r5, r6, pc}
 8016130:	f855 3b04 	ldr.w	r3, [r5], #4
 8016134:	4798      	blx	r3
 8016136:	3601      	adds	r6, #1
 8016138:	e7ee      	b.n	8016118 <__libc_init_array+0xc>
 801613a:	f855 3b04 	ldr.w	r3, [r5], #4
 801613e:	4798      	blx	r3
 8016140:	3601      	adds	r6, #1
 8016142:	e7f2      	b.n	801612a <__libc_init_array+0x1e>
 8016144:	08017448 	.word	0x08017448
 8016148:	08017448 	.word	0x08017448
 801614c:	08017448 	.word	0x08017448
 8016150:	0801744c 	.word	0x0801744c

08016154 <memcpy>:
 8016154:	440a      	add	r2, r1
 8016156:	4291      	cmp	r1, r2
 8016158:	f100 33ff 	add.w	r3, r0, #4294967295
 801615c:	d100      	bne.n	8016160 <memcpy+0xc>
 801615e:	4770      	bx	lr
 8016160:	b510      	push	{r4, lr}
 8016162:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016166:	f803 4f01 	strb.w	r4, [r3, #1]!
 801616a:	4291      	cmp	r1, r2
 801616c:	d1f9      	bne.n	8016162 <memcpy+0xe>
 801616e:	bd10      	pop	{r4, pc}

08016170 <floor>:
 8016170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016174:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8016178:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 801617c:	2e13      	cmp	r6, #19
 801617e:	4602      	mov	r2, r0
 8016180:	460b      	mov	r3, r1
 8016182:	460c      	mov	r4, r1
 8016184:	4605      	mov	r5, r0
 8016186:	4680      	mov	r8, r0
 8016188:	dc35      	bgt.n	80161f6 <floor+0x86>
 801618a:	2e00      	cmp	r6, #0
 801618c:	da17      	bge.n	80161be <floor+0x4e>
 801618e:	a334      	add	r3, pc, #208	@ (adr r3, 8016260 <floor+0xf0>)
 8016190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016194:	f7ea f8b6 	bl	8000304 <__adddf3>
 8016198:	2200      	movs	r2, #0
 801619a:	2300      	movs	r3, #0
 801619c:	f7ea fae6 	bl	800076c <__aeabi_dcmpgt>
 80161a0:	b150      	cbz	r0, 80161b8 <floor+0x48>
 80161a2:	2c00      	cmp	r4, #0
 80161a4:	da57      	bge.n	8016256 <floor+0xe6>
 80161a6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80161aa:	432c      	orrs	r4, r5
 80161ac:	2500      	movs	r5, #0
 80161ae:	42ac      	cmp	r4, r5
 80161b0:	4c2d      	ldr	r4, [pc, #180]	@ (8016268 <floor+0xf8>)
 80161b2:	bf08      	it	eq
 80161b4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80161b8:	4623      	mov	r3, r4
 80161ba:	462a      	mov	r2, r5
 80161bc:	e024      	b.n	8016208 <floor+0x98>
 80161be:	4f2b      	ldr	r7, [pc, #172]	@ (801626c <floor+0xfc>)
 80161c0:	4137      	asrs	r7, r6
 80161c2:	ea01 0c07 	and.w	ip, r1, r7
 80161c6:	ea5c 0c00 	orrs.w	ip, ip, r0
 80161ca:	d01d      	beq.n	8016208 <floor+0x98>
 80161cc:	a324      	add	r3, pc, #144	@ (adr r3, 8016260 <floor+0xf0>)
 80161ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161d2:	f7ea f897 	bl	8000304 <__adddf3>
 80161d6:	2200      	movs	r2, #0
 80161d8:	2300      	movs	r3, #0
 80161da:	f7ea fac7 	bl	800076c <__aeabi_dcmpgt>
 80161de:	2800      	cmp	r0, #0
 80161e0:	d0ea      	beq.n	80161b8 <floor+0x48>
 80161e2:	2c00      	cmp	r4, #0
 80161e4:	bfbe      	ittt	lt
 80161e6:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80161ea:	4133      	asrlt	r3, r6
 80161ec:	18e4      	addlt	r4, r4, r3
 80161ee:	ea24 0407 	bic.w	r4, r4, r7
 80161f2:	2500      	movs	r5, #0
 80161f4:	e7e0      	b.n	80161b8 <floor+0x48>
 80161f6:	2e33      	cmp	r6, #51	@ 0x33
 80161f8:	dd0a      	ble.n	8016210 <floor+0xa0>
 80161fa:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80161fe:	d103      	bne.n	8016208 <floor+0x98>
 8016200:	f7ea f880 	bl	8000304 <__adddf3>
 8016204:	4602      	mov	r2, r0
 8016206:	460b      	mov	r3, r1
 8016208:	4610      	mov	r0, r2
 801620a:	4619      	mov	r1, r3
 801620c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016210:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8016214:	f04f 3cff 	mov.w	ip, #4294967295
 8016218:	fa2c f707 	lsr.w	r7, ip, r7
 801621c:	4207      	tst	r7, r0
 801621e:	d0f3      	beq.n	8016208 <floor+0x98>
 8016220:	a30f      	add	r3, pc, #60	@ (adr r3, 8016260 <floor+0xf0>)
 8016222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016226:	f7ea f86d 	bl	8000304 <__adddf3>
 801622a:	2200      	movs	r2, #0
 801622c:	2300      	movs	r3, #0
 801622e:	f7ea fa9d 	bl	800076c <__aeabi_dcmpgt>
 8016232:	2800      	cmp	r0, #0
 8016234:	d0c0      	beq.n	80161b8 <floor+0x48>
 8016236:	2c00      	cmp	r4, #0
 8016238:	da0a      	bge.n	8016250 <floor+0xe0>
 801623a:	2e14      	cmp	r6, #20
 801623c:	d101      	bne.n	8016242 <floor+0xd2>
 801623e:	3401      	adds	r4, #1
 8016240:	e006      	b.n	8016250 <floor+0xe0>
 8016242:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8016246:	2301      	movs	r3, #1
 8016248:	40b3      	lsls	r3, r6
 801624a:	441d      	add	r5, r3
 801624c:	4545      	cmp	r5, r8
 801624e:	d3f6      	bcc.n	801623e <floor+0xce>
 8016250:	ea25 0507 	bic.w	r5, r5, r7
 8016254:	e7b0      	b.n	80161b8 <floor+0x48>
 8016256:	2500      	movs	r5, #0
 8016258:	462c      	mov	r4, r5
 801625a:	e7ad      	b.n	80161b8 <floor+0x48>
 801625c:	f3af 8000 	nop.w
 8016260:	8800759c 	.word	0x8800759c
 8016264:	7e37e43c 	.word	0x7e37e43c
 8016268:	bff00000 	.word	0xbff00000
 801626c:	000fffff 	.word	0x000fffff

08016270 <_init>:
 8016270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016272:	bf00      	nop
 8016274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016276:	bc08      	pop	{r3}
 8016278:	469e      	mov	lr, r3
 801627a:	4770      	bx	lr

0801627c <_fini>:
 801627c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801627e:	bf00      	nop
 8016280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016282:	bc08      	pop	{r3}
 8016284:	469e      	mov	lr, r3
 8016286:	4770      	bx	lr
